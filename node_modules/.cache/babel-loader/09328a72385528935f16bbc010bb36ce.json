{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\n\nconst roles = {\n  default(prompt, choice) {\n    return choice;\n  },\n\n  checkbox(prompt, choice) {\n    throw new Error('checkbox role is not implemented yet');\n  },\n\n  editable(prompt, choice) {\n    throw new Error('editable role is not implemented yet');\n  },\n\n  expandable(prompt, choice) {\n    throw new Error('expandable role is not implemented yet');\n  },\n\n  heading(prompt, choice) {\n    choice.disabled = '';\n    choice.indicator = [choice.indicator, ' '].find(v => v != null);\n    choice.message = choice.message || '';\n    return choice;\n  },\n\n  input(prompt, choice) {\n    throw new Error('input role is not implemented yet');\n  },\n\n  option(prompt, choice) {\n    return roles.default(prompt, choice);\n  },\n\n  radio(prompt, choice) {\n    throw new Error('radio role is not implemented yet');\n  },\n\n  separator(prompt, choice) {\n    choice.disabled = '';\n    choice.indicator = [choice.indicator, ' '].find(v => v != null);\n    choice.message = choice.message || prompt.symbols.line.repeat(5);\n    return choice;\n  },\n\n  spacer(prompt, choice) {\n    return choice;\n  }\n\n};\n\nmodule.exports = (name, options = {}) => {\n  let role = utils.merge({}, roles, options.roles);\n  return role[name] || role.default;\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/lib/roles.js"],"names":["utils","require","roles","default","prompt","choice","checkbox","Error","editable","expandable","heading","disabled","indicator","find","v","message","input","option","radio","separator","symbols","line","repeat","spacer","module","exports","name","options","role","merge"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,OAAO,CAACC,MAAD,EAASC,MAAT,EAAiB;AACtB,WAAOA,MAAP;AACD,GAHW;;AAIZC,EAAAA,QAAQ,CAACF,MAAD,EAASC,MAAT,EAAiB;AACvB,UAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;AACD,GANW;;AAOZC,EAAAA,QAAQ,CAACJ,MAAD,EAASC,MAAT,EAAiB;AACvB,UAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;AACD,GATW;;AAUZE,EAAAA,UAAU,CAACL,MAAD,EAASC,MAAT,EAAiB;AACzB,UAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACD,GAZW;;AAaZG,EAAAA,OAAO,CAACN,MAAD,EAASC,MAAT,EAAiB;AACtBA,IAAAA,MAAM,CAACM,QAAP,GAAkB,EAAlB;AACAN,IAAAA,MAAM,CAACO,SAAP,GAAmB,CAACP,MAAM,CAACO,SAAR,EAAmB,GAAnB,EAAwBC,IAAxB,CAA6BC,CAAC,IAAIA,CAAC,IAAI,IAAvC,CAAnB;AACAT,IAAAA,MAAM,CAACU,OAAP,GAAiBV,MAAM,CAACU,OAAP,IAAkB,EAAnC;AACA,WAAOV,MAAP;AACD,GAlBW;;AAmBZW,EAAAA,KAAK,CAACZ,MAAD,EAASC,MAAT,EAAiB;AACpB,UAAM,IAAIE,KAAJ,CAAU,mCAAV,CAAN;AACD,GArBW;;AAsBZU,EAAAA,MAAM,CAACb,MAAD,EAASC,MAAT,EAAiB;AACrB,WAAOH,KAAK,CAACC,OAAN,CAAcC,MAAd,EAAsBC,MAAtB,CAAP;AACD,GAxBW;;AAyBZa,EAAAA,KAAK,CAACd,MAAD,EAASC,MAAT,EAAiB;AACpB,UAAM,IAAIE,KAAJ,CAAU,mCAAV,CAAN;AACD,GA3BW;;AA4BZY,EAAAA,SAAS,CAACf,MAAD,EAASC,MAAT,EAAiB;AACxBA,IAAAA,MAAM,CAACM,QAAP,GAAkB,EAAlB;AACAN,IAAAA,MAAM,CAACO,SAAP,GAAmB,CAACP,MAAM,CAACO,SAAR,EAAmB,GAAnB,EAAwBC,IAAxB,CAA6BC,CAAC,IAAIA,CAAC,IAAI,IAAvC,CAAnB;AACAT,IAAAA,MAAM,CAACU,OAAP,GAAiBV,MAAM,CAACU,OAAP,IAAkBX,MAAM,CAACgB,OAAP,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,CAA3B,CAAnC;AACA,WAAOjB,MAAP;AACD,GAjCW;;AAkCZkB,EAAAA,MAAM,CAACnB,MAAD,EAASC,MAAT,EAAiB;AACrB,WAAOA,MAAP;AACD;;AApCW,CAAd;;AAuCAmB,MAAM,CAACC,OAAP,GAAiB,CAACC,IAAD,EAAOC,OAAO,GAAG,EAAjB,KAAwB;AACvC,MAAIC,IAAI,GAAG5B,KAAK,CAAC6B,KAAN,CAAY,EAAZ,EAAgB3B,KAAhB,EAAuByB,OAAO,CAACzB,KAA/B,CAAX;AACA,SAAO0B,IAAI,CAACF,IAAD,CAAJ,IAAcE,IAAI,CAACzB,OAA1B;AACD,CAHD","sourcesContent":["'use strict';\n\nconst utils = require('./utils');\nconst roles = {\n  default(prompt, choice) {\n    return choice;\n  },\n  checkbox(prompt, choice) {\n    throw new Error('checkbox role is not implemented yet');\n  },\n  editable(prompt, choice) {\n    throw new Error('editable role is not implemented yet');\n  },\n  expandable(prompt, choice) {\n    throw new Error('expandable role is not implemented yet');\n  },\n  heading(prompt, choice) {\n    choice.disabled = '';\n    choice.indicator = [choice.indicator, ' '].find(v => v != null);\n    choice.message = choice.message || '';\n    return choice;\n  },\n  input(prompt, choice) {\n    throw new Error('input role is not implemented yet');\n  },\n  option(prompt, choice) {\n    return roles.default(prompt, choice);\n  },\n  radio(prompt, choice) {\n    throw new Error('radio role is not implemented yet');\n  },\n  separator(prompt, choice) {\n    choice.disabled = '';\n    choice.indicator = [choice.indicator, ' '].find(v => v != null);\n    choice.message = choice.message || prompt.symbols.line.repeat(5);\n    return choice;\n  },\n  spacer(prompt, choice) {\n    return choice;\n  }\n};\n\nmodule.exports = (name, options = {}) => {\n  let role = utils.merge({}, roles, options.roles);\n  return role[name] || role.default;\n};\n"]},"metadata":{},"sourceType":"script"}