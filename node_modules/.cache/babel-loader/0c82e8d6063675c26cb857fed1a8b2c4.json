{"ast":null,"code":"'use strict'; // @ts-check;\n// ==================================================================================\n// battery.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 6. Battery\n// ----------------------------------------------------------------------------------\n\nconst exec = require('child_process').exec;\n\nconst fs = require('fs');\n\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = _platform === 'linux';\n\nconst _darwin = _platform === 'darwin';\n\nconst _windows = _platform === 'win32';\n\nconst _freebsd = _platform === 'freebsd';\n\nconst _openbsd = _platform === 'openbsd';\n\nconst _netbsd = _platform === 'netbsd';\n\nconst _sunos = _platform === 'sunos';\n\nmodule.exports = function (callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = {\n        hasbattery: false,\n        cyclecount: 0,\n        ischarging: false,\n        designedcapacity: 0,\n        maxcapacity: 0,\n        currentcapacity: 0,\n        voltage: 0,\n        capacityUnit: '',\n        percent: 0,\n        timeremaining: -1,\n        acconnected: true,\n        type: '',\n        model: '',\n        manufacturer: '',\n        serial: ''\n      };\n\n      if (_linux) {\n        let battery_path = '';\n\n        if (fs.existsSync('/sys/class/power_supply/BAT1/uevent')) {\n          battery_path = '/sys/class/power_supply/BAT1/';\n        } else if (fs.existsSync('/sys/class/power_supply/BAT0/uevent')) {\n          battery_path = '/sys/class/power_supply/BAT0/';\n        }\n\n        if (battery_path) {\n          fs.readFile(battery_path + 'uevent', function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              result.ischarging = util.getValue(lines, 'POWER_SUPPLY_STATUS', '=').toLowerCase() === 'charging';\n              result.acconnected = result.ischarging;\n              result.voltage = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_VOLTAGE_NOW', '='), 10) / 1000000.0;\n              result.capacityUnit = result.voltage ? 'mWh' : 'mAh';\n              result.cyclecount = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CYCLE_COUNT', '='), 10);\n              result.maxcapacity = Math.round(parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CHARGE_FULL', '='), 10) / 1000.0 / (result.voltage || 1));\n              result.designedcapacity = Math.round(parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CHARGE_FULL_DESIGN', '='), 10) / 1000.0 / (result.voltage || 1)) | result.maxcapacity;\n              result.currentcapacity = Math.round(parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CHARGE_NOW', '='), 10) / 1000.0 / (result.voltage || 1));\n\n              if (!result.maxcapacity) {\n                result.maxcapacity = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_ENERGY_FULL', '='), 10) / 1000.0;\n                result.designcapacity = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_ENERGY_FULL_DESIGN', '='), 10) / 1000.0 | result.maxcapacity;\n                result.currentcapacity = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_ENERGY_NOW', '='), 10) / 1000.0;\n              }\n\n              const percent = util.getValue(lines, 'POWER_SUPPLY_CAPACITY', '=');\n              const energy = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_ENERGY_NOW', '='), 10);\n              const power = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_POWER_NOW', '='), 10);\n              const current = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CURRENT_NOW', '='), 10);\n              result.percent = parseInt('0' + percent, 10);\n\n              if (result.maxcapacity && result.currentcapacity) {\n                result.hasbattery = true;\n\n                if (!percent) {\n                  result.percent = 100.0 * result.currentcapacity / result.maxcapacity;\n                }\n              }\n\n              if (result.ischarging) {\n                result.hasbattery = true;\n              }\n\n              if (energy && power) {\n                result.timeremaining = Math.floor(energy / power * 60);\n              } else if (current && result.currentcapacity) {\n                result.timeremaining = Math.floor(result.currentcapacity / current * 60);\n              }\n\n              result.type = util.getValue(lines, 'POWER_SUPPLY_TECHNOLOGY', '=');\n              result.model = util.getValue(lines, 'POWER_SUPPLY_MODEL_NAME', '=');\n              result.manufacturer = util.getValue(lines, 'POWER_SUPPLY_MANUFACTURER', '=');\n              result.serial = util.getValue(lines, 'POWER_SUPPLY_SERIAL_NUMBER', '=');\n\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            } else {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          });\n        } else {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('sysctl hw.acpi.battery hw.acpi.acline', function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          const batteries = parseInt('0' + util.getValue(lines, 'hw.acpi.battery.units'), 10);\n          const percent = parseInt('0' + util.getValue(lines, 'hw.acpi.battery.life'), 10);\n          result.hasbattery = batteries > 0;\n          result.cyclecount = -1;\n          result.ischarging = util.getValue(lines, 'hw.acpi.acline') !== '1';\n          result.acconnected = result.ischarging;\n          result.maxcapacity = -1;\n          result.currentcapacity = -1;\n          result.capacityUnit = 'unknown';\n          result.percent = batteries ? percent : -1;\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('ioreg -n AppleSmartBattery -r | egrep \"CycleCount|IsCharging|DesignCapacity|MaxCapacity|CurrentCapacity|BatterySerialNumber|TimeRemaining|Voltage\"; pmset -g batt | grep %', function (error, stdout) {\n          if (stdout) {\n            let lines = stdout.toString().replace(/ +/g, '').replace(/\"+/g, '').replace(/-/g, '').split('\\n');\n            result.cyclecount = parseInt('0' + util.getValue(lines, 'cyclecount', '='), 10);\n            result.voltage = parseInt('0' + util.getValue(lines, 'voltage', '='), 10) / 1000.0;\n            result.capacityUnit = result.voltage ? 'mWh' : 'mAh';\n            result.maxcapacity = Math.round(parseInt('0' + util.getValue(lines, 'maxcapacity', '='), 10) * (result.voltage || 1));\n            result.currentcapacity = Math.round(parseInt('0' + util.getValue(lines, 'currentcapacity', '='), 10) * (result.voltage || 1));\n            result.designedcapacity = Math.round(parseInt('0' + util.getValue(lines, 'DesignCapacity', '='), 10) * (result.voltage || 1));\n            result.manufacturer = 'Apple';\n            result.serial = util.getValue(lines, 'BatterySerialNumber', '=');\n            let percent = -1;\n            const line = util.getValue(lines, 'internal', 'Battery');\n            let parts = line.split(';');\n\n            if (parts && parts[0]) {\n              let parts2 = parts[0].split('\\t');\n\n              if (parts2 && parts2[1]) {\n                percent = parseFloat(parts2[1].trim().replace(/%/g, ''));\n              }\n            }\n\n            if (parts && parts[1]) {\n              result.ischarging = parts[1].trim() === 'charging';\n              result.acconnected = parts[1].trim() !== 'discharging';\n            } else {\n              result.ischarging = util.getValue(lines, 'ischarging', '=').toLowerCase() === 'yes';\n              result.acconnected = result.ischarging;\n            }\n\n            if (result.maxcapacity && result.currentcapacity) {\n              result.hasbattery = true;\n              result.type = 'Li-ion';\n              result.percent = percent !== -1 ? percent : Math.round(100.0 * result.currentcapacity / result.maxcapacity);\n\n              if (!result.ischarging) {\n                result.timeremaining = parseInt('0' + util.getValue(lines, 'TimeRemaining', '='), 10);\n              }\n            }\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        try {\n          util.wmic('Path Win32_Battery Get BatteryStatus, DesignCapacity, EstimatedChargeRemaining, DesignVoltage, FullChargeCapacity /value').then(stdout => {\n            if (stdout) {\n              let lines = stdout.split('\\r\\n');\n              let status = util.getValue(lines, 'BatteryStatus', '=').trim(); // 1 = \"Discharging\"\n              // 2 = \"On A/C\"\n              // 3 = \"Fully Charged\"\n              // 4 = \"Low\"\n              // 5 = \"Critical\"\n              // 6 = \"Charging\"\n              // 7 = \"Charging High\"\n              // 8 = \"Charging Low\"\n              // 9 = \"Charging Critical\"\n              // 10 = \"Undefined\"\n              // 11 = \"Partially Charged\"\n\n              if (status && status != '10') {\n                const statusValue = parseInt(status);\n                result.hasbattery = true;\n                result.maxcapacity = parseInt(util.getValue(lines, 'DesignCapacity', '=') || 0);\n                result.designcapacity = parseInt(util.getValue(lines, 'DesignCapacity', '=') || 0);\n                result.voltage = parseInt(util.getValue(lines, 'DesignVoltage', '=') || 0) / 1000.0;\n                result.capacityUnit = 'mWh';\n                result.percent = parseInt(util.getValue(lines, 'EstimatedChargeRemaining', '=') || 0);\n                result.currentcapacity = parseInt(result.maxcapacity * result.percent / 100);\n                result.ischarging = statusValue >= 6 && statusValue <= 9 || statusValue === 11 || !(statusValue === 3) && !(statusValue === 1) && result.percent < 100;\n                result.acconnected = result.ischarging || statusValue === 2;\n              }\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/battery.js"],"names":["exec","require","fs","util","_platform","process","platform","_linux","_darwin","_windows","_freebsd","_openbsd","_netbsd","_sunos","module","exports","callback","Promise","resolve","nextTick","result","hasbattery","cyclecount","ischarging","designedcapacity","maxcapacity","currentcapacity","voltage","capacityUnit","percent","timeremaining","acconnected","type","model","manufacturer","serial","battery_path","existsSync","readFile","error","stdout","lines","toString","split","getValue","toLowerCase","parseInt","Math","round","designcapacity","energy","power","current","floor","batteries","replace","line","parts","parts2","parseFloat","trim","wmic","then","status","statusValue","e"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check;\n// ==================================================================================\n// battery.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 6. Battery\n// ----------------------------------------------------------------------------------\n\nconst exec = require('child_process').exec;\nconst fs = require('fs');\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nmodule.exports = function (callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = {\n        hasbattery: false,\n        cyclecount: 0,\n        ischarging: false,\n        designedcapacity: 0,\n        maxcapacity: 0,\n        currentcapacity: 0,\n        voltage: 0,\n        capacityUnit: '',\n        percent: 0,\n        timeremaining: -1,\n        acconnected: true,\n        type: '',\n        model: '',\n        manufacturer: '',\n        serial: ''\n      };\n\n      if (_linux) {\n        let battery_path = '';\n        if (fs.existsSync('/sys/class/power_supply/BAT1/uevent')) {\n          battery_path = '/sys/class/power_supply/BAT1/';\n        } else if (fs.existsSync('/sys/class/power_supply/BAT0/uevent')) {\n          battery_path = '/sys/class/power_supply/BAT0/';\n        }\n        if (battery_path) {\n          fs.readFile(battery_path + 'uevent', function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n\n              result.ischarging = (util.getValue(lines, 'POWER_SUPPLY_STATUS', '=').toLowerCase() === 'charging');\n              result.acconnected = result.ischarging;\n              result.voltage = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_VOLTAGE_NOW', '='), 10) / 1000000.0;\n              result.capacityUnit = result.voltage ? 'mWh' : 'mAh';\n              result.cyclecount = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CYCLE_COUNT', '='), 10);\n              result.maxcapacity = Math.round(parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CHARGE_FULL', '='), 10) / 1000.0 / (result.voltage || 1));\n              result.designedcapacity = Math.round(parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CHARGE_FULL_DESIGN', '='), 10) / 1000.0 / (result.voltage || 1)) | result.maxcapacity;\n              result.currentcapacity = Math.round(parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CHARGE_NOW', '='), 10) / 1000.0 / (result.voltage || 1));\n              if (!result.maxcapacity) {\n                result.maxcapacity = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_ENERGY_FULL', '='), 10) / 1000.0;\n                result.designcapacity = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_ENERGY_FULL_DESIGN', '='), 10) / 1000.0 | result.maxcapacity;\n                result.currentcapacity = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_ENERGY_NOW', '='), 10) / 1000.0;\n              }\n              const percent = util.getValue(lines, 'POWER_SUPPLY_CAPACITY', '=');\n              const energy = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_ENERGY_NOW', '='), 10);\n              const power = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_POWER_NOW', '='), 10);\n              const current = parseInt('0' + util.getValue(lines, 'POWER_SUPPLY_CURRENT_NOW', '='), 10);\n\n              result.percent = parseInt('0' + percent, 10);\n              if (result.maxcapacity && result.currentcapacity) {\n                result.hasbattery = true;\n                if (!percent) {\n                  result.percent = 100.0 * result.currentcapacity / result.maxcapacity;\n                }\n              }\n              if (result.ischarging) {\n                result.hasbattery = true;\n              }\n              if (energy && power) {\n                result.timeremaining = Math.floor(energy / power * 60);\n              } else if (current && result.currentcapacity) {\n                result.timeremaining = Math.floor(result.currentcapacity / current * 60);\n              }\n              result.type = util.getValue(lines, 'POWER_SUPPLY_TECHNOLOGY', '=');\n              result.model = util.getValue(lines, 'POWER_SUPPLY_MODEL_NAME', '=');\n              result.manufacturer = util.getValue(lines, 'POWER_SUPPLY_MANUFACTURER', '=');\n              result.serial = util.getValue(lines, 'POWER_SUPPLY_SERIAL_NUMBER', '=');\n              if (callback) { callback(result); }\n              resolve(result);\n            } else {\n              if (callback) { callback(result); }\n              resolve(result);\n            }\n          });\n        } else {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('sysctl hw.acpi.battery hw.acpi.acline', function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          const batteries = parseInt('0' + util.getValue(lines, 'hw.acpi.battery.units'), 10);\n          const percent = parseInt('0' + util.getValue(lines, 'hw.acpi.battery.life'), 10);\n          result.hasbattery = (batteries > 0);\n          result.cyclecount = -1;\n          result.ischarging = util.getValue(lines, 'hw.acpi.acline') !== '1';\n          result.acconnected = result.ischarging;\n          result.maxcapacity = -1;\n          result.currentcapacity = -1;\n          result.capacityUnit = 'unknown';\n          result.percent = batteries ? percent : -1;\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('ioreg -n AppleSmartBattery -r | egrep \"CycleCount|IsCharging|DesignCapacity|MaxCapacity|CurrentCapacity|BatterySerialNumber|TimeRemaining|Voltage\"; pmset -g batt | grep %', function (error, stdout) {\n          if (stdout) {\n            let lines = stdout.toString().replace(/ +/g, '').replace(/\"+/g, '').replace(/-/g, '').split('\\n');\n            result.cyclecount = parseInt('0' + util.getValue(lines, 'cyclecount', '='), 10);\n            result.voltage = parseInt('0' + util.getValue(lines, 'voltage', '='), 10) / 1000.0;\n            result.capacityUnit = result.voltage ? 'mWh' : 'mAh';\n            result.maxcapacity = Math.round(parseInt('0' + util.getValue(lines, 'maxcapacity', '='), 10) * (result.voltage || 1));\n            result.currentcapacity = Math.round(parseInt('0' + util.getValue(lines, 'currentcapacity', '='), 10) * (result.voltage || 1));\n            result.designedcapacity = Math.round(parseInt('0' + util.getValue(lines, 'DesignCapacity', '='), 10) * (result.voltage || 1));\n            result.manufacturer = 'Apple';\n            result.serial = util.getValue(lines, 'BatterySerialNumber', '=');\n            let percent = -1;\n            const line = util.getValue(lines, 'internal', 'Battery');\n            let parts = line.split(';');\n            if (parts && parts[0]) {\n              let parts2 = parts[0].split('\\t');\n              if (parts2 && parts2[1]) {\n                percent = parseFloat(parts2[1].trim().replace(/%/g, ''));\n              }\n            }\n            if (parts && parts[1]) {\n              result.ischarging = (parts[1].trim() === 'charging');\n              result.acconnected = (parts[1].trim() !== 'discharging');\n            } else {\n              result.ischarging = util.getValue(lines, 'ischarging', '=').toLowerCase() === 'yes';\n              result.acconnected = result.ischarging;\n            }\n            if (result.maxcapacity && result.currentcapacity) {\n              result.hasbattery = true;\n              result.type = 'Li-ion';\n              result.percent = percent !== -1 ? percent : Math.round(100.0 * result.currentcapacity / result.maxcapacity);\n              if (!result.ischarging) {\n                result.timeremaining = parseInt('0' + util.getValue(lines, 'TimeRemaining', '='), 10);\n              }\n            }\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_windows) {\n        try {\n          util.wmic('Path Win32_Battery Get BatteryStatus, DesignCapacity, EstimatedChargeRemaining, DesignVoltage, FullChargeCapacity /value').then((stdout) => {\n            if (stdout) {\n              let lines = stdout.split('\\r\\n');\n              let status = util.getValue(lines, 'BatteryStatus', '=').trim();\n              // 1 = \"Discharging\"\n              // 2 = \"On A/C\"\n              // 3 = \"Fully Charged\"\n              // 4 = \"Low\"\n              // 5 = \"Critical\"\n              // 6 = \"Charging\"\n              // 7 = \"Charging High\"\n              // 8 = \"Charging Low\"\n              // 9 = \"Charging Critical\"\n              // 10 = \"Undefined\"\n              // 11 = \"Partially Charged\"\n              if (status && status != '10') {\n                const statusValue = parseInt(status);\n                result.hasbattery = true;\n                result.maxcapacity = parseInt(util.getValue(lines, 'DesignCapacity', '=') || 0);\n                result.designcapacity = parseInt(util.getValue(lines, 'DesignCapacity', '=') || 0);\n                result.voltage = parseInt(util.getValue(lines, 'DesignVoltage', '=') || 0) / 1000.0;\n                result.capacityUnit = 'mWh';\n                result.percent = parseInt(util.getValue(lines, 'EstimatedChargeRemaining', '=') || 0);\n                result.currentcapacity = parseInt(result.maxcapacity * result.percent / 100);\n                result.ischarging = (statusValue >= 6 && statusValue <= 9) || statusValue === 11 || (!(statusValue === 3) && !(statusValue === 1) && result.percent < 100);\n                result.acconnected = result.ischarging || statusValue === 2;\n              }\n            }\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"script"}