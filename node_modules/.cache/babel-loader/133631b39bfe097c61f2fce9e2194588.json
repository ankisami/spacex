{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// memory.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 5. Memory\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\n\nconst exec = require('child_process').exec;\n\nconst execSync = require('child_process').execSync;\n\nconst util = require('./util');\n\nconst fs = require('fs');\n\nlet _platform = process.platform;\n\nconst _linux = _platform === 'linux';\n\nconst _darwin = _platform === 'darwin';\n\nconst _windows = _platform === 'win32';\n\nconst _freebsd = _platform === 'freebsd';\n\nconst _openbsd = _platform === 'openbsd';\n\nconst _netbsd = _platform === 'netbsd';\n\nconst _sunos = _platform === 'sunos';\n\nconst OSX_RAM_manufacturers = {\n  '0x014F': 'Transcend Information',\n  '0x2C00': 'Micron Technology Inc.',\n  '0x802C': 'Micron Technology Inc.',\n  '0x80AD': 'Hynix Semiconductor Inc.',\n  '0x80CE': 'Samsung Electronics Inc.',\n  '0xAD00': 'Hynix Semiconductor Inc.',\n  '0xCE00': 'Samsung Electronics Inc.',\n  '0x02FE': 'Elpida',\n  '0x5105': 'Qimonda AG i. In.',\n  '0x8551': 'Qimonda AG i. In.',\n  '0x859B': 'Crucial',\n  '0x04CD': 'G-Skill'\n}; // _______________________________________________________________________________________\n// |                         R A M                              |          H D           |\n// |______________________|_________________________|           |                        |\n// |        active             buffers/cache        |           |                        |\n// |________________________________________________|___________|_________|______________|\n// |                     used                            free   |   used       free      |\n// |____________________________________________________________|________________________|\n// |                        total                               |          swap          |\n// |____________________________________________________________|________________________|\n// free (older versions)\n// ----------------------------------\n// # free\n//              total       used        free     shared    buffers     cached\n// Mem:         16038 (1)   15653 (2)   384 (3)  0 (4)     236 (5)     14788 (6)\n// -/+ buffers/cache:       628 (7)     15409 (8)\n// Swap:        16371         83      16288\n//\n// |------------------------------------------------------------|\n// |                           R A M                            |\n// |______________________|_____________________________________|\n// | active (2-(5+6) = 7) |  available (3+5+6 = 8)              |\n// |______________________|_________________________|___________|\n// |        active        |  buffers/cache (5+6)    |           |\n// |________________________________________________|___________|\n// |                   used (2)                     | free (3)  |\n// |____________________________________________________________|\n// |                          total (1)                         |\n// |____________________________________________________________|\n//\n// free (since free von procps-ng 3.3.10)\n// ----------------------------------\n// # free\n//              total       used        free     shared    buffers/cache   available\n// Mem:         16038 (1)   628 (2)     386 (3)  0 (4)     15024 (5)     14788 (6)\n// Swap:        16371         83      16288\n//\n// |------------------------------------------------------------|\n// |                           R A M                            |\n// |______________________|_____________________________________|\n// |                      |      available (6) estimated        |\n// |______________________|_________________________|___________|\n// |     active (2)       |   buffers/cache (5)     | free (3)  |\n// |________________________________________________|___________|\n// |                          total (1)                         |\n// |____________________________________________________________|\n//\n// Reference: http://www.software-architect.net/blog/article/date/2015/06/12/-826c6e5052.html\n// /procs/meminfo - sample (all in kB)\n//\n// MemTotal: 32806380 kB\n// MemFree: 17977744 kB\n// MemAvailable: 19768972 kB\n// Buffers: 517028 kB\n// Cached: 2161876 kB\n// SwapCached: 456 kB\n// Active: 12081176 kB\n// Inactive: 2164616 kB\n// Active(anon): 10832884 kB\n// Inactive(anon): 1477272 kB\n// Active(file): 1248292 kB\n// Inactive(file): 687344 kB\n// Unevictable: 0 kB\n// Mlocked: 0 kB\n// SwapTotal: 16768892 kB\n// SwapFree: 16768304 kB\n// Dirty: 268 kB\n// Writeback: 0 kB\n// AnonPages: 11568832 kB\n// Mapped: 719992 kB\n// Shmem: 743272 kB\n// Slab: 335716 kB\n// SReclaimable: 256364 kB\n// SUnreclaim: 79352 kB\n\nfunction mem(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = {\n        total: os.totalmem(),\n        free: os.freemem(),\n        used: os.totalmem() - os.freemem(),\n        active: os.totalmem() - os.freemem(),\n        // temporarily (fallback)\n        available: os.freemem(),\n        // temporarily (fallback)\n        buffers: 0,\n        cached: 0,\n        slab: 0,\n        buffcache: 0,\n        swaptotal: 0,\n        swapused: 0,\n        swapfree: 0\n      };\n\n      if (_linux) {\n        fs.readFile('/proc/meminfo', function (error, stdout) {\n          if (!error) {\n            const lines = stdout.toString().split('\\n');\n            result.total = parseInt(util.getValue(lines, 'memtotal'), 10);\n            result.total = result.total ? result.total * 1024 : os.totalmem();\n            result.free = parseInt(util.getValue(lines, 'memfree'), 10);\n            result.free = result.free ? result.free * 1024 : os.freemem();\n            result.used = result.total - result.free;\n            result.buffers = parseInt(util.getValue(lines, 'buffers'), 10);\n            result.buffers = result.buffers ? result.buffers * 1024 : 0;\n            result.cached = parseInt(util.getValue(lines, 'cached'), 10);\n            result.cached = result.cached ? result.cached * 1024 : 0;\n            result.slab = parseInt(util.getValue(lines, 'slab'), 10);\n            result.slab = result.slab ? result.slab * 1024 : 0;\n            result.buffcache = result.buffers + result.cached + result.slab;\n            let available = parseInt(util.getValue(lines, 'memavailable'), 10);\n            result.available = available ? available * 1024 : result.free + result.buffcache;\n            result.active = result.total - result.available;\n            result.swaptotal = parseInt(util.getValue(lines, 'swaptotal'), 10);\n            result.swaptotal = result.swaptotal ? result.swaptotal * 1024 : 0;\n            result.swapfree = parseInt(util.getValue(lines, 'swapfree'), 10);\n            result.swapfree = result.swapfree ? result.swapfree * 1024 : 0;\n            result.swapused = result.swaptotal - result.swapfree;\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('/sbin/sysctl -a 2>/dev/null | grep -E \"hw.realmem|hw.physmem|vm.stats.vm.v_page_count|vm.stats.vm.v_wire_count|vm.stats.vm.v_active_count|vm.stats.vm.v_inactive_count|vm.stats.vm.v_cache_count|vm.stats.vm.v_free_count|vm.stats.vm.v_page_size\"', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            const pagesize = parseInt(util.getValue(lines, 'vm.stats.vm.v_page_size'), 10);\n            const inactive = parseInt(util.getValue(lines, 'vm.stats.vm.v_inactive_count'), 10) * pagesize;\n            const cache = parseInt(util.getValue(lines, 'vm.stats.vm.v_cache_count'), 10) * pagesize;\n            result.total = parseInt(util.getValue(lines, 'hw.realmem'), 10);\n            if (isNaN(result.total)) result.total = parseInt(util.getValue(lines, 'hw.physmem'), 10);\n            result.free = parseInt(util.getValue(lines, 'vm.stats.vm.v_free_count'), 10) * pagesize;\n            result.buffcache = inactive + cache;\n            result.available = result.buffcache + result.free;\n            result.active = result.total - result.free - result.buffcache;\n            result.swaptotal = 0;\n            result.swapfree = 0;\n            result.swapused = 0;\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_darwin) {\n        exec('vm_stat 2>/dev/null | grep \"Pages active\"', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            result.active = parseInt(lines[0].split(':')[1], 10) * 4096;\n            result.buffcache = result.used - result.active;\n            result.available = result.free + result.buffcache;\n          }\n\n          exec('sysctl -n vm.swapusage 2>/dev/null', function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n\n              if (lines.length > 0) {\n                let line = lines[0].replace(/,/g, '.').replace(/M/g, '');\n                line = line.trim().split('  ');\n\n                for (let i = 0; i < line.length; i++) {\n                  if (line[i].toLowerCase().indexOf('total') !== -1) result.swaptotal = parseFloat(line[i].split('=')[1].trim()) * 1024 * 1024;\n                  if (line[i].toLowerCase().indexOf('used') !== -1) result.swapused = parseFloat(line[i].split('=')[1].trim()) * 1024 * 1024;\n                  if (line[i].toLowerCase().indexOf('free') !== -1) result.swapfree = parseFloat(line[i].split('=')[1].trim()) * 1024 * 1024;\n                }\n              }\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        });\n      }\n\n      if (_windows) {\n        let swaptotal = 0;\n        let swapused = 0;\n\n        try {\n          util.wmic('pagefile get AllocatedBaseSize, CurrentUsage').then((stdout, error) => {\n            if (!error) {\n              let lines = stdout.split('\\r\\n').filter(line => line.trim() !== '').filter((line, idx) => idx > 0);\n              lines.forEach(function (line) {\n                if (line !== '') {\n                  line = line.trim().split(/\\s\\s+/);\n                  swaptotal = swaptotal + parseInt(line[0], 10);\n                  swapused = swapused + parseInt(line[1], 10);\n                }\n              });\n            }\n\n            result.swaptotal = swaptotal * 1024 * 1024;\n            result.swapused = swapused * 1024 * 1024;\n            result.swapfree = result.swaptotal - result.swapused;\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.mem = mem;\n\nfunction memLayout(callback) {\n  function getManufacturer(manId) {\n    if ({}.hasOwnProperty.call(OSX_RAM_manufacturers, manId)) {\n      return OSX_RAM_manufacturers[manId];\n    }\n\n    return manId;\n  }\n\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = [];\n\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        exec('export LC_ALL=C; dmidecode -t memory 2>/dev/null | grep -iE \"Size:|Type|Speed|Manufacturer|Form Factor|Locator|Memory Device|Serial Number|Voltage|Part Number\"; unset LC_ALL', function (error, stdout) {\n          if (!error) {\n            let devices = stdout.toString().split('Memory Device');\n            devices.shift();\n            devices.forEach(function (device) {\n              let lines = device.split('\\n');\n              const sizeString = util.getValue(lines, 'Size');\n              const size = sizeString.indexOf('GB') >= 0 ? parseInt(sizeString, 10) * 1024 * 1024 * 1024 : parseInt(sizeString, 10) * 1024 * 1024;\n\n              if (parseInt(util.getValue(lines, 'Size'), 10) > 0) {\n                result.push({\n                  size,\n                  bank: util.getValue(lines, 'Bank Locator'),\n                  type: util.getValue(lines, 'Type:'),\n                  clockSpeed: util.getValue(lines, 'Configured Clock Speed:') ? parseInt(util.getValue(lines, 'Configured Clock Speed:'), 10) : util.getValue(lines, 'Speed:') ? parseInt(util.getValue(lines, 'Speed:'), 10) : -1,\n                  formFactor: util.getValue(lines, 'Form Factor:'),\n                  manufacturer: util.getValue(lines, 'Manufacturer:'),\n                  partNum: util.getValue(lines, 'Part Number:'),\n                  serialNum: util.getValue(lines, 'Serial Number:'),\n                  voltageConfigured: parseFloat(util.getValue(lines, 'Configured Voltage:') || -1),\n                  voltageMin: parseFloat(util.getValue(lines, 'Minimum Voltage:') || -1),\n                  voltageMax: parseFloat(util.getValue(lines, 'Maximum Voltage:') || -1)\n                });\n              } else {\n                result.push({\n                  size: 0,\n                  bank: util.getValue(lines, 'Bank Locator'),\n                  type: 'Empty',\n                  clockSpeed: 0,\n                  formFactor: util.getValue(lines, 'Form Factor:'),\n                  partNum: '',\n                  serialNum: '',\n                  voltageConfigured: -1,\n                  voltageMin: -1,\n                  voltageMax: -1\n                });\n              }\n            });\n          }\n\n          if (!result.length) {\n            result.push({\n              size: os.totalmem(),\n              bank: '',\n              type: '',\n              clockSpeed: 0,\n              formFactor: '',\n              partNum: '',\n              serialNum: '',\n              voltageConfigured: -1,\n              voltageMin: -1,\n              voltageMax: -1\n            }); // Try Raspberry PI\n\n            try {\n              let stdout = execSync('cat /proc/cpuinfo 2>/dev/null');\n              let lines = stdout.toString().split('\\n');\n              let model = util.getValue(lines, 'hardware', ':', true).toUpperCase();\n              let version = util.getValue(lines, 'revision', ':', true).toLowerCase();\n\n              if (model === 'BCM2835' || model === 'BCM2708' || model === 'BCM2709' || model === 'BCM2835' || model === 'BCM2837') {\n                const clockSpeed = {\n                  '0': 400,\n                  '1': 450,\n                  '2': 450,\n                  '3': 3200\n                };\n                result[0].clockSpeed = version && version[2] && clockSpeed[version[2]] || 400;\n                result[0].clockSpeed = version && version[4] && version[4] === 'd' ? '500' : result[0].clockSpeed;\n                result[0].type = 'LPDDR2';\n                result[0].type = version && version[2] && version[2] === '3' ? 'LPDDR4' : result[0].type;\n                result[0].formFactor = 'SoC';\n                stdout = execSync('vcgencmd get_config sdram_freq 2>/dev/null');\n                lines = stdout.toString().split('\\n');\n                let freq = parseInt(util.getValue(lines, 'sdram_freq', '=', true), 10) || 0;\n\n                if (freq) {\n                  result.clockSpeed = freq;\n                }\n\n                stdout = execSync('vcgencmd measure_volts sdram_p 2>/dev/null');\n                lines = stdout.toString().split('\\n');\n                let voltage = parseFloat(util.getValue(lines, 'volt', '=', true)) || 0;\n\n                if (voltage) {\n                  result[0].voltageConfigured = voltage;\n                  result[0].voltageMin = voltage;\n                  result[0].voltageMax = voltage;\n                }\n              }\n            } catch (e) {\n              util.noop();\n            }\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('system_profiler SPMemoryDataType', function (error, stdout) {\n          if (!error) {\n            let devices = stdout.toString().split('        BANK ');\n            let hasBank = true;\n\n            if (devices.length === 1) {\n              devices = stdout.toString().split('        DIMM');\n              hasBank = false;\n            }\n\n            devices.shift();\n            devices.forEach(function (device) {\n              let lines = device.split('\\n');\n              const bank = (hasBank ? 'BANK ' : 'DIMM') + lines[0].trim().split('/')[0];\n              const size = parseInt(util.getValue(lines, '          Size'));\n\n              if (size) {\n                result.push({\n                  size: size * 1024 * 1024 * 1024,\n                  bank: bank,\n                  type: util.getValue(lines, '          Type:'),\n                  clockSpeed: parseInt(util.getValue(lines, '          Speed:'), 10),\n                  formFactor: '',\n                  manufacturer: getManufacturer(util.getValue(lines, '          Manufacturer:')),\n                  partNum: util.getValue(lines, '          Part Number:'),\n                  serialNum: util.getValue(lines, '          Serial Number:'),\n                  voltageConfigured: -1,\n                  voltageMin: -1,\n                  voltageMax: -1\n                });\n              } else {\n                result.push({\n                  size: 0,\n                  bank: bank,\n                  type: 'Empty',\n                  clockSpeed: 0,\n                  formFactor: '',\n                  manufacturer: '',\n                  partNum: '',\n                  serialNum: '',\n                  voltageConfigured: -1,\n                  voltageMin: -1,\n                  voltageMax: -1\n                });\n              }\n            });\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        const memoryTypes = 'Unknown|Other|DRAM|Synchronous DRAM|Cache DRAM|EDO|EDRAM|VRAM|SRAM|RAM|ROM|FLASH|EEPROM|FEPROM|EPROM|CDRAM|3DRAM|SDRAM|SGRAM|RDRAM|DDR|DDR2|DDR2 FB-DIMM|Reserved|DDR3|FBD2|DDR4|LPDDR|LPDDR2|LPDDR3|LPDDR4'.split('|');\n        const FormFactors = 'Unknown|Other|SIP|DIP|ZIP|SOJ|Proprietary|SIMM|DIMM|TSOP|PGA|RIMM|SODIMM|SRIMM|SMD|SSMP|QFP|TQFP|SOIC|LCC|PLCC|BGA|FPBGA|LGA'.split('|');\n\n        try {\n          util.wmic('memorychip get /value').then((stdout, error) => {\n            if (!error) {\n              let devices = stdout.toString().split('BankL');\n              devices.shift();\n              devices.forEach(function (device) {\n                let lines = device.split('\\r\\n');\n                result.push({\n                  size: parseInt(util.getValue(lines, 'Capacity', '='), 10) || 0,\n                  bank: util.getValue(lines, 'abel', '='),\n                  // BankLabel\n                  type: memoryTypes[parseInt(util.getValue(lines, 'MemoryType', '='), 10)],\n                  clockSpeed: parseInt(util.getValue(lines, 'ConfiguredClockSpeed', '='), 10) || 0,\n                  formFactor: FormFactors[parseInt(util.getValue(lines, 'FormFactor', '='), 10) || 0],\n                  manufacturer: util.getValue(lines, 'Manufacturer', '='),\n                  partNum: util.getValue(lines, 'PartNumber', '='),\n                  serialNum: util.getValue(lines, 'SerialNumber', '='),\n                  voltageConfigured: (parseInt(util.getValue(lines, 'ConfiguredVoltage', '='), 10) || 0) / 1000.0,\n                  voltageMin: (parseInt(util.getValue(lines, 'MinVoltage', '='), 10) || 0) / 1000.0,\n                  voltageMax: (parseInt(util.getValue(lines, 'MaxVoltage', '='), 10) || 0) / 1000.0\n                });\n              });\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.memLayout = memLayout;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/memory.js"],"names":["os","require","exec","execSync","util","fs","_platform","process","platform","_linux","_darwin","_windows","_freebsd","_openbsd","_netbsd","_sunos","OSX_RAM_manufacturers","mem","callback","Promise","resolve","nextTick","result","total","totalmem","free","freemem","used","active","available","buffers","cached","slab","buffcache","swaptotal","swapused","swapfree","readFile","error","stdout","lines","toString","split","parseInt","getValue","pagesize","inactive","cache","isNaN","length","line","replace","trim","i","toLowerCase","indexOf","parseFloat","wmic","then","filter","idx","forEach","e","exports","memLayout","getManufacturer","manId","hasOwnProperty","call","devices","shift","device","sizeString","size","push","bank","type","clockSpeed","formFactor","manufacturer","partNum","serialNum","voltageConfigured","voltageMin","voltageMax","model","toUpperCase","version","freq","voltage","noop","hasBank","memoryTypes","FormFactors"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// memory.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 5. Memory\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst exec = require('child_process').exec;\nconst execSync = require('child_process').execSync;\nconst util = require('./util');\nconst fs = require('fs');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nconst OSX_RAM_manufacturers = {\n  '0x014F': 'Transcend Information',\n  '0x2C00': 'Micron Technology Inc.',\n  '0x802C': 'Micron Technology Inc.',\n  '0x80AD': 'Hynix Semiconductor Inc.',\n  '0x80CE': 'Samsung Electronics Inc.',\n  '0xAD00': 'Hynix Semiconductor Inc.',\n  '0xCE00': 'Samsung Electronics Inc.',\n  '0x02FE': 'Elpida',\n  '0x5105': 'Qimonda AG i. In.',\n  '0x8551': 'Qimonda AG i. In.',\n  '0x859B': 'Crucial',\n  '0x04CD': 'G-Skill'\n};\n\n// _______________________________________________________________________________________\n// |                         R A M                              |          H D           |\n// |______________________|_________________________|           |                        |\n// |        active             buffers/cache        |           |                        |\n// |________________________________________________|___________|_________|______________|\n// |                     used                            free   |   used       free      |\n// |____________________________________________________________|________________________|\n// |                        total                               |          swap          |\n// |____________________________________________________________|________________________|\n\n// free (older versions)\n// ----------------------------------\n// # free\n//              total       used        free     shared    buffers     cached\n// Mem:         16038 (1)   15653 (2)   384 (3)  0 (4)     236 (5)     14788 (6)\n// -/+ buffers/cache:       628 (7)     15409 (8)\n// Swap:        16371         83      16288\n//\n// |------------------------------------------------------------|\n// |                           R A M                            |\n// |______________________|_____________________________________|\n// | active (2-(5+6) = 7) |  available (3+5+6 = 8)              |\n// |______________________|_________________________|___________|\n// |        active        |  buffers/cache (5+6)    |           |\n// |________________________________________________|___________|\n// |                   used (2)                     | free (3)  |\n// |____________________________________________________________|\n// |                          total (1)                         |\n// |____________________________________________________________|\n\n//\n// free (since free von procps-ng 3.3.10)\n// ----------------------------------\n// # free\n//              total       used        free     shared    buffers/cache   available\n// Mem:         16038 (1)   628 (2)     386 (3)  0 (4)     15024 (5)     14788 (6)\n// Swap:        16371         83      16288\n//\n// |------------------------------------------------------------|\n// |                           R A M                            |\n// |______________________|_____________________________________|\n// |                      |      available (6) estimated        |\n// |______________________|_________________________|___________|\n// |     active (2)       |   buffers/cache (5)     | free (3)  |\n// |________________________________________________|___________|\n// |                          total (1)                         |\n// |____________________________________________________________|\n//\n// Reference: http://www.software-architect.net/blog/article/date/2015/06/12/-826c6e5052.html\n\n// /procs/meminfo - sample (all in kB)\n//\n// MemTotal: 32806380 kB\n// MemFree: 17977744 kB\n// MemAvailable: 19768972 kB\n// Buffers: 517028 kB\n// Cached: 2161876 kB\n// SwapCached: 456 kB\n// Active: 12081176 kB\n// Inactive: 2164616 kB\n// Active(anon): 10832884 kB\n// Inactive(anon): 1477272 kB\n// Active(file): 1248292 kB\n// Inactive(file): 687344 kB\n// Unevictable: 0 kB\n// Mlocked: 0 kB\n// SwapTotal: 16768892 kB\n// SwapFree: 16768304 kB\n// Dirty: 268 kB\n// Writeback: 0 kB\n// AnonPages: 11568832 kB\n// Mapped: 719992 kB\n// Shmem: 743272 kB\n// Slab: 335716 kB\n// SReclaimable: 256364 kB\n// SUnreclaim: 79352 kB\n\nfunction mem(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      let result = {\n        total: os.totalmem(),\n        free: os.freemem(),\n        used: os.totalmem() - os.freemem(),\n\n        active: os.totalmem() - os.freemem(),     // temporarily (fallback)\n        available: os.freemem(),                  // temporarily (fallback)\n        buffers: 0,\n        cached: 0,\n        slab: 0,\n        buffcache: 0,\n\n        swaptotal: 0,\n        swapused: 0,\n        swapfree: 0\n      };\n\n      if (_linux) {\n        fs.readFile('/proc/meminfo', function (error, stdout) {\n          if (!error) {\n            const lines = stdout.toString().split('\\n');\n            result.total = parseInt(util.getValue(lines, 'memtotal'), 10);\n            result.total = result.total ? result.total * 1024 : os.totalmem();\n            result.free = parseInt(util.getValue(lines, 'memfree'), 10);\n            result.free = result.free ? result.free * 1024 : os.freemem();\n            result.used = result.total - result.free;\n\n            result.buffers = parseInt(util.getValue(lines, 'buffers'), 10);\n            result.buffers = result.buffers ? result.buffers * 1024 : 0;\n            result.cached = parseInt(util.getValue(lines, 'cached'), 10);\n            result.cached = result.cached ? result.cached * 1024 : 0;\n            result.slab = parseInt(util.getValue(lines, 'slab'), 10);\n            result.slab = result.slab ? result.slab * 1024 : 0;\n            result.buffcache = result.buffers + result.cached + result.slab;\n\n            let available = parseInt(util.getValue(lines, 'memavailable'), 10);\n            result.available = available ? available * 1024 : result.free + result.buffcache;\n            result.active = result.total - result.available;\n\n            result.swaptotal = parseInt(util.getValue(lines, 'swaptotal'), 10);\n            result.swaptotal = result.swaptotal ? result.swaptotal * 1024 : 0;\n            result.swapfree = parseInt(util.getValue(lines, 'swapfree'), 10);\n            result.swapfree = result.swapfree ? result.swapfree * 1024 : 0;\n            result.swapused = result.swaptotal - result.swapfree;\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('/sbin/sysctl -a 2>/dev/null | grep -E \"hw.realmem|hw.physmem|vm.stats.vm.v_page_count|vm.stats.vm.v_wire_count|vm.stats.vm.v_active_count|vm.stats.vm.v_inactive_count|vm.stats.vm.v_cache_count|vm.stats.vm.v_free_count|vm.stats.vm.v_page_size\"', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            const pagesize = parseInt(util.getValue(lines, 'vm.stats.vm.v_page_size'), 10);\n            const inactive = parseInt(util.getValue(lines, 'vm.stats.vm.v_inactive_count'), 10) * pagesize;\n            const cache = parseInt(util.getValue(lines, 'vm.stats.vm.v_cache_count'), 10) * pagesize;\n\n            result.total = parseInt(util.getValue(lines, 'hw.realmem'), 10);\n            if (isNaN(result.total)) result.total = parseInt(util.getValue(lines, 'hw.physmem'), 10);\n            result.free = parseInt(util.getValue(lines, 'vm.stats.vm.v_free_count'), 10) * pagesize;\n            result.buffcache = inactive + cache;\n            result.available = result.buffcache + result.free;\n            result.active = result.total - result.free - result.buffcache;\n\n            result.swaptotal = 0;\n            result.swapfree = 0;\n            result.swapused = 0;\n\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_darwin) {\n        exec('vm_stat 2>/dev/null | grep \"Pages active\"', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n\n            result.active = parseInt(lines[0].split(':')[1], 10) * 4096;\n            result.buffcache = result.used - result.active;\n            result.available = result.free + result.buffcache;\n          }\n          exec('sysctl -n vm.swapusage 2>/dev/null', function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              if (lines.length > 0) {\n                let line = lines[0].replace(/,/g, '.').replace(/M/g, '');\n                line = line.trim().split('  ');\n                for (let i = 0; i < line.length; i++) {\n                  if (line[i].toLowerCase().indexOf('total') !== -1) result.swaptotal = parseFloat(line[i].split('=')[1].trim()) * 1024 * 1024;\n                  if (line[i].toLowerCase().indexOf('used') !== -1) result.swapused = parseFloat(line[i].split('=')[1].trim()) * 1024 * 1024;\n                  if (line[i].toLowerCase().indexOf('free') !== -1) result.swapfree = parseFloat(line[i].split('=')[1].trim()) * 1024 * 1024;\n                }\n              }\n            }\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        });\n      }\n      if (_windows) {\n        let swaptotal = 0;\n        let swapused = 0;\n        try {\n          util.wmic('pagefile get AllocatedBaseSize, CurrentUsage').then((stdout, error) => {\n            if (!error) {\n              let lines = stdout.split('\\r\\n').filter(line => line.trim() !== '').filter((line, idx) => idx > 0);\n              lines.forEach(function (line) {\n                if (line !== '') {\n                  line = line.trim().split(/\\s\\s+/);\n                  swaptotal = swaptotal + parseInt(line[0], 10);\n                  swapused = swapused + parseInt(line[1], 10);\n                }\n              });\n            }\n            result.swaptotal = swaptotal * 1024 * 1024;\n            result.swapused = swapused * 1024 * 1024;\n            result.swapfree = result.swaptotal - result.swapused;\n\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.mem = mem;\n\nfunction memLayout(callback) {\n\n  function getManufacturer(manId) {\n    if ({}.hasOwnProperty.call(OSX_RAM_manufacturers, manId)) {\n      return (OSX_RAM_manufacturers[manId]);\n    }\n    return manId;\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      let result = [];\n\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        exec('export LC_ALL=C; dmidecode -t memory 2>/dev/null | grep -iE \"Size:|Type|Speed|Manufacturer|Form Factor|Locator|Memory Device|Serial Number|Voltage|Part Number\"; unset LC_ALL', function (error, stdout) {\n          if (!error) {\n            let devices = stdout.toString().split('Memory Device');\n            devices.shift();\n            devices.forEach(function (device) {\n              let lines = device.split('\\n');\n              const sizeString = util.getValue(lines, 'Size');\n              const size = sizeString.indexOf('GB') >= 0 ? parseInt(sizeString, 10) * 1024 * 1024 * 1024 : parseInt(sizeString, 10) * 1024 * 1024;\n              if (parseInt(util.getValue(lines, 'Size'), 10) > 0) {\n                result.push({\n                  size,\n                  bank: util.getValue(lines, 'Bank Locator'),\n                  type: util.getValue(lines, 'Type:'),\n                  clockSpeed: (util.getValue(lines, 'Configured Clock Speed:') ? parseInt(util.getValue(lines, 'Configured Clock Speed:'), 10) : (util.getValue(lines, 'Speed:') ? parseInt(util.getValue(lines, 'Speed:'), 10) : -1)),\n                  formFactor: util.getValue(lines, 'Form Factor:'),\n                  manufacturer: util.getValue(lines, 'Manufacturer:'),\n                  partNum: util.getValue(lines, 'Part Number:'),\n                  serialNum: util.getValue(lines, 'Serial Number:'),\n                  voltageConfigured: parseFloat(util.getValue(lines, 'Configured Voltage:') || -1),\n                  voltageMin: parseFloat(util.getValue(lines, 'Minimum Voltage:') || -1),\n                  voltageMax: parseFloat(util.getValue(lines, 'Maximum Voltage:') || -1),\n                });\n              } else {\n                result.push({\n                  size: 0,\n                  bank: util.getValue(lines, 'Bank Locator'),\n                  type: 'Empty',\n                  clockSpeed: 0,\n                  formFactor: util.getValue(lines, 'Form Factor:'),\n                  partNum: '',\n                  serialNum: '',\n                  voltageConfigured: -1,\n                  voltageMin: -1,\n                  voltageMax: -1,\n                });\n              }\n            });\n          }\n          if (!result.length) {\n            result.push({\n              size: os.totalmem(),\n              bank: '',\n              type: '',\n              clockSpeed: 0,\n              formFactor: '',\n              partNum: '',\n              serialNum: '',\n              voltageConfigured: -1,\n              voltageMin: -1,\n              voltageMax: -1,\n            });\n\n            // Try Raspberry PI\n            try {\n              let stdout = execSync('cat /proc/cpuinfo 2>/dev/null');\n              let lines = stdout.toString().split('\\n');\n              let model = util.getValue(lines, 'hardware', ':', true).toUpperCase();\n              let version = util.getValue(lines, 'revision', ':', true).toLowerCase();\n\n              if (model === 'BCM2835' || model === 'BCM2708' || model === 'BCM2709' || model === 'BCM2835' || model === 'BCM2837') {\n\n                const clockSpeed = {\n                  '0': 400,\n                  '1': 450,\n                  '2': 450,\n                  '3': 3200\n                };\n                result[0].clockSpeed = version && version[2] && clockSpeed[version[2]] || 400;\n                result[0].clockSpeed = version && version[4] && version[4] === 'd' ? '500' : result[0].clockSpeed;\n                result[0].type = 'LPDDR2';\n                result[0].type = version && version[2] && version[2] === '3' ? 'LPDDR4' : result[0].type;\n                result[0].formFactor = 'SoC';\n\n                stdout = execSync('vcgencmd get_config sdram_freq 2>/dev/null');\n                lines = stdout.toString().split('\\n');\n                let freq = parseInt(util.getValue(lines, 'sdram_freq', '=', true), 10) || 0;\n                if (freq) {\n                  result.clockSpeed = freq;\n                }\n\n                stdout = execSync('vcgencmd measure_volts sdram_p 2>/dev/null');\n                lines = stdout.toString().split('\\n');\n                let voltage = parseFloat(util.getValue(lines, 'volt', '=', true)) || 0;\n                if (voltage) {\n                  result[0].voltageConfigured = voltage;\n                  result[0].voltageMin = voltage;\n                  result[0].voltageMax = voltage;\n                }\n              }\n            } catch (e) {\n              util.noop();\n            }\n\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('system_profiler SPMemoryDataType', function (error, stdout) {\n          if (!error) {\n            let devices = stdout.toString().split('        BANK ');\n            let hasBank = true;\n            if (devices.length === 1) {\n              devices = stdout.toString().split('        DIMM');\n              hasBank = false;\n            }\n            devices.shift();\n            devices.forEach(function (device) {\n              let lines = device.split('\\n');\n              const bank = (hasBank ? 'BANK ' : 'DIMM') + lines[0].trim().split('/')[0];\n              const size = parseInt(util.getValue(lines, '          Size'));\n              if (size) {\n                result.push({\n                  size: size * 1024 * 1024 * 1024,\n                  bank: bank,\n                  type: util.getValue(lines, '          Type:'),\n                  clockSpeed: parseInt(util.getValue(lines, '          Speed:'), 10),\n                  formFactor: '',\n                  manufacturer: getManufacturer(util.getValue(lines, '          Manufacturer:')),\n                  partNum: util.getValue(lines, '          Part Number:'),\n                  serialNum: util.getValue(lines, '          Serial Number:'),\n                  voltageConfigured: -1,\n                  voltageMin: -1,\n                  voltageMax: -1,\n                });\n              } else {\n                result.push({\n                  size: 0,\n                  bank: bank,\n                  type: 'Empty',\n                  clockSpeed: 0,\n                  formFactor: '',\n                  manufacturer: '',\n                  partNum: '',\n                  serialNum: '',\n                  voltageConfigured: -1,\n                  voltageMin: -1,\n                  voltageMax: -1,\n                });\n              }\n            });\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_windows) {\n        const memoryTypes = 'Unknown|Other|DRAM|Synchronous DRAM|Cache DRAM|EDO|EDRAM|VRAM|SRAM|RAM|ROM|FLASH|EEPROM|FEPROM|EPROM|CDRAM|3DRAM|SDRAM|SGRAM|RDRAM|DDR|DDR2|DDR2 FB-DIMM|Reserved|DDR3|FBD2|DDR4|LPDDR|LPDDR2|LPDDR3|LPDDR4'.split('|');\n        const FormFactors = 'Unknown|Other|SIP|DIP|ZIP|SOJ|Proprietary|SIMM|DIMM|TSOP|PGA|RIMM|SODIMM|SRIMM|SMD|SSMP|QFP|TQFP|SOIC|LCC|PLCC|BGA|FPBGA|LGA'.split('|');\n\n        try {\n          util.wmic('memorychip get /value').then((stdout, error) => {\n            if (!error) {\n              let devices = stdout.toString().split('BankL');\n              devices.shift();\n              devices.forEach(function (device) {\n                let lines = device.split('\\r\\n');\n                result.push({\n                  size: parseInt(util.getValue(lines, 'Capacity', '='), 10) || 0,\n                  bank: util.getValue(lines, 'abel', '='), // BankLabel\n                  type: memoryTypes[parseInt(util.getValue(lines, 'MemoryType', '='), 10)],\n                  clockSpeed: parseInt(util.getValue(lines, 'ConfiguredClockSpeed', '='), 10) || 0,\n                  formFactor: FormFactors[parseInt(util.getValue(lines, 'FormFactor', '='), 10) || 0],\n                  manufacturer: util.getValue(lines, 'Manufacturer', '='),\n                  partNum: util.getValue(lines, 'PartNumber', '='),\n                  serialNum: util.getValue(lines, 'SerialNumber', '='),\n                  voltageConfigured: (parseInt(util.getValue(lines, 'ConfiguredVoltage', '='), 10) || 0) / 1000.0,\n                  voltageMin: (parseInt(util.getValue(lines, 'MinVoltage', '='), 10) || 0) / 1000.0,\n                  voltageMax: (parseInt(util.getValue(lines, 'MaxVoltage', '='), 10) || 0) / 1000.0,\n                });\n              });\n            }\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.memLayout = memLayout;\n\n"]},"metadata":{},"sourceType":"script"}