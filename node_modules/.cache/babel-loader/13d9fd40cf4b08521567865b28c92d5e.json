{"ast":null,"code":"/***************************\n *\n * Module methods\n *\n **************************/\nvar cst = require('../../../constants.js');\n\nvar Common = require('../../Common.js');\n\nvar chalk = require('chalk');\n\nvar forEachLimit = require('async/forEachLimit');\n\nvar Modularizer = require('./Modularizer.js');\n\nmodule.exports = function (CLI) {\n  /**\n   * Install / Update a module\n   */\n  CLI.prototype.install = function (module_name, opts, cb) {\n    var that = this;\n\n    if (typeof opts == 'function') {\n      cb = opts;\n      opts = {};\n    }\n\n    Modularizer.install(this, module_name, opts, function (err, data) {\n      if (err) {\n        Common.printError(cst.PREFIX_MSG_ERR + (err.message || err));\n        return cb ? cb(Common.retErr(err)) : that.speedList(cst.ERROR_EXIT);\n      }\n\n      return cb ? cb(null, data) : that.speedList(cst.SUCCESS_EXIT);\n    });\n  };\n  /**\n   * Uninstall a module\n   */\n\n\n  CLI.prototype.uninstall = function (module_name, cb) {\n    var that = this;\n    Modularizer.uninstall(this, module_name, function (err, data) {\n      if (err) return cb ? cb(Common.retErr(err)) : that.speedList(cst.ERROR_EXIT);\n      return cb ? cb(null, data) : that.speedList(cst.SUCCESS_EXIT);\n    });\n  };\n\n  CLI.prototype.launchAll = function (CLI, cb) {\n    Modularizer.launchModules(CLI, cb);\n  };\n\n  CLI.prototype.package = function (module_path, cb) {\n    Modularizer.package(this, module_path, (err, res) => {\n      if (err) {\n        Common.errMod(err);\n        return cb ? cb(err) : this.exitCli(1);\n      }\n\n      Common.logMod(`Module packaged in ${res.path}`);\n      return cb ? cb(err) : this.exitCli(0);\n    });\n  };\n  /**\n   * Publish module on NPM + Git push\n   */\n\n\n  CLI.prototype.publish = function (folder, opts, cb) {\n    var that = this;\n    Modularizer.publish(this, folder, opts, function (err, data) {\n      if (err) return cb ? cb(Common.retErr(err)) : that.speedList(cst.ERROR_EXIT);\n      return cb ? cb(null, data) : that.speedList(cst.SUCCESS_EXIT);\n    });\n  };\n  /**\n   * Publish module on NPM + Git push\n   */\n\n\n  CLI.prototype.generateModuleSample = function (app_name, cb) {\n    var that = this;\n    Modularizer.generateSample(app_name, function (err, data) {\n      if (err) return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      return cb ? cb(null, data) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n  /**\n   * Special delete method\n   */\n\n\n  CLI.prototype.deleteModule = function (module_name, cb) {\n    var that = this;\n    var found_proc = [];\n    this.Client.getAllProcess(function (err, procs) {\n      if (err) {\n        Common.printError('Error retrieving process list: ' + err);\n        return cb(Common.retErr(err));\n      }\n\n      procs.forEach(function (proc) {\n        if (proc.pm2_env.name == module_name && proc.pm2_env.pmx_module) {\n          found_proc.push(proc.pm_id);\n        }\n      });\n      if (found_proc.length == 0) return cb();\n\n      that._operate('deleteProcessId', found_proc[0], function (err) {\n        if (err) return cb(Common.retErr(err));\n        Common.printOut('In memory process deleted');\n        return cb();\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/API/Modules/index.js"],"names":["cst","require","Common","chalk","forEachLimit","Modularizer","module","exports","CLI","prototype","install","module_name","opts","cb","that","err","data","printError","PREFIX_MSG_ERR","message","retErr","speedList","ERROR_EXIT","SUCCESS_EXIT","uninstall","launchAll","launchModules","package","module_path","res","errMod","exitCli","logMod","path","publish","folder","generateModuleSample","app_name","generateSample","deleteModule","found_proc","Client","getAllProcess","procs","forEach","proc","pm2_env","name","pmx_module","push","pm_id","length","_operate","printOut"],"mappings":"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","sourcesContent":["\n/***************************\n *\n * Module methods\n *\n **************************/\n\nvar cst          = require('../../../constants.js');\nvar Common       = require('../../Common.js');\nvar chalk        = require('chalk');\nvar forEachLimit = require('async/forEachLimit');\n\nvar Modularizer = require('./Modularizer.js');\n\nmodule.exports = function(CLI) {\n  /**\n   * Install / Update a module\n   */\n  CLI.prototype.install = function(module_name, opts, cb) {\n    var that = this;\n\n    if (typeof(opts) == 'function') {\n      cb = opts;\n      opts = {};\n    }\n\n    Modularizer.install(this, module_name, opts, function(err, data) {\n      if (err) {\n        Common.printError(cst.PREFIX_MSG_ERR + (err.message || err));\n        return cb ? cb(Common.retErr(err)) : that.speedList(cst.ERROR_EXIT);\n      }\n      return cb ? cb(null, data) : that.speedList(cst.SUCCESS_EXIT);\n    });\n  };\n\n  /**\n   * Uninstall a module\n   */\n  CLI.prototype.uninstall = function(module_name, cb) {\n    var that = this;\n\n    Modularizer.uninstall(this, module_name, function(err, data) {\n      if (err)\n        return cb ? cb(Common.retErr(err)) : that.speedList(cst.ERROR_EXIT);\n      return cb ? cb(null, data) : that.speedList(cst.SUCCESS_EXIT);\n    });\n  };\n\n  CLI.prototype.launchAll = function(CLI, cb) {\n    Modularizer.launchModules(CLI, cb);\n  };\n\n  CLI.prototype.package = function(module_path, cb) {\n    Modularizer.package(this, module_path, (err, res) => {\n      if (err) {\n        Common.errMod(err)\n        return cb ? cb(err) : this.exitCli(1)\n      }\n      Common.logMod(`Module packaged in ${res.path}`)\n      return cb ? cb(err) : this.exitCli(0)\n    })\n  };\n\n  /**\n   * Publish module on NPM + Git push\n   */\n  CLI.prototype.publish = function(folder, opts, cb) {\n    var that = this;\n\n    Modularizer.publish(this, folder, opts, function(err, data) {\n      if (err)\n        return cb ? cb(Common.retErr(err)) : that.speedList(cst.ERROR_EXIT);\n      return cb ? cb(null, data) : that.speedList(cst.SUCCESS_EXIT);\n    });\n  };\n\n  /**\n   * Publish module on NPM + Git push\n   */\n  CLI.prototype.generateModuleSample = function(app_name, cb) {\n    var that = this;\n\n    Modularizer.generateSample(app_name, function(err, data) {\n      if (err)\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      return cb ? cb(null, data) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n\n  /**\n   * Special delete method\n   */\n  CLI.prototype.deleteModule = function(module_name, cb) {\n    var that = this;\n\n    var found_proc = [];\n\n    this.Client.getAllProcess(function(err, procs) {\n      if (err) {\n        Common.printError('Error retrieving process list: ' + err);\n        return cb(Common.retErr(err));\n      }\n\n      procs.forEach(function(proc) {\n        if (proc.pm2_env.name == module_name && proc.pm2_env.pmx_module) {\n          found_proc.push(proc.pm_id);\n        }\n      });\n\n      if (found_proc.length == 0)\n        return cb();\n\n      that._operate('deleteProcessId', found_proc[0], function(err) {\n        if (err) return cb(Common.retErr(err));\n        Common.printOut('In memory process deleted');\n        return cb();\n      });\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"script"}