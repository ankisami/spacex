{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\nvar fs = require('fs');\n\nvar cst = require('../../constants.js');\n\nvar Utility = require('../Utility.js');\n\nvar Common = require('../Common.js');\n\nfunction deployHelper() {\n  console.log('');\n  console.log('-----> Helper: Deployment with PM2');\n  console.log('');\n  console.log('  Generate a sample ecosystem.config.js with the command');\n  console.log('  $ pm2 ecosystem');\n  console.log('  Then edit the file depending on your needs');\n  console.log('');\n  console.log('  Commands:');\n  console.log('    setup                run remote setup commands');\n  console.log('    update               update deploy to the latest release');\n  console.log('    revert [n]           revert to [n]th last deployment or 1');\n  console.log('    curr[ent]            output current release commit');\n  console.log('    prev[ious]           output previous release commit');\n  console.log('    exec|run <cmd>       execute the given <cmd>');\n  console.log('    list                 list previous deploy commits');\n  console.log('    [ref]                deploy to [ref], the \"ref\" setting, or latest tag');\n  console.log('');\n  console.log('');\n  console.log('  Basic Examples:');\n  console.log('');\n  console.log('    First initialize remote production host:');\n  console.log('    $ pm2 deploy ecosystem.config.js production setup');\n  console.log('');\n  console.log('    Then deploy new code:');\n  console.log('    $ pm2 deploy ecosystem.config.js production');\n  console.log('');\n  console.log('    If I want to revert to the previous commit:');\n  console.log('    $ pm2 deploy ecosystem.config.js production revert 1');\n  console.log('');\n  console.log('    Execute a command on remote server:');\n  console.log('    $ pm2 deploy ecosystem.config.js production exec \"pm2 restart all\"');\n  console.log('');\n  console.log('    PM2 will look by default to the ecosystem.config.js file so you dont need to give the file name:');\n  console.log('    $ pm2 deploy production');\n  console.log('    Else you have to tell PM2 the name of your ecosystem file');\n  console.log('');\n  console.log('    More examples in https://github.com/Unitech/pm2');\n  console.log('');\n}\n\n;\n\nmodule.exports = function (CLI) {\n  CLI.prototype.deploy = function (file, commands, cb) {\n    var that = this;\n\n    if (file == 'help') {\n      deployHelper();\n      return cb ? cb() : that.exitCli(cst.SUCCESS_EXIT);\n    }\n\n    var args = commands.rawArgs;\n    var env;\n    args.splice(0, args.indexOf('deploy') + 1); // Find ecosystem file by default\n\n    if (!Common.isConfigFile(file)) {\n      env = args[0];\n      var defaultConfigNames = ['ecosystem.config.js', 'ecosystem.json', 'ecosystem.json5', 'package.json'];\n      file = Utility.whichFileExists(defaultConfigNames);\n\n      if (!file) {\n        Common.printError('Not any default deployment file exists.' + ' Allowed default config file names are: ' + defaultConfigNames.join(', '));\n        return cb ? cb('Not any default ecosystem file present') : that.exitCli(cst.ERROR_EXIT);\n      }\n    } else env = args[1];\n\n    var json_conf = null;\n\n    try {\n      json_conf = Common.parseConfig(fs.readFileSync(file), file);\n    } catch (e) {\n      Common.printError(e);\n      return cb ? cb(e) : that.exitCli(cst.ERROR_EXIT);\n    }\n\n    if (!env) {\n      deployHelper();\n      return cb ? cb() : that.exitCli(cst.SUCCESS_EXIT);\n    }\n\n    if (!json_conf.deploy || !json_conf.deploy[env]) {\n      Common.printError('%s environment is not defined in %s file', env, file);\n      return cb ? cb('%s environment is not defined in %s file') : that.exitCli(cst.ERROR_EXIT);\n    }\n\n    if (!json_conf.deploy[env]['post-deploy']) {\n      json_conf.deploy[env]['post-deploy'] = 'pm2 startOrRestart ' + file + ' --env ' + env;\n    }\n\n    require('pm2-deploy').deployForEnv(json_conf.deploy, env, args, function (err, data) {\n      if (err) {\n        Common.printError('Deploy failed');\n        Common.printError(err.message || err);\n        return cb ? cb(err) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      Common.printOut('--> Success');\n      return cb ? cb(null, data) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/API/Deploy.js"],"names":["fs","require","cst","Utility","Common","deployHelper","console","log","module","exports","CLI","prototype","deploy","file","commands","cb","that","exitCli","SUCCESS_EXIT","args","rawArgs","env","splice","indexOf","isConfigFile","defaultConfigNames","whichFileExists","printError","join","ERROR_EXIT","json_conf","parseConfig","readFileSync","e","deployForEnv","err","data","message","printOut"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n\nvar fs      = require('fs');\nvar cst     = require('../../constants.js');\nvar Utility = require('../Utility.js');\nvar Common  = require('../Common.js');\n\nfunction deployHelper() {\n  console.log('');\n  console.log('-----> Helper: Deployment with PM2');\n  console.log('');\n  console.log('  Generate a sample ecosystem.config.js with the command');\n  console.log('  $ pm2 ecosystem');\n  console.log('  Then edit the file depending on your needs');\n  console.log('');\n  console.log('  Commands:');\n  console.log('    setup                run remote setup commands');\n  console.log('    update               update deploy to the latest release');\n  console.log('    revert [n]           revert to [n]th last deployment or 1');\n  console.log('    curr[ent]            output current release commit');\n  console.log('    prev[ious]           output previous release commit');\n  console.log('    exec|run <cmd>       execute the given <cmd>');\n  console.log('    list                 list previous deploy commits');\n  console.log('    [ref]                deploy to [ref], the \"ref\" setting, or latest tag');\n  console.log('');\n  console.log('');\n  console.log('  Basic Examples:');\n  console.log('');\n  console.log('    First initialize remote production host:');\n  console.log('    $ pm2 deploy ecosystem.config.js production setup');\n  console.log('');\n  console.log('    Then deploy new code:');\n  console.log('    $ pm2 deploy ecosystem.config.js production');\n  console.log('');\n  console.log('    If I want to revert to the previous commit:');\n  console.log('    $ pm2 deploy ecosystem.config.js production revert 1');\n  console.log('');\n  console.log('    Execute a command on remote server:');\n  console.log('    $ pm2 deploy ecosystem.config.js production exec \"pm2 restart all\"');\n  console.log('');\n  console.log('    PM2 will look by default to the ecosystem.config.js file so you dont need to give the file name:');\n  console.log('    $ pm2 deploy production');\n  console.log('    Else you have to tell PM2 the name of your ecosystem file');\n  console.log('');\n  console.log('    More examples in https://github.com/Unitech/pm2');\n  console.log('');\n};\n\nmodule.exports = function(CLI) {\n  CLI.prototype.deploy = function(file, commands, cb) {\n    var that = this;\n\n    if (file == 'help') {\n      deployHelper();\n      return cb ? cb() : that.exitCli(cst.SUCCESS_EXIT);\n    }\n\n    var args = commands.rawArgs;\n    var env;\n\n    args.splice(0, args.indexOf('deploy') + 1);\n\n    // Find ecosystem file by default\n    if (!Common.isConfigFile(file)) {\n      env = args[0];\n      var defaultConfigNames = ['ecosystem.config.js', 'ecosystem.json', 'ecosystem.json5', 'package.json'];\n      file = Utility.whichFileExists(defaultConfigNames);\n\n      if (!file) {\n        Common.printError('Not any default deployment file exists.'+\n          ' Allowed default config file names are: ' + defaultConfigNames.join(', '));\n        return cb ? cb('Not any default ecosystem file present') : that.exitCli(cst.ERROR_EXIT);\n      }\n    }\n    else\n      env = args[1];\n\n    var json_conf = null;\n\n    try {\n      json_conf = Common.parseConfig(fs.readFileSync(file), file);\n    } catch (e) {\n      Common.printError(e);\n      return cb ? cb(e) : that.exitCli(cst.ERROR_EXIT);\n    }\n\n    if (!env) {\n      deployHelper();\n      return cb ? cb() : that.exitCli(cst.SUCCESS_EXIT);\n    }\n\n    if (!json_conf.deploy || !json_conf.deploy[env]) {\n      Common.printError('%s environment is not defined in %s file', env, file);\n      return cb ? cb('%s environment is not defined in %s file') : that.exitCli(cst.ERROR_EXIT);\n    }\n\n    if (!json_conf.deploy[env]['post-deploy']) {\n      json_conf.deploy[env]['post-deploy'] = 'pm2 startOrRestart ' + file + ' --env ' + env;\n    }\n\n    require('pm2-deploy').deployForEnv(json_conf.deploy, env, args, function(err, data) {\n      if (err) {\n        Common.printError('Deploy failed');\n        Common.printError(err.message || err);\n        return cb ? cb(err) : that.exitCli(cst.ERROR_EXIT);\n      }\n      Common.printOut('--> Success');\n      return cb ? cb(null, data) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n\n};\n"]},"metadata":{},"sourceType":"script"}