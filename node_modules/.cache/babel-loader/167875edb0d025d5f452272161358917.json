{"ast":null,"code":"var exec = require(\"child_process\").exec;\n\nvar fs = require(\"fs\");\n\nvar halt = false;\n\nfunction error(repoType, task, errorMsg, cb) {\n  if (halt) return false;\n  console.error(\"[Repo-Parser] An error occured while \" + task + \" in a \" + repoType + \" repository: \" + errorMsg);\n  halt = true;\n  return cb(\"[Repo-Parser] An error occured while \" + task + \" in a \" + repoType + \" repository: \" + errorMsg);\n}\n\nfunction checkReturn(dataArray, cb) {\n  if (halt) {\n    return false;\n  }\n\n  if (Object.keys(dataArray).length > 6) {\n    Object.keys(dataArray).forEach(function (key) {\n      if (typeof dataArray[key] === 'string') {\n        dataArray[key] = dataArray[key].replace(/\\n/g, '');\n      }\n    });\n    cb(null, dataArray);\n  }\n}\n\n;\n\nmodule.exports.parse = function parseHg(folder, cb) {\n  var data = {};\n  data.type = 'mercurial';\n  data.commit_history = []; // temporary\n\n  exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 hg paths default\", function (err, stdout, stderr) {\n    if (err !== null) {\n      error(\"mercurial\", \"fetching path\", stderr, cb);\n    } else {\n      data.url = stdout;\n      checkReturn(data, cb);\n    }\n  });\n  exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 hg log --limit 1 --template 'changeset: {rev}:{node|short}\\nsummary: {desc}'\", function (err, stdout, stderr) {\n    if (err !== null) {\n      error(\"mercurial\", \"fetching log\", stderr, cb);\n    } else {\n      var changeset = stdout.match(/^changeset:\\s+([^\\n]+)$/m); //date = stdout.match(/^date:\\s+:([^\\n]+)$/m);\n\n      var summary = stdout.match(/^summary:\\s+([^\\n]+)$/m);\n      data.revision = changeset[1];\n      data.comment = summary[1]; //data.update_time = date;\n\n      checkReturn(data, cb);\n    }\n  });\n  exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 hg branch\", function (err, stdout, stderr) {\n    if (err !== null) {\n      error(\"mercurial\", \"fetching branch\", stderr, cb);\n    } else {\n      data.branch = stdout;\n      checkReturn(data, cb);\n    }\n  });\n  fs.stat(folder + \".hg\", function (err, stats) {\n    if (err !== null) {\n      error(\"mercurial\", \"fetching stats\", \"no error available\", cb);\n    } else {\n      data.update_time = stats.mtime;\n      checkReturn(data, cb);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/vizion/lib/hg.js"],"names":["exec","require","fs","halt","error","repoType","task","errorMsg","cb","console","checkReturn","dataArray","Object","keys","length","forEach","key","replace","module","exports","parse","parseHg","folder","data","type","commit_history","err","stdout","stderr","url","changeset","match","summary","revision","comment","branch","stat","stats","update_time","mtime"],"mappings":"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","sourcesContent":["var exec = require(\"child_process\").exec;\n\nvar fs   = require(\"fs\");\n\nvar halt = false;\n\nfunction error(repoType, task, errorMsg, cb) {\n\tif (halt) return false;\n\n\tconsole.error(\"[Repo-Parser] An error occured while \" + task + \" in a \" + repoType + \" repository: \" + errorMsg);\n\thalt = true;\n  return cb(\"[Repo-Parser] An error occured while \" + task + \" in a \" + repoType + \" repository: \" + errorMsg);\n}\n\nfunction checkReturn(dataArray, cb) {\n\tif (halt) {\n\t\treturn false;\n\t}\n\tif (Object.keys(dataArray).length > 6) {\n    Object.keys(dataArray).forEach(function(key) {\n      if (typeof(dataArray[key]) === 'string') {\n        dataArray[key] = dataArray[key].replace(/\\n/g, '');\n      }\n    });\n\t\tcb(null, dataArray);\n\t}\n};\n\n\nmodule.exports.parse = function parseHg(folder, cb) {\n\tvar data = {};\n\n  data.type = 'mercurial';\n  data.commit_history = []; // temporary\n\n\texec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 hg paths default\", function(err, stdout, stderr) {\n\t\tif(err !== null) {\n\t\t\terror(\"mercurial\", \"fetching path\", stderr, cb);\n\t\t}\n\t\telse {\n\t\t\tdata.url = stdout;\n\t\t\tcheckReturn(data, cb);\n\t\t}\n\t});\n\texec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 hg log --limit 1 --template 'changeset: {rev}:{node|short}\\nsummary: {desc}'\", function(err, stdout, stderr) {\n\t\tif(err !== null) {\n\t\t\terror(\"mercurial\", \"fetching log\", stderr, cb);\n\t\t}\n\t\telse {\n\t\t\tvar changeset = stdout.match(/^changeset:\\s+([^\\n]+)$/m);\n\t\t\t//date = stdout.match(/^date:\\s+:([^\\n]+)$/m);\n\t\t\tvar summary = stdout.match(/^summary:\\s+([^\\n]+)$/m);\n\t\t\tdata.revision = changeset[1];\n\t\t\tdata.comment = summary[1];\n\t\t\t//data.update_time = date;\n\t\t\tcheckReturn(data, cb);\n\t\t}\n\t});\n\texec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 hg branch\", function(err, stdout, stderr) {\n\t\tif(err !== null) {\n\t\t\terror(\"mercurial\", \"fetching branch\", stderr, cb);\n\t\t}\n\t\telse {\n\t\t\tdata.branch = stdout;\n\t\t\tcheckReturn(data, cb);\n\t\t}\n\t});\n\tfs.stat(folder+\".hg\", function(err, stats) {\n\t\tif(err !== null) {\n\t\t\terror(\"mercurial\", \"fetching stats\", \"no error available\", cb);\n\t\t}\n\t\telse {\n\t\t\tdata.update_time = stats.mtime;\n\t\t\tcheckReturn(data, cb);\n\t\t}\n\t});\n}\n"]},"metadata":{},"sourceType":"script"}