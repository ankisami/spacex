{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n// pm2-htop\n// Library who interacts with PM2 to display processes resources in htop way\n// by Strzelewicz Alexandre\nvar multimeter = require('pm2-multimeter');\n\nvar os = require('os');\n\nvar p = require('path');\n\nvar chalk = require('chalk');\n\nvar UX = require('./UX');\n\nvar debug = require('debug')('pm2:monit'); // Cst for light programs\n\n\nconst RATIO_T1 = Math.floor(os.totalmem() / 500); // Cst for medium programs\n\nconst RATIO_T2 = Math.floor(os.totalmem() / 50); // Cst for heavy programs\n\nconst RATIO_T3 = Math.floor(os.totalmem() / 5); // Cst for heavy programs\n\nconst RATIO_T4 = Math.floor(os.totalmem());\nvar Monit = {}; //helper to get bars.length (num bars printed)\n\nObject.size = function (obj) {\n  var size = 0,\n      key;\n\n  for (key in obj) {\n    if (obj.hasOwnProperty(key)) size++;\n  }\n\n  return size;\n};\n/**\n * Reset the monitor through charm, basically \\033c\n * @param  String msg optional message to show\n * @return Monit\n */\n\n\nMonit.reset = function (msg) {\n  this.multi.charm.reset();\n  this.multi.write('\\x1B[32m⌬ PM2 \\x1B[39mmonitoring\\x1B[96m (To go further check out https://app.pm2.io) \\x1B[39m\\n\\n');\n\n  if (msg) {\n    this.multi.write(msg);\n  }\n\n  this.bars = {};\n  return this;\n};\n/**\n * Synchronous Monitor init method\n * @method init\n * @return Monit\n */\n\n\nMonit.init = function () {\n  this.multi = multimeter(process);\n  this.multi.on('^C', this.stop);\n  this.reset();\n  return this;\n};\n/**\n * Stops monitor\n * @method stop\n */\n\n\nMonit.stop = function () {\n  this.multi.charm.destroy();\n  process.exit(0);\n};\n/**\n * Refresh monitor\n * @method refresh\n * @param {} processes\n * @return this\n */\n\n\nMonit.refresh = function (processes) {\n  debug('Monit refresh');\n\n  if (!processes) {\n    processes = [];\n  }\n\n  var num = processes.length;\n  this.num_bars = Object.size(this.bars);\n\n  if (num !== this.num_bars) {\n    debug('Monit addProcesses - actual: %s, new: %s', this.num_bars, num);\n    return this.addProcesses(processes);\n  } else {\n    if (num === 0) {\n      return;\n    }\n\n    debug('Monit refresh');\n    var proc;\n\n    for (var i = 0; i < num; i++) {\n      proc = processes[i]; //this is to avoid a print issue when the process is restarted for example\n      //we might also check for the pid but restarted|restarting will be rendered bad\n\n      if (this.bars[proc.pm_id] && proc.pm2_env.status !== this.bars[proc.pm_id].status) {\n        debug('bars for %s does not exist', proc.pm_id);\n        this.addProcesses(processes);\n        break;\n      }\n\n      this.updateBars(proc);\n    }\n  }\n\n  return this;\n};\n\nMonit.addProcess = function (proc, i) {\n  if (proc.pm_id in this.bars) {\n    return;\n  }\n\n  if (proc.monit.error) throw new Error(JSON.stringify(proc.monit.error));\n  var process_name = proc.pm2_env.name || p.basename(proc.pm2_env.pm_exec_path);\n  var status = proc.pm2_env.status == 'online' ? chalk.green.bold('●') : chalk.red.bold('●');\n  this.multi.write(' ' + status + ' ' + chalk.green.bold(process_name));\n  this.multi.write('\\n');\n  this.multi.write('[' + proc.pm2_env.pm_id + '] [' + proc.pm2_env.exec_mode + ']\\n');\n  var bar_cpu = this.multi(40, i * 2 + 3 + i, {\n    width: 30,\n    solid: {\n      text: '|',\n      foreground: 'white',\n      background: 'blue'\n    },\n    empty: {\n      text: ' '\n    }\n  });\n  var bar_memory = this.multi(40, i * 2 + 4 + i, {\n    width: 30,\n    solid: {\n      text: '|',\n      foreground: 'white',\n      background: 'red'\n    },\n    empty: {\n      text: ' '\n    }\n  });\n  this.bars[proc.pm_id] = {\n    memory: bar_memory,\n    cpu: bar_cpu,\n    status: proc.pm2_env.status\n  };\n  this.updateBars(proc);\n  this.multi.write('\\n');\n  return this;\n};\n\nMonit.addProcesses = function (processes) {\n  if (!processes) {\n    processes = [];\n  }\n\n  this.reset();\n  var num = processes.length;\n\n  if (num > 0) {\n    for (var i = 0; i < num; i++) {\n      this.addProcess(processes[i], i);\n    }\n  } else {\n    this.reset('No processes to monit');\n  }\n}; // Draw memory bars\n\n/**\n * Description\n * @method drawRatio\n * @param {} bar_memory\n * @param {} memory\n * @return\n */\n\n\nMonit.drawRatio = function (bar_memory, memory) {\n  var scale = 0;\n  if (memory < RATIO_T1) scale = RATIO_T1;else if (memory < RATIO_T2) scale = RATIO_T2;else if (memory < RATIO_T3) scale = RATIO_T3;else scale = RATIO_T4;\n  bar_memory.ratio(memory, scale, UX.helpers.bytesToSize(memory, 3));\n};\n/**\n * Updates bars informations\n * @param  {} proc       proc object\n * @return  this\n */\n\n\nMonit.updateBars = function (proc) {\n  if (this.bars[proc.pm_id]) {\n    if (proc.pm2_env.status !== 'online' || proc.pm2_env.status !== this.bars[proc.pm_id].status) {\n      this.bars[proc.pm_id].cpu.percent(0, chalk.red(proc.pm2_env.status));\n      this.drawRatio(this.bars[proc.pm_id].memory, 0, chalk.red(proc.pm2_env.status));\n    } else if (!proc.monit) {\n      this.bars[proc.pm_id].cpu.percent(0, chalk.red('No data'));\n      this.drawRatio(this.bars[proc.pm_id].memory, 0, chalk.red('No data'));\n    } else {\n      this.bars[proc.pm_id].cpu.percent(proc.monit.cpu);\n      this.drawRatio(this.bars[proc.pm_id].memory, proc.monit.memory);\n    }\n  }\n\n  return this;\n};\n\nmodule.exports = Monit;","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/API/Monit.js"],"names":["multimeter","require","os","p","chalk","UX","debug","RATIO_T1","Math","floor","totalmem","RATIO_T2","RATIO_T3","RATIO_T4","Monit","Object","size","obj","key","hasOwnProperty","reset","msg","multi","charm","write","bars","init","process","on","stop","destroy","exit","refresh","processes","num","length","num_bars","addProcesses","proc","i","pm_id","pm2_env","status","updateBars","addProcess","monit","error","Error","JSON","stringify","process_name","name","basename","pm_exec_path","green","bold","red","exec_mode","bar_cpu","width","solid","text","foreground","background","empty","bar_memory","memory","cpu","drawRatio","scale","ratio","helpers","bytesToSize","percent","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n// pm2-htop\n// Library who interacts with PM2 to display processes resources in htop way\n// by Strzelewicz Alexandre\n\nvar multimeter = require('pm2-multimeter');\nvar os         = require('os');\nvar p          = require('path');\nvar chalk      = require('chalk');\n\nvar UX      = require('./UX');\n\nvar debug = require('debug')('pm2:monit');\n\n// Cst for light programs\nconst RATIO_T1   = Math.floor(os.totalmem() / 500);\n// Cst for medium programs\nconst RATIO_T2   = Math.floor(os.totalmem() / 50);\n// Cst for heavy programs\nconst RATIO_T3   = Math.floor(os.totalmem() / 5);\n// Cst for heavy programs\nconst RATIO_T4   = Math.floor(os.totalmem());\n\nvar Monit = {};\n\n//helper to get bars.length (num bars printed)\nObject.size = function(obj) {\n    var size = 0, key;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) size++;\n    }\n    return size;\n};\n\n/**\n * Reset the monitor through charm, basically \\033c\n * @param  String msg optional message to show\n * @return Monit\n */\nMonit.reset = function(msg) {\n\n  this.multi.charm.reset();\n\n  this.multi.write('\\x1B[32m⌬ PM2 \\x1B[39mmonitoring\\x1B[96m (To go further check out https://app.pm2.io) \\x1B[39m\\n\\n');\n\n  if(msg) {\n    this.multi.write(msg);\n  }\n\n  this.bars = {};\n\n  return this;\n}\n\n/**\n * Synchronous Monitor init method\n * @method init\n * @return Monit\n */\nMonit.init = function() {\n\n  this.multi = multimeter(process);\n\n  this.multi.on('^C', this.stop);\n\n  this.reset();\n\n  return this;\n}\n\n/**\n * Stops monitor\n * @method stop\n */\nMonit.stop = function() {\n  this.multi.charm.destroy();\n  process.exit(0);\n}\n\n\n/**\n * Refresh monitor\n * @method refresh\n * @param {} processes\n * @return this\n */\nMonit.refresh = function(processes) {\n  debug('Monit refresh');\n\n  if(!processes) {\n    processes = [];\n  }\n\n  var num = processes.length;\n  this.num_bars = Object.size(this.bars);\n\n  if(num !== this.num_bars) {\n    debug('Monit addProcesses - actual: %s, new: %s', this.num_bars, num);\n    return this.addProcesses(processes);\n  } else {\n\n    if(num === 0) {\n      return;\n    }\n\n    debug('Monit refresh');\n    var proc;\n\n    for(var i = 0; i < num; i++) {\n      proc = processes[i];\n\n      //this is to avoid a print issue when the process is restarted for example\n      //we might also check for the pid but restarted|restarting will be rendered bad\n      if(this.bars[proc.pm_id] && proc.pm2_env.status !== this.bars[proc.pm_id].status) {\n        debug('bars for %s does not exist', proc.pm_id);\n        this.addProcesses(processes);\n        break;\n      }\n\n      this.updateBars(proc);\n\n    }\n  }\n\n  return this;\n}\n\nMonit.addProcess = function(proc, i) {\n  if(proc.pm_id in this.bars) {\n    return ;\n  }\n\n  if (proc.monit.error)\n    throw new Error(JSON.stringify(proc.monit.error));\n\n  var process_name = proc.pm2_env.name || p.basename(proc.pm2_env.pm_exec_path);\n  var status = proc.pm2_env.status == 'online' ? chalk.green.bold('●') : chalk.red.bold('●');\n\n  this.multi.write(' ' + status + ' ' + chalk.green.bold(process_name));\n  this.multi.write('\\n');\n  this.multi.write('[' + proc.pm2_env.pm_id + '] [' + proc.pm2_env.exec_mode + ']\\n');\n\n  var bar_cpu = this.multi(40, (i * 2) + 3 + i, {\n    width: 30,\n    solid: {\n      text: '|',\n      foreground: 'white',\n      background: 'blue'\n    },\n    empty: {\n      text: ' '\n    }\n  });\n\n  var bar_memory = this.multi(40, (i * 2) + 4 + i, {\n    width: 30,\n    solid: {\n      text: '|',\n      foreground: 'white',\n      background: 'red'\n    },\n    empty: {\n      text: ' '\n    }\n  });\n\n  this.bars[proc.pm_id] = {\n    memory: bar_memory,\n    cpu: bar_cpu,\n    status: proc.pm2_env.status\n  };\n\n  this.updateBars(proc);\n\n  this.multi.write('\\n');\n\n  return this;\n}\n\nMonit.addProcesses = function(processes) {\n\n  if(!processes) {\n    processes = [];\n  }\n\n  this.reset();\n\n  var num = processes.length;\n\n  if(num > 0) {\n    for(var i = 0; i < num; i++) {\n      this.addProcess(processes[i], i);\n    }\n  } else {\n    this.reset('No processes to monit');\n  }\n\n}\n\n// Draw memory bars\n/**\n * Description\n * @method drawRatio\n * @param {} bar_memory\n * @param {} memory\n * @return\n */\nMonit.drawRatio = function(bar_memory, memory) {\n  var scale = 0;\n\n  if (memory < RATIO_T1) scale = RATIO_T1;\n  else if (memory < RATIO_T2) scale = RATIO_T2;\n  else if (memory < RATIO_T3) scale = RATIO_T3;\n  else scale = RATIO_T4;\n\n  bar_memory.ratio(memory,\n\t\t   scale,\n\t\t   UX.helpers.bytesToSize(memory, 3));\n};\n\n/**\n * Updates bars informations\n * @param  {} proc       proc object\n * @return  this\n */\nMonit.updateBars = function(proc) {\n  if (this.bars[proc.pm_id]) {\n    if (proc.pm2_env.status !== 'online' || proc.pm2_env.status !== this.bars[proc.pm_id].status) {\n      this.bars[proc.pm_id].cpu.percent(0, chalk.red(proc.pm2_env.status));\n      this.drawRatio(this.bars[proc.pm_id].memory, 0, chalk.red(proc.pm2_env.status));\n    } else if (!proc.monit) {\n      this.bars[proc.pm_id].cpu.percent(0, chalk.red('No data'));\n      this.drawRatio(this.bars[proc.pm_id].memory, 0, chalk.red('No data'));\n    } else {\n      this.bars[proc.pm_id].cpu.percent(proc.monit.cpu);\n      this.drawRatio(this.bars[proc.pm_id].memory, proc.monit.memory);\n    }\n  }\n\n  return this;\n}\n\nmodule.exports = Monit;\n"]},"metadata":{},"sourceType":"script"}