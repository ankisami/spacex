{"ast":null,"code":"'use strict';\n\nconst Select = require('./select');\n\nconst highlight = (input, color) => {\n  let val = input.toLowerCase();\n  return str => {\n    let s = str.toLowerCase();\n    let i = s.indexOf(val);\n    let colored = color(str.slice(i, i + val.length));\n    return i >= 0 ? str.slice(0, i) + colored + str.slice(i + val.length) : str;\n  };\n};\n\nclass AutoComplete extends Select {\n  constructor(options) {\n    super(options);\n    this.cursorShow();\n  }\n\n  moveCursor(n) {\n    this.state.cursor += n;\n  }\n\n  dispatch(ch) {\n    return this.append(ch);\n  }\n\n  space(ch) {\n    return this.options.multiple ? super.space(ch) : this.append(ch);\n  }\n\n  append(ch) {\n    let {\n      cursor,\n      input\n    } = this.state;\n    this.input = input.slice(0, cursor) + ch + input.slice(cursor);\n    this.moveCursor(1);\n    return this.complete();\n  }\n\n  delete() {\n    let {\n      cursor,\n      input\n    } = this.state;\n    if (!input) return this.alert();\n    this.input = input.slice(0, cursor - 1) + input.slice(cursor);\n    this.moveCursor(-1);\n    return this.complete();\n  }\n\n  deleteForward() {\n    let {\n      cursor,\n      input\n    } = this.state;\n    if (input[cursor] === void 0) return this.alert();\n    this.input = `${input}`.slice(0, cursor) + `${input}`.slice(cursor + 1);\n    return this.complete();\n  }\n\n  number(ch) {\n    return this.append(ch);\n  }\n\n  async complete() {\n    this.completing = true;\n    this.choices = await this.suggest(this.input, this.state._choices);\n    this.state.limit = void 0; // allow getter/setter to reset limit\n\n    this.index = Math.min(Math.max(this.visible.length - 1, 0), this.index);\n    await this.render();\n    this.completing = false;\n  }\n\n  suggest(input = this.input, choices = this.state._choices) {\n    if (typeof this.options.suggest === 'function') {\n      return this.options.suggest.call(this, input, choices);\n    }\n\n    let str = input.toLowerCase();\n    return choices.filter(ch => ch.message.toLowerCase().includes(str));\n  }\n\n  pointer() {\n    return '';\n  }\n\n  format() {\n    if (!this.focused) return this.input;\n\n    if (this.options.multiple && this.state.submitted) {\n      return this.selected.map(ch => this.styles.primary(ch.message)).join(', ');\n    }\n\n    if (this.state.submitted) {\n      let value = this.value = this.input = this.focused.value;\n      return this.styles.primary(value);\n    }\n\n    return this.input;\n  }\n\n  async render() {\n    if (this.state.status !== 'pending') return super.render();\n    let style = this.options.highlight ? this.options.highlight.bind(this) : this.styles.placeholder;\n    let color = highlight(this.input, style);\n    let choices = this.choices;\n    this.choices = choices.map(ch => ({ ...ch,\n      message: color(ch.message)\n    }));\n    await super.render();\n    this.choices = choices;\n  }\n\n  submit() {\n    if (this.options.multiple) {\n      this.value = this.selected.map(ch => ch.name);\n    }\n\n    return super.submit();\n  }\n\n}\n\nmodule.exports = AutoComplete;","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/lib/prompts/autocomplete.js"],"names":["Select","require","highlight","input","color","val","toLowerCase","str","s","i","indexOf","colored","slice","length","AutoComplete","constructor","options","cursorShow","moveCursor","n","state","cursor","dispatch","ch","append","space","multiple","complete","delete","alert","deleteForward","number","completing","choices","suggest","_choices","limit","index","Math","min","max","visible","render","call","filter","message","includes","pointer","format","focused","submitted","selected","map","styles","primary","join","value","status","style","bind","placeholder","submit","name","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Select = require('./select');\n\nconst highlight = (input, color) => {\n  let val = input.toLowerCase();\n  return str => {\n    let s = str.toLowerCase();\n    let i = s.indexOf(val);\n    let colored = color(str.slice(i, i + val.length));\n    return i >= 0 ? str.slice(0, i) + colored + str.slice(i + val.length) : str;\n  };\n};\n\nclass AutoComplete extends Select {\n  constructor(options) {\n    super(options);\n    this.cursorShow();\n  }\n\n  moveCursor(n) {\n    this.state.cursor += n;\n  }\n\n  dispatch(ch) {\n    return this.append(ch);\n  }\n\n  space(ch) {\n    return this.options.multiple ? super.space(ch) : this.append(ch);\n  }\n\n  append(ch) {\n    let { cursor, input } = this.state;\n    this.input = input.slice(0, cursor) + ch + input.slice(cursor);\n    this.moveCursor(1);\n    return this.complete();\n  }\n\n  delete() {\n    let { cursor, input } = this.state;\n    if (!input) return this.alert();\n    this.input = input.slice(0, cursor - 1) + input.slice(cursor);\n    this.moveCursor(-1);\n    return this.complete();\n  }\n\n  deleteForward() {\n    let { cursor, input } = this.state;\n    if (input[cursor] === void 0) return this.alert();\n    this.input = `${input}`.slice(0, cursor) + `${input}`.slice(cursor + 1);\n    return this.complete();\n  }\n\n  number(ch) {\n    return this.append(ch);\n  }\n\n  async complete() {\n    this.completing = true;\n    this.choices = await this.suggest(this.input, this.state._choices);\n    this.state.limit = void 0; // allow getter/setter to reset limit\n    this.index = Math.min(Math.max(this.visible.length - 1, 0), this.index);\n    await this.render();\n    this.completing = false;\n  }\n\n  suggest(input = this.input, choices = this.state._choices) {\n    if (typeof this.options.suggest === 'function') {\n      return this.options.suggest.call(this, input, choices);\n    }\n    let str = input.toLowerCase();\n    return choices.filter(ch => ch.message.toLowerCase().includes(str));\n  }\n\n  pointer() {\n    return '';\n  }\n\n  format() {\n    if (!this.focused) return this.input;\n    if (this.options.multiple && this.state.submitted) {\n      return this.selected.map(ch => this.styles.primary(ch.message)).join(', ');\n    }\n    if (this.state.submitted) {\n      let value = this.value = this.input = this.focused.value;\n      return this.styles.primary(value);\n    }\n    return this.input;\n  }\n\n  async render() {\n    if (this.state.status !== 'pending') return super.render();\n    let style = this.options.highlight\n      ? this.options.highlight.bind(this)\n      : this.styles.placeholder;\n\n    let color = highlight(this.input, style);\n    let choices = this.choices;\n    this.choices = choices.map(ch => ({ ...ch, message: color(ch.message) }));\n    await super.render();\n    this.choices = choices;\n  }\n\n  submit() {\n    if (this.options.multiple) {\n      this.value = this.selected.map(ch => ch.name);\n    }\n    return super.submit();\n  }\n}\n\nmodule.exports = AutoComplete;\n"]},"metadata":{},"sourceType":"script"}