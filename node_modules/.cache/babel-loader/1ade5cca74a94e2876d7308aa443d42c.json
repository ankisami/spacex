{"ast":null,"code":"'use strict';\n\nconst hint = '(Use <shift>+<up/down> to sort)';\n\nconst Prompt = require('./select');\n\nclass Sort extends Prompt {\n  constructor(options) {\n    super({ ...options,\n      reorder: false,\n      sort: true,\n      multiple: true\n    });\n    this.state.hint = [this.options.hint, hint].find(this.isValue.bind(this));\n  }\n\n  indicator() {\n    return '';\n  }\n\n  async renderChoice(choice, i) {\n    let str = await super.renderChoice(choice, i);\n    let sym = this.symbols.identicalTo + ' ';\n    let pre = this.index === i && this.sorting ? this.styles.muted(sym) : '  ';\n    if (this.options.drag === false) pre = '';\n\n    if (this.options.numbered === true) {\n      return pre + `${i + 1} - ` + str;\n    }\n\n    return pre + str;\n  }\n\n  get selected() {\n    return this.choices;\n  }\n\n  submit() {\n    this.value = this.choices.map(choice => choice.value);\n    return super.submit();\n  }\n\n}\n\nmodule.exports = Sort;","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/lib/prompts/sort.js"],"names":["hint","Prompt","require","Sort","constructor","options","reorder","sort","multiple","state","find","isValue","bind","indicator","renderChoice","choice","i","str","sym","symbols","identicalTo","pre","index","sorting","styles","muted","drag","numbered","selected","choices","submit","value","map","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAG,iCAAb;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMC,IAAN,SAAmBF,MAAnB,CAA0B;AACxBG,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAM,EAAE,GAAGA,OAAL;AAAcC,MAAAA,OAAO,EAAE,KAAvB;AAA8BC,MAAAA,IAAI,EAAE,IAApC;AAA0CC,MAAAA,QAAQ,EAAE;AAApD,KAAN;AACA,SAAKC,KAAL,CAAWT,IAAX,GAAkB,CAAC,KAAKK,OAAL,CAAaL,IAAd,EAAoBA,IAApB,EAA0BU,IAA1B,CAA+B,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAA/B,CAAlB;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,WAAO,EAAP;AACD;;AAEiB,QAAZC,YAAY,CAACC,MAAD,EAASC,CAAT,EAAY;AAC5B,QAAIC,GAAG,GAAG,MAAM,MAAMH,YAAN,CAAmBC,MAAnB,EAA2BC,CAA3B,CAAhB;AACA,QAAIE,GAAG,GAAG,KAAKC,OAAL,CAAaC,WAAb,GAA2B,GAArC;AACA,QAAIC,GAAG,GAAI,KAAKC,KAAL,KAAeN,CAAf,IAAoB,KAAKO,OAA1B,GAAqC,KAAKC,MAAL,CAAYC,KAAZ,CAAkBP,GAAlB,CAArC,GAA8D,IAAxE;AACA,QAAI,KAAKb,OAAL,CAAaqB,IAAb,KAAsB,KAA1B,EAAiCL,GAAG,GAAG,EAAN;;AACjC,QAAI,KAAKhB,OAAL,CAAasB,QAAb,KAA0B,IAA9B,EAAoC;AAClC,aAAON,GAAG,GAAI,GAAEL,CAAC,GAAG,CAAE,KAAf,GAAsBC,GAA7B;AACD;;AACD,WAAOI,GAAG,GAAGJ,GAAb;AACD;;AAEW,MAARW,QAAQ,GAAG;AACb,WAAO,KAAKC,OAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,SAAKC,KAAL,GAAa,KAAKF,OAAL,CAAaG,GAAb,CAAiBjB,MAAM,IAAIA,MAAM,CAACgB,KAAlC,CAAb;AACA,WAAO,MAAMD,MAAN,EAAP;AACD;;AA5BuB;;AA+B1BG,MAAM,CAACC,OAAP,GAAiB/B,IAAjB","sourcesContent":["'use strict';\n\nconst hint = '(Use <shift>+<up/down> to sort)';\nconst Prompt = require('./select');\n\nclass Sort extends Prompt {\n  constructor(options) {\n    super({ ...options, reorder: false, sort: true, multiple: true });\n    this.state.hint = [this.options.hint, hint].find(this.isValue.bind(this));\n  }\n\n  indicator() {\n    return '';\n  }\n\n  async renderChoice(choice, i) {\n    let str = await super.renderChoice(choice, i);\n    let sym = this.symbols.identicalTo + ' ';\n    let pre = (this.index === i && this.sorting) ? this.styles.muted(sym) : '  ';\n    if (this.options.drag === false) pre = '';\n    if (this.options.numbered === true) {\n      return pre + `${i + 1} - ` + str;\n    }\n    return pre + str;\n  }\n\n  get selected() {\n    return this.choices;\n  }\n\n  submit() {\n    this.value = this.choices.map(choice => choice.value);\n    return super.submit();\n  }\n}\n\nmodule.exports = Sort;\n"]},"metadata":{},"sourceType":"script"}