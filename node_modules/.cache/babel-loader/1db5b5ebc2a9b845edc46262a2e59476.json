{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar debug = require('debug')('axon:req');\n\nvar queue = require('../plugins/queue');\n\nvar slice = require('../utils').slice;\n\nvar Message = require('amp-message');\n\nvar Socket = require('./sock');\n/**\n * Expose `ReqSocket`.\n */\n\n\nmodule.exports = ReqSocket;\n/**\n * Initialize a new `ReqSocket`.\n *\n * @api private\n */\n\nfunction ReqSocket() {\n  Socket.call(this);\n  this.n = 0;\n  this.ids = 0;\n  this.callbacks = {};\n  this.identity = this.get('identity');\n  this.use(queue());\n}\n/**\n * Inherits from `Socket.prototype`.\n */\n\n\nReqSocket.prototype.__proto__ = Socket.prototype;\n/**\n * Return a message id.\n *\n * @return {String}\n * @api private\n */\n\nReqSocket.prototype.id = function () {\n  return this.identity + ':' + this.ids++;\n};\n/**\n * Emits the \"message\" event with all message parts\n * after the null delimeter part.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, multipart)\n * @api private\n */\n\n\nReqSocket.prototype.onmessage = function () {\n  var self = this;\n  return function (buf) {\n    var msg = new Message(buf);\n    var id = msg.pop();\n    var fn = self.callbacks[id];\n    if (!fn) return debug('missing callback %s', id);\n    fn.apply(null, msg.args);\n    delete self.callbacks[id];\n  };\n};\n/**\n * Sends `msg` to the remote peers. Appends\n * the null message part prior to sending.\n *\n * @param {Mixed} msg\n * @api public\n */\n\n\nReqSocket.prototype.send = function (msg) {\n  var socks = this.socks;\n  var len = socks.length;\n  var sock = socks[this.n++ % len];\n  var args = slice(arguments);\n\n  if (sock) {\n    var hasCallback = 'function' == typeof args[args.length - 1];\n    if (!hasCallback) args.push(function () {});\n    var fn = args.pop();\n    fn.id = this.id();\n    this.callbacks[fn.id] = fn;\n    args.push(fn.id);\n  }\n\n  if (sock) {\n    sock.write(this.pack(args));\n  } else {\n    debug('no connected peers');\n    this.enqueue(args);\n  }\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/@pm2/agent/node_modules/pm2-axon/lib/sockets/req.js"],"names":["debug","require","queue","slice","Message","Socket","module","exports","ReqSocket","call","n","ids","callbacks","identity","get","use","prototype","__proto__","id","onmessage","self","buf","msg","pop","fn","apply","args","send","socks","len","length","sock","arguments","hasCallback","push","write","pack","enqueue"],"mappings":"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","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('axon:req');\nvar queue = require('../plugins/queue');\nvar slice = require('../utils').slice;\nvar Message = require('amp-message');\nvar Socket = require('./sock');\n\n/**\n * Expose `ReqSocket`.\n */\n\nmodule.exports = ReqSocket;\n\n/**\n * Initialize a new `ReqSocket`.\n *\n * @api private\n */\n\nfunction ReqSocket() {\n  Socket.call(this);\n  this.n = 0;\n  this.ids = 0;\n  this.callbacks = {};\n  this.identity = this.get('identity');\n  this.use(queue());\n}\n\n/**\n * Inherits from `Socket.prototype`.\n */\n\nReqSocket.prototype.__proto__ = Socket.prototype;\n\n/**\n * Return a message id.\n *\n * @return {String}\n * @api private\n */\n\nReqSocket.prototype.id = function(){\n  return this.identity + ':' + this.ids++;\n};\n\n/**\n * Emits the \"message\" event with all message parts\n * after the null delimeter part.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, multipart)\n * @api private\n */\n\nReqSocket.prototype.onmessage = function(){\n  var self = this;\n\n  return function(buf){\n    var msg = new Message(buf);\n    var id = msg.pop();\n    var fn = self.callbacks[id];\n    if (!fn) return debug('missing callback %s', id);\n    fn.apply(null, msg.args);\n    delete self.callbacks[id];\n  };\n};\n\n/**\n * Sends `msg` to the remote peers. Appends\n * the null message part prior to sending.\n *\n * @param {Mixed} msg\n * @api public\n */\n\nReqSocket.prototype.send = function(msg){\n  var socks = this.socks;\n  var len = socks.length;\n  var sock = socks[this.n++ % len];\n  var args = slice(arguments);\n\n  if (sock) {\n    var hasCallback = 'function' == typeof args[args.length - 1];\n    if (!hasCallback) args.push(function(){});\n    var fn = args.pop();\n    fn.id = this.id();\n    this.callbacks[fn.id] = fn;\n    args.push(fn.id);\n  }\n\n  if (sock) {\n    sock.write(this.pack(args));\n  } else {\n    debug('no connected peers');\n    this.enqueue(args);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}