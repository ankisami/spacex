{"ast":null,"code":"const util = require('util');\n\nconst spawn = require('child_process').spawn;\n\nconst DockerMgmt = {};\nmodule.exports = DockerMgmt;\n\nfunction execDocker(cmd, cb) {\n  var i = spawn('docker', cmd, {\n    stdio: 'inherit',\n    env: process.env,\n    shell: true\n  });\n  i.on('close', cb);\n}\n\nDockerMgmt.processCommand = function (PM2, start_id, select_id, action, cb) {\n  PM2.Client.executeRemote('getSystemData', {}, (err, sys_infos) => {\n    if (sys_infos.containers && sys_infos.containers.length == 0) return cb(new Error(`Process ${select_id} not found`));\n    var container = sys_infos.containers[select_id - start_id - 1];\n    if (action == 'stopProcessId') execDocker(['stop', container.id], cb);\n    if (action == 'deleteProcessId') execDocker(['rm', container.id], cb);\n    if (action == 'restartProcessId') execDocker(['restart', container.id], cb);\n  });\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/API/ExtraMgmt/Docker.js"],"names":["util","require","spawn","DockerMgmt","module","exports","execDocker","cmd","cb","i","stdio","env","process","shell","on","processCommand","PM2","start_id","select_id","action","Client","executeRemote","err","sys_infos","containers","length","Error","container","id"],"mappings":"AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBC,KAAvC;;AACA,MAAMC,UAAU,GAAG,EAAnB;AAEAC,MAAM,CAACC,OAAP,GAAiBF,UAAjB;;AAEA,SAASG,UAAT,CAAoBC,GAApB,EAAyBC,EAAzB,EAA6B;AAC3B,MAAIC,CAAC,GAAGP,KAAK,CAAC,QAAD,EAAWK,GAAX,EAAgB;AAC3BG,IAAAA,KAAK,EAAG,SADmB;AAE3BC,IAAAA,GAAG,EAAEC,OAAO,CAACD,GAFc;AAG7BE,IAAAA,KAAK,EAAG;AAHqB,GAAhB,CAAb;AAMAJ,EAAAA,CAAC,CAACK,EAAF,CAAK,OAAL,EAAcN,EAAd;AACD;;AAEDL,UAAU,CAACY,cAAX,GAA4B,UAASC,GAAT,EAAcC,QAAd,EAAwBC,SAAxB,EAAmCC,MAAnC,EAA2CX,EAA3C,EAA+C;AACzEQ,EAAAA,GAAG,CAACI,MAAJ,CAAWC,aAAX,CAAyB,eAAzB,EAA0C,EAA1C,EAA8C,CAACC,GAAD,EAAMC,SAAN,KAAoB;AAChE,QAAIA,SAAS,CAACC,UAAV,IAAwBD,SAAS,CAACC,UAAV,CAAqBC,MAArB,IAA+B,CAA3D,EACE,OAAOjB,EAAE,CAAC,IAAIkB,KAAJ,CAAW,WAAUR,SAAU,YAA/B,CAAD,CAAT;AACF,QAAIS,SAAS,GAAGJ,SAAS,CAACC,UAAV,CAAqBN,SAAS,GAAGD,QAAZ,GAAuB,CAA5C,CAAhB;AACA,QAAIE,MAAM,IAAI,eAAd,EACEb,UAAU,CAAC,CAAC,MAAD,EAASqB,SAAS,CAACC,EAAnB,CAAD,EAAyBpB,EAAzB,CAAV;AACF,QAAIW,MAAM,IAAI,iBAAd,EACEb,UAAU,CAAC,CAAC,IAAD,EAAOqB,SAAS,CAACC,EAAjB,CAAD,EAAuBpB,EAAvB,CAAV;AACF,QAAIW,MAAM,IAAI,kBAAd,EACEb,UAAU,CAAC,CAAC,SAAD,EAAYqB,SAAS,CAACC,EAAtB,CAAD,EAA4BpB,EAA5B,CAAV;AACH,GAVD;AAWD,CAZD","sourcesContent":["\nconst util = require('util')\nconst spawn = require('child_process').spawn\nconst DockerMgmt = {}\n\nmodule.exports = DockerMgmt\n\nfunction execDocker(cmd, cb) {\n  var i = spawn('docker', cmd, {\n    stdio : 'inherit',\n    env: process.env,\n\t\tshell : true\n  })\n\n  i.on('close', cb)\n}\n\nDockerMgmt.processCommand = function(PM2, start_id, select_id, action, cb) {\n  PM2.Client.executeRemote('getSystemData', {}, (err, sys_infos) => {\n    if (sys_infos.containers && sys_infos.containers.length == 0)\n      return cb(new Error(`Process ${select_id} not found`))\n    var container = sys_infos.containers[select_id - start_id - 1]\n    if (action == 'stopProcessId')\n      execDocker(['stop', container.id], cb)\n    if (action == 'deleteProcessId')\n      execDocker(['rm', container.id], cb)\n    if (action == 'restartProcessId')\n      execDocker(['restart', container.id], cb)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}