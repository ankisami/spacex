{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// processes.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 10. Processes\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst exec = require('child_process').exec;\n\nconst execSync = require('child_process').execSync;\n\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = _platform === 'linux';\n\nconst _darwin = _platform === 'darwin';\n\nconst _windows = _platform === 'win32';\n\nconst _freebsd = _platform === 'freebsd';\n\nconst _openbsd = _platform === 'openbsd';\n\nconst _netbsd = _platform === 'netbsd';\n\nconst _sunos = _platform === 'sunos';\n\nconst _processes_cpu = {\n  all: 0,\n  list: {},\n  ms: 0,\n  result: {}\n};\nconst _services_cpu = {\n  all: 0,\n  list: {},\n  ms: 0,\n  result: {}\n};\nconst _process_cpu = {\n  all: 0,\n  list: {},\n  ms: 0,\n  result: {}\n};\nconst _winStatusValues = {\n  '0': 'unknown',\n  '1': 'other',\n  '2': 'ready',\n  '3': 'running',\n  '4': 'blocked',\n  '5': 'suspended blocked',\n  '6': 'suspended ready',\n  '7': 'terminated',\n  '8': 'stopped',\n  '9': 'growing'\n};\n\nfunction parseTimeWin(time) {\n  time = time || '';\n\n  if (time) {\n    return time.substr(0, 4) + '-' + time.substr(4, 2) + '-' + time.substr(6, 2) + ' ' + time.substr(8, 2) + ':' + time.substr(10, 2) + ':' + time.substr(12, 2);\n  } else {\n    return '';\n  }\n}\n\nfunction parseTimeUnix(time) {\n  let result = time;\n  let parts = time.replace(/ +/g, ' ').split(' ');\n\n  if (parts.length === 5) {\n    result = parts[4] + '-' + ('0' + ('JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'.indexOf(parts[1].toUpperCase()) / 3 + 1)).slice(-2) + '-' + ('0' + parts[2]).slice(-2) + ' ' + parts[3];\n  }\n\n  return result;\n} // --------------------------\n// PS - services\n// pass a comma separated string with services to check (mysql, apache, postgresql, ...)\n// this function gives an array back, if the services are running.\n\n\nfunction services(srv, callback) {\n  // fallback - if only callback is given\n  if (util.isFunction(srv) && !callback) {\n    callback = srv;\n    srv = '';\n  }\n\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      if (srv) {\n        let srvString = util.sanitizeShellString(srv);\n        srvString = srvString.trim().toLowerCase().replace(/, /g, '|').replace(/,+/g, '|');\n\n        if (srvString === '') {\n          srvString = '*';\n        }\n\n        let srvs = srvString.split('|');\n        let result = [];\n        let dataSrv = [];\n        let allSrv = [];\n\n        if (_linux || _freebsd || _openbsd || _netbsd || _darwin) {\n          if ((_linux || _freebsd || _openbsd || _netbsd) && srvString === '*') {\n            srvString = '';\n            let tmpsrv = execSync('service --status-all 2> /dev/null').toString().split('\\n');\n\n            for (const s of tmpsrv) {\n              const parts = s.split(']');\n\n              if (parts.length === 2) {\n                srvString += (srvString !== '' ? '|' : '') + parts[1].trim();\n                allSrv.push({\n                  name: parts[1].trim(),\n                  running: parts[0].indexOf('+') > 0\n                });\n              }\n            }\n\n            srvs = srvString.split('|');\n          }\n\n          let comm = _darwin ? 'ps -caxo pcpu,pmem,pid,command' : 'ps -axo pcpu,pmem,pid,command';\n\n          if (srvString !== '' && srvs.length > 0) {\n            exec(comm + ' | grep -v grep | grep -iE \"' + srvString + '\"', {\n              maxBuffer: 1024 * 20000\n            }, function (error, stdout) {\n              if (!error) {\n                let lines = stdout.toString().replace(/ +/g, ' ').replace(/,+/g, '.').split('\\n');\n                srvs.forEach(function (srv) {\n                  let ps;\n\n                  if (_darwin) {\n                    ps = lines.filter(function (e) {\n                      return e.toLowerCase().indexOf(srv) !== -1;\n                    });\n                  } else {\n                    ps = lines.filter(function (e) {\n                      return e.toLowerCase().indexOf(' ' + srv + ':') !== -1 || e.toLowerCase().indexOf('/' + srv) !== -1;\n                    });\n                  }\n\n                  let singleSrv = allSrv.filter(item => {\n                    return item.name === srv;\n                  });\n                  const pids = [];\n\n                  for (const p of ps) {\n                    const pid = p.trim().split(' ')[2];\n\n                    if (pid) {\n                      pids.push(parseInt(pid, 10));\n                    }\n                  }\n\n                  result.push({\n                    name: srv,\n                    running: allSrv.length && singleSrv.length ? singleSrv[0].running : ps.length > 0,\n                    startmode: '',\n                    pids: pids,\n                    pcpu: parseFloat(ps.reduce(function (pv, cv) {\n                      return pv + parseFloat(cv.trim().split(' ')[0]);\n                    }, 0).toFixed(2)),\n                    pmem: parseFloat(ps.reduce(function (pv, cv) {\n                      return pv + parseFloat(cv.trim().split(' ')[1]);\n                    }, 0).toFixed(2))\n                  });\n                });\n\n                if (_linux) {\n                  // calc process_cpu - ps is not accurate in linux!\n                  let cmd = 'cat /proc/stat | grep \"cpu \"';\n\n                  for (let i in result) {\n                    for (let j in result[i].pids) {\n                      cmd += ';cat /proc/' + result[i].pids[j] + '/stat';\n                    }\n                  }\n\n                  exec(cmd, {\n                    maxBuffer: 1024 * 20000\n                  }, function (error, stdout) {\n                    let curr_processes = stdout.toString().split('\\n'); // first line (all - /proc/stat)\n\n                    let all = parseProcStat(curr_processes.shift()); // process\n\n                    let list_new = {};\n                    let resultProcess = {};\n\n                    for (let i = 0; i < curr_processes.length; i++) {\n                      resultProcess = calcProcStatLinux(curr_processes[i], all, _services_cpu);\n\n                      if (resultProcess.pid) {\n                        let listPos = -1;\n\n                        for (let i in result) {\n                          for (let j in result[i].pids) {\n                            if (parseInt(result[i].pids[j]) === parseInt(resultProcess.pid)) {\n                              listPos = i;\n                            }\n                          }\n                        }\n\n                        if (listPos >= 0) {\n                          result[listPos].pcpu += resultProcess.pcpuu + resultProcess.pcpus;\n                        } // save new values\n\n\n                        list_new[resultProcess.pid] = {\n                          pcpuu: resultProcess.pcpuu,\n                          pcpus: resultProcess.pcpus,\n                          utime: resultProcess.utime,\n                          stime: resultProcess.stime,\n                          cutime: resultProcess.cutime,\n                          cstime: resultProcess.cstime\n                        };\n                      }\n                    } // store old values\n\n\n                    _services_cpu.all = all; // _services_cpu.list = list_new;\n\n                    _services_cpu.list = Object.assign({}, list_new);\n                    _services_cpu.ms = Date.now() - _services_cpu.ms; // _services_cpu.result = result;\n\n                    _services_cpu.result = Object.assign({}, result);\n\n                    if (callback) {\n                      callback(result);\n                    }\n\n                    resolve(result);\n                  });\n                } else {\n                  if (callback) {\n                    callback(result);\n                  }\n\n                  resolve(result);\n                }\n              } else {\n                exec('ps -o comm | grep -v grep | egrep \"' + srvString + '\"', {\n                  maxBuffer: 1024 * 20000\n                }, function (error, stdout) {\n                  if (!error) {\n                    let lines = stdout.toString().replace(/ +/g, ' ').replace(/,+/g, '.').split('\\n');\n                    srvs.forEach(function (srv) {\n                      let ps = lines.filter(function (e) {\n                        return e.indexOf(srv) !== -1;\n                      });\n                      result.push({\n                        name: srv,\n                        running: ps.length > 0,\n                        startmode: '',\n                        pcpu: 0,\n                        pmem: 0\n                      });\n                    });\n\n                    if (callback) {\n                      callback(result);\n                    }\n\n                    resolve(result);\n                  } else {\n                    srvs.forEach(function (srv) {\n                      result.push({\n                        name: srv,\n                        running: false,\n                        startmode: '',\n                        pcpu: 0,\n                        pmem: 0\n                      });\n                    });\n\n                    if (callback) {\n                      callback(result);\n                    }\n\n                    resolve(result);\n                  }\n                });\n              }\n            });\n          } else {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        }\n\n        if (_windows) {\n          try {\n            util.wmic('service get /value').then((stdout, error) => {\n              if (!error) {\n                let serviceSections = stdout.split(/\\n\\s*\\n/);\n\n                for (let i = 0; i < serviceSections.length; i++) {\n                  if (serviceSections[i].trim() !== '') {\n                    let lines = serviceSections[i].trim().split('\\r\\n');\n                    let srvName = util.getValue(lines, 'Name', '=', true).toLowerCase();\n                    let started = util.getValue(lines, 'Started', '=', true);\n                    let startMode = util.getValue(lines, 'StartMode', '=', true);\n                    let pid = util.getValue(lines, 'ProcessId', '=', true);\n\n                    if (srvString === '*' || srvs.indexOf(srvName) >= 0) {\n                      result.push({\n                        name: srvName,\n                        running: started === 'TRUE',\n                        startmode: startMode,\n                        pids: [pid],\n                        pcpu: 0,\n                        pmem: 0\n                      });\n                      dataSrv.push(srvName);\n                    }\n                  }\n                }\n\n                if (srvString !== '*') {\n                  let srvsMissing = srvs.filter(function (e) {\n                    return dataSrv.indexOf(e) === -1;\n                  });\n                  srvsMissing.forEach(function (srvName) {\n                    result.push({\n                      name: srvName,\n                      running: false,\n                      startmode: '',\n                      pids: [],\n                      pcpu: 0,\n                      pmem: 0\n                    });\n                  });\n                }\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              } else {\n                srvs.forEach(function (srvName) {\n                  result.push({\n                    name: srvName,\n                    running: false,\n                    startmode: '',\n                    pcpu: 0,\n                    pmem: 0\n                  });\n                });\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              }\n            });\n          } catch (e) {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        }\n      } else {\n        if (callback) {\n          callback({});\n        }\n\n        resolve({});\n      }\n    });\n  });\n}\n\nexports.services = services;\n\nfunction parseProcStat(line) {\n  let parts = line.replace(/ +/g, ' ').split(' ');\n  let user = parts.length >= 2 ? parseInt(parts[1]) : 0;\n  let nice = parts.length >= 3 ? parseInt(parts[2]) : 0;\n  let system = parts.length >= 4 ? parseInt(parts[3]) : 0;\n  let idle = parts.length >= 5 ? parseInt(parts[4]) : 0;\n  let iowait = parts.length >= 6 ? parseInt(parts[5]) : 0;\n  let irq = parts.length >= 7 ? parseInt(parts[6]) : 0;\n  let softirq = parts.length >= 8 ? parseInt(parts[7]) : 0;\n  let steal = parts.length >= 9 ? parseInt(parts[8]) : 0;\n  let guest = parts.length >= 10 ? parseInt(parts[9]) : 0;\n  let guest_nice = parts.length >= 11 ? parseInt(parts[10]) : 0;\n  return user + nice + system + idle + iowait + irq + softirq + steal + guest + guest_nice;\n}\n\nfunction calcProcStatLinux(line, all, _cpu_old) {\n  let statparts = line.replace(/ +/g, ' ').split(')');\n\n  if (statparts.length >= 2) {\n    let parts = statparts[1].split(' ');\n\n    if (parts.length >= 16) {\n      let pid = parseInt(statparts[0].split(' ')[0]);\n      let utime = parseInt(parts[12]);\n      let stime = parseInt(parts[13]);\n      let cutime = parseInt(parts[14]);\n      let cstime = parseInt(parts[15]); // calc\n\n      let pcpuu = 0;\n      let pcpus = 0;\n\n      if (_cpu_old.all > 0 && _cpu_old.list[pid]) {\n        pcpuu = (utime + cutime - _cpu_old.list[pid].utime - _cpu_old.list[pid].cutime) / (all - _cpu_old.all) * 100; // user\n\n        pcpus = (stime + cstime - _cpu_old.list[pid].stime - _cpu_old.list[pid].cstime) / (all - _cpu_old.all) * 100; // system\n      } else {\n        pcpuu = (utime + cutime) / all * 100; // user\n\n        pcpus = (stime + cstime) / all * 100; // system\n      }\n\n      return {\n        pid: pid,\n        utime: utime,\n        stime: stime,\n        cutime: cutime,\n        cstime: cstime,\n        pcpuu: pcpuu,\n        pcpus: pcpus\n      };\n    } else {\n      return {\n        pid: 0,\n        utime: 0,\n        stime: 0,\n        cutime: 0,\n        cstime: 0,\n        pcpuu: 0,\n        pcpus: 0\n      };\n    }\n  } else {\n    return {\n      pid: 0,\n      utime: 0,\n      stime: 0,\n      cutime: 0,\n      cstime: 0,\n      pcpuu: 0,\n      pcpus: 0\n    };\n  }\n}\n\nfunction calcProcStatWin(procStat, all, _cpu_old) {\n  // calc\n  let pcpuu = 0;\n  let pcpus = 0;\n\n  if (_cpu_old.all > 0 && _cpu_old.list[procStat.pid]) {\n    pcpuu = (procStat.utime - _cpu_old.list[procStat.pid].utime) / (all - _cpu_old.all) * 100; // user\n\n    pcpus = (procStat.stime - _cpu_old.list[procStat.pid].stime) / (all - _cpu_old.all) * 100; // system\n  } else {\n    pcpuu = procStat.utime / all * 100; // user\n\n    pcpus = procStat.stime / all * 100; // system\n  }\n\n  return {\n    pid: procStat.pid,\n    utime: procStat.utime,\n    stime: procStat.stime,\n    pcpuu: pcpuu,\n    pcpus: pcpus\n  };\n} // --------------------------\n// running processes\n\n\nfunction processes(callback) {\n  let parsedhead = [];\n\n  function getName(command) {\n    command = command || '';\n    let result = command.split(' ')[0];\n\n    if (result.substr(-1) === ':') {\n      result = result.substr(0, result.length - 1);\n    }\n\n    if (result.substr(0, 1) !== '[') {\n      let parts = result.split('/');\n\n      if (isNaN(parseInt(parts[parts.length - 1]))) {\n        result = parts[parts.length - 1];\n      } else {\n        result = parts[0];\n      }\n    }\n\n    return result;\n  }\n\n  function parseLine(line) {\n    let offset = 0;\n    let offset2 = 0;\n\n    function checkColumn(i) {\n      offset = offset2;\n      offset2 = line.substring(parsedhead[i].to + offset, 1000).indexOf(' ');\n    }\n\n    checkColumn(0);\n    const pid = parseInt(line.substring(parsedhead[0].from + offset, parsedhead[0].to + offset2));\n    checkColumn(1);\n    const ppid = parseInt(line.substring(parsedhead[1].from + offset, parsedhead[1].to + offset2));\n    checkColumn(2);\n    const pcpu = parseFloat(line.substring(parsedhead[2].from + offset, parsedhead[2].to + offset2).replace(/,/g, '.'));\n    checkColumn(3);\n    const pmem = parseFloat(line.substring(parsedhead[3].from + offset, parsedhead[3].to + offset2).replace(/,/g, '.'));\n    checkColumn(4);\n    const priority = parseInt(line.substring(parsedhead[4].from + offset, parsedhead[4].to + offset2));\n    checkColumn(5);\n    const vsz = parseInt(line.substring(parsedhead[5].from + offset, parsedhead[5].to + offset2));\n    checkColumn(6);\n    const rss = parseInt(line.substring(parsedhead[6].from + offset, parsedhead[6].to + offset2));\n    checkColumn(7);\n    const nice = parseInt(line.substring(parsedhead[7].from + offset, parsedhead[7].to + offset2)) || 0;\n    checkColumn(8);\n    const started = parseTimeUnix(line.substring(parsedhead[8].from + offset, parsedhead[8].to + offset2).trim());\n    checkColumn(9);\n    let state = line.substring(parsedhead[9].from + offset, parsedhead[9].to + offset2).trim();\n    state = state[0] === 'R' ? 'running' : state[0] === 'S' ? 'sleeping' : state[0] === 'T' ? 'stopped' : state[0] === 'W' ? 'paging' : state[0] === 'X' ? 'dead' : state[0] === 'Z' ? 'zombie' : state[0] === 'D' || state[0] === 'U' ? 'blocked' : 'unknown';\n    checkColumn(10);\n    let tty = line.substring(parsedhead[10].from + offset, parsedhead[10].to + offset2).trim();\n    if (tty === '?' || tty === '??') tty = '';\n    checkColumn(11);\n    const user = line.substring(parsedhead[11].from + offset, parsedhead[11].to + offset2).trim();\n    checkColumn(12);\n    const fullcommand = line.substring(parsedhead[12].from + offset, parsedhead[12].to + offset2).trim().replace(/\\[/g, '').replace(/]/g, '');\n    let cmdPath = '';\n    let command = '';\n    let params = ''; // try to figure out where parameter starts\n\n    let firstParamPos = fullcommand.indexOf(' -');\n    let firstParamPathPos = fullcommand.indexOf(' /');\n    firstParamPos = firstParamPos >= 0 ? firstParamPos : 10000;\n    firstParamPathPos = firstParamPathPos >= 0 ? firstParamPathPos : 10000;\n    const firstPos = Math.min(firstParamPos, firstParamPathPos);\n    let tmpCommand = fullcommand.substr(0, firstPos);\n    const tmpParams = fullcommand.substr(firstPos);\n    const lastSlashPos = tmpCommand.lastIndexOf('/');\n\n    if (lastSlashPos >= 0) {\n      cmdPath = tmpCommand.substr(0, lastSlashPos);\n      tmpCommand = tmpCommand.substr(lastSlashPos + 1);\n    }\n\n    if (firstPos === 10000 && tmpCommand.indexOf(' ') > -1) {\n      const parts = tmpCommand.split(' ');\n\n      if (fs.existsSync(path.join(cmdPath, parts[0]))) {\n        command = parts.shift();\n        params = (parts.join(' ') + ' ' + tmpParams).trim();\n      } else {\n        command = tmpCommand.trim();\n        params = tmpParams.trim();\n      }\n    } else {\n      command = tmpCommand.trim();\n      params = tmpParams.trim();\n    }\n\n    return {\n      pid: pid,\n      parentPid: ppid,\n      name: _linux ? getName(command) : command,\n      pcpu: pcpu,\n      pcpuu: 0,\n      pcpus: 0,\n      pmem: pmem,\n      priority: priority,\n      mem_vsz: vsz,\n      mem_rss: rss,\n      nice: nice,\n      started: started,\n      state: state,\n      tty: tty,\n      user: user,\n      command: command,\n      params: params,\n      path: cmdPath\n    };\n  }\n\n  function parseProcesses(lines) {\n    let result = [];\n\n    if (lines.length > 1) {\n      let head = lines[0];\n      parsedhead = util.parseHead(head, 8);\n      lines.shift();\n      lines.forEach(function (line) {\n        if (line.trim() !== '') {\n          result.push(parseLine(line));\n        }\n      });\n    }\n\n    return result;\n  }\n\n  function parseProcesses2(lines) {\n    function formatDateTime(time) {\n      const month = ('0' + (time.getMonth() + 1).toString()).substr(-2);\n      const year = time.getFullYear().toString();\n      const day = ('0' + time.getDay().toString()).substr(-2);\n      const hours = time.getHours().toString();\n      const mins = time.getMinutes().toString();\n      const secs = ('0' + time.getSeconds().toString()).substr(-2);\n      return year + '-' + month + '-' + day + ' ' + hours + ':' + mins + ':' + secs;\n    }\n\n    let result = [];\n    lines.forEach(function (line) {\n      if (line.trim() !== '') {\n        line = line.trim().replace(/ +/g, ' ').replace(/,+/g, '.');\n        const parts = line.split(' ');\n        const command = parts.slice(9).join(' ');\n        const pmem = parseFloat((1.0 * parseInt(parts[3]) * 1024 / os.totalmem()).toFixed(1));\n        const elapsed_parts = parts[5].split(':');\n        const started = formatDateTime(new Date(Date.now() - (elapsed_parts.length > 1 ? (elapsed_parts[0] * 60 + elapsed_parts[1]) * 1000 : elapsed_parts[0] * 1000)));\n        result.push({\n          pid: parseInt(parts[0]),\n          parentPid: parseInt(parts[1]),\n          name: getName(command),\n          pcpu: 0,\n          pcpuu: 0,\n          pcpus: 0,\n          pmem: pmem,\n          priority: 0,\n          mem_vsz: parseInt(parts[2]),\n          mem_rss: parseInt(parts[3]),\n          nice: parseInt(parts[4]),\n          started: started,\n          state: parts[6] === 'R' ? 'running' : parts[6] === 'S' ? 'sleeping' : parts[6] === 'T' ? 'stopped' : parts[6] === 'W' ? 'paging' : parts[6] === 'X' ? 'dead' : parts[6] === 'Z' ? 'zombie' : parts[6] === 'D' || parts[6] === 'U' ? 'blocked' : 'unknown',\n          tty: parts[7],\n          user: parts[8],\n          command: command\n        });\n      }\n    });\n    return result;\n  }\n\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = {\n        all: 0,\n        running: 0,\n        blocked: 0,\n        sleeping: 0,\n        unknown: 0,\n        list: []\n      };\n      let cmd = '';\n\n      if (_processes_cpu.ms && Date.now() - _processes_cpu.ms >= 500 || _processes_cpu.ms === 0) {\n        if (_linux || _freebsd || _openbsd || _netbsd || _darwin || _sunos) {\n          if (_linux) cmd = 'export LC_ALL=C; ps -axo pid:11,ppid:11,pcpu:6,pmem:6,pri:5,vsz:11,rss:11,ni:5,lstart:30,state:5,tty:15,user:20,command; unset LC_ALL';\n          if (_freebsd || _openbsd || _netbsd) cmd = 'export LC_ALL=C; ps -axo pid,ppid,pcpu,pmem,pri,vsz,rss,ni,lstart,state,tty,user,command; unset LC_ALL';\n          if (_darwin) cmd = 'export LC_ALL=C; ps -axo pid,ppid,pcpu,pmem,pri,vsz,rss,nice,lstart,state,tty,user,command -r; unset LC_ALL';\n          if (_sunos) cmd = 'ps -Ao pid,ppid,pcpu,pmem,pri,vsz,rss,nice,stime,s,tty,user,comm';\n          exec(cmd, {\n            maxBuffer: 1024 * 20000\n          }, function (error, stdout) {\n            if (!error) {\n              result.list = parseProcesses(stdout.toString().split('\\n')).slice();\n              result.all = result.list.length;\n              result.running = result.list.filter(function (e) {\n                return e.state === 'running';\n              }).length;\n              result.blocked = result.list.filter(function (e) {\n                return e.state === 'blocked';\n              }).length;\n              result.sleeping = result.list.filter(function (e) {\n                return e.state === 'sleeping';\n              }).length;\n\n              if (_linux) {\n                // calc process_cpu - ps is not accurate in linux!\n                cmd = 'cat /proc/stat | grep \"cpu \"';\n\n                for (let i = 0; i < result.list.length; i++) {\n                  cmd += ';cat /proc/' + result.list[i].pid + '/stat';\n                }\n\n                exec(cmd, {\n                  maxBuffer: 1024 * 20000\n                }, function (error, stdout) {\n                  let curr_processes = stdout.toString().split('\\n'); // first line (all - /proc/stat)\n\n                  let all = parseProcStat(curr_processes.shift()); // process\n\n                  let list_new = {};\n                  let resultProcess = {};\n\n                  for (let i = 0; i < curr_processes.length; i++) {\n                    resultProcess = calcProcStatLinux(curr_processes[i], all, _processes_cpu);\n\n                    if (resultProcess.pid) {\n                      // store pcpu in outer array\n                      let listPos = result.list.map(function (e) {\n                        return e.pid;\n                      }).indexOf(resultProcess.pid);\n\n                      if (listPos >= 0) {\n                        result.list[listPos].pcpu = resultProcess.pcpuu + resultProcess.pcpus;\n                        result.list[listPos].pcpuu = resultProcess.pcpuu;\n                        result.list[listPos].pcpus = resultProcess.pcpus;\n                      } // save new values\n\n\n                      list_new[resultProcess.pid] = {\n                        pcpuu: resultProcess.pcpuu,\n                        pcpus: resultProcess.pcpus,\n                        utime: resultProcess.utime,\n                        stime: resultProcess.stime,\n                        cutime: resultProcess.cutime,\n                        cstime: resultProcess.cstime\n                      };\n                    }\n                  } // store old values\n\n\n                  _processes_cpu.all = all; // _processes_cpu.list = list_new;\n\n                  _processes_cpu.list = Object.assign({}, list_new);\n                  _processes_cpu.ms = Date.now() - _processes_cpu.ms; // _processes_cpu.result = result;\n\n                  _processes_cpu.result = Object.assign({}, result);\n\n                  if (callback) {\n                    callback(result);\n                  }\n\n                  resolve(result);\n                });\n              } else {\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              }\n            } else {\n              cmd = 'ps -o pid,ppid,vsz,rss,nice,etime,stat,tty,user,comm';\n\n              if (_sunos) {\n                cmd = 'ps -o pid,ppid,vsz,rss,nice,etime,s,tty,user,comm';\n              }\n\n              exec(cmd, {\n                maxBuffer: 1024 * 20000\n              }, function (error, stdout) {\n                if (!error) {\n                  let lines = stdout.toString().split('\\n');\n                  lines.shift();\n                  result.list = parseProcesses2(lines).slice();\n                  result.all = result.list.length;\n                  result.running = result.list.filter(function (e) {\n                    return e.state === 'running';\n                  }).length;\n                  result.blocked = result.list.filter(function (e) {\n                    return e.state === 'blocked';\n                  }).length;\n                  result.sleeping = result.list.filter(function (e) {\n                    return e.state === 'sleeping';\n                  }).length;\n\n                  if (callback) {\n                    callback(result);\n                  }\n\n                  resolve(result);\n                } else {\n                  if (callback) {\n                    callback(result);\n                  }\n\n                  resolve(result);\n                }\n              });\n            }\n          });\n        } else if (_windows) {\n          try {\n            util.wmic('process get /value').then((stdout, error) => {\n              if (!error) {\n                let processSections = stdout.split(/\\n\\s*\\n/);\n                let procs = [];\n                let procStats = [];\n                let list_new = {};\n                let allcpuu = 0;\n                let allcpus = 0;\n\n                for (let i = 0; i < processSections.length; i++) {\n                  if (processSections[i].trim() !== '') {\n                    let lines = processSections[i].trim().split('\\r\\n');\n                    let pid = parseInt(util.getValue(lines, 'ProcessId', '=', true), 10);\n                    let parentPid = parseInt(util.getValue(lines, 'ParentProcessId', '=', true), 10);\n                    let statusValue = util.getValue(lines, 'ExecutionState', '=');\n                    let name = util.getValue(lines, 'Caption', '=', true);\n                    let commandLine = util.getValue(lines, 'CommandLine', '=', true);\n                    let commandPath = util.getValue(lines, 'ExecutablePath', '=', true);\n                    let utime = parseInt(util.getValue(lines, 'UserModeTime', '=', true), 10);\n                    let stime = parseInt(util.getValue(lines, 'KernelModeTime', '=', true), 10);\n                    let mem = parseInt(util.getValue(lines, 'WorkingSetSize', '=', true), 10);\n                    allcpuu = allcpuu + utime;\n                    allcpus = allcpus + stime;\n                    result.all++;\n\n                    if (!statusValue) {\n                      result.unknown++;\n                    }\n\n                    if (statusValue === '3') {\n                      result.running++;\n                    }\n\n                    if (statusValue === '4' || statusValue === '5') {\n                      result.blocked++;\n                    }\n\n                    procStats.push({\n                      pid: pid,\n                      utime: utime,\n                      stime: stime,\n                      pcpu: 0,\n                      pcpuu: 0,\n                      pcpus: 0\n                    });\n                    procs.push({\n                      pid: pid,\n                      parentPid: parentPid,\n                      name: name,\n                      pcpu: 0,\n                      pcpuu: 0,\n                      pcpus: 0,\n                      pmem: mem / os.totalmem() * 100,\n                      priority: parseInt(util.getValue(lines, 'Priority', '=', true), 10),\n                      mem_vsz: parseInt(util.getValue(lines, 'PageFileUsage', '=', true), 10),\n                      mem_rss: Math.floor(parseInt(util.getValue(lines, 'WorkingSetSize', '=', true), 10) / 1024),\n                      nice: 0,\n                      started: parseTimeWin(util.getValue(lines, 'CreationDate', '=', true)),\n                      state: !statusValue ? _winStatusValues[0] : _winStatusValues[statusValue],\n                      tty: '',\n                      user: '',\n                      command: commandLine || name,\n                      path: commandPath,\n                      params: ''\n                    });\n                  }\n                }\n\n                result.sleeping = result.all - result.running - result.blocked - result.unknown;\n                result.list = procs;\n\n                for (let i = 0; i < procStats.length; i++) {\n                  let resultProcess = calcProcStatWin(procStats[i], allcpuu + allcpus, _processes_cpu); // store pcpu in outer array\n\n                  let listPos = result.list.map(function (e) {\n                    return e.pid;\n                  }).indexOf(resultProcess.pid);\n\n                  if (listPos >= 0) {\n                    result.list[listPos].pcpu = resultProcess.pcpuu + resultProcess.pcpus;\n                    result.list[listPos].pcpuu = resultProcess.pcpuu;\n                    result.list[listPos].pcpus = resultProcess.pcpus;\n                  } // save new values\n\n\n                  list_new[resultProcess.pid] = {\n                    pcpuu: resultProcess.pcpuu,\n                    pcpus: resultProcess.pcpus,\n                    utime: resultProcess.utime,\n                    stime: resultProcess.stime\n                  };\n                } // store old values\n\n\n                _processes_cpu.all = allcpuu + allcpus; // _processes_cpu.list = list_new;\n\n                _processes_cpu.list = Object.assign({}, list_new);\n                _processes_cpu.ms = Date.now() - _processes_cpu.ms; // _processes_cpu.result = result;\n\n                _processes_cpu.result = Object.assign({}, result);\n              }\n\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            });\n          } catch (e) {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        } else {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      } else {\n        if (callback) {\n          callback(_processes_cpu.result);\n        }\n\n        resolve(_processes_cpu.result);\n      }\n    });\n  });\n}\n\nexports.processes = processes; // --------------------------\n// PS - process load\n// get detailed information about a certain process\n// (PID, CPU-Usage %, Mem-Usage %)\n\nfunction processLoad(proc, callback) {\n  // fallback - if only callback is given\n  if (util.isFunction(proc) && !callback) {\n    callback = proc;\n    proc = '';\n  }\n\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      const procSanitized = util.sanitizeShellString(proc);\n      let result = {\n        'proc': procSanitized,\n        'pid': -1,\n        'cpu': 0,\n        'mem': 0\n      };\n\n      if (procSanitized) {\n        if (_windows) {\n          try {\n            util.wmic('process get /value').then((stdout, error) => {\n              if (!error) {\n                let processSections = stdout.split(/\\n\\s*\\n/);\n                let procStats = [];\n                let list_new = {};\n                let allcpuu = 0;\n                let allcpus = 0;\n\n                for (let i = 0; i < processSections.length; i++) {\n                  if (processSections[i].trim() !== '') {\n                    let lines = processSections[i].trim().split('\\r\\n');\n                    let pid = parseInt(util.getValue(lines, 'ProcessId', '=', true), 10);\n                    let name = util.getValue(lines, 'Caption', '=', true);\n                    let utime = parseInt(util.getValue(lines, 'UserModeTime', '=', true), 10);\n                    let stime = parseInt(util.getValue(lines, 'KernelModeTime', '=', true), 10);\n                    let mem = parseInt(util.getValue(lines, 'WorkingSetSize', '=', true), 10);\n                    allcpuu = allcpuu + utime;\n                    allcpus = allcpus + stime;\n                    procStats.push({\n                      pid: pid,\n                      utime: utime,\n                      stime: stime,\n                      pcpu: 0,\n                      pcpuu: 0,\n                      pcpus: 0\n                    });\n\n                    if (name.toLowerCase().indexOf(procSanitized.toLowerCase()) >= 0) {\n                      if (result.pid === -1) {\n                        result = {\n                          proc: name,\n                          pid: pid,\n                          pids: [pid],\n                          cpu: 0,\n                          mem: mem / os.totalmem() * 100\n                        };\n                      } else {\n                        result.pids.push(pid);\n                        result.mem += mem / os.totalmem() * 100;\n                      }\n                    }\n                  }\n                }\n\n                for (let i = 0; i < procStats.length; i++) {\n                  let resultProcess = calcProcStatWin(procStats[i], allcpuu + allcpus, _process_cpu); // store pcpu in outer array\n\n                  if (result && result.pids && result.pids.length > 0) {\n                    let listPos = result.pids.indexOf(resultProcess.pid);\n\n                    if (listPos >= 0) {\n                      result.cpu = resultProcess.pcpuu + resultProcess.pcpus;\n                    }\n                  } // save new values\n\n\n                  list_new[resultProcess.pid] = {\n                    pcpuu: resultProcess.pcpuu,\n                    pcpus: resultProcess.pcpus,\n                    utime: resultProcess.utime,\n                    stime: resultProcess.stime\n                  };\n                } // store old values\n\n\n                _process_cpu.all = allcpuu + allcpus; // _process_cpu.list = list_new;\n\n                _process_cpu.list = Object.assign({}, list_new);\n                _process_cpu.ms = Date.now() - _process_cpu.ms; // _process_cpu.result = result;\n\n                _process_cpu.result = Object.assign({}, result);\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              }\n            });\n          } catch (e) {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        }\n\n        if (_darwin || _linux) {\n          exec('ps -axo pid,pcpu,pmem,comm | grep -i ' + procSanitized + ' | grep -v grep', {\n            maxBuffer: 1024 * 20000\n          }, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              let pid = 0;\n              let pids = [];\n              let cpu = 0;\n              let mem = 0;\n              lines.forEach(function (line) {\n                let data = line.trim().replace(/ +/g, ' ').split(' ');\n\n                if (data.length > 3) {\n                  pid = !pid ? parseInt(data[0]) : 0;\n                  pids.push(parseInt(data[0], 10));\n                  cpu = cpu + parseFloat(data[1].replace(',', '.'));\n                  mem = mem + parseFloat(data[2].replace(',', '.'));\n                }\n              });\n              result = {\n                'proc': procSanitized,\n                'pid': pid,\n                'pids': pids,\n                'cpu': parseFloat((cpu / lines.length).toFixed(2)),\n                'mem': parseFloat((mem / lines.length).toFixed(2))\n              };\n\n              if (_linux) {\n                // calc process_cpu - ps is not accurate in linux!\n                let cmd = 'cat /proc/stat | grep \"cpu \"';\n\n                for (let i = 0; i < result.pids.length; i++) {\n                  cmd += ';cat /proc/' + result.pids[i] + '/stat';\n                }\n\n                exec(cmd, {\n                  maxBuffer: 1024 * 20000\n                }, function (error, stdout) {\n                  let curr_processes = stdout.toString().split('\\n'); // first line (all - /proc/stat)\n\n                  let all = parseProcStat(curr_processes.shift()); // process\n\n                  let list_new = {};\n                  let resultProcess = {};\n                  result.cpu = 0;\n\n                  for (let i = 0; i < curr_processes.length; i++) {\n                    resultProcess = calcProcStatLinux(curr_processes[i], all, _process_cpu);\n\n                    if (resultProcess.pid) {\n                      // store pcpu in outer result\n                      result.cpu += resultProcess.pcpuu + resultProcess.pcpus; // save new values\n\n                      list_new[resultProcess.pid] = {\n                        pcpuu: resultProcess.pcpuu,\n                        pcpus: resultProcess.pcpus,\n                        utime: resultProcess.utime,\n                        stime: resultProcess.stime,\n                        cutime: resultProcess.cutime,\n                        cstime: resultProcess.cstime\n                      };\n                    }\n                  }\n\n                  result.cpu = Math.round(result.cpu * 100) / 100;\n                  _process_cpu.all = all; // _process_cpu.list = list_new;\n\n                  _process_cpu.list = Object.assign({}, list_new);\n                  _process_cpu.ms = Date.now() - _process_cpu.ms; // _process_cpu.result = result;\n\n                  _process_cpu.result = Object.assign({}, result);\n\n                  if (callback) {\n                    callback(result);\n                  }\n\n                  resolve(result);\n                });\n              } else {\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              }\n            } else {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          });\n        }\n      }\n    });\n  });\n}\n\nexports.processLoad = processLoad;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/processes.js"],"names":["os","require","fs","path","exec","execSync","util","_platform","process","platform","_linux","_darwin","_windows","_freebsd","_openbsd","_netbsd","_sunos","_processes_cpu","all","list","ms","result","_services_cpu","_process_cpu","_winStatusValues","parseTimeWin","time","substr","parseTimeUnix","parts","replace","split","length","indexOf","toUpperCase","slice","services","srv","callback","isFunction","Promise","resolve","nextTick","srvString","sanitizeShellString","trim","toLowerCase","srvs","dataSrv","allSrv","tmpsrv","toString","s","push","name","running","comm","maxBuffer","error","stdout","lines","forEach","ps","filter","e","singleSrv","item","pids","p","pid","parseInt","startmode","pcpu","parseFloat","reduce","pv","cv","toFixed","pmem","cmd","i","j","curr_processes","parseProcStat","shift","list_new","resultProcess","calcProcStatLinux","listPos","pcpuu","pcpus","utime","stime","cutime","cstime","Object","assign","Date","now","wmic","then","serviceSections","srvName","getValue","started","startMode","srvsMissing","exports","line","user","nice","system","idle","iowait","irq","softirq","steal","guest","guest_nice","_cpu_old","statparts","calcProcStatWin","procStat","processes","parsedhead","getName","command","isNaN","parseLine","offset","offset2","checkColumn","substring","to","from","ppid","priority","vsz","rss","state","tty","fullcommand","cmdPath","params","firstParamPos","firstParamPathPos","firstPos","Math","min","tmpCommand","tmpParams","lastSlashPos","lastIndexOf","existsSync","join","parentPid","mem_vsz","mem_rss","parseProcesses","head","parseHead","parseProcesses2","formatDateTime","month","getMonth","year","getFullYear","day","getDay","hours","getHours","mins","getMinutes","secs","getSeconds","totalmem","elapsed_parts","blocked","sleeping","unknown","map","processSections","procs","procStats","allcpuu","allcpus","statusValue","commandLine","commandPath","mem","floor","processLoad","proc","procSanitized","cpu","data","round"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// processes.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 10. Processes\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst fs = require('fs');\nconst path = require('path');\nconst exec = require('child_process').exec;\nconst execSync = require('child_process').execSync;\n\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nconst _processes_cpu = {\n  all: 0,\n  list: {},\n  ms: 0,\n  result: {}\n};\nconst _services_cpu = {\n  all: 0,\n  list: {},\n  ms: 0,\n  result: {}\n};\nconst _process_cpu = {\n  all: 0,\n  list: {},\n  ms: 0,\n  result: {}\n};\n\nconst _winStatusValues = {\n  '0': 'unknown',\n  '1': 'other',\n  '2': 'ready',\n  '3': 'running',\n  '4': 'blocked',\n  '5': 'suspended blocked',\n  '6': 'suspended ready',\n  '7': 'terminated',\n  '8': 'stopped',\n  '9': 'growing',\n};\n\n\nfunction parseTimeWin(time) {\n  time = time || '';\n  if (time) {\n    return (time.substr(0, 4) + '-' + time.substr(4, 2) + '-' + time.substr(6, 2) + ' ' + time.substr(8, 2) + ':' + time.substr(10, 2) + ':' + time.substr(12, 2));\n  } else {\n    return '';\n  }\n}\n\nfunction parseTimeUnix(time) {\n  let result = time;\n  let parts = time.replace(/ +/g, ' ').split(' ');\n  if (parts.length === 5) {\n    result = parts[4] + '-' + ('0' + ('JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'.indexOf(parts[1].toUpperCase()) / 3 + 1)).slice(-2) + '-' + ('0' + parts[2]).slice(-2) + ' ' + parts[3];\n  }\n  return result;\n}\n\n// --------------------------\n// PS - services\n// pass a comma separated string with services to check (mysql, apache, postgresql, ...)\n// this function gives an array back, if the services are running.\n\nfunction services(srv, callback) {\n\n  // fallback - if only callback is given\n  if (util.isFunction(srv) && !callback) {\n    callback = srv;\n    srv = '';\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      if (srv) {\n        let srvString = util.sanitizeShellString(srv);\n        srvString = srvString.trim().toLowerCase().replace(/, /g, '|').replace(/,+/g, '|');\n        if (srvString === '') {\n          srvString = '*';\n        }\n        let srvs = srvString.split('|');\n        let result = [];\n        let dataSrv = [];\n        let allSrv = [];\n\n        if (_linux || _freebsd || _openbsd || _netbsd || _darwin) {\n          if ((_linux || _freebsd || _openbsd || _netbsd) && srvString === '*') {\n            srvString = '';\n            let tmpsrv = execSync('service --status-all 2> /dev/null').toString().split('\\n');\n            for (const s of tmpsrv) {\n              const parts = s.split(']');\n              if (parts.length === 2) {\n                srvString += (srvString !== '' ? '|' : '') + parts[1].trim();\n                allSrv.push({ name: parts[1].trim(), running: parts[0].indexOf('+') > 0 });\n              }\n            }\n            srvs = srvString.split('|');\n          }\n          let comm = (_darwin) ? 'ps -caxo pcpu,pmem,pid,command' : 'ps -axo pcpu,pmem,pid,command';\n          if (srvString !== '' && srvs.length > 0) {\n            exec(comm + ' | grep -v grep | grep -iE \"' + srvString + '\"', { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n              if (!error) {\n                let lines = stdout.toString().replace(/ +/g, ' ').replace(/,+/g, '.').split('\\n');\n                srvs.forEach(function (srv) {\n                  let ps;\n                  if (_darwin) {\n                    ps = lines.filter(function (e) {\n                      return (e.toLowerCase().indexOf(srv) !== -1);\n                    });\n\n                  } else {\n                    ps = lines.filter(function (e) {\n                      return (e.toLowerCase().indexOf(' ' + srv + ':') !== -1) || (e.toLowerCase().indexOf('/' + srv) !== -1);\n                    });\n                  }\n                  let singleSrv = allSrv.filter(item => { return item.name === srv; });\n                  const pids = [];\n                  for (const p of ps) {\n                    const pid = p.trim().split(' ')[2];\n                    if (pid) {\n                      pids.push(parseInt(pid, 10));\n                    }\n                  }\n                  result.push({\n                    name: srv,\n                    running: (allSrv.length && singleSrv.length ? singleSrv[0].running : ps.length > 0),\n                    startmode: '',\n                    pids: pids,\n                    pcpu: parseFloat((ps.reduce(function (pv, cv) {\n                      return pv + parseFloat(cv.trim().split(' ')[0]);\n                    }, 0)).toFixed(2)),\n                    pmem: parseFloat((ps.reduce(function (pv, cv) {\n                      return pv + parseFloat(cv.trim().split(' ')[1]);\n                    }, 0)).toFixed(2))\n                  });\n                });\n                if (_linux) {\n                  // calc process_cpu - ps is not accurate in linux!\n                  let cmd = 'cat /proc/stat | grep \"cpu \"';\n                  for (let i in result) {\n                    for (let j in result[i].pids) {\n                      cmd += (';cat /proc/' + result[i].pids[j] + '/stat');\n                    }\n                  }\n                  exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                    let curr_processes = stdout.toString().split('\\n');\n\n                    // first line (all - /proc/stat)\n                    let all = parseProcStat(curr_processes.shift());\n\n                    // process\n                    let list_new = {};\n                    let resultProcess = {};\n                    for (let i = 0; i < curr_processes.length; i++) {\n                      resultProcess = calcProcStatLinux(curr_processes[i], all, _services_cpu);\n\n                      if (resultProcess.pid) {\n                        let listPos = -1;\n                        for (let i in result) {\n                          for (let j in result[i].pids) {\n                            if (parseInt(result[i].pids[j]) === parseInt(resultProcess.pid)) {\n                              listPos = i;\n                            }\n                          }\n                        }\n                        if (listPos >= 0) {\n                          result[listPos].pcpu += resultProcess.pcpuu + resultProcess.pcpus;\n                        }\n\n                        // save new values\n                        list_new[resultProcess.pid] = {\n                          pcpuu: resultProcess.pcpuu,\n                          pcpus: resultProcess.pcpus,\n                          utime: resultProcess.utime,\n                          stime: resultProcess.stime,\n                          cutime: resultProcess.cutime,\n                          cstime: resultProcess.cstime\n                        };\n                      }\n                    }\n\n                    // store old values\n                    _services_cpu.all = all;\n                    // _services_cpu.list = list_new;\n                    _services_cpu.list = Object.assign({}, list_new);\n                    _services_cpu.ms = Date.now() - _services_cpu.ms;\n                    // _services_cpu.result = result;\n                    _services_cpu.result = Object.assign({}, result);\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  });\n                } else {\n                  if (callback) { callback(result); }\n                  resolve(result);\n                }\n              } else {\n                exec('ps -o comm | grep -v grep | egrep \"' + srvString + '\"', { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                  if (!error) {\n                    let lines = stdout.toString().replace(/ +/g, ' ').replace(/,+/g, '.').split('\\n');\n                    srvs.forEach(function (srv) {\n                      let ps = lines.filter(function (e) {\n                        return e.indexOf(srv) !== -1;\n                      });\n                      result.push({\n                        name: srv,\n                        running: ps.length > 0,\n                        startmode: '',\n                        pcpu: 0,\n                        pmem: 0\n                      });\n                    });\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  } else {\n                    srvs.forEach(function (srv) {\n                      result.push({\n                        name: srv,\n                        running: false,\n                        startmode: '',\n                        pcpu: 0,\n                        pmem: 0\n                      });\n                    });\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  }\n                });\n              }\n            });\n          } else {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        }\n        if (_windows) {\n          try {\n            util.wmic('service get /value').then((stdout, error) => {\n              if (!error) {\n                let serviceSections = stdout.split(/\\n\\s*\\n/);\n                for (let i = 0; i < serviceSections.length; i++) {\n                  if (serviceSections[i].trim() !== '') {\n                    let lines = serviceSections[i].trim().split('\\r\\n');\n                    let srvName = util.getValue(lines, 'Name', '=', true).toLowerCase();\n                    let started = util.getValue(lines, 'Started', '=', true);\n                    let startMode = util.getValue(lines, 'StartMode', '=', true);\n                    let pid = util.getValue(lines, 'ProcessId', '=', true);\n                    if (srvString === '*' || srvs.indexOf(srvName) >= 0) {\n                      result.push({\n                        name: srvName,\n                        running: (started === 'TRUE'),\n                        startmode: startMode,\n                        pids: [pid],\n                        pcpu: 0,\n                        pmem: 0\n                      });\n                      dataSrv.push(srvName);\n                    }\n                  }\n                }\n                if (srvString !== '*') {\n                  let srvsMissing = srvs.filter(function (e) {\n                    return dataSrv.indexOf(e) === -1;\n                  });\n                  srvsMissing.forEach(function (srvName) {\n                    result.push({\n                      name: srvName,\n                      running: false,\n                      startmode: '',\n                      pids: [],\n                      pcpu: 0,\n                      pmem: 0\n                    });\n                  });\n                }\n                if (callback) { callback(result); }\n                resolve(result);\n              } else {\n                srvs.forEach(function (srvName) {\n                  result.push({\n                    name: srvName,\n                    running: false,\n                    startmode: '',\n                    pcpu: 0,\n                    pmem: 0\n                  });\n                });\n                if (callback) { callback(result); }\n                resolve(result);\n              }\n            });\n          } catch (e) {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        }\n      } else {\n        if (callback) { callback({}); }\n        resolve({});\n      }\n    });\n  });\n}\n\nexports.services = services;\n\nfunction parseProcStat(line) {\n  let parts = line.replace(/ +/g, ' ').split(' ');\n  let user = (parts.length >= 2 ? parseInt(parts[1]) : 0);\n  let nice = (parts.length >= 3 ? parseInt(parts[2]) : 0);\n  let system = (parts.length >= 4 ? parseInt(parts[3]) : 0);\n  let idle = (parts.length >= 5 ? parseInt(parts[4]) : 0);\n  let iowait = (parts.length >= 6 ? parseInt(parts[5]) : 0);\n  let irq = (parts.length >= 7 ? parseInt(parts[6]) : 0);\n  let softirq = (parts.length >= 8 ? parseInt(parts[7]) : 0);\n  let steal = (parts.length >= 9 ? parseInt(parts[8]) : 0);\n  let guest = (parts.length >= 10 ? parseInt(parts[9]) : 0);\n  let guest_nice = (parts.length >= 11 ? parseInt(parts[10]) : 0);\n  return user + nice + system + idle + iowait + irq + softirq + steal + guest + guest_nice;\n}\n\nfunction calcProcStatLinux(line, all, _cpu_old) {\n  let statparts = line.replace(/ +/g, ' ').split(')');\n  if (statparts.length >= 2) {\n    let parts = statparts[1].split(' ');\n    if (parts.length >= 16) {\n      let pid = parseInt(statparts[0].split(' ')[0]);\n      let utime = parseInt(parts[12]);\n      let stime = parseInt(parts[13]);\n      let cutime = parseInt(parts[14]);\n      let cstime = parseInt(parts[15]);\n\n      // calc\n      let pcpuu = 0;\n      let pcpus = 0;\n      if (_cpu_old.all > 0 && _cpu_old.list[pid]) {\n        pcpuu = (utime + cutime - _cpu_old.list[pid].utime - _cpu_old.list[pid].cutime) / (all - _cpu_old.all) * 100; // user\n        pcpus = (stime + cstime - _cpu_old.list[pid].stime - _cpu_old.list[pid].cstime) / (all - _cpu_old.all) * 100; // system\n      } else {\n        pcpuu = (utime + cutime) / (all) * 100; // user\n        pcpus = (stime + cstime) / (all) * 100; // system\n      }\n      return {\n        pid: pid,\n        utime: utime,\n        stime: stime,\n        cutime: cutime,\n        cstime: cstime,\n        pcpuu: pcpuu,\n        pcpus: pcpus\n      };\n    } else {\n      return {\n        pid: 0,\n        utime: 0,\n        stime: 0,\n        cutime: 0,\n        cstime: 0,\n        pcpuu: 0,\n        pcpus: 0\n      };\n    }\n  } else {\n    return {\n      pid: 0,\n      utime: 0,\n      stime: 0,\n      cutime: 0,\n      cstime: 0,\n      pcpuu: 0,\n      pcpus: 0\n    };\n  }\n}\n\nfunction calcProcStatWin(procStat, all, _cpu_old) {\n  // calc\n  let pcpuu = 0;\n  let pcpus = 0;\n  if (_cpu_old.all > 0 && _cpu_old.list[procStat.pid]) {\n    pcpuu = (procStat.utime - _cpu_old.list[procStat.pid].utime) / (all - _cpu_old.all) * 100; // user\n    pcpus = (procStat.stime - _cpu_old.list[procStat.pid].stime) / (all - _cpu_old.all) * 100; // system\n  } else {\n    pcpuu = (procStat.utime) / (all) * 100; // user\n    pcpus = (procStat.stime) / (all) * 100; // system\n  }\n  return {\n    pid: procStat.pid,\n    utime: procStat.utime,\n    stime: procStat.stime,\n    pcpuu: pcpuu,\n    pcpus: pcpus\n  };\n}\n\n\n\n// --------------------------\n// running processes\n\nfunction processes(callback) {\n\n  let parsedhead = [];\n\n  function getName(command) {\n    command = command || '';\n    let result = command.split(' ')[0];\n    if (result.substr(-1) === ':') {\n      result = result.substr(0, result.length - 1);\n    }\n    if (result.substr(0, 1) !== '[') {\n      let parts = result.split('/');\n      if (isNaN(parseInt(parts[parts.length - 1]))) {\n        result = parts[parts.length - 1];\n      } else {\n        result = parts[0];\n      }\n    }\n    return result;\n  }\n\n  function parseLine(line) {\n\n    let offset = 0;\n    let offset2 = 0;\n\n    function checkColumn(i) {\n      offset = offset2;\n      offset2 = line.substring(parsedhead[i].to + offset, 1000).indexOf(' ');\n    }\n\n    checkColumn(0);\n    const pid = parseInt(line.substring(parsedhead[0].from + offset, parsedhead[0].to + offset2));\n    checkColumn(1);\n    const ppid = parseInt(line.substring(parsedhead[1].from + offset, parsedhead[1].to + offset2));\n    checkColumn(2);\n    const pcpu = parseFloat(line.substring(parsedhead[2].from + offset, parsedhead[2].to + offset2).replace(/,/g, '.'));\n    checkColumn(3);\n    const pmem = parseFloat(line.substring(parsedhead[3].from + offset, parsedhead[3].to + offset2).replace(/,/g, '.'));\n    checkColumn(4);\n    const priority = parseInt(line.substring(parsedhead[4].from + offset, parsedhead[4].to + offset2));\n    checkColumn(5);\n    const vsz = parseInt(line.substring(parsedhead[5].from + offset, parsedhead[5].to + offset2));\n    checkColumn(6);\n    const rss = parseInt(line.substring(parsedhead[6].from + offset, parsedhead[6].to + offset2));\n    checkColumn(7);\n    const nice = parseInt(line.substring(parsedhead[7].from + offset, parsedhead[7].to + offset2)) || 0;\n    checkColumn(8);\n    const started = parseTimeUnix(line.substring(parsedhead[8].from + offset, parsedhead[8].to + offset2).trim());\n    checkColumn(9);\n    let state = line.substring(parsedhead[9].from + offset, parsedhead[9].to + offset2).trim();\n    state = (state[0] === 'R' ? 'running' : (state[0] === 'S' ? 'sleeping' : (state[0] === 'T' ? 'stopped' : (state[0] === 'W' ? 'paging' : (state[0] === 'X' ? 'dead' : (state[0] === 'Z' ? 'zombie' : ((state[0] === 'D' || state[0] === 'U') ? 'blocked' : 'unknown')))))));\n    checkColumn(10);\n    let tty = line.substring(parsedhead[10].from + offset, parsedhead[10].to + offset2).trim();\n    if (tty === '?' || tty === '??') tty = '';\n    checkColumn(11);\n    const user = line.substring(parsedhead[11].from + offset, parsedhead[11].to + offset2).trim();\n    checkColumn(12);\n    const fullcommand = line.substring(parsedhead[12].from + offset, parsedhead[12].to + offset2).trim().replace(/\\[/g, '').replace(/]/g, '');\n    let cmdPath = '';\n    let command = '';\n    let params = '';\n    // try to figure out where parameter starts\n    let firstParamPos = fullcommand.indexOf(' -');\n    let firstParamPathPos = fullcommand.indexOf(' /');\n    firstParamPos = (firstParamPos >= 0 ? firstParamPos : 10000);\n    firstParamPathPos = (firstParamPathPos >= 0 ? firstParamPathPos : 10000);\n    const firstPos = Math.min(firstParamPos, firstParamPathPos);\n    let tmpCommand = fullcommand.substr(0, firstPos);\n    const tmpParams = fullcommand.substr(firstPos);\n    const lastSlashPos = tmpCommand.lastIndexOf('/');\n    if (lastSlashPos >= 0) {\n      cmdPath = tmpCommand.substr(0, lastSlashPos);\n      tmpCommand = tmpCommand.substr(lastSlashPos + 1);\n    }\n\n    if (firstPos === 10000 && tmpCommand.indexOf(' ') > -1) {\n      const parts = tmpCommand.split(' ');\n      if (fs.existsSync(path.join(cmdPath, parts[0]))) {\n        command = parts.shift();\n        params = (parts.join(' ') + ' ' + tmpParams).trim();\n      } else {\n        command = tmpCommand.trim();\n        params = tmpParams.trim();\n      }\n    } else {\n      command = tmpCommand.trim();\n      params = tmpParams.trim();\n    }\n\n    return ({\n      pid: pid,\n      parentPid: ppid,\n      name: _linux ? getName(command) : command,\n      pcpu: pcpu,\n      pcpuu: 0,\n      pcpus: 0,\n      pmem: pmem,\n      priority: priority,\n      mem_vsz: vsz,\n      mem_rss: rss,\n      nice: nice,\n      started: started,\n      state: state,\n      tty: tty,\n      user: user,\n      command: command,\n      params: params,\n      path: cmdPath\n    });\n  }\n\n  function parseProcesses(lines) {\n    let result = [];\n    if (lines.length > 1) {\n      let head = lines[0];\n      parsedhead = util.parseHead(head, 8);\n      lines.shift();\n      lines.forEach(function (line) {\n        if (line.trim() !== '') {\n          result.push(parseLine(line));\n        }\n      });\n    }\n    return result;\n  }\n  function parseProcesses2(lines) {\n\n    function formatDateTime(time) {\n      const month = ('0' + (time.getMonth() + 1).toString()).substr(-2);\n      const year = time.getFullYear().toString();\n      const day = ('0' + time.getDay().toString()).substr(-2);\n      const hours = time.getHours().toString();\n      const mins = time.getMinutes().toString();\n      const secs = ('0' + time.getSeconds().toString()).substr(-2);\n\n      return (year + '-' + month + '-' + day + ' ' + hours + ':' + mins + ':' + secs);\n    }\n\n    let result = [];\n    lines.forEach(function (line) {\n      if (line.trim() !== '') {\n        line = line.trim().replace(/ +/g, ' ').replace(/,+/g, '.');\n        const parts = line.split(' ');\n        const command = parts.slice(9).join(' ');\n        const pmem = parseFloat((1.0 * parseInt(parts[3]) * 1024 / os.totalmem()).toFixed(1));\n        const elapsed_parts = parts[5].split(':');\n        const started = formatDateTime(new Date(Date.now() - (elapsed_parts.length > 1 ? (elapsed_parts[0] * 60 + elapsed_parts[1]) * 1000 : elapsed_parts[0] * 1000)));\n\n        result.push({\n          pid: parseInt(parts[0]),\n          parentPid: parseInt(parts[1]),\n          name: getName(command),\n          pcpu: 0,\n          pcpuu: 0,\n          pcpus: 0,\n          pmem: pmem,\n          priority: 0,\n          mem_vsz: parseInt(parts[2]),\n          mem_rss: parseInt(parts[3]),\n          nice: parseInt(parts[4]),\n          started: started,\n          state: (parts[6] === 'R' ? 'running' : (parts[6] === 'S' ? 'sleeping' : (parts[6] === 'T' ? 'stopped' : (parts[6] === 'W' ? 'paging' : (parts[6] === 'X' ? 'dead' : (parts[6] === 'Z' ? 'zombie' : ((parts[6] === 'D' || parts[6] === 'U') ? 'blocked' : 'unknown'))))))),\n          tty: parts[7],\n          user: parts[8],\n          command: command\n        });\n      }\n    });\n    return result;\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = {\n        all: 0,\n        running: 0,\n        blocked: 0,\n        sleeping: 0,\n        unknown: 0,\n        list: []\n      };\n\n      let cmd = '';\n\n      if ((_processes_cpu.ms && Date.now() - _processes_cpu.ms >= 500) || _processes_cpu.ms === 0) {\n        if (_linux || _freebsd || _openbsd || _netbsd || _darwin || _sunos) {\n          if (_linux) cmd = 'export LC_ALL=C; ps -axo pid:11,ppid:11,pcpu:6,pmem:6,pri:5,vsz:11,rss:11,ni:5,lstart:30,state:5,tty:15,user:20,command; unset LC_ALL';\n          if (_freebsd || _openbsd || _netbsd) cmd = 'export LC_ALL=C; ps -axo pid,ppid,pcpu,pmem,pri,vsz,rss,ni,lstart,state,tty,user,command; unset LC_ALL';\n          if (_darwin) cmd = 'export LC_ALL=C; ps -axo pid,ppid,pcpu,pmem,pri,vsz,rss,nice,lstart,state,tty,user,command -r; unset LC_ALL';\n          if (_sunos) cmd = 'ps -Ao pid,ppid,pcpu,pmem,pri,vsz,rss,nice,stime,s,tty,user,comm';\n          exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n            if (!error) {\n              result.list = (parseProcesses(stdout.toString().split('\\n'))).slice();\n              result.all = result.list.length;\n              result.running = result.list.filter(function (e) {\n                return e.state === 'running';\n              }).length;\n              result.blocked = result.list.filter(function (e) {\n                return e.state === 'blocked';\n              }).length;\n              result.sleeping = result.list.filter(function (e) {\n                return e.state === 'sleeping';\n              }).length;\n\n              if (_linux) {\n                // calc process_cpu - ps is not accurate in linux!\n                cmd = 'cat /proc/stat | grep \"cpu \"';\n                for (let i = 0; i < result.list.length; i++) {\n                  cmd += (';cat /proc/' + result.list[i].pid + '/stat');\n                }\n                exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                  let curr_processes = stdout.toString().split('\\n');\n\n                  // first line (all - /proc/stat)\n                  let all = parseProcStat(curr_processes.shift());\n\n                  // process\n                  let list_new = {};\n                  let resultProcess = {};\n                  for (let i = 0; i < curr_processes.length; i++) {\n                    resultProcess = calcProcStatLinux(curr_processes[i], all, _processes_cpu);\n\n                    if (resultProcess.pid) {\n\n                      // store pcpu in outer array\n                      let listPos = result.list.map(function (e) { return e.pid; }).indexOf(resultProcess.pid);\n                      if (listPos >= 0) {\n                        result.list[listPos].pcpu = resultProcess.pcpuu + resultProcess.pcpus;\n                        result.list[listPos].pcpuu = resultProcess.pcpuu;\n                        result.list[listPos].pcpus = resultProcess.pcpus;\n                      }\n\n                      // save new values\n                      list_new[resultProcess.pid] = {\n                        pcpuu: resultProcess.pcpuu,\n                        pcpus: resultProcess.pcpus,\n                        utime: resultProcess.utime,\n                        stime: resultProcess.stime,\n                        cutime: resultProcess.cutime,\n                        cstime: resultProcess.cstime\n                      };\n                    }\n                  }\n\n                  // store old values\n                  _processes_cpu.all = all;\n                  // _processes_cpu.list = list_new;\n                  _processes_cpu.list = Object.assign({}, list_new);\n                  _processes_cpu.ms = Date.now() - _processes_cpu.ms;\n                  // _processes_cpu.result = result;\n                  _processes_cpu.result = Object.assign({}, result);\n                  if (callback) { callback(result); }\n                  resolve(result);\n                });\n              } else {\n                if (callback) { callback(result); }\n                resolve(result);\n              }\n            } else {\n              cmd = 'ps -o pid,ppid,vsz,rss,nice,etime,stat,tty,user,comm';\n              if (_sunos) {\n                cmd = 'ps -o pid,ppid,vsz,rss,nice,etime,s,tty,user,comm';\n              }\n              exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                if (!error) {\n                  let lines = stdout.toString().split('\\n');\n                  lines.shift();\n\n                  result.list = parseProcesses2(lines).slice();\n                  result.all = result.list.length;\n                  result.running = result.list.filter(function (e) {\n                    return e.state === 'running';\n                  }).length;\n                  result.blocked = result.list.filter(function (e) {\n                    return e.state === 'blocked';\n                  }).length;\n                  result.sleeping = result.list.filter(function (e) {\n                    return e.state === 'sleeping';\n                  }).length;\n                  if (callback) { callback(result); }\n                  resolve(result);\n                } else {\n                  if (callback) { callback(result); }\n                  resolve(result);\n                }\n              });\n            }\n          });\n        } else if (_windows) {\n          try {\n            util.wmic('process get /value').then((stdout, error) => {\n              if (!error) {\n                let processSections = stdout.split(/\\n\\s*\\n/);\n                let procs = [];\n                let procStats = [];\n                let list_new = {};\n                let allcpuu = 0;\n                let allcpus = 0;\n                for (let i = 0; i < processSections.length; i++) {\n                  if (processSections[i].trim() !== '') {\n                    let lines = processSections[i].trim().split('\\r\\n');\n                    let pid = parseInt(util.getValue(lines, 'ProcessId', '=', true), 10);\n                    let parentPid = parseInt(util.getValue(lines, 'ParentProcessId', '=', true), 10);\n                    let statusValue = util.getValue(lines, 'ExecutionState', '=');\n                    let name = util.getValue(lines, 'Caption', '=', true);\n                    let commandLine = util.getValue(lines, 'CommandLine', '=', true);\n                    let commandPath = util.getValue(lines, 'ExecutablePath', '=', true);\n                    let utime = parseInt(util.getValue(lines, 'UserModeTime', '=', true), 10);\n                    let stime = parseInt(util.getValue(lines, 'KernelModeTime', '=', true), 10);\n                    let mem = parseInt(util.getValue(lines, 'WorkingSetSize', '=', true), 10);\n                    allcpuu = allcpuu + utime;\n                    allcpus = allcpus + stime;\n                    result.all++;\n                    if (!statusValue) { result.unknown++; }\n                    if (statusValue === '3') { result.running++; }\n                    if (statusValue === '4' || statusValue === '5') { result.blocked++; }\n\n                    procStats.push({\n                      pid: pid,\n                      utime: utime,\n                      stime: stime,\n                      pcpu: 0,\n                      pcpuu: 0,\n                      pcpus: 0,\n                    });\n                    procs.push({\n                      pid: pid,\n                      parentPid: parentPid,\n                      name: name,\n                      pcpu: 0,\n                      pcpuu: 0,\n                      pcpus: 0,\n                      pmem: mem / os.totalmem() * 100,\n                      priority: parseInt(util.getValue(lines, 'Priority', '=', true), 10),\n                      mem_vsz: parseInt(util.getValue(lines, 'PageFileUsage', '=', true), 10),\n                      mem_rss: Math.floor(parseInt(util.getValue(lines, 'WorkingSetSize', '=', true), 10) / 1024),\n                      nice: 0,\n                      started: parseTimeWin(util.getValue(lines, 'CreationDate', '=', true)),\n                      state: (!statusValue ? _winStatusValues[0] : _winStatusValues[statusValue]),\n                      tty: '',\n                      user: '',\n                      command: commandLine || name,\n                      path: commandPath,\n                      params: ''\n                    });\n                  }\n                }\n                result.sleeping = result.all - result.running - result.blocked - result.unknown;\n                result.list = procs;\n                for (let i = 0; i < procStats.length; i++) {\n                  let resultProcess = calcProcStatWin(procStats[i], allcpuu + allcpus, _processes_cpu);\n\n                  // store pcpu in outer array\n                  let listPos = result.list.map(function (e) { return e.pid; }).indexOf(resultProcess.pid);\n                  if (listPos >= 0) {\n                    result.list[listPos].pcpu = resultProcess.pcpuu + resultProcess.pcpus;\n                    result.list[listPos].pcpuu = resultProcess.pcpuu;\n                    result.list[listPos].pcpus = resultProcess.pcpus;\n                  }\n\n                  // save new values\n                  list_new[resultProcess.pid] = {\n                    pcpuu: resultProcess.pcpuu,\n                    pcpus: resultProcess.pcpus,\n                    utime: resultProcess.utime,\n                    stime: resultProcess.stime\n                  };\n                }\n                // store old values\n                _processes_cpu.all = allcpuu + allcpus;\n                // _processes_cpu.list = list_new;\n                _processes_cpu.list = Object.assign({}, list_new);\n                _processes_cpu.ms = Date.now() - _processes_cpu.ms;\n                // _processes_cpu.result = result;\n                _processes_cpu.result = Object.assign({}, result);\n              }\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            });\n          } catch (e) {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        } else {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      } else {\n        if (callback) { callback(_processes_cpu.result); }\n        resolve(_processes_cpu.result);\n      }\n    });\n  });\n}\n\nexports.processes = processes;\n\n// --------------------------\n// PS - process load\n// get detailed information about a certain process\n// (PID, CPU-Usage %, Mem-Usage %)\n\nfunction processLoad(proc, callback) {\n\n  // fallback - if only callback is given\n  if (util.isFunction(proc) && !callback) {\n    callback = proc;\n    proc = '';\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      const procSanitized = util.sanitizeShellString(proc);\n\n      let result = {\n        'proc': procSanitized,\n        'pid': -1,\n        'cpu': 0,\n        'mem': 0\n      };\n\n      if (procSanitized) {\n        if (_windows) {\n          try {\n            util.wmic('process get /value').then((stdout, error) => {\n              if (!error) {\n                let processSections = stdout.split(/\\n\\s*\\n/);\n                let procStats = [];\n                let list_new = {};\n                let allcpuu = 0;\n                let allcpus = 0;\n                for (let i = 0; i < processSections.length; i++) {\n                  if (processSections[i].trim() !== '') {\n                    let lines = processSections[i].trim().split('\\r\\n');\n                    let pid = parseInt(util.getValue(lines, 'ProcessId', '=', true), 10);\n                    let name = util.getValue(lines, 'Caption', '=', true);\n                    let utime = parseInt(util.getValue(lines, 'UserModeTime', '=', true), 10);\n                    let stime = parseInt(util.getValue(lines, 'KernelModeTime', '=', true), 10);\n                    let mem = parseInt(util.getValue(lines, 'WorkingSetSize', '=', true), 10);\n                    allcpuu = allcpuu + utime;\n                    allcpus = allcpus + stime;\n\n                    procStats.push({\n                      pid: pid,\n                      utime: utime,\n                      stime: stime,\n                      pcpu: 0,\n                      pcpuu: 0,\n                      pcpus: 0,\n                    });\n                    if (name.toLowerCase().indexOf(procSanitized.toLowerCase()) >= 0) {\n                      if (result.pid === -1) {\n                        result = {\n                          proc: name,\n                          pid: pid,\n                          pids: [pid],\n                          cpu: 0,\n                          mem: mem / os.totalmem() * 100\n                        };\n                      } else {\n                        result.pids.push(pid);\n                        result.mem += mem / os.totalmem() * 100;\n                      }\n                    }\n                  }\n                }\n                for (let i = 0; i < procStats.length; i++) {\n                  let resultProcess = calcProcStatWin(procStats[i], allcpuu + allcpus, _process_cpu);\n\n                  // store pcpu in outer array\n                  if (result && result.pids && result.pids.length > 0) {\n                    let listPos = result.pids.indexOf(resultProcess.pid);\n                    if (listPos >= 0) {\n                      result.cpu = resultProcess.pcpuu + resultProcess.pcpus;\n                    }\n                  }\n\n                  // save new values\n                  list_new[resultProcess.pid] = {\n                    pcpuu: resultProcess.pcpuu,\n                    pcpus: resultProcess.pcpus,\n                    utime: resultProcess.utime,\n                    stime: resultProcess.stime\n                  };\n                }\n                // store old values\n                _process_cpu.all = allcpuu + allcpus;\n                // _process_cpu.list = list_new;\n                _process_cpu.list = Object.assign({}, list_new);\n                _process_cpu.ms = Date.now() - _process_cpu.ms;\n                // _process_cpu.result = result;\n                _process_cpu.result = Object.assign({}, result);\n                if (callback) {\n                  callback(result);\n                }\n                resolve(result);\n              }\n            });\n          } catch (e) {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        }\n\n        if (_darwin || _linux) {\n          exec('ps -axo pid,pcpu,pmem,comm | grep -i ' + procSanitized + ' | grep -v grep', { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n\n              let pid = 0;\n              let pids = [];\n              let cpu = 0;\n              let mem = 0;\n\n              lines.forEach(function (line) {\n                let data = line.trim().replace(/ +/g, ' ').split(' ');\n                if (data.length > 3) {\n                  pid = (!pid ? parseInt(data[0]) : 0);\n                  pids.push(parseInt(data[0], 10));\n                  cpu = cpu + parseFloat(data[1].replace(',', '.'));\n                  mem = mem + parseFloat(data[2].replace(',', '.'));\n                }\n              });\n\n              result = {\n                'proc': procSanitized,\n                'pid': pid,\n                'pids': pids,\n                'cpu': parseFloat((cpu / lines.length).toFixed(2)),\n                'mem': parseFloat((mem / lines.length).toFixed(2))\n              };\n              if (_linux) {\n                // calc process_cpu - ps is not accurate in linux!\n                let cmd = 'cat /proc/stat | grep \"cpu \"';\n                for (let i = 0; i < result.pids.length; i++) {\n                  cmd += (';cat /proc/' + result.pids[i] + '/stat');\n                }\n\n                exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n                  let curr_processes = stdout.toString().split('\\n');\n\n                  // first line (all - /proc/stat)\n                  let all = parseProcStat(curr_processes.shift());\n\n                  // process\n                  let list_new = {};\n                  let resultProcess = {};\n                  result.cpu = 0;\n                  for (let i = 0; i < curr_processes.length; i++) {\n                    resultProcess = calcProcStatLinux(curr_processes[i], all, _process_cpu);\n\n                    if (resultProcess.pid) {\n\n                      // store pcpu in outer result\n                      result.cpu += resultProcess.pcpuu + resultProcess.pcpus;\n\n                      // save new values\n                      list_new[resultProcess.pid] = {\n                        pcpuu: resultProcess.pcpuu,\n                        pcpus: resultProcess.pcpus,\n                        utime: resultProcess.utime,\n                        stime: resultProcess.stime,\n                        cutime: resultProcess.cutime,\n                        cstime: resultProcess.cstime\n                      };\n                    }\n                  }\n\n                  result.cpu = Math.round(result.cpu * 100) / 100;\n\n                  _process_cpu.all = all;\n                  // _process_cpu.list = list_new;\n                  _process_cpu.list = Object.assign({}, list_new);\n                  _process_cpu.ms = Date.now() - _process_cpu.ms;\n                  // _process_cpu.result = result;\n                  _process_cpu.result = Object.assign({}, result);\n                  if (callback) { callback(result); }\n                  resolve(result);\n                });\n              } else {\n                if (callback) { callback(result); }\n                resolve(result);\n              }\n            } else {\n              if (callback) { callback(result); }\n              resolve(result);\n            }\n          });\n        }\n      }\n    });\n  });\n}\n\nexports.processLoad = processLoad;\n"]},"metadata":{},"sourceType":"script"}