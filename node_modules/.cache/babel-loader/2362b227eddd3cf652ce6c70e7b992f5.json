{"ast":null,"code":"'use strict';\n\nconst isTerm = process.env.TERM_PROGRAM === 'Apple_Terminal';\n\nconst colors = require('ansi-colors');\n\nconst utils = require('./utils');\n\nconst ansi = module.exports = exports;\nconst ESC = '\\u001b[';\nconst BEL = '\\u0007';\nlet hidden = false;\nconst code = ansi.code = {\n  bell: BEL,\n  beep: BEL,\n  beginning: `${ESC}G`,\n  down: `${ESC}J`,\n  esc: ESC,\n  getPosition: `${ESC}6n`,\n  hide: `${ESC}?25l`,\n  line: `${ESC}2K`,\n  lineEnd: `${ESC}K`,\n  lineStart: `${ESC}1K`,\n  restorePosition: ESC + (isTerm ? '8' : 'u'),\n  savePosition: ESC + (isTerm ? '7' : 's'),\n  screen: `${ESC}2J`,\n  show: `${ESC}?25h`,\n  up: `${ESC}1J`\n};\nconst cursor = ansi.cursor = {\n  get hidden() {\n    return hidden;\n  },\n\n  hide() {\n    hidden = true;\n    return code.hide;\n  },\n\n  show() {\n    hidden = false;\n    return code.show;\n  },\n\n  forward: (count = 1) => `${ESC}${count}C`,\n  backward: (count = 1) => `${ESC}${count}D`,\n  nextLine: (count = 1) => `${ESC}E`.repeat(count),\n  prevLine: (count = 1) => `${ESC}F`.repeat(count),\n  up: (count = 1) => count ? `${ESC}${count}A` : '',\n  down: (count = 1) => count ? `${ESC}${count}B` : '',\n  right: (count = 1) => count ? `${ESC}${count}C` : '',\n  left: (count = 1) => count ? `${ESC}${count}D` : '',\n\n  to(x, y) {\n    return y ? `${ESC}${y + 1};${x + 1}H` : `${ESC}${x + 1}G`;\n  },\n\n  move(x = 0, y = 0) {\n    let res = '';\n    res += x < 0 ? cursor.left(-x) : x > 0 ? cursor.right(x) : '';\n    res += y < 0 ? cursor.up(-y) : y > 0 ? cursor.down(y) : '';\n    return res;\n  },\n\n  restore(state = {}) {\n    let {\n      after,\n      cursor,\n      initial,\n      input,\n      prompt,\n      size,\n      value\n    } = state;\n    initial = utils.isPrimitive(initial) ? String(initial) : '';\n    input = utils.isPrimitive(input) ? String(input) : '';\n    value = utils.isPrimitive(value) ? String(value) : '';\n\n    if (size) {\n      let codes = ansi.cursor.up(size) + ansi.cursor.to(prompt.length);\n      let diff = input.length - cursor;\n\n      if (diff > 0) {\n        codes += ansi.cursor.left(diff);\n      }\n\n      return codes;\n    }\n\n    if (value || after) {\n      let pos = !input && !!initial ? -initial.length : -input.length + cursor;\n      if (after) pos -= after.length;\n\n      if (input === '' && initial && !prompt.includes(initial)) {\n        pos += initial.length;\n      }\n\n      return ansi.cursor.move(pos);\n    }\n  }\n\n};\nconst erase = ansi.erase = {\n  screen: code.screen,\n  up: code.up,\n  down: code.down,\n  line: code.line,\n  lineEnd: code.lineEnd,\n  lineStart: code.lineStart,\n\n  lines(n) {\n    let str = '';\n\n    for (let i = 0; i < n; i++) {\n      str += ansi.erase.line + (i < n - 1 ? ansi.cursor.up(1) : '');\n    }\n\n    if (n) str += ansi.code.beginning;\n    return str;\n  }\n\n};\n\nansi.clear = (input = '', columns = process.stdout.columns) => {\n  if (!columns) return erase.line + cursor.to(0);\n\n  let width = str => [...colors.unstyle(str)].length;\n\n  let lines = input.split(/\\r?\\n/);\n  let rows = 0;\n\n  for (let line of lines) {\n    rows += 1 + Math.floor(Math.max(width(line) - 1, 0) / columns);\n  }\n\n  return (erase.line + cursor.prevLine()).repeat(rows - 1) + erase.line + cursor.to(0);\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/lib/ansi.js"],"names":["isTerm","process","env","TERM_PROGRAM","colors","require","utils","ansi","module","exports","ESC","BEL","hidden","code","bell","beep","beginning","down","esc","getPosition","hide","line","lineEnd","lineStart","restorePosition","savePosition","screen","show","up","cursor","forward","count","backward","nextLine","repeat","prevLine","right","left","to","x","y","move","res","restore","state","after","initial","input","prompt","size","value","isPrimitive","String","codes","length","diff","pos","includes","erase","lines","n","str","i","clear","columns","stdout","width","unstyle","split","rows","Math","floor","max"],"mappings":"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","sourcesContent":["'use strict';\n\nconst isTerm = process.env.TERM_PROGRAM === 'Apple_Terminal';\nconst colors = require('ansi-colors');\nconst utils = require('./utils');\nconst ansi = module.exports = exports;\nconst ESC = '\\u001b[';\nconst BEL = '\\u0007';\nlet hidden = false;\n\nconst code = ansi.code = {\n  bell: BEL,\n  beep: BEL,\n  beginning: `${ESC}G`,\n  down: `${ESC}J`,\n  esc: ESC,\n  getPosition: `${ESC}6n`,\n  hide: `${ESC}?25l`,\n  line: `${ESC}2K`,\n  lineEnd: `${ESC}K`,\n  lineStart: `${ESC}1K`,\n  restorePosition: ESC + (isTerm ? '8' : 'u'),\n  savePosition: ESC + (isTerm ? '7' : 's'),\n  screen: `${ESC}2J`,\n  show: `${ESC}?25h`,\n  up: `${ESC}1J`\n};\n\nconst cursor = ansi.cursor = {\n  get hidden() {\n    return hidden;\n  },\n\n  hide() {\n    hidden = true;\n    return code.hide;\n  },\n  show() {\n    hidden = false;\n    return code.show;\n  },\n\n  forward: (count = 1) => `${ESC}${count}C`,\n  backward: (count = 1) => `${ESC}${count}D`,\n  nextLine: (count = 1) => `${ESC}E`.repeat(count),\n  prevLine: (count = 1) => `${ESC}F`.repeat(count),\n\n  up: (count = 1) => count ? `${ESC}${count}A` : '',\n  down: (count = 1) => count ? `${ESC}${count}B` : '',\n  right: (count = 1) => count ? `${ESC}${count}C` : '',\n  left: (count = 1) => count ? `${ESC}${count}D` : '',\n\n  to(x, y) {\n    return y ? `${ESC}${y + 1};${x + 1}H` : `${ESC}${x + 1}G`;\n  },\n\n  move(x = 0, y = 0) {\n    let res = '';\n    res += (x < 0) ? cursor.left(-x) : (x > 0) ? cursor.right(x) : '';\n    res += (y < 0) ? cursor.up(-y) : (y > 0) ? cursor.down(y) : '';\n    return res;\n  },\n\n  restore(state = {}) {\n    let { after, cursor, initial, input, prompt, size, value } = state;\n    initial = utils.isPrimitive(initial) ? String(initial) : '';\n    input = utils.isPrimitive(input) ? String(input) : '';\n    value = utils.isPrimitive(value) ? String(value) : '';\n\n    if (size) {\n      let codes = ansi.cursor.up(size) + ansi.cursor.to(prompt.length);\n      let diff = input.length - cursor;\n      if (diff > 0) {\n        codes += ansi.cursor.left(diff);\n      }\n      return codes;\n    }\n\n    if (value || after) {\n      let pos = (!input && !!initial) ? -initial.length : -input.length + cursor;\n      if (after) pos -= after.length;\n      if (input === '' && initial && !prompt.includes(initial)) {\n        pos += initial.length;\n      }\n      return ansi.cursor.move(pos);\n    }\n  }\n};\n\nconst erase = ansi.erase = {\n  screen: code.screen,\n  up: code.up,\n  down: code.down,\n  line: code.line,\n  lineEnd: code.lineEnd,\n  lineStart: code.lineStart,\n  lines(n) {\n    let str = '';\n    for (let i = 0; i < n; i++) {\n      str += ansi.erase.line + (i < n - 1 ? ansi.cursor.up(1) : '');\n    }\n    if (n) str += ansi.code.beginning;\n    return str;\n  }\n};\n\nansi.clear = (input = '', columns = process.stdout.columns) => {\n  if (!columns) return erase.line + cursor.to(0);\n  let width = str => [...colors.unstyle(str)].length;\n  let lines = input.split(/\\r?\\n/);\n  let rows = 0;\n  for (let line of lines) {\n    rows += 1 + Math.floor(Math.max(width(line) - 1, 0) / columns);\n  }\n  return (erase.line + cursor.prevLine()).repeat(rows - 1) + erase.line + cursor.to(0);\n};\n"]},"metadata":{},"sourceType":"script"}