{"ast":null,"code":"'use strict';\n\nvar spawn = require('child_process').spawn;\n/**\n  * Spawn a binary and read its stdout.\n  * @param  {String} cmd\n  * @param  {String[]} args\n  * @param  {Function} done(err, stdout)\n  */\n\n\nfunction run(cmd, args, options, done) {\n  if (typeof options === 'function') {\n    done = options;\n    options = undefined;\n  }\n\n  var executed = false;\n  var ch = spawn(cmd, args, options);\n  var stdout = '';\n  var stderr = '';\n  ch.stdout.on('data', function (d) {\n    stdout += d.toString();\n  });\n  ch.stderr.on('data', function (d) {\n    stderr += d.toString();\n  });\n  ch.on('error', function (err) {\n    if (executed) return;\n    executed = true;\n    done(new Error(err));\n  });\n  ch.on('close', function (code, signal) {\n    if (executed) return;\n    executed = true;\n\n    if (stderr) {\n      return done(new Error(stderr));\n    }\n\n    done(null, stdout, code);\n  });\n}\n\nmodule.exports = run;","map":{"version":3,"sources":["/Users/samianki/node_modules/pidusage/lib/bin.js"],"names":["spawn","require","run","cmd","args","options","done","undefined","executed","ch","stdout","stderr","on","d","toString","err","Error","code","signal","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,KAArC;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,GAAT,CAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,OAAzB,EAAkCC,IAAlC,EAAwC;AACtC,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,IAAI,GAAGD,OAAP;AACAA,IAAAA,OAAO,GAAGE,SAAV;AACD;;AAED,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,EAAE,GAAGT,KAAK,CAACG,GAAD,EAAMC,IAAN,EAAYC,OAAZ,CAAd;AACA,MAAIK,MAAM,GAAG,EAAb;AACA,MAAIC,MAAM,GAAG,EAAb;AAEAF,EAAAA,EAAE,CAACC,MAAH,CAAUE,EAAV,CAAa,MAAb,EAAqB,UAAUC,CAAV,EAAa;AAChCH,IAAAA,MAAM,IAAIG,CAAC,CAACC,QAAF,EAAV;AACD,GAFD;AAIAL,EAAAA,EAAE,CAACE,MAAH,CAAUC,EAAV,CAAa,MAAb,EAAqB,UAAUC,CAAV,EAAa;AAChCF,IAAAA,MAAM,IAAIE,CAAC,CAACC,QAAF,EAAV;AACD,GAFD;AAIAL,EAAAA,EAAE,CAACG,EAAH,CAAM,OAAN,EAAe,UAAUG,GAAV,EAAe;AAC5B,QAAIP,QAAJ,EAAc;AACdA,IAAAA,QAAQ,GAAG,IAAX;AACAF,IAAAA,IAAI,CAAC,IAAIU,KAAJ,CAAUD,GAAV,CAAD,CAAJ;AACD,GAJD;AAMAN,EAAAA,EAAE,CAACG,EAAH,CAAM,OAAN,EAAe,UAAUK,IAAV,EAAgBC,MAAhB,EAAwB;AACrC,QAAIV,QAAJ,EAAc;AACdA,IAAAA,QAAQ,GAAG,IAAX;;AAEA,QAAIG,MAAJ,EAAY;AACV,aAAOL,IAAI,CAAC,IAAIU,KAAJ,CAAUL,MAAV,CAAD,CAAX;AACD;;AAEDL,IAAAA,IAAI,CAAC,IAAD,EAAOI,MAAP,EAAeO,IAAf,CAAJ;AACD,GATD;AAUD;;AAEDE,MAAM,CAACC,OAAP,GAAiBlB,GAAjB","sourcesContent":["'use strict'\n\nvar spawn = require('child_process').spawn\n\n/**\n  * Spawn a binary and read its stdout.\n  * @param  {String} cmd\n  * @param  {String[]} args\n  * @param  {Function} done(err, stdout)\n  */\nfunction run (cmd, args, options, done) {\n  if (typeof options === 'function') {\n    done = options\n    options = undefined\n  }\n\n  var executed = false\n  var ch = spawn(cmd, args, options)\n  var stdout = ''\n  var stderr = ''\n\n  ch.stdout.on('data', function (d) {\n    stdout += d.toString()\n  })\n\n  ch.stderr.on('data', function (d) {\n    stderr += d.toString()\n  })\n\n  ch.on('error', function (err) {\n    if (executed) return\n    executed = true\n    done(new Error(err))\n  })\n\n  ch.on('close', function (code, signal) {\n    if (executed) return\n    executed = true\n\n    if (stderr) {\n      return done(new Error(stderr))\n    }\n\n    done(null, stdout, code)\n  })\n}\n\nmodule.exports = run\n"]},"metadata":{},"sourceType":"script"}