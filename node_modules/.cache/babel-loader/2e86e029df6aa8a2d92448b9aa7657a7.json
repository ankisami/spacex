{"ast":null,"code":"var chalk = require('chalk');\n\nvar util = require('util');\n\nvar fs = require('fs');\n\nvar exec = require('child_process').exec;\n\nvar path = require('path');\n\nvar Log = require('./Log');\n\nvar cst = require('../../constants.js');\n\nvar Common = require('../Common.js');\n\nmodule.exports = function (CLI) {\n  /**\n   * Description\n   * @method flush\n   * @return\n   */\n  CLI.prototype.flush = function (api, cb) {\n    var that = this;\n\n    if (!api) {\n      Common.printOut(cst.PREFIX_MSG + 'Flushing ' + cst.PM2_LOG_FILE_PATH);\n      fs.closeSync(fs.openSync(cst.PM2_LOG_FILE_PATH, 'w'));\n    }\n\n    that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      list.forEach(function (l) {\n        if (typeof api == 'undefined') {\n          Common.printOut(cst.PREFIX_MSG + 'Flushing:');\n          Common.printOut(cst.PREFIX_MSG + l.pm2_env.pm_out_log_path);\n          Common.printOut(cst.PREFIX_MSG + l.pm2_env.pm_err_log_path);\n\n          if (l.pm2_env.pm_log_path) {\n            Common.printOut(cst.PREFIX_MSG + l.pm2_env.pm_log_path);\n            fs.closeSync(fs.openSync(l.pm2_env.pm_log_path, 'w'));\n          }\n\n          fs.closeSync(fs.openSync(l.pm2_env.pm_out_log_path, 'w'));\n          fs.closeSync(fs.openSync(l.pm2_env.pm_err_log_path, 'w'));\n        } else if (l.pm2_env.name === api) {\n          Common.printOut(cst.PREFIX_MSG + 'Flushing:');\n          Common.printOut(cst.PREFIX_MSG + l.pm2_env.pm_out_log_path);\n          Common.printOut(cst.PREFIX_MSG + l.pm2_env.pm_err_log_path);\n\n          if (l.pm2_env.pm_log_path && l.pm2_env.pm_log_path.lastIndexOf('/') < l.pm2_env.pm_log_path.lastIndexOf(api)) {\n            Common.printOut(cst.PREFIX_MSG + l.pm2_env.pm_log_path);\n            fs.closeSync(fs.openSync(l.pm2_env.pm_log_path, 'w'));\n          }\n\n          if (l.pm2_env.pm_out_log_path.lastIndexOf('/') < l.pm2_env.pm_out_log_path.lastIndexOf(api)) fs.closeSync(fs.openSync(l.pm2_env.pm_out_log_path, 'w'));\n          if (l.pm2_env.pm_err_log_path.lastIndexOf('/') < l.pm2_env.pm_err_log_path.lastIndexOf(api)) fs.closeSync(fs.openSync(l.pm2_env.pm_err_log_path, 'w'));\n        }\n      });\n      Common.printOut(cst.PREFIX_MSG + 'Logs flushed');\n      return cb ? cb(null, list) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n\n  CLI.prototype.logrotate = function (opts, cb) {\n    var that = this;\n\n    if (process.getuid() != 0) {\n      return exec('whoami', function (err, stdout, stderr) {\n        Common.printError(cst.PREFIX_MSG + 'You have to run this command as root. Execute the following command:');\n        Common.printError(cst.PREFIX_MSG + chalk.grey('      sudo env PATH=$PATH:' + path.dirname(process.execPath) + ' pm2 logrotate -u ' + stdout.trim()));\n        cb ? cb(Common.retErr('You have to run this with elevated rights')) : that.exitCli(cst.ERROR_EXIT);\n      });\n    }\n\n    if (!fs.existsSync('/etc/logrotate.d')) {\n      Common.printError(cst.PREFIX_MSG + '/etc/logrotate.d does not exist we can not copy the default configuration.');\n      return cb ? cb(Common.retErr('/etc/logrotate.d does not exist')) : that.exitCli(cst.ERROR_EXIT);\n    }\n\n    var templatePath = path.join(cst.TEMPLATE_FOLDER, cst.LOGROTATE_SCRIPT);\n    Common.printOut(cst.PREFIX_MSG + 'Getting logrorate template ' + templatePath);\n    var script = fs.readFileSync(templatePath, {\n      encoding: 'utf8'\n    });\n    var user = opts.user || 'root';\n    script = script.replace(/%HOME_PATH%/g, cst.PM2_ROOT_PATH).replace(/%USER%/g, user);\n\n    try {\n      fs.writeFileSync('/etc/logrotate.d/pm2-' + user, script);\n    } catch (e) {\n      console.error(e.stack || e);\n    }\n\n    Common.printOut(cst.PREFIX_MSG + 'Logrotate configuration added to /etc/logrotate.d/pm2');\n    return cb ? cb(null, {\n      success: true\n    }) : that.exitCli(cst.SUCCESS_EXIT);\n  };\n  /**\n   * Description\n   * @method reloadLogs\n   * @return\n   */\n\n\n  CLI.prototype.reloadLogs = function (cb) {\n    var that = this;\n    Common.printOut('Reloading all logs...');\n    that.Client.executeRemote('reloadLogs', {}, function (err, logs) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      Common.printOut('All logs reloaded');\n      return cb ? cb(null, logs) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n  /**\n   * Description\n   * @method streamLogs\n   * @param {String} id\n   * @param {Number} lines\n   * @param {Boolean} raw\n   * @return\n   */\n\n\n  CLI.prototype.streamLogs = function (id, lines, raw, timestamp, exclusive, highlight) {\n    var that = this;\n    var files_list = []; // If no argument is given, we stream logs for all running apps\n\n    id = id || 'all';\n    lines = lines !== undefined ? lines : 20;\n    lines = lines < 0 ? -lines : lines; // Avoid duplicates and check if path is different from '/dev/null'\n\n    var pushIfUnique = function (entry) {\n      var exists = false;\n\n      if (entry.path.toLowerCase && entry.path.toLowerCase() !== '/dev/null') {\n        files_list.some(function (file) {\n          if (file.path === entry.path) exists = true;\n          return exists;\n        });\n        if (exists) return;\n        files_list.push(entry);\n      }\n    }; // Get the list of all running apps\n\n\n    that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n      var regexList = [];\n      var namespaceList = [];\n\n      if (err) {\n        Common.printError(err);\n        that.exitCli(cst.ERROR_EXIT);\n      }\n\n      if (lines === 0) return Log.stream(that.Client, id, raw, timestamp, exclusive, highlight);\n      Common.printOut(chalk.bold.grey(util.format.call(this, '[TAILING] Tailing last %d lines for [%s] process%s (change the value with --lines option)', lines, id, id === 'all' ? 'es' : ''))); // Populate the array `files_list` with the paths of all files we need to tail\n\n      list.forEach(function (proc) {\n        if (proc.pm2_env && (id === 'all' || proc.pm2_env.name == id || proc.pm2_env.pm_id == id)) {\n          if (proc.pm2_env.pm_out_log_path && exclusive !== 'err') pushIfUnique({\n            path: proc.pm2_env.pm_out_log_path,\n            app_name: proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n            type: 'out'\n          });\n          if (proc.pm2_env.pm_err_log_path && exclusive !== 'out') pushIfUnique({\n            path: proc.pm2_env.pm_err_log_path,\n            app_name: proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n            type: 'err'\n          });\n        } else if (proc.pm2_env && proc.pm2_env.namespace == id) {\n          if (namespaceList.indexOf(proc.pm2_env.name) === -1) {\n            namespaceList.push(proc.pm2_env.name);\n          }\n\n          if (proc.pm2_env.pm_out_log_path && exclusive !== 'err') pushIfUnique({\n            path: proc.pm2_env.pm_out_log_path,\n            app_name: proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n            type: 'out'\n          });\n          if (proc.pm2_env.pm_err_log_path && exclusive !== 'out') pushIfUnique({\n            path: proc.pm2_env.pm_err_log_path,\n            app_name: proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n            type: 'err'\n          });\n        } // Populate the array `files_list` with the paths of all files we need to tail, when log in put is a regex\n        else if (proc.pm2_env && isNaN(id) && id[0] === '/' && id[id.length - 1] === '/') {\n            var regex = new RegExp(id.replace(/\\//g, ''));\n\n            if (regex.test(proc.pm2_env.name)) {\n              if (regexList.indexOf(proc.pm2_env.name) === -1) {\n                regexList.push(proc.pm2_env.name);\n              }\n\n              if (proc.pm2_env.pm_out_log_path && exclusive !== 'err') pushIfUnique({\n                path: proc.pm2_env.pm_out_log_path,\n                app_name: proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n                type: 'out'\n              });\n              if (proc.pm2_env.pm_err_log_path && exclusive !== 'out') pushIfUnique({\n                path: proc.pm2_env.pm_err_log_path,\n                app_name: proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n                type: 'err'\n              });\n            }\n          }\n      }); //for fixing issue https://github.com/Unitech/pm2/issues/3506\n\n      /* if (files_list && files_list.length == 0) {\n         Common.printError(cst.PREFIX_MSG_ERR + 'No file to stream for app [%s], exiting.', id);\n         return process.exit(cst.ERROR_EXIT);\n       }*/\n\n      if (!raw && (id === 'all' || id === 'PM2') && exclusive === false) {\n        Log.tail([{\n          path: cst.PM2_LOG_FILE_PATH,\n          app_name: 'PM2',\n          type: 'PM2'\n        }], lines, raw, function () {\n          Log.tail(files_list, lines, raw, function () {\n            Log.stream(that.Client, id, raw, timestamp, exclusive, highlight);\n          });\n        });\n      } else {\n        Log.tail(files_list, lines, raw, function () {\n          if (regexList.length > 0) {\n            regexList.forEach(function (id) {\n              Log.stream(that.Client, id, raw, timestamp, exclusive, highlight);\n            });\n          } else if (namespaceList.length > 0) {\n            namespaceList.forEach(function (id) {\n              Log.stream(that.Client, id, raw, timestamp, exclusive, highlight);\n            });\n          } else {\n            Log.stream(that.Client, id, raw, timestamp, exclusive, highlight);\n          }\n        });\n      }\n    });\n  };\n  /**\n   * Description\n   * @method printLogs\n   * @param {String} id\n   * @param {Number} lines\n   * @param {Boolean} raw\n   * @return\n   */\n\n\n  CLI.prototype.printLogs = function (id, lines, raw, timestamp, exclusive) {\n    var that = this;\n    var files_list = []; // If no argument is given, we stream logs for all running apps\n\n    id = id || 'all';\n    lines = lines !== undefined ? lines : 20;\n    lines = lines < 0 ? -lines : lines; // Avoid duplicates and check if path is different from '/dev/null'\n\n    var pushIfUnique = function (entry) {\n      var exists = false;\n\n      if (entry.path.toLowerCase && entry.path.toLowerCase() !== '/dev/null') {\n        files_list.some(function (file) {\n          if (file.path === entry.path) exists = true;\n          return exists;\n        });\n        if (exists) return;\n        files_list.push(entry);\n      }\n    }; // Get the list of all running apps\n\n\n    that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n      if (err) {\n        Common.printError(err);\n        that.exitCli(cst.ERROR_EXIT);\n      }\n\n      if (lines <= 0) {\n        return that.exitCli(cst.SUCCESS_EXIT);\n      }\n\n      Common.printOut(chalk.bold.grey(util.format.call(this, '[TAILING] Tailing last %d lines for [%s] process%s (change the value with --lines option)', lines, id, id === 'all' ? 'es' : ''))); // Populate the array `files_list` with the paths of all files we need to tail\n\n      list.forEach(function (proc) {\n        if (proc.pm2_env && (id === 'all' || proc.pm2_env.name == id || proc.pm2_env.pm_id == id)) {\n          if (proc.pm2_env.pm_out_log_path && exclusive !== 'err') pushIfUnique({\n            path: proc.pm2_env.pm_out_log_path,\n            app_name: proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n            type: 'out'\n          });\n          if (proc.pm2_env.pm_err_log_path && exclusive !== 'out') pushIfUnique({\n            path: proc.pm2_env.pm_err_log_path,\n            app_name: proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n            type: 'err'\n          });\n        } // Populate the array `files_list` with the paths of all files we need to tail, when log in put is a regex\n        else if (proc.pm2_env && isNaN(id) && id[0] === '/' && id[id.length - 1] === '/') {\n            var regex = new RegExp(id.replace(/\\//g, ''));\n\n            if (regex.test(proc.pm2_env.name)) {\n              if (proc.pm2_env.pm_out_log_path && exclusive !== 'err') pushIfUnique({\n                path: proc.pm2_env.pm_out_log_path,\n                app_name: proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n                type: 'out'\n              });\n              if (proc.pm2_env.pm_err_log_path && exclusive !== 'out') pushIfUnique({\n                path: proc.pm2_env.pm_err_log_path,\n                app_name: proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n                type: 'err'\n              });\n            }\n          }\n      });\n\n      if (!raw && (id === 'all' || id === 'PM2') && exclusive === false) {\n        Log.tail([{\n          path: cst.PM2_LOG_FILE_PATH,\n          app_name: 'PM2',\n          type: 'PM2'\n        }], lines, raw, function () {\n          Log.tail(files_list, lines, raw, function () {\n            that.exitCli(cst.SUCCESS_EXIT);\n          });\n        });\n      } else {\n        Log.tail(files_list, lines, raw, function () {\n          that.exitCli(cst.SUCCESS_EXIT);\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/API/LogManagement.js"],"names":["chalk","require","util","fs","exec","path","Log","cst","Common","module","exports","CLI","prototype","flush","api","cb","that","printOut","PREFIX_MSG","PM2_LOG_FILE_PATH","closeSync","openSync","Client","executeRemote","err","list","printError","retErr","exitCli","ERROR_EXIT","forEach","l","pm2_env","pm_out_log_path","pm_err_log_path","pm_log_path","name","lastIndexOf","SUCCESS_EXIT","logrotate","opts","process","getuid","stdout","stderr","grey","dirname","execPath","trim","existsSync","templatePath","join","TEMPLATE_FOLDER","LOGROTATE_SCRIPT","script","readFileSync","encoding","user","replace","PM2_ROOT_PATH","writeFileSync","e","console","error","stack","success","reloadLogs","logs","streamLogs","id","lines","raw","timestamp","exclusive","highlight","files_list","undefined","pushIfUnique","entry","exists","toLowerCase","some","file","push","regexList","namespaceList","stream","bold","format","call","proc","pm_id","app_name","type","namespace","indexOf","isNaN","length","regex","RegExp","test","tail","printLogs"],"mappings":"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","sourcesContent":["var chalk  = require('chalk');\nvar util   = require('util');\nvar fs     = require('fs');\nvar exec   = require('child_process').exec;\nvar path   = require('path');\n\nvar Log    = require('./Log');\nvar cst    = require('../../constants.js');\nvar Common = require('../Common.js');\n\nmodule.exports = function(CLI) {\n\n  /**\n   * Description\n   * @method flush\n   * @return\n   */\n  CLI.prototype.flush = function(api, cb) {\n    var that = this;\n\n    if (!api) {\n      Common.printOut(cst.PREFIX_MSG + 'Flushing ' + cst.PM2_LOG_FILE_PATH);\n      fs.closeSync(fs.openSync(cst.PM2_LOG_FILE_PATH, 'w'));\n    }\n\n    that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n      list.forEach(function(l) {\n        if (typeof api == 'undefined') {\n          Common.printOut(cst.PREFIX_MSG + 'Flushing:');\n          Common.printOut(cst.PREFIX_MSG + l.pm2_env.pm_out_log_path);\n          Common.printOut(cst.PREFIX_MSG + l.pm2_env.pm_err_log_path);\n\n          if (l.pm2_env.pm_log_path) {\n            Common.printOut(cst.PREFIX_MSG + l.pm2_env.pm_log_path);\n            fs.closeSync(fs.openSync(l.pm2_env.pm_log_path, 'w'));\n          }\n          fs.closeSync(fs.openSync(l.pm2_env.pm_out_log_path, 'w'));\n          fs.closeSync(fs.openSync(l.pm2_env.pm_err_log_path, 'w'));\n        }\n        else if (l.pm2_env.name === api) {\n          Common.printOut(cst.PREFIX_MSG + 'Flushing:');\n          Common.printOut(cst.PREFIX_MSG + l.pm2_env.pm_out_log_path);\n          Common.printOut(cst.PREFIX_MSG + l.pm2_env.pm_err_log_path);\n\n          if (l.pm2_env.pm_log_path &&\n              l.pm2_env.pm_log_path.lastIndexOf('/') < l.pm2_env.pm_log_path.lastIndexOf(api)) {\n            Common.printOut(cst.PREFIX_MSG + l.pm2_env.pm_log_path);\n            fs.closeSync(fs.openSync(l.pm2_env.pm_log_path, 'w'));\n          }\n\n          if (l.pm2_env.pm_out_log_path.lastIndexOf('/') < l.pm2_env.pm_out_log_path.lastIndexOf(api))\n            fs.closeSync(fs.openSync(l.pm2_env.pm_out_log_path, 'w'));\n          if (l.pm2_env.pm_err_log_path.lastIndexOf('/') < l.pm2_env.pm_err_log_path.lastIndexOf(api))\n            fs.closeSync(fs.openSync(l.pm2_env.pm_err_log_path, 'w'));\n        }\n      });\n\n      Common.printOut(cst.PREFIX_MSG + 'Logs flushed');\n      return cb ? cb(null, list) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n\n  CLI.prototype.logrotate = function(opts, cb) {\n    var that = this;\n\n    if (process.getuid() != 0) {\n      return exec('whoami', function(err, stdout, stderr) {\n        Common.printError(cst.PREFIX_MSG + 'You have to run this command as root. Execute the following command:');\n        Common.printError(cst.PREFIX_MSG + chalk.grey('      sudo env PATH=$PATH:' + path.dirname(process.execPath) + ' pm2 logrotate -u ' + stdout.trim()));\n\n        cb ? cb(Common.retErr('You have to run this with elevated rights')) : that.exitCli(cst.ERROR_EXIT);\n      });\n    }\n\n    if (!fs.existsSync('/etc/logrotate.d')) {\n      Common.printError(cst.PREFIX_MSG + '/etc/logrotate.d does not exist we can not copy the default configuration.');\n      return cb ? cb(Common.retErr('/etc/logrotate.d does not exist')) : that.exitCli(cst.ERROR_EXIT);\n    }\n\n    var templatePath = path.join(cst.TEMPLATE_FOLDER, cst.LOGROTATE_SCRIPT);\n    Common.printOut(cst.PREFIX_MSG + 'Getting logrorate template ' + templatePath);\n    var script = fs.readFileSync(templatePath, {encoding: 'utf8'});\n\n    var user = opts.user || 'root';\n\n    script = script.replace(/%HOME_PATH%/g, cst.PM2_ROOT_PATH)\n      .replace(/%USER%/g, user);\n\n    try {\n      fs.writeFileSync('/etc/logrotate.d/pm2-'+user, script);\n    } catch (e) {\n      console.error(e.stack || e);\n    }\n\n    Common.printOut(cst.PREFIX_MSG + 'Logrotate configuration added to /etc/logrotate.d/pm2');\n    return cb ? cb(null, {success:true}) : that.exitCli(cst.SUCCESS_EXIT);\n  };\n\n  /**\n   * Description\n   * @method reloadLogs\n   * @return\n   */\n  CLI.prototype.reloadLogs = function(cb) {\n    var that = this;\n\n    Common.printOut('Reloading all logs...');\n    that.Client.executeRemote('reloadLogs', {}, function(err, logs) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n      Common.printOut('All logs reloaded');\n      return cb ? cb(null, logs) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n\n  /**\n   * Description\n   * @method streamLogs\n   * @param {String} id\n   * @param {Number} lines\n   * @param {Boolean} raw\n   * @return\n   */\n  CLI.prototype.streamLogs = function(id, lines, raw, timestamp, exclusive, highlight) {\n    var that = this;\n    var files_list = [];\n\n    // If no argument is given, we stream logs for all running apps\n    id = id || 'all';\n    lines = lines !== undefined ? lines : 20;\n    lines = lines < 0 ? -(lines) : lines;\n\n    // Avoid duplicates and check if path is different from '/dev/null'\n    var pushIfUnique = function(entry) {\n      var exists = false;\n\n      if (entry.path.toLowerCase\n          && entry.path.toLowerCase() !== '/dev/null') {\n\n        files_list.some(function(file) {\n          if (file.path === entry.path)\n            exists = true;\n          return exists;\n        });\n\n        if (exists)\n          return;\n\n        files_list.push(entry);\n      }\n    }\n\n    // Get the list of all running apps\n    that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n      var regexList = [];\n      var namespaceList = [];\n\n      if (err) {\n        Common.printError(err);\n        that.exitCli(cst.ERROR_EXIT);\n      }\n\n      if (lines === 0)\n        return Log.stream(that.Client, id, raw, timestamp, exclusive, highlight);\n\n      Common.printOut(chalk.bold.grey(util.format.call(this, '[TAILING] Tailing last %d lines for [%s] process%s (change the value with --lines option)', lines, id, id === 'all' ? 'es' : '')));\n\n      // Populate the array `files_list` with the paths of all files we need to tail\n      list.forEach(function(proc) {\n        if (proc.pm2_env && (id === 'all' ||\n                             proc.pm2_env.name == id ||\n                             proc.pm2_env.pm_id == id)) {\n          if (proc.pm2_env.pm_out_log_path && exclusive !== 'err')\n            pushIfUnique({\n              path     : proc.pm2_env.pm_out_log_path,\n              app_name :proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n              type     : 'out'});\n          if (proc.pm2_env.pm_err_log_path && exclusive !== 'out')\n            pushIfUnique({\n              path     : proc.pm2_env.pm_err_log_path,\n              app_name : proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n              type     : 'err'\n            });\n        } else if(proc.pm2_env && proc.pm2_env.namespace == id) {\n          if(namespaceList.indexOf(proc.pm2_env.name) === -1) {\n            namespaceList.push(proc.pm2_env.name)\n          }\n          if (proc.pm2_env.pm_out_log_path && exclusive !== 'err')\n            pushIfUnique({\n              path     : proc.pm2_env.pm_out_log_path,\n              app_name :proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n              type     : 'out'});\n          if (proc.pm2_env.pm_err_log_path && exclusive !== 'out')\n            pushIfUnique({\n              path     : proc.pm2_env.pm_err_log_path,\n              app_name : proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n              type     : 'err'\n            });\n        }\n        // Populate the array `files_list` with the paths of all files we need to tail, when log in put is a regex\n        else if(proc.pm2_env && (isNaN(id) && id[0] === '/' && id[id.length - 1] === '/')) {\n          var regex = new RegExp(id.replace(/\\//g, ''));\n          if(regex.test(proc.pm2_env.name)) {\n            if(regexList.indexOf(proc.pm2_env.name) === -1) {\n              regexList.push(proc.pm2_env.name);\n            }\n            if (proc.pm2_env.pm_out_log_path && exclusive !== 'err')\n              pushIfUnique({\n                path     : proc.pm2_env.pm_out_log_path,\n                app_name : proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n                type     : 'out'});\n            if (proc.pm2_env.pm_err_log_path && exclusive !== 'out')\n              pushIfUnique({\n                path     : proc.pm2_env.pm_err_log_path,\n                app_name : proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n                type     : 'err'\n              });\n          }\n        }\n      });\n\n    //for fixing issue https://github.com/Unitech/pm2/issues/3506\n     /* if (files_list && files_list.length == 0) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'No file to stream for app [%s], exiting.', id);\n        return process.exit(cst.ERROR_EXIT);\n      }*/\n\n      if (!raw && (id === 'all' || id === 'PM2') && exclusive === false) {\n        Log.tail([{\n          path     : cst.PM2_LOG_FILE_PATH,\n          app_name : 'PM2',\n          type     : 'PM2'\n        }], lines, raw, function() {\n          Log.tail(files_list, lines, raw, function() {\n            Log.stream(that.Client, id, raw, timestamp, exclusive, highlight);\n          });\n        });\n      }\n      else {\n        Log.tail(files_list, lines, raw, function() {\n          if(regexList.length > 0) {\n            regexList.forEach(function(id) {\n                Log.stream(that.Client, id, raw, timestamp, exclusive, highlight);\n            })\n          }\n          else if(namespaceList.length > 0) {\n            namespaceList.forEach(function(id) {\n                Log.stream(that.Client, id, raw, timestamp, exclusive, highlight);\n            })\n          }\n          else {\n            Log.stream(that.Client, id, raw, timestamp, exclusive, highlight);\n          }\n        });\n      }\n    });\n  };\n\n  /**\n   * Description\n   * @method printLogs\n   * @param {String} id\n   * @param {Number} lines\n   * @param {Boolean} raw\n   * @return\n   */\n  CLI.prototype.printLogs = function(id, lines, raw, timestamp, exclusive) {\n    var that = this;\n    var files_list = [];\n\n    // If no argument is given, we stream logs for all running apps\n    id = id || 'all';\n    lines = lines !== undefined ? lines : 20;\n    lines = lines < 0 ? -(lines) : lines;\n\n    // Avoid duplicates and check if path is different from '/dev/null'\n    var pushIfUnique = function(entry) {\n      var exists = false;\n\n      if (entry.path.toLowerCase\n          && entry.path.toLowerCase() !== '/dev/null') {\n\n        files_list.some(function(file) {\n          if (file.path === entry.path)\n            exists = true;\n          return exists;\n        });\n\n        if (exists)\n          return;\n\n        files_list.push(entry);\n      }\n    }\n\n    // Get the list of all running apps\n    that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n      if (err) {\n        Common.printError(err);\n        that.exitCli(cst.ERROR_EXIT);\n      }\n\n      if (lines <= 0) {\n        return that.exitCli(cst.SUCCESS_EXIT)\n      }\n\n      Common.printOut(chalk.bold.grey(util.format.call(this, '[TAILING] Tailing last %d lines for [%s] process%s (change the value with --lines option)', lines, id, id === 'all' ? 'es' : '')));\n\n      // Populate the array `files_list` with the paths of all files we need to tail\n      list.forEach(function(proc) {\n        if (proc.pm2_env && (id === 'all' ||\n                             proc.pm2_env.name == id ||\n                             proc.pm2_env.pm_id == id)) {\n          if (proc.pm2_env.pm_out_log_path && exclusive !== 'err')\n            pushIfUnique({\n              path     : proc.pm2_env.pm_out_log_path,\n              app_name :proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n              type     : 'out'});\n          if (proc.pm2_env.pm_err_log_path && exclusive !== 'out')\n            pushIfUnique({\n              path     : proc.pm2_env.pm_err_log_path,\n              app_name : proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n              type     : 'err'\n            });\n        }\n        // Populate the array `files_list` with the paths of all files we need to tail, when log in put is a regex\n        else if(proc.pm2_env && (isNaN(id) && id[0] === '/' && id[id.length - 1] === '/')) {\n          var regex = new RegExp(id.replace(/\\//g, ''));\n          if(regex.test(proc.pm2_env.name)) {\n            if (proc.pm2_env.pm_out_log_path && exclusive !== 'err')\n              pushIfUnique({\n                path     : proc.pm2_env.pm_out_log_path,\n                app_name : proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n                type     : 'out'});\n            if (proc.pm2_env.pm_err_log_path && exclusive !== 'out')\n              pushIfUnique({\n                path     : proc.pm2_env.pm_err_log_path,\n                app_name : proc.pm2_env.pm_id + '|' + proc.pm2_env.name,\n                type     : 'err'\n              });\n          }\n        }\n      });\n\n      if (!raw && (id === 'all' || id === 'PM2') && exclusive === false) {\n        Log.tail([{\n          path     : cst.PM2_LOG_FILE_PATH,\n          app_name : 'PM2',\n          type     : 'PM2'\n        }], lines, raw, function() {\n          Log.tail(files_list, lines, raw, function() {\n            that.exitCli(cst.SUCCESS_EXIT);\n          });\n        });\n      }\n      else {\n        Log.tail(files_list, lines, raw, function() {\n          that.exitCli(cst.SUCCESS_EXIT);\n        });\n      }\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"script"}