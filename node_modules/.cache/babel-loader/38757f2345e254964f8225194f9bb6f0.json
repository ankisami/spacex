{"ast":null,"code":"/**\n * keys.js - emit key presses\n * Copyright (c) 2010-2015, Joyent, Inc. and other contributors (MIT License)\n * https://github.com/chjj/blessed\n */\n// Originally taken from the node.js tree:\n//\n// Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\nvar EventEmitter = require('events').EventEmitter; // NOTE: node <=v0.8.x has no EventEmitter.listenerCount\n\n\nfunction listenerCount(stream, event) {\n  return EventEmitter.listenerCount ? EventEmitter.listenerCount(stream, event) : stream.listeners(event).length;\n}\n/**\n * accepts a readable Stream instance and makes it emit \"keypress\" events\n */\n\n\nfunction emitKeypressEvents(stream) {\n  if (stream._keypressDecoder) return;\n\n  var StringDecoder = require('string_decoder').StringDecoder; // lazy load\n\n\n  stream._keypressDecoder = new StringDecoder('utf8');\n\n  function onData(b) {\n    if (listenerCount(stream, 'keypress') > 0) {\n      var r = stream._keypressDecoder.write(b);\n\n      if (r) emitKeys(stream, r);\n    } else {\n      // Nobody's watching anyway\n      stream.removeListener('data', onData);\n      stream.on('newListener', onNewListener);\n    }\n  }\n\n  function onNewListener(event) {\n    if (event === 'keypress') {\n      stream.on('data', onData);\n      stream.removeListener('newListener', onNewListener);\n    }\n  }\n\n  if (listenerCount(stream, 'keypress') > 0) {\n    stream.on('data', onData);\n  } else {\n    stream.on('newListener', onNewListener);\n  }\n}\n\nexports.emitKeypressEvents = emitKeypressEvents;\n/*\n  Some patterns seen in terminal key escape codes, derived from combos seen\n  at http://www.midnight-commander.org/browser/lib/tty/key.c\n\n  ESC letter\n  ESC [ letter\n  ESC [ modifier letter\n  ESC [ 1 ; modifier letter\n  ESC [ num char\n  ESC [ num ; modifier char\n  ESC O letter\n  ESC O modifier letter\n  ESC O 1 ; modifier letter\n  ESC N letter\n  ESC [ [ num ; modifier char\n  ESC [ [ 1 ; modifier letter\n  ESC ESC [ num char\n  ESC ESC O letter\n\n  - char is usually ~ but $ and ^ also happen with rxvt\n  - modifier is 1 +\n                (shift     * 1) +\n                (left_alt  * 2) +\n                (ctrl      * 4) +\n                (right_alt * 8)\n  - two leading ESCs apparently mean the same as one leading ESC\n*/\n// Regexes used for ansi escape code splitting\n\nvar metaKeyCodeReAnywhere = /(?:\\x1b)([a-zA-Z0-9])/;\nvar metaKeyCodeRe = new RegExp('^' + metaKeyCodeReAnywhere.source + '$');\nvar functionKeyCodeReAnywhere = new RegExp('(?:\\x1b+)(O|N|\\\\[|\\\\[\\\\[)(?:' + ['(\\\\d+)(?:;(\\\\d+))?([~^$])', '(?:M([@ #!a`])(.)(.))', // mouse\n'(?:1;)?(\\\\d+)?([a-zA-Z])'].join('|') + ')');\nvar functionKeyCodeRe = new RegExp('^' + functionKeyCodeReAnywhere.source);\nvar escapeCodeReAnywhere = new RegExp([functionKeyCodeReAnywhere.source, metaKeyCodeReAnywhere.source, /\\x1b./.source].join('|'));\n\nfunction emitKeys(stream, s) {\n  if (Buffer.isBuffer(s)) {\n    if (s[0] > 127 && s[1] === undefined) {\n      s[0] -= 128;\n      s = '\\x1b' + s.toString(stream.encoding || 'utf-8');\n    } else {\n      s = s.toString(stream.encoding || 'utf-8');\n    }\n  }\n\n  if (isMouse(s)) return;\n  var buffer = [];\n  var match;\n\n  while (match = escapeCodeReAnywhere.exec(s)) {\n    buffer = buffer.concat(s.slice(0, match.index).split(''));\n    buffer.push(match[0]);\n    s = s.slice(match.index + match[0].length);\n  }\n\n  buffer = buffer.concat(s.split(''));\n  buffer.forEach(function (s) {\n    var ch,\n        key = {\n      sequence: s,\n      name: undefined,\n      ctrl: false,\n      meta: false,\n      shift: false\n    },\n        parts;\n\n    if (s === '\\r') {\n      // carriage return\n      key.name = 'return';\n    } else if (s === '\\n') {\n      // enter, should have been called linefeed\n      key.name = 'enter'; // linefeed\n      // key.name = 'linefeed';\n    } else if (s === '\\t') {\n      // tab\n      key.name = 'tab';\n    } else if (s === '\\b' || s === '\\x7f' || s === '\\x1b\\x7f' || s === '\\x1b\\b') {\n      // backspace or ctrl+h\n      key.name = 'backspace';\n      key.meta = s.charAt(0) === '\\x1b';\n    } else if (s === '\\x1b' || s === '\\x1b\\x1b') {\n      // escape key\n      key.name = 'escape';\n      key.meta = s.length === 2;\n    } else if (s === ' ' || s === '\\x1b ') {\n      key.name = 'space';\n      key.meta = s.length === 2;\n    } else if (s.length === 1 && s <= '\\x1a') {\n      // ctrl+letter\n      key.name = String.fromCharCode(s.charCodeAt(0) + 'a'.charCodeAt(0) - 1);\n      key.ctrl = true;\n    } else if (s.length === 1 && s >= 'a' && s <= 'z') {\n      // lowercase letter\n      key.name = s;\n    } else if (s.length === 1 && s >= 'A' && s <= 'Z') {\n      // shift+letter\n      key.name = s.toLowerCase();\n      key.shift = true;\n    } else if (parts = metaKeyCodeRe.exec(s)) {\n      // meta+character key\n      key.name = parts[1].toLowerCase();\n      key.meta = true;\n      key.shift = /^[A-Z]$/.test(parts[1]);\n    } else if (parts = functionKeyCodeRe.exec(s)) {\n      // ansi escape sequence\n      // reassemble the key code leaving out leading \\x1b's,\n      // the modifier key bitflag and any meaningless \"1;\" sequence\n      var code = (parts[1] || '') + (parts[2] || '') + (parts[4] || '') + (parts[9] || ''),\n          modifier = (parts[3] || parts[8] || 1) - 1; // Parse the key modifier\n\n      key.ctrl = !!(modifier & 4);\n      key.meta = !!(modifier & 10);\n      key.shift = !!(modifier & 1);\n      key.code = code; // Parse the key itself\n\n      switch (code) {\n        /* xterm/gnome ESC O letter */\n        case 'OP':\n          key.name = 'f1';\n          break;\n\n        case 'OQ':\n          key.name = 'f2';\n          break;\n\n        case 'OR':\n          key.name = 'f3';\n          break;\n\n        case 'OS':\n          key.name = 'f4';\n          break;\n\n        /* xterm/rxvt ESC [ number ~ */\n\n        case '[11~':\n          key.name = 'f1';\n          break;\n\n        case '[12~':\n          key.name = 'f2';\n          break;\n\n        case '[13~':\n          key.name = 'f3';\n          break;\n\n        case '[14~':\n          key.name = 'f4';\n          break;\n\n        /* from Cygwin and used in libuv */\n\n        case '[[A':\n          key.name = 'f1';\n          break;\n\n        case '[[B':\n          key.name = 'f2';\n          break;\n\n        case '[[C':\n          key.name = 'f3';\n          break;\n\n        case '[[D':\n          key.name = 'f4';\n          break;\n\n        case '[[E':\n          key.name = 'f5';\n          break;\n\n        /* common */\n\n        case '[15~':\n          key.name = 'f5';\n          break;\n\n        case '[17~':\n          key.name = 'f6';\n          break;\n\n        case '[18~':\n          key.name = 'f7';\n          break;\n\n        case '[19~':\n          key.name = 'f8';\n          break;\n\n        case '[20~':\n          key.name = 'f9';\n          break;\n\n        case '[21~':\n          key.name = 'f10';\n          break;\n\n        case '[23~':\n          key.name = 'f11';\n          break;\n\n        case '[24~':\n          key.name = 'f12';\n          break;\n\n        /* xterm ESC [ letter */\n\n        case '[A':\n          key.name = 'up';\n          break;\n\n        case '[B':\n          key.name = 'down';\n          break;\n\n        case '[C':\n          key.name = 'right';\n          break;\n\n        case '[D':\n          key.name = 'left';\n          break;\n\n        case '[E':\n          key.name = 'clear';\n          break;\n\n        case '[F':\n          key.name = 'end';\n          break;\n\n        case '[H':\n          key.name = 'home';\n          break;\n\n        /* xterm/gnome ESC O letter */\n\n        case 'OA':\n          key.name = 'up';\n          break;\n\n        case 'OB':\n          key.name = 'down';\n          break;\n\n        case 'OC':\n          key.name = 'right';\n          break;\n\n        case 'OD':\n          key.name = 'left';\n          break;\n\n        case 'OE':\n          key.name = 'clear';\n          break;\n\n        case 'OF':\n          key.name = 'end';\n          break;\n\n        case 'OH':\n          key.name = 'home';\n          break;\n\n        /* xterm/rxvt ESC [ number ~ */\n\n        case '[1~':\n          key.name = 'home';\n          break;\n\n        case '[2~':\n          key.name = 'insert';\n          break;\n\n        case '[3~':\n          key.name = 'delete';\n          break;\n\n        case '[4~':\n          key.name = 'end';\n          break;\n\n        case '[5~':\n          key.name = 'pageup';\n          break;\n\n        case '[6~':\n          key.name = 'pagedown';\n          break;\n\n        /* putty */\n\n        case '[[5~':\n          key.name = 'pageup';\n          break;\n\n        case '[[6~':\n          key.name = 'pagedown';\n          break;\n\n        /* rxvt */\n\n        case '[7~':\n          key.name = 'home';\n          break;\n\n        case '[8~':\n          key.name = 'end';\n          break;\n\n        /* rxvt keys with modifiers */\n\n        case '[a':\n          key.name = 'up';\n          key.shift = true;\n          break;\n\n        case '[b':\n          key.name = 'down';\n          key.shift = true;\n          break;\n\n        case '[c':\n          key.name = 'right';\n          key.shift = true;\n          break;\n\n        case '[d':\n          key.name = 'left';\n          key.shift = true;\n          break;\n\n        case '[e':\n          key.name = 'clear';\n          key.shift = true;\n          break;\n\n        case '[2$':\n          key.name = 'insert';\n          key.shift = true;\n          break;\n\n        case '[3$':\n          key.name = 'delete';\n          key.shift = true;\n          break;\n\n        case '[5$':\n          key.name = 'pageup';\n          key.shift = true;\n          break;\n\n        case '[6$':\n          key.name = 'pagedown';\n          key.shift = true;\n          break;\n\n        case '[7$':\n          key.name = 'home';\n          key.shift = true;\n          break;\n\n        case '[8$':\n          key.name = 'end';\n          key.shift = true;\n          break;\n\n        case 'Oa':\n          key.name = 'up';\n          key.ctrl = true;\n          break;\n\n        case 'Ob':\n          key.name = 'down';\n          key.ctrl = true;\n          break;\n\n        case 'Oc':\n          key.name = 'right';\n          key.ctrl = true;\n          break;\n\n        case 'Od':\n          key.name = 'left';\n          key.ctrl = true;\n          break;\n\n        case 'Oe':\n          key.name = 'clear';\n          key.ctrl = true;\n          break;\n\n        case '[2^':\n          key.name = 'insert';\n          key.ctrl = true;\n          break;\n\n        case '[3^':\n          key.name = 'delete';\n          key.ctrl = true;\n          break;\n\n        case '[5^':\n          key.name = 'pageup';\n          key.ctrl = true;\n          break;\n\n        case '[6^':\n          key.name = 'pagedown';\n          key.ctrl = true;\n          break;\n\n        case '[7^':\n          key.name = 'home';\n          key.ctrl = true;\n          break;\n\n        case '[8^':\n          key.name = 'end';\n          key.ctrl = true;\n          break;\n\n        /* misc. */\n\n        case '[Z':\n          key.name = 'tab';\n          key.shift = true;\n          break;\n\n        default:\n          key.name = 'undefined';\n          break;\n      }\n    } // Don't emit a key if no name was found\n\n\n    if (key.name === undefined) {\n      key = undefined;\n    }\n\n    if (s.length === 1) {\n      ch = s;\n    }\n\n    if (key || ch) {\n      stream.emit('keypress', ch, key); // if (key && key.name === 'return') {\n      //   var nkey = {};\n      //   Object.keys(key).forEach(function(k) {\n      //     nkey[k] = key[k];\n      //   });\n      //   nkey.name = 'enter';\n      //   stream.emit('keypress', ch, nkey);\n      // }\n    }\n  });\n}\n\nfunction isMouse(s) {\n  return /\\x1b\\[M/.test(s) || /\\x1b\\[M([\\x00\\u0020-\\uffff]{3})/.test(s) || /\\x1b\\[(\\d+;\\d+;\\d+)M/.test(s) || /\\x1b\\[<(\\d+;\\d+;\\d+)([mM])/.test(s) || /\\x1b\\[<(\\d+;\\d+;\\d+;\\d+)&w/.test(s) || /\\x1b\\[24([0135])~\\[(\\d+),(\\d+)\\]\\r/.test(s) || /\\x1b\\[(O|I)/.test(s);\n}","map":{"version":3,"sources":["/Users/samianki/node_modules/blessed/lib/keys.js"],"names":["EventEmitter","require","listenerCount","stream","event","listeners","length","emitKeypressEvents","_keypressDecoder","StringDecoder","onData","b","r","write","emitKeys","removeListener","on","onNewListener","exports","metaKeyCodeReAnywhere","metaKeyCodeRe","RegExp","source","functionKeyCodeReAnywhere","join","functionKeyCodeRe","escapeCodeReAnywhere","s","Buffer","isBuffer","undefined","toString","encoding","isMouse","buffer","match","exec","concat","slice","index","split","push","forEach","ch","key","sequence","name","ctrl","meta","shift","parts","charAt","String","fromCharCode","charCodeAt","toLowerCase","test","code","modifier","emit"],"mappings":"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","sourcesContent":["/**\n * keys.js - emit key presses\n * Copyright (c) 2010-2015, Joyent, Inc. and other contributors (MIT License)\n * https://github.com/chjj/blessed\n */\n\n// Originally taken from the node.js tree:\n//\n// Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\nvar EventEmitter = require('events').EventEmitter;\n\n// NOTE: node <=v0.8.x has no EventEmitter.listenerCount\nfunction listenerCount(stream, event) {\n  return EventEmitter.listenerCount\n    ? EventEmitter.listenerCount(stream, event)\n    : stream.listeners(event).length;\n}\n\n/**\n * accepts a readable Stream instance and makes it emit \"keypress\" events\n */\n\nfunction emitKeypressEvents(stream) {\n  if (stream._keypressDecoder) return;\n  var StringDecoder = require('string_decoder').StringDecoder; // lazy load\n  stream._keypressDecoder = new StringDecoder('utf8');\n\n  function onData(b) {\n    if (listenerCount(stream, 'keypress') > 0) {\n      var r = stream._keypressDecoder.write(b);\n      if (r) emitKeys(stream, r);\n    } else {\n      // Nobody's watching anyway\n      stream.removeListener('data', onData);\n      stream.on('newListener', onNewListener);\n    }\n  }\n\n  function onNewListener(event) {\n    if (event === 'keypress') {\n      stream.on('data', onData);\n      stream.removeListener('newListener', onNewListener);\n    }\n  }\n\n  if (listenerCount(stream, 'keypress') > 0) {\n    stream.on('data', onData);\n  } else {\n    stream.on('newListener', onNewListener);\n  }\n}\nexports.emitKeypressEvents = emitKeypressEvents;\n\n/*\n  Some patterns seen in terminal key escape codes, derived from combos seen\n  at http://www.midnight-commander.org/browser/lib/tty/key.c\n\n  ESC letter\n  ESC [ letter\n  ESC [ modifier letter\n  ESC [ 1 ; modifier letter\n  ESC [ num char\n  ESC [ num ; modifier char\n  ESC O letter\n  ESC O modifier letter\n  ESC O 1 ; modifier letter\n  ESC N letter\n  ESC [ [ num ; modifier char\n  ESC [ [ 1 ; modifier letter\n  ESC ESC [ num char\n  ESC ESC O letter\n\n  - char is usually ~ but $ and ^ also happen with rxvt\n  - modifier is 1 +\n                (shift     * 1) +\n                (left_alt  * 2) +\n                (ctrl      * 4) +\n                (right_alt * 8)\n  - two leading ESCs apparently mean the same as one leading ESC\n*/\n\n// Regexes used for ansi escape code splitting\nvar metaKeyCodeReAnywhere = /(?:\\x1b)([a-zA-Z0-9])/;\nvar metaKeyCodeRe = new RegExp('^' + metaKeyCodeReAnywhere.source + '$');\nvar functionKeyCodeReAnywhere = new RegExp('(?:\\x1b+)(O|N|\\\\[|\\\\[\\\\[)(?:' + [\n  '(\\\\d+)(?:;(\\\\d+))?([~^$])',\n  '(?:M([@ #!a`])(.)(.))', // mouse\n  '(?:1;)?(\\\\d+)?([a-zA-Z])'\n].join('|') + ')');\nvar functionKeyCodeRe = new RegExp('^' + functionKeyCodeReAnywhere.source);\nvar escapeCodeReAnywhere = new RegExp([\n  functionKeyCodeReAnywhere.source, metaKeyCodeReAnywhere.source, /\\x1b./.source\n].join('|'));\n\nfunction emitKeys(stream, s) {\n  if (Buffer.isBuffer(s)) {\n    if (s[0] > 127 && s[1] === undefined) {\n      s[0] -= 128;\n      s = '\\x1b' + s.toString(stream.encoding || 'utf-8');\n    } else {\n      s = s.toString(stream.encoding || 'utf-8');\n    }\n  }\n\n  if (isMouse(s)) return;\n\n  var buffer = [];\n  var match;\n  while (match = escapeCodeReAnywhere.exec(s)) {\n    buffer = buffer.concat(s.slice(0, match.index).split(''));\n    buffer.push(match[0]);\n    s = s.slice(match.index + match[0].length);\n  }\n  buffer = buffer.concat(s.split(''));\n\n  buffer.forEach(function(s) {\n    var ch,\n        key = {\n          sequence: s,\n          name: undefined,\n          ctrl: false,\n          meta: false,\n          shift: false\n        },\n        parts;\n\n    if (s === '\\r') {\n      // carriage return\n      key.name = 'return';\n\n    } else if (s === '\\n') {\n      // enter, should have been called linefeed\n      key.name = 'enter';\n      // linefeed\n      // key.name = 'linefeed';\n\n    } else if (s === '\\t') {\n      // tab\n      key.name = 'tab';\n\n    } else if (s === '\\b' || s === '\\x7f' ||\n               s === '\\x1b\\x7f' || s === '\\x1b\\b') {\n      // backspace or ctrl+h\n      key.name = 'backspace';\n      key.meta = (s.charAt(0) === '\\x1b');\n\n    } else if (s === '\\x1b' || s === '\\x1b\\x1b') {\n      // escape key\n      key.name = 'escape';\n      key.meta = (s.length === 2);\n\n    } else if (s === ' ' || s === '\\x1b ') {\n      key.name = 'space';\n      key.meta = (s.length === 2);\n\n    } else if (s.length === 1 && s <= '\\x1a') {\n      // ctrl+letter\n      key.name = String.fromCharCode(s.charCodeAt(0) + 'a'.charCodeAt(0) - 1);\n      key.ctrl = true;\n\n    } else if (s.length === 1 && s >= 'a' && s <= 'z') {\n      // lowercase letter\n      key.name = s;\n\n    } else if (s.length === 1 && s >= 'A' && s <= 'Z') {\n      // shift+letter\n      key.name = s.toLowerCase();\n      key.shift = true;\n\n    } else if (parts = metaKeyCodeRe.exec(s)) {\n      // meta+character key\n      key.name = parts[1].toLowerCase();\n      key.meta = true;\n      key.shift = /^[A-Z]$/.test(parts[1]);\n\n    } else if (parts = functionKeyCodeRe.exec(s)) {\n      // ansi escape sequence\n\n      // reassemble the key code leaving out leading \\x1b's,\n      // the modifier key bitflag and any meaningless \"1;\" sequence\n      var code = (parts[1] || '') + (parts[2] || '') +\n                 (parts[4] || '') + (parts[9] || ''),\n          modifier = (parts[3] || parts[8] || 1) - 1;\n\n      // Parse the key modifier\n      key.ctrl = !!(modifier & 4);\n      key.meta = !!(modifier & 10);\n      key.shift = !!(modifier & 1);\n      key.code = code;\n\n      // Parse the key itself\n      switch (code) {\n        /* xterm/gnome ESC O letter */\n        case 'OP': key.name = 'f1'; break;\n        case 'OQ': key.name = 'f2'; break;\n        case 'OR': key.name = 'f3'; break;\n        case 'OS': key.name = 'f4'; break;\n\n        /* xterm/rxvt ESC [ number ~ */\n        case '[11~': key.name = 'f1'; break;\n        case '[12~': key.name = 'f2'; break;\n        case '[13~': key.name = 'f3'; break;\n        case '[14~': key.name = 'f4'; break;\n\n        /* from Cygwin and used in libuv */\n        case '[[A': key.name = 'f1'; break;\n        case '[[B': key.name = 'f2'; break;\n        case '[[C': key.name = 'f3'; break;\n        case '[[D': key.name = 'f4'; break;\n        case '[[E': key.name = 'f5'; break;\n\n        /* common */\n        case '[15~': key.name = 'f5'; break;\n        case '[17~': key.name = 'f6'; break;\n        case '[18~': key.name = 'f7'; break;\n        case '[19~': key.name = 'f8'; break;\n        case '[20~': key.name = 'f9'; break;\n        case '[21~': key.name = 'f10'; break;\n        case '[23~': key.name = 'f11'; break;\n        case '[24~': key.name = 'f12'; break;\n\n        /* xterm ESC [ letter */\n        case '[A': key.name = 'up'; break;\n        case '[B': key.name = 'down'; break;\n        case '[C': key.name = 'right'; break;\n        case '[D': key.name = 'left'; break;\n        case '[E': key.name = 'clear'; break;\n        case '[F': key.name = 'end'; break;\n        case '[H': key.name = 'home'; break;\n\n        /* xterm/gnome ESC O letter */\n        case 'OA': key.name = 'up'; break;\n        case 'OB': key.name = 'down'; break;\n        case 'OC': key.name = 'right'; break;\n        case 'OD': key.name = 'left'; break;\n        case 'OE': key.name = 'clear'; break;\n        case 'OF': key.name = 'end'; break;\n        case 'OH': key.name = 'home'; break;\n\n        /* xterm/rxvt ESC [ number ~ */\n        case '[1~': key.name = 'home'; break;\n        case '[2~': key.name = 'insert'; break;\n        case '[3~': key.name = 'delete'; break;\n        case '[4~': key.name = 'end'; break;\n        case '[5~': key.name = 'pageup'; break;\n        case '[6~': key.name = 'pagedown'; break;\n\n        /* putty */\n        case '[[5~': key.name = 'pageup'; break;\n        case '[[6~': key.name = 'pagedown'; break;\n\n        /* rxvt */\n        case '[7~': key.name = 'home'; break;\n        case '[8~': key.name = 'end'; break;\n\n        /* rxvt keys with modifiers */\n        case '[a': key.name = 'up'; key.shift = true; break;\n        case '[b': key.name = 'down'; key.shift = true; break;\n        case '[c': key.name = 'right'; key.shift = true; break;\n        case '[d': key.name = 'left'; key.shift = true; break;\n        case '[e': key.name = 'clear'; key.shift = true; break;\n\n        case '[2$': key.name = 'insert'; key.shift = true; break;\n        case '[3$': key.name = 'delete'; key.shift = true; break;\n        case '[5$': key.name = 'pageup'; key.shift = true; break;\n        case '[6$': key.name = 'pagedown'; key.shift = true; break;\n        case '[7$': key.name = 'home'; key.shift = true; break;\n        case '[8$': key.name = 'end'; key.shift = true; break;\n\n        case 'Oa': key.name = 'up'; key.ctrl = true; break;\n        case 'Ob': key.name = 'down'; key.ctrl = true; break;\n        case 'Oc': key.name = 'right'; key.ctrl = true; break;\n        case 'Od': key.name = 'left'; key.ctrl = true; break;\n        case 'Oe': key.name = 'clear'; key.ctrl = true; break;\n\n        case '[2^': key.name = 'insert'; key.ctrl = true; break;\n        case '[3^': key.name = 'delete'; key.ctrl = true; break;\n        case '[5^': key.name = 'pageup'; key.ctrl = true; break;\n        case '[6^': key.name = 'pagedown'; key.ctrl = true; break;\n        case '[7^': key.name = 'home'; key.ctrl = true; break;\n        case '[8^': key.name = 'end'; key.ctrl = true; break;\n\n        /* misc. */\n        case '[Z': key.name = 'tab'; key.shift = true; break;\n        default: key.name = 'undefined'; break;\n\n      }\n    }\n\n    // Don't emit a key if no name was found\n    if (key.name === undefined) {\n      key = undefined;\n    }\n\n    if (s.length === 1) {\n      ch = s;\n    }\n\n    if (key || ch) {\n      stream.emit('keypress', ch, key);\n      // if (key && key.name === 'return') {\n      //   var nkey = {};\n      //   Object.keys(key).forEach(function(k) {\n      //     nkey[k] = key[k];\n      //   });\n      //   nkey.name = 'enter';\n      //   stream.emit('keypress', ch, nkey);\n      // }\n    }\n  });\n}\n\nfunction isMouse(s) {\n  return /\\x1b\\[M/.test(s)\n    || /\\x1b\\[M([\\x00\\u0020-\\uffff]{3})/.test(s)\n    || /\\x1b\\[(\\d+;\\d+;\\d+)M/.test(s)\n    || /\\x1b\\[<(\\d+;\\d+;\\d+)([mM])/.test(s)\n    || /\\x1b\\[<(\\d+;\\d+;\\d+;\\d+)&w/.test(s)\n    || /\\x1b\\[24([0135])~\\[(\\d+),(\\d+)\\]\\r/.test(s)\n    || /\\x1b\\[(O|I)/.test(s);\n}\n"]},"metadata":{},"sourceType":"script"}