{"ast":null,"code":"'use strict'; // eslint-disable-next-line camelcase\n\nvar child_process = require('child_process');\n\nvar format = require('util').format;\n\nvar path = require('path');\n\nvar series = require('run-series');\n\nvar tv4 = require('tv4');\n\nvar schema = {\n  type: 'object',\n  properties: {\n    user: {\n      type: 'string',\n      minLength: 1\n    },\n    host: {\n      type: ['string', 'array']\n    },\n    repo: {\n      type: 'string'\n    },\n    path: {\n      type: 'string'\n    },\n    ref: {\n      type: 'string'\n    },\n    fetch: {\n      type: 'string'\n    }\n  },\n  required: ['host', 'repo', 'path', 'ref']\n};\n/**\n * Spawn a modified version of visionmedia/deploy\n * @private\n * @param {object} config config to be piped to deploy\n * @param {array}  args custom deploy command-line arguments\n * @param {DeployCallback} cb done callback\n */\n\nfunction spawn(config, args, cb) {\n  var cmd = format('echo \\'%j\\' | \"%s\"', config, require.resolve('./deploy'));\n  args = args || [];\n\n  if (args.length > 0) {\n    var cmdArgs = args.map(function (arg) {\n      return format('\"%s\"', arg);\n    }).join(' ');\n    cmd = [cmd, cmdArgs].join(' ');\n  }\n\n  var proc = child_process.spawn('sh', ['-c', cmd], {\n    stdio: 'inherit'\n  });\n  var error;\n  proc.on('error', function (err) {\n    error = err;\n  });\n  proc.on('close', function (code) {\n    if (code === 0) return cb(null, args);\n    error = error || new Error(format('Deploy failed with exit code: %s', code));\n    error.code = code;\n    return cb(error);\n  });\n}\n\nfunction clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction castArray(arg) {\n  return Array.isArray(arg) ? arg : [arg];\n}\n/**\n * Deploy to a single environment\n * @param {object} deployConfig object containing deploy configs for all environments\n * @param {string} env the name of the environment to deploy to\n * @param {array} args custom deploy command-line arguments\n * @param {DeployCallback} cb done callback\n * @returns {boolean} return value is always `false`\n */\n\n\nfunction deployForEnv(deployConfig, env, args, cb) {\n  if (!deployConfig[env]) {\n    return cb(new Error(format('%s not defined in deploy section', env)));\n  }\n\n  var envConfig = clone(deployConfig[env]);\n\n  if (envConfig.ssh_options) {\n    envConfig.ssh_options = castArray(envConfig.ssh_options).map(function (option) {\n      return format('-o %s', option);\n    }).join(' ');\n  }\n\n  var result = tv4.validateResult(envConfig, schema);\n\n  if (!result.valid) {\n    return cb(result.error);\n  }\n\n  if (process.env.NODE_ENV !== 'test') {\n    console.log('--> Deploying to %s environment', env);\n  }\n\n  if (process.platform !== 'win32') {\n    envConfig.path = path.resolve(envConfig.path);\n  }\n\n  var hosts = castArray(envConfig.host);\n  var jobs = hosts.map(function (host) {\n    return function job(done) {\n      if (process.env.NODE_ENV !== 'test') {\n        console.log('--> on host %s', host.host ? host.host : host);\n      }\n\n      var config = clone(envConfig);\n      config.host = host;\n      config['post-deploy'] = prependEnv(config['post-deploy'], config.env);\n      spawn(config, args, done);\n    };\n  });\n  series(jobs, function (err, result) {\n    result = Array.isArray(envConfig.host) ? result : result[0];\n    cb(err, result);\n  });\n  return false;\n}\n\nfunction envToString(env) {\n  env = env || {};\n  return Object.keys(env).map(function (name) {\n    return format('%s=%s', name.toUpperCase(), env[name]);\n  }).join(' ');\n}\n/**\n * Prepend command with environment variables\n * @private\n * @param {string} cmd command\n * @param {object} env object containing environment variables\n * @returns {string} concatenated shell command\n */\n\n\nfunction prependEnv(cmd, env) {\n  const envVars = envToString(env);\n  if (!envVars) return cmd;\n  if (!cmd) return format('export %s', envVars);\n  return format('export %s && %s', envVars, cmd);\n}\n\nmodule.exports = {\n  deployForEnv: deployForEnv\n};\n/**\n* @callback DeployCallback\n* @param {Error} error deployment error\n* @param {array} args custom command-line arguments provided to deploy\n*/","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2-deploy/deploy.js"],"names":["child_process","require","format","path","series","tv4","schema","type","properties","user","minLength","host","repo","ref","fetch","required","spawn","config","args","cb","cmd","resolve","length","cmdArgs","map","arg","join","proc","stdio","error","on","err","code","Error","clone","obj","JSON","parse","stringify","castArray","Array","isArray","deployForEnv","deployConfig","env","envConfig","ssh_options","option","result","validateResult","valid","process","NODE_ENV","console","log","platform","hosts","jobs","job","done","prependEnv","envToString","Object","keys","name","toUpperCase","envVars","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// eslint-disable-next-line camelcase\nvar child_process = require('child_process');\nvar format = require('util').format;\nvar path = require('path');\nvar series = require('run-series');\nvar tv4 = require('tv4');\n\nvar schema = {\n  type: 'object',\n  properties: {\n    user: { type: 'string', minLength: 1 },\n    host: { type: ['string', 'array'] },\n    repo: { type: 'string' },\n    path: { type: 'string' },\n    ref: { type: 'string' },\n    fetch: { type: 'string' },\n  },\n  required: ['host', 'repo', 'path', 'ref'],\n};\n\n/**\n * Spawn a modified version of visionmedia/deploy\n * @private\n * @param {object} config config to be piped to deploy\n * @param {array}  args custom deploy command-line arguments\n * @param {DeployCallback} cb done callback\n */\nfunction spawn(config, args, cb) {\n  var cmd = format('echo \\'%j\\' | \"%s\"', config, require.resolve('./deploy'));\n\n  args = args || [];\n  if (args.length > 0) {\n    var cmdArgs = args.map(function (arg) {\n      return format('\"%s\"', arg);\n    }).join(' ');\n    cmd = [cmd, cmdArgs].join(' ');\n  }\n\n  var proc = child_process.spawn('sh', ['-c', cmd], { stdio: 'inherit' });\n  var error;\n\n  proc.on('error', function (err) {\n    error = err;\n  });\n\n  proc.on('close', function (code) {\n    if (code === 0) return cb(null, args);\n    error = error || new Error(format('Deploy failed with exit code: %s', code));\n    error.code = code;\n    return cb(error);\n  });\n}\n\nfunction clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction castArray(arg) {\n  return Array.isArray(arg) ? arg : [arg];\n}\n\n/**\n * Deploy to a single environment\n * @param {object} deployConfig object containing deploy configs for all environments\n * @param {string} env the name of the environment to deploy to\n * @param {array} args custom deploy command-line arguments\n * @param {DeployCallback} cb done callback\n * @returns {boolean} return value is always `false`\n */\nfunction deployForEnv(deployConfig, env, args, cb) {\n  if (!deployConfig[env]) {\n    return cb(new Error(format('%s not defined in deploy section', env)));\n  }\n\n  var envConfig = clone(deployConfig[env]);\n\n  if (envConfig.ssh_options) {\n    envConfig.ssh_options = castArray(envConfig.ssh_options).map(function (option) {\n      return format('-o %s', option);\n    }).join(' ');\n  }\n\n  var result = tv4.validateResult(envConfig, schema);\n  if (!result.valid) {\n    return cb(result.error);\n  }\n\n  if (process.env.NODE_ENV !== 'test') {\n    console.log('--> Deploying to %s environment', env);\n  }\n\n  if (process.platform !== 'win32') {\n    envConfig.path = path.resolve(envConfig.path);\n  }\n\n  var hosts = castArray(envConfig.host);\n  var jobs = hosts.map(function (host) {\n    return function job(done) {\n      if (process.env.NODE_ENV !== 'test') {\n        console.log('--> on host %s', host.host ? host.host : host);\n      }\n\n      var config = clone(envConfig);\n      config.host = host;\n      config['post-deploy'] = prependEnv(config['post-deploy'], config.env);\n\n      spawn(config, args, done);\n    };\n  });\n  series(jobs, function (err, result) {\n    result = Array.isArray(envConfig.host) ? result : result[0];\n    cb(err, result);\n  });\n\n  return false;\n}\n\nfunction envToString(env) {\n  env = env || {};\n  return Object.keys(env).map(function (name) {\n    return format('%s=%s', name.toUpperCase(), env[name]);\n  }).join(' ');\n}\n\n/**\n * Prepend command with environment variables\n * @private\n * @param {string} cmd command\n * @param {object} env object containing environment variables\n * @returns {string} concatenated shell command\n */\nfunction prependEnv(cmd, env) {\n  const envVars = envToString(env);\n  if (!envVars) return cmd;\n  if (!cmd) return format('export %s', envVars);\n  return format('export %s && %s', envVars, cmd);\n}\n\nmodule.exports = {\n  deployForEnv: deployForEnv,\n};\n\n/**\n* @callback DeployCallback\n* @param {Error} error deployment error\n* @param {array} args custom command-line arguments provided to deploy\n*/\n"]},"metadata":{},"sourceType":"script"}