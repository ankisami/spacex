{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar EventEmitter = require('events').EventEmitter;\n\nvar spawn = require('child_process').spawn;\n\nvar path = require('path');\n\nvar dirname = path.dirname;\nvar basename = path.basename;\n\nvar fs = require('fs');\n/**\n * Inherit `Command` from `EventEmitter.prototype`.\n */\n\n\nrequire('util').inherits(Command, EventEmitter);\n/**\n * Expose the root command.\n */\n\n\nexports = module.exports = new Command();\n/**\n * Expose `Command`.\n */\n\nexports.Command = Command;\n/**\n * Expose `Option`.\n */\n\nexports.Option = Option;\n/**\n * Initialize a new `Option` with the given `flags` and `description`.\n *\n * @param {String} flags\n * @param {String} description\n * @api public\n */\n\nfunction Option(flags, description) {\n  this.flags = flags;\n  this.required = ~flags.indexOf('<');\n  this.optional = ~flags.indexOf('[');\n  this.bool = !~flags.indexOf('-no-');\n  flags = flags.split(/[ ,|]+/);\n  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();\n  this.long = flags.shift();\n  this.description = description || '';\n}\n/**\n * Return option name.\n *\n * @return {String}\n * @api private\n */\n\n\nOption.prototype.name = function () {\n  return this.long.replace('--', '').replace('no-', '');\n};\n/**\n * Return option name, in a camelcase format that can be used\n * as a object attribute key.\n *\n * @return {String}\n * @api private\n */\n\n\nOption.prototype.attributeName = function () {\n  return camelcase(this.name());\n};\n/**\n * Check if `arg` matches the short or long flag.\n *\n * @param {String} arg\n * @return {Boolean}\n * @api private\n */\n\n\nOption.prototype.is = function (arg) {\n  return this.short === arg || this.long === arg;\n};\n/**\n * Initialize a new `Command`.\n *\n * @param {String} name\n * @api public\n */\n\n\nfunction Command(name) {\n  this.commands = [];\n  this.options = [];\n  this._execs = {};\n  this._allowUnknownOption = false;\n  this._args = [];\n  this._name = name || '';\n}\n/**\n * Add command `name`.\n *\n * The `.action()` callback is invoked when the\n * command `name` is specified via __ARGV__,\n * and the remaining arguments are applied to the\n * function for access.\n *\n * When the `name` is \"*\" an un-matched command\n * will be passed as the first arg, followed by\n * the rest of __ARGV__ remaining.\n *\n * Examples:\n *\n *      program\n *        .version('0.0.1')\n *        .option('-C, --chdir <path>', 'change the working directory')\n *        .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n *        .option('-T, --no-tests', 'ignore test hook')\n *\n *      program\n *        .command('setup')\n *        .description('run remote setup commands')\n *        .action(function() {\n *          console.log('setup');\n *        });\n *\n *      program\n *        .command('exec <cmd>')\n *        .description('run the given remote command')\n *        .action(function(cmd) {\n *          console.log('exec \"%s\"', cmd);\n *        });\n *\n *      program\n *        .command('teardown <dir> [otherDirs...]')\n *        .description('run teardown commands')\n *        .action(function(dir, otherDirs) {\n *          console.log('dir \"%s\"', dir);\n *          if (otherDirs) {\n *            otherDirs.forEach(function (oDir) {\n *              console.log('dir \"%s\"', oDir);\n *            });\n *          }\n *        });\n *\n *      program\n *        .command('*')\n *        .description('deploy the given env')\n *        .action(function(env) {\n *          console.log('deploying \"%s\"', env);\n *        });\n *\n *      program.parse(process.argv);\n  *\n * @param {String} name\n * @param {String} [desc] for git-style sub-commands\n * @return {Command} the new command\n * @api public\n */\n\n\nCommand.prototype.command = function (name, desc, opts) {\n  if (typeof desc === 'object' && desc !== null) {\n    opts = desc;\n    desc = null;\n  }\n\n  opts = opts || {};\n  var args = name.split(/ +/);\n  var cmd = new Command(args.shift());\n\n  if (desc) {\n    cmd.description(desc);\n    this.executables = true;\n    this._execs[cmd._name] = true;\n    if (opts.isDefault) this.defaultExecutable = cmd._name;\n  }\n\n  cmd._noHelp = !!opts.noHelp;\n  this.commands.push(cmd);\n  cmd.parseExpectedArgs(args);\n  cmd.parent = this;\n  if (desc) return this;\n  return cmd;\n};\n/**\n * Define argument syntax for the top-level command.\n *\n * @api public\n */\n\n\nCommand.prototype.arguments = function (desc) {\n  return this.parseExpectedArgs(desc.split(/ +/));\n};\n/**\n * Add an implicit `help [cmd]` subcommand\n * which invokes `--help` for the given command.\n *\n * @api private\n */\n\n\nCommand.prototype.addImplicitHelpCommand = function () {\n  this.command('help [cmd]', 'display help for [cmd]');\n};\n/**\n * Parse expected `args`.\n *\n * For example `[\"[type]\"]` becomes `[{ required: false, name: 'type' }]`.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api public\n */\n\n\nCommand.prototype.parseExpectedArgs = function (args) {\n  if (!args.length) return;\n  var self = this;\n  args.forEach(function (arg) {\n    var argDetails = {\n      required: false,\n      name: '',\n      variadic: false\n    };\n\n    switch (arg[0]) {\n      case '<':\n        argDetails.required = true;\n        argDetails.name = arg.slice(1, -1);\n        break;\n\n      case '[':\n        argDetails.name = arg.slice(1, -1);\n        break;\n    }\n\n    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {\n      argDetails.variadic = true;\n      argDetails.name = argDetails.name.slice(0, -3);\n    }\n\n    if (argDetails.name) {\n      self._args.push(argDetails);\n    }\n  });\n  return this;\n};\n/**\n * Register callback `fn` for the command.\n *\n * Examples:\n *\n *      program\n *        .command('help')\n *        .description('display verbose help')\n *        .action(function() {\n *           // output help here\n *        });\n *\n * @param {Function} fn\n * @return {Command} for chaining\n * @api public\n */\n\n\nCommand.prototype.action = function (fn) {\n  var self = this;\n\n  var listener = function (args, unknown) {\n    // Parse any so-far unknown options\n    args = args || [];\n    unknown = unknown || [];\n    var parsed = self.parseOptions(unknown); // Output help if necessary\n\n    outputHelpIfNecessary(self, parsed.unknown); // If there are still any unknown options, then we simply\n    // die, unless someone asked for help, in which case we give it\n    // to them, and then we die.\n\n    if (parsed.unknown.length > 0) {\n      self.unknownOption(parsed.unknown[0]);\n    } // Leftover arguments need to be pushed back. Fixes issue #56\n\n\n    if (parsed.args.length) args = parsed.args.concat(args);\n\n    self._args.forEach(function (arg, i) {\n      if (arg.required && args[i] == null) {\n        self.missingArgument(arg.name);\n      } else if (arg.variadic) {\n        if (i !== self._args.length - 1) {\n          self.variadicArgNotLast(arg.name);\n        }\n\n        args[i] = args.splice(i);\n      }\n    }); // Always append ourselves to the end of the arguments,\n    // to make sure we match the number of arguments the user\n    // expects\n\n\n    if (self._args.length) {\n      args[self._args.length] = self;\n    } else {\n      args.push(self);\n    }\n\n    fn.apply(self, args);\n  };\n\n  var parent = this.parent || this;\n  var name = parent === this ? '*' : this._name;\n  parent.on('command:' + name, listener);\n  if (this._alias) parent.on('command:' + this._alias, listener);\n  return this;\n};\n/**\n * Define option with `flags`, `description` and optional\n * coercion `fn`.\n *\n * The `flags` string should contain both the short and long flags,\n * separated by comma, a pipe or space. The following are all valid\n * all will output this way when `--help` is used.\n *\n *    \"-p, --pepper\"\n *    \"-p|--pepper\"\n *    \"-p --pepper\"\n *\n * Examples:\n *\n *     // simple boolean defaulting to false\n *     program.option('-p, --pepper', 'add pepper');\n *\n *     --pepper\n *     program.pepper\n *     // => Boolean\n *\n *     // simple boolean defaulting to true\n *     program.option('-C, --no-cheese', 'remove cheese');\n *\n *     program.cheese\n *     // => true\n *\n *     --no-cheese\n *     program.cheese\n *     // => false\n *\n *     // required argument\n *     program.option('-C, --chdir <path>', 'change the working directory');\n *\n *     --chdir /tmp\n *     program.chdir\n *     // => \"/tmp\"\n *\n *     // optional argument\n *     program.option('-c, --cheese [type]', 'add cheese [marble]');\n *\n * @param {String} flags\n * @param {String} description\n * @param {Function|*} [fn] or default\n * @param {*} [defaultValue]\n * @return {Command} for chaining\n * @api public\n */\n\n\nCommand.prototype.option = function (flags, description, fn, defaultValue) {\n  var self = this,\n      option = new Option(flags, description),\n      oname = option.name(),\n      name = option.attributeName(); // default as 3rd arg\n\n  if (typeof fn !== 'function') {\n    if (fn instanceof RegExp) {\n      var regex = fn;\n\n      fn = function (val, def) {\n        var m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n    } else {\n      defaultValue = fn;\n      fn = null;\n    }\n  } // preassign default value only for --no-*, [optional], or <required>\n\n\n  if (!option.bool || option.optional || option.required) {\n    // when --no-* we make sure default is true\n    if (!option.bool) defaultValue = true; // preassign only if we have a default\n\n    if (defaultValue !== undefined) {\n      self[name] = defaultValue;\n      option.defaultValue = defaultValue;\n    }\n  } // register the option\n\n\n  this.options.push(option); // when it's passed assign the value\n  // and conditionally invoke the callback\n\n  this.on('option:' + oname, function (val) {\n    // coercion\n    if (val !== null && fn) {\n      val = fn(val, self[name] === undefined ? defaultValue : self[name]);\n    } // unassigned or bool\n\n\n    if (typeof self[name] === 'boolean' || typeof self[name] === 'undefined') {\n      // if no value, bool true, and we have a default, then use it!\n      if (val == null) {\n        self[name] = option.bool ? defaultValue || true : false;\n      } else {\n        self[name] = val;\n      }\n    } else if (val !== null) {\n      // reassign\n      self[name] = val;\n    }\n  });\n  return this;\n};\n/**\n * Allow unknown options on the command line.\n *\n * @param {Boolean} arg if `true` or omitted, no error will be thrown\n * for unknown options.\n * @api public\n */\n\n\nCommand.prototype.allowUnknownOption = function (arg) {\n  this._allowUnknownOption = arguments.length === 0 || arg;\n  return this;\n};\n/**\n * Parse `argv`, settings options and invoking commands when defined.\n *\n * @param {Array} argv\n * @return {Command} for chaining\n * @api public\n */\n\n\nCommand.prototype.parse = function (argv) {\n  // implicit help\n  if (this.executables) this.addImplicitHelpCommand(); // store raw args\n\n  this.rawArgs = argv; // guess name\n\n  this._name = this._name || basename(argv[1], '.js'); // github-style sub-commands with no sub-command\n\n  if (this.executables && argv.length < 3 && !this.defaultExecutable) {\n    // this user needs help\n    argv.push('--help');\n  } // process argv\n\n\n  var parsed = this.parseOptions(this.normalize(argv.slice(2)));\n  var args = this.args = parsed.args;\n  var result = this.parseArgs(this.args, parsed.unknown); // executable sub-commands\n\n  var name = result.args[0];\n  var aliasCommand = null; // check alias of sub commands\n\n  if (name) {\n    aliasCommand = this.commands.filter(function (command) {\n      return command.alias() === name;\n    })[0];\n  }\n\n  if (this._execs[name] && typeof this._execs[name] !== 'function') {\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  } else if (aliasCommand) {\n    // is alias of a subCommand\n    args[0] = aliasCommand._name;\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  } else if (this.defaultExecutable) {\n    // use the default subcommand\n    args.unshift(this.defaultExecutable);\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  }\n\n  return result;\n};\n/**\n * Execute a sub-command executable.\n *\n * @param {Array} argv\n * @param {Array} args\n * @param {Array} unknown\n * @api private\n */\n\n\nCommand.prototype.executeSubCommand = function (argv, args, unknown) {\n  args = args.concat(unknown);\n  if (!args.length) this.help();\n  if (args[0] === 'help' && args.length === 1) this.help(); // <cmd> --help\n\n  if (args[0] === 'help') {\n    args[0] = args[1];\n    args[1] = '--help';\n  } // executable\n\n\n  var f = argv[1]; // name of the subcommand, link `pm-install`\n\n  var bin = basename(f, '.js') + '-' + args[0]; // In case of globally installed, get the base dir where executable\n  //  subcommand file should be located at\n\n  var baseDir,\n      link = fs.lstatSync(f).isSymbolicLink() ? fs.readlinkSync(f) : f; // when symbolink is relative path\n\n  if (link !== f && link.charAt(0) !== '/') {\n    link = path.join(dirname(f), link);\n  }\n\n  baseDir = dirname(link); // prefer local `./<bin>` to bin in the $PATH\n\n  var localBin = path.join(baseDir, bin); // whether bin file is a js script with explicit `.js` extension\n\n  var isExplicitJS = false;\n\n  if (exists(localBin + '.js')) {\n    bin = localBin + '.js';\n    isExplicitJS = true;\n  } else if (exists(localBin)) {\n    bin = localBin;\n  }\n\n  args = args.slice(1);\n  var proc;\n\n  if (process.platform !== 'win32') {\n    if (isExplicitJS) {\n      args.unshift(bin); // add executable arguments to spawn\n\n      args = (process.execArgv || []).concat(args);\n      proc = spawn(process.argv[0], args, {\n        stdio: 'inherit',\n        customFds: [0, 1, 2]\n      });\n    } else {\n      proc = spawn(bin, args, {\n        stdio: 'inherit',\n        customFds: [0, 1, 2]\n      });\n    }\n  } else {\n    args.unshift(bin);\n    proc = spawn(process.execPath, args, {\n      stdio: 'inherit'\n    });\n  }\n\n  var signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n  signals.forEach(function (signal) {\n    process.on(signal, function () {\n      if (proc.killed === false && proc.exitCode === null) {\n        proc.kill(signal);\n      }\n    });\n  });\n  proc.on('close', process.exit.bind(process));\n  proc.on('error', function (err) {\n    if (err.code === 'ENOENT') {\n      console.error('\\n  %s(1) does not exist, try --help\\n', bin);\n    } else if (err.code === 'EACCES') {\n      console.error('\\n  %s(1) not executable. try chmod or run with root\\n', bin);\n    }\n\n    process.exit(1);\n  }); // Store the reference to the child process\n\n  this.runningCommand = proc;\n};\n/**\n * Normalize `args`, splitting joined short flags. For example\n * the arg \"-abc\" is equivalent to \"-a -b -c\".\n * This also normalizes equal sign and splits \"--abc=def\" into \"--abc def\".\n *\n * @param {Array} args\n * @return {Array}\n * @api private\n */\n\n\nCommand.prototype.normalize = function (args) {\n  var ret = [],\n      arg,\n      lastOpt,\n      index;\n\n  for (var i = 0, len = args.length; i < len; ++i) {\n    arg = args[i];\n\n    if (i > 0) {\n      lastOpt = this.optionFor(args[i - 1]);\n    }\n\n    if (arg === '--') {\n      // Honor option terminator\n      ret = ret.concat(args.slice(i));\n      break;\n    } else if (lastOpt && lastOpt.required) {\n      ret.push(arg);\n    } else if (arg.length > 1 && arg[0] === '-' && arg[1] !== '-') {\n      arg.slice(1).split('').forEach(function (c) {\n        ret.push('-' + c);\n      });\n    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {\n      ret.push(arg.slice(0, index), arg.slice(index + 1));\n    } else {\n      ret.push(arg);\n    }\n  }\n\n  return ret;\n};\n/**\n * Parse command `args`.\n *\n * When listener(s) are available those\n * callbacks are invoked, otherwise the \"*\"\n * event is emitted and those actions are invoked.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api private\n */\n\n\nCommand.prototype.parseArgs = function (args, unknown) {\n  var name;\n\n  if (args.length) {\n    name = args[0];\n\n    if (this.listeners('command:' + name).length) {\n      this.emit('command:' + args.shift(), args, unknown);\n    } else {\n      this.emit('command:*', args);\n    }\n  } else {\n    outputHelpIfNecessary(this, unknown); // If there were no args and we have unknown options,\n    // then they are extraneous and we need to error.\n\n    if (unknown.length > 0) {\n      this.unknownOption(unknown[0]);\n    }\n  }\n\n  return this;\n};\n/**\n * Return an option matching `arg` if any.\n *\n * @param {String} arg\n * @return {Option}\n * @api private\n */\n\n\nCommand.prototype.optionFor = function (arg) {\n  for (var i = 0, len = this.options.length; i < len; ++i) {\n    if (this.options[i].is(arg)) {\n      return this.options[i];\n    }\n  }\n};\n/**\n * Parse options from `argv` returning `argv`\n * void of these options.\n *\n * @param {Array} argv\n * @return {Array}\n * @api public\n */\n\n\nCommand.prototype.parseOptions = function (argv) {\n  var args = [],\n      len = argv.length,\n      literal,\n      option,\n      arg;\n  var unknownOptions = []; // parse options\n\n  for (var i = 0; i < len; ++i) {\n    arg = argv[i]; // literal args after --\n\n    if (literal) {\n      args.push(arg);\n      continue;\n    }\n\n    if (arg === '--') {\n      literal = true;\n      continue;\n    } // find matching Option\n\n\n    option = this.optionFor(arg); // option is defined\n\n    if (option) {\n      // requires arg\n      if (option.required) {\n        arg = argv[++i];\n        if (arg == null) return this.optionMissingArgument(option);\n        this.emit('option:' + option.name(), arg); // optional arg\n      } else if (option.optional) {\n        arg = argv[i + 1];\n\n        if (arg == null || arg[0] === '-' && arg !== '-') {\n          arg = null;\n        } else {\n          ++i;\n        }\n\n        this.emit('option:' + option.name(), arg); // bool\n      } else {\n        this.emit('option:' + option.name());\n      }\n\n      continue;\n    } // looks like an option\n\n\n    if (arg.length > 1 && arg[0] === '-') {\n      unknownOptions.push(arg); // If the next argument looks like it might be\n      // an argument for this option, we pass it on.\n      // If it isn't, then it'll simply be ignored\n\n      if (i + 1 < argv.length && argv[i + 1][0] !== '-') {\n        unknownOptions.push(argv[++i]);\n      }\n\n      continue;\n    } // arg\n\n\n    args.push(arg);\n  }\n\n  return {\n    args: args,\n    unknown: unknownOptions\n  };\n};\n/**\n * Return an object containing options as key-value pairs\n *\n * @return {Object}\n * @api public\n */\n\n\nCommand.prototype.opts = function () {\n  var result = {},\n      len = this.options.length;\n\n  for (var i = 0; i < len; i++) {\n    var key = this.options[i].attributeName();\n    result[key] = key === this._versionOptionName ? this._version : this[key];\n  }\n\n  return result;\n};\n/**\n * Argument `name` is missing.\n *\n * @param {String} name\n * @api private\n */\n\n\nCommand.prototype.missingArgument = function (name) {\n  console.error();\n  console.error(\"  error: missing required argument `%s'\", name);\n  console.error();\n  process.exit(1);\n};\n/**\n * `Option` is missing an argument, but received `flag` or nothing.\n *\n * @param {String} option\n * @param {String} flag\n * @api private\n */\n\n\nCommand.prototype.optionMissingArgument = function (option, flag) {\n  console.error();\n\n  if (flag) {\n    console.error(\"  error: option `%s' argument missing, got `%s'\", option.flags, flag);\n  } else {\n    console.error(\"  error: option `%s' argument missing\", option.flags);\n  }\n\n  console.error();\n  process.exit(1);\n};\n/**\n * Unknown option `flag`.\n *\n * @param {String} flag\n * @api private\n */\n\n\nCommand.prototype.unknownOption = function (flag) {\n  if (this._allowUnknownOption) return;\n  console.error();\n  console.error(\"  error: unknown option `%s'\", flag);\n  console.error();\n  process.exit(1);\n};\n/**\n * Variadic argument with `name` is not the last argument as required.\n *\n * @param {String} name\n * @api private\n */\n\n\nCommand.prototype.variadicArgNotLast = function (name) {\n  console.error();\n  console.error(\"  error: variadic arguments must be last `%s'\", name);\n  console.error();\n  process.exit(1);\n};\n/**\n * Set the program version to `str`.\n *\n * This method auto-registers the \"-V, --version\" flag\n * which will print the version number when passed.\n *\n * @param {String} str\n * @param {String} [flags]\n * @return {Command} for chaining\n * @api public\n */\n\n\nCommand.prototype.version = function (str, flags) {\n  if (arguments.length === 0) return this._version;\n  this._version = str;\n  flags = flags || '-V, --version';\n  var versionOption = new Option(flags, 'output the version number');\n  this._versionOptionName = versionOption.long.substr(2) || 'version';\n  this.options.push(versionOption);\n  this.on('option:' + this._versionOptionName, function () {\n    process.stdout.write(str + '\\n');\n    process.exit(0);\n  });\n  return this;\n};\n/**\n * Set the description to `str`.\n *\n * @param {String} str\n * @param {Object} argsDescription\n * @return {String|Command}\n * @api public\n */\n\n\nCommand.prototype.description = function (str, argsDescription) {\n  if (arguments.length === 0) return this._description;\n  this._description = str;\n  this._argsDescription = argsDescription;\n  return this;\n};\n/**\n * Set an alias for the command\n *\n * @param {String} alias\n * @return {String|Command}\n * @api public\n */\n\n\nCommand.prototype.alias = function (alias) {\n  var command = this;\n\n  if (this.commands.length !== 0) {\n    command = this.commands[this.commands.length - 1];\n  }\n\n  if (arguments.length === 0) return command._alias;\n  if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n  command._alias = alias;\n  return this;\n};\n/**\n * Set / get the command usage `str`.\n *\n * @param {String} str\n * @return {String|Command}\n * @api public\n */\n\n\nCommand.prototype.usage = function (str) {\n  var args = this._args.map(function (arg) {\n    return humanReadableArgName(arg);\n  });\n\n  var usage = '[options]' + (this.commands.length ? ' [command]' : '') + (this._args.length ? ' ' + args.join(' ') : '');\n  if (arguments.length === 0) return this._usage || usage;\n  this._usage = str;\n  return this;\n};\n/**\n * Get or set the name of the command\n *\n * @param {String} str\n * @return {String|Command}\n * @api public\n */\n\n\nCommand.prototype.name = function (str) {\n  if (arguments.length === 0) return this._name;\n  this._name = str;\n  return this;\n};\n/**\n * Return prepared commands.\n *\n * @return {Array}\n * @api private\n */\n\n\nCommand.prototype.prepareCommands = function () {\n  return this.commands.filter(function (cmd) {\n    return !cmd._noHelp;\n  }).map(function (cmd) {\n    var args = cmd._args.map(function (arg) {\n      return humanReadableArgName(arg);\n    }).join(' ');\n\n    return [cmd._name + (cmd._alias ? '|' + cmd._alias : '') + (cmd.options.length ? ' [options]' : '') + (args ? ' ' + args : ''), cmd._description];\n  });\n};\n/**\n * Return the largest command length.\n *\n * @return {Number}\n * @api private\n */\n\n\nCommand.prototype.largestCommandLength = function () {\n  var commands = this.prepareCommands();\n  return commands.reduce(function (max, command) {\n    return Math.max(max, command[0].length);\n  }, 0);\n};\n/**\n * Return the largest option length.\n *\n * @return {Number}\n * @api private\n */\n\n\nCommand.prototype.largestOptionLength = function () {\n  var options = [].slice.call(this.options);\n  options.push({\n    flags: '-h, --help'\n  });\n  return options.reduce(function (max, option) {\n    return Math.max(max, option.flags.length);\n  }, 0);\n};\n/**\n * Return the largest arg length.\n *\n * @return {Number}\n * @api private\n */\n\n\nCommand.prototype.largestArgLength = function () {\n  return this._args.reduce(function (max, arg) {\n    return Math.max(max, arg.name.length);\n  }, 0);\n};\n/**\n * Return the pad width.\n *\n * @return {Number}\n * @api private\n */\n\n\nCommand.prototype.padWidth = function () {\n  var width = this.largestOptionLength();\n\n  if (this._argsDescription && this._args.length) {\n    if (this.largestArgLength() > width) {\n      width = this.largestArgLength();\n    }\n  }\n\n  if (this.commands && this.commands.length) {\n    if (this.largestCommandLength() > width) {\n      width = this.largestCommandLength();\n    }\n  }\n\n  return width;\n};\n/**\n * Return help for options.\n *\n * @return {String}\n * @api private\n */\n\n\nCommand.prototype.optionHelp = function () {\n  var width = this.padWidth(); // Append the help information\n\n  return this.options.map(function (option) {\n    return pad(option.flags, width) + '  ' + option.description + (option.bool && option.defaultValue !== undefined ? ' (default: ' + option.defaultValue + ')' : '');\n  }).concat([pad('-h, --help', width) + '  ' + 'output usage information']).join('\\n');\n};\n/**\n * Return command help documentation.\n *\n * @return {String}\n * @api private\n */\n\n\nCommand.prototype.commandHelp = function () {\n  if (!this.commands.length) return '';\n  var commands = this.prepareCommands();\n  var width = this.padWidth();\n  return ['  Commands:', '', commands.map(function (cmd) {\n    var desc = cmd[1] ? '  ' + cmd[1] : '';\n    return (desc ? pad(cmd[0], width) : cmd[0]) + desc;\n  }).join('\\n').replace(/^/gm, '    '), ''].join('\\n');\n};\n/**\n * Return program help documentation.\n *\n * @return {String}\n * @api private\n */\n\n\nCommand.prototype.helpInformation = function () {\n  var desc = [];\n\n  if (this._description) {\n    desc = ['  ' + this._description, ''];\n    var argsDescription = this._argsDescription;\n\n    if (argsDescription && this._args.length) {\n      var width = this.padWidth();\n      desc.push('  Arguments:');\n      desc.push('');\n\n      this._args.forEach(function (arg) {\n        desc.push('    ' + pad(arg.name, width) + '  ' + argsDescription[arg.name]);\n      });\n\n      desc.push('');\n    }\n  }\n\n  var cmdName = this._name;\n\n  if (this._alias) {\n    cmdName = cmdName + '|' + this._alias;\n  }\n\n  var usage = ['', '  Usage: ' + cmdName + ' ' + this.usage(), ''];\n  var cmds = [];\n  var commandHelp = this.commandHelp();\n  if (commandHelp) cmds = [commandHelp];\n  var options = ['  Options:', '', '' + this.optionHelp().replace(/^/gm, '    '), ''];\n  return usage.concat(desc).concat(options).concat(cmds).join('\\n');\n};\n/**\n * Output help information for this command\n *\n * @api public\n */\n\n\nCommand.prototype.outputHelp = function (cb) {\n  if (!cb) {\n    cb = function (passthru) {\n      return passthru;\n    };\n  }\n\n  process.stdout.write(cb(this.helpInformation()));\n  this.emit('--help');\n};\n/**\n * Output help information and exit.\n *\n * @api public\n */\n\n\nCommand.prototype.help = function (cb) {\n  this.outputHelp(cb);\n  process.exit();\n};\n/**\n * Camel-case the given `flag`\n *\n * @param {String} flag\n * @return {String}\n * @api private\n */\n\n\nfunction camelcase(flag) {\n  return flag.split('-').reduce(function (str, word) {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n/**\n * Pad `str` to `width`.\n *\n * @param {String} str\n * @param {Number} width\n * @return {String}\n * @api private\n */\n\n\nfunction pad(str, width) {\n  var len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}\n/**\n * Output help information if necessary\n *\n * @param {Command} command to output help for\n * @param {Array} array of options to search for -h or --help\n * @api private\n */\n\n\nfunction outputHelpIfNecessary(cmd, options) {\n  options = options || [];\n\n  for (var i = 0; i < options.length; i++) {\n    if (options[i] === '--help' || options[i] === '-h') {\n      cmd.outputHelp();\n      process.exit(0);\n    }\n  }\n}\n/**\n * Takes an argument an returns its human readable equivalent for help usage.\n *\n * @param {Object} arg\n * @return {String}\n * @api private\n */\n\n\nfunction humanReadableArgName(arg) {\n  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');\n  return arg.required ? '<' + nameOutput + '>' : '[' + nameOutput + ']';\n} // for versions before node v0.8 when there weren't `fs.existsSync`\n\n\nfunction exists(file) {\n  try {\n    if (fs.statSync(file).isFile()) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n}","map":{"version":3,"sources":["/Users/samianki/node_modules/commander/index.js"],"names":["EventEmitter","require","spawn","path","dirname","basename","fs","inherits","Command","exports","module","Option","flags","description","required","indexOf","optional","bool","split","length","test","short","shift","long","prototype","name","replace","attributeName","camelcase","is","arg","commands","options","_execs","_allowUnknownOption","_args","_name","command","desc","opts","args","cmd","executables","isDefault","defaultExecutable","_noHelp","noHelp","push","parseExpectedArgs","parent","arguments","addImplicitHelpCommand","self","forEach","argDetails","variadic","slice","action","fn","listener","unknown","parsed","parseOptions","outputHelpIfNecessary","unknownOption","concat","i","missingArgument","variadicArgNotLast","splice","apply","on","_alias","option","defaultValue","oname","RegExp","regex","val","def","m","exec","undefined","allowUnknownOption","parse","argv","rawArgs","normalize","result","parseArgs","aliasCommand","filter","alias","executeSubCommand","unshift","help","f","bin","baseDir","link","lstatSync","isSymbolicLink","readlinkSync","charAt","join","localBin","isExplicitJS","exists","proc","process","platform","execArgv","stdio","customFds","execPath","signals","signal","killed","exitCode","kill","exit","bind","err","code","console","error","runningCommand","ret","lastOpt","index","len","optionFor","c","listeners","emit","literal","unknownOptions","optionMissingArgument","key","_versionOptionName","_version","flag","version","str","versionOption","substr","stdout","write","argsDescription","_description","_argsDescription","Error","usage","map","humanReadableArgName","_usage","prepareCommands","largestCommandLength","reduce","max","Math","largestOptionLength","call","largestArgLength","padWidth","width","optionHelp","pad","commandHelp","helpInformation","cmdName","cmds","outputHelp","cb","passthru","word","toUpperCase","Array","nameOutput","file","statSync","isFile","e"],"mappings":"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","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar spawn = require('child_process').spawn;\nvar path = require('path');\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar fs = require('fs');\n\n/**\n * Inherit `Command` from `EventEmitter.prototype`.\n */\n\nrequire('util').inherits(Command, EventEmitter);\n\n/**\n * Expose the root command.\n */\n\nexports = module.exports = new Command();\n\n/**\n * Expose `Command`.\n */\n\nexports.Command = Command;\n\n/**\n * Expose `Option`.\n */\n\nexports.Option = Option;\n\n/**\n * Initialize a new `Option` with the given `flags` and `description`.\n *\n * @param {String} flags\n * @param {String} description\n * @api public\n */\n\nfunction Option(flags, description) {\n  this.flags = flags;\n  this.required = ~flags.indexOf('<');\n  this.optional = ~flags.indexOf('[');\n  this.bool = !~flags.indexOf('-no-');\n  flags = flags.split(/[ ,|]+/);\n  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();\n  this.long = flags.shift();\n  this.description = description || '';\n}\n\n/**\n * Return option name.\n *\n * @return {String}\n * @api private\n */\n\nOption.prototype.name = function() {\n  return this.long\n    .replace('--', '')\n    .replace('no-', '');\n};\n\n/**\n * Return option name, in a camelcase format that can be used\n * as a object attribute key.\n *\n * @return {String}\n * @api private\n */\n\nOption.prototype.attributeName = function() {\n  return camelcase(this.name());\n};\n\n/**\n * Check if `arg` matches the short or long flag.\n *\n * @param {String} arg\n * @return {Boolean}\n * @api private\n */\n\nOption.prototype.is = function(arg) {\n  return this.short === arg || this.long === arg;\n};\n\n/**\n * Initialize a new `Command`.\n *\n * @param {String} name\n * @api public\n */\n\nfunction Command(name) {\n  this.commands = [];\n  this.options = [];\n  this._execs = {};\n  this._allowUnknownOption = false;\n  this._args = [];\n  this._name = name || '';\n}\n\n/**\n * Add command `name`.\n *\n * The `.action()` callback is invoked when the\n * command `name` is specified via __ARGV__,\n * and the remaining arguments are applied to the\n * function for access.\n *\n * When the `name` is \"*\" an un-matched command\n * will be passed as the first arg, followed by\n * the rest of __ARGV__ remaining.\n *\n * Examples:\n *\n *      program\n *        .version('0.0.1')\n *        .option('-C, --chdir <path>', 'change the working directory')\n *        .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n *        .option('-T, --no-tests', 'ignore test hook')\n *\n *      program\n *        .command('setup')\n *        .description('run remote setup commands')\n *        .action(function() {\n *          console.log('setup');\n *        });\n *\n *      program\n *        .command('exec <cmd>')\n *        .description('run the given remote command')\n *        .action(function(cmd) {\n *          console.log('exec \"%s\"', cmd);\n *        });\n *\n *      program\n *        .command('teardown <dir> [otherDirs...]')\n *        .description('run teardown commands')\n *        .action(function(dir, otherDirs) {\n *          console.log('dir \"%s\"', dir);\n *          if (otherDirs) {\n *            otherDirs.forEach(function (oDir) {\n *              console.log('dir \"%s\"', oDir);\n *            });\n *          }\n *        });\n *\n *      program\n *        .command('*')\n *        .description('deploy the given env')\n *        .action(function(env) {\n *          console.log('deploying \"%s\"', env);\n *        });\n *\n *      program.parse(process.argv);\n  *\n * @param {String} name\n * @param {String} [desc] for git-style sub-commands\n * @return {Command} the new command\n * @api public\n */\n\nCommand.prototype.command = function(name, desc, opts) {\n  if (typeof desc === 'object' && desc !== null) {\n    opts = desc;\n    desc = null;\n  }\n  opts = opts || {};\n  var args = name.split(/ +/);\n  var cmd = new Command(args.shift());\n\n  if (desc) {\n    cmd.description(desc);\n    this.executables = true;\n    this._execs[cmd._name] = true;\n    if (opts.isDefault) this.defaultExecutable = cmd._name;\n  }\n  cmd._noHelp = !!opts.noHelp;\n  this.commands.push(cmd);\n  cmd.parseExpectedArgs(args);\n  cmd.parent = this;\n\n  if (desc) return this;\n  return cmd;\n};\n\n/**\n * Define argument syntax for the top-level command.\n *\n * @api public\n */\n\nCommand.prototype.arguments = function(desc) {\n  return this.parseExpectedArgs(desc.split(/ +/));\n};\n\n/**\n * Add an implicit `help [cmd]` subcommand\n * which invokes `--help` for the given command.\n *\n * @api private\n */\n\nCommand.prototype.addImplicitHelpCommand = function() {\n  this.command('help [cmd]', 'display help for [cmd]');\n};\n\n/**\n * Parse expected `args`.\n *\n * For example `[\"[type]\"]` becomes `[{ required: false, name: 'type' }]`.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.parseExpectedArgs = function(args) {\n  if (!args.length) return;\n  var self = this;\n  args.forEach(function(arg) {\n    var argDetails = {\n      required: false,\n      name: '',\n      variadic: false\n    };\n\n    switch (arg[0]) {\n      case '<':\n        argDetails.required = true;\n        argDetails.name = arg.slice(1, -1);\n        break;\n      case '[':\n        argDetails.name = arg.slice(1, -1);\n        break;\n    }\n\n    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {\n      argDetails.variadic = true;\n      argDetails.name = argDetails.name.slice(0, -3);\n    }\n    if (argDetails.name) {\n      self._args.push(argDetails);\n    }\n  });\n  return this;\n};\n\n/**\n * Register callback `fn` for the command.\n *\n * Examples:\n *\n *      program\n *        .command('help')\n *        .description('display verbose help')\n *        .action(function() {\n *           // output help here\n *        });\n *\n * @param {Function} fn\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.action = function(fn) {\n  var self = this;\n  var listener = function(args, unknown) {\n    // Parse any so-far unknown options\n    args = args || [];\n    unknown = unknown || [];\n\n    var parsed = self.parseOptions(unknown);\n\n    // Output help if necessary\n    outputHelpIfNecessary(self, parsed.unknown);\n\n    // If there are still any unknown options, then we simply\n    // die, unless someone asked for help, in which case we give it\n    // to them, and then we die.\n    if (parsed.unknown.length > 0) {\n      self.unknownOption(parsed.unknown[0]);\n    }\n\n    // Leftover arguments need to be pushed back. Fixes issue #56\n    if (parsed.args.length) args = parsed.args.concat(args);\n\n    self._args.forEach(function(arg, i) {\n      if (arg.required && args[i] == null) {\n        self.missingArgument(arg.name);\n      } else if (arg.variadic) {\n        if (i !== self._args.length - 1) {\n          self.variadicArgNotLast(arg.name);\n        }\n\n        args[i] = args.splice(i);\n      }\n    });\n\n    // Always append ourselves to the end of the arguments,\n    // to make sure we match the number of arguments the user\n    // expects\n    if (self._args.length) {\n      args[self._args.length] = self;\n    } else {\n      args.push(self);\n    }\n\n    fn.apply(self, args);\n  };\n  var parent = this.parent || this;\n  var name = parent === this ? '*' : this._name;\n  parent.on('command:' + name, listener);\n  if (this._alias) parent.on('command:' + this._alias, listener);\n  return this;\n};\n\n/**\n * Define option with `flags`, `description` and optional\n * coercion `fn`.\n *\n * The `flags` string should contain both the short and long flags,\n * separated by comma, a pipe or space. The following are all valid\n * all will output this way when `--help` is used.\n *\n *    \"-p, --pepper\"\n *    \"-p|--pepper\"\n *    \"-p --pepper\"\n *\n * Examples:\n *\n *     // simple boolean defaulting to false\n *     program.option('-p, --pepper', 'add pepper');\n *\n *     --pepper\n *     program.pepper\n *     // => Boolean\n *\n *     // simple boolean defaulting to true\n *     program.option('-C, --no-cheese', 'remove cheese');\n *\n *     program.cheese\n *     // => true\n *\n *     --no-cheese\n *     program.cheese\n *     // => false\n *\n *     // required argument\n *     program.option('-C, --chdir <path>', 'change the working directory');\n *\n *     --chdir /tmp\n *     program.chdir\n *     // => \"/tmp\"\n *\n *     // optional argument\n *     program.option('-c, --cheese [type]', 'add cheese [marble]');\n *\n * @param {String} flags\n * @param {String} description\n * @param {Function|*} [fn] or default\n * @param {*} [defaultValue]\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.option = function(flags, description, fn, defaultValue) {\n  var self = this,\n    option = new Option(flags, description),\n    oname = option.name(),\n    name = option.attributeName();\n\n  // default as 3rd arg\n  if (typeof fn !== 'function') {\n    if (fn instanceof RegExp) {\n      var regex = fn;\n      fn = function(val, def) {\n        var m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n    } else {\n      defaultValue = fn;\n      fn = null;\n    }\n  }\n\n  // preassign default value only for --no-*, [optional], or <required>\n  if (!option.bool || option.optional || option.required) {\n    // when --no-* we make sure default is true\n    if (!option.bool) defaultValue = true;\n    // preassign only if we have a default\n    if (defaultValue !== undefined) {\n      self[name] = defaultValue;\n      option.defaultValue = defaultValue;\n    }\n  }\n\n  // register the option\n  this.options.push(option);\n\n  // when it's passed assign the value\n  // and conditionally invoke the callback\n  this.on('option:' + oname, function(val) {\n    // coercion\n    if (val !== null && fn) {\n      val = fn(val, self[name] === undefined ? defaultValue : self[name]);\n    }\n\n    // unassigned or bool\n    if (typeof self[name] === 'boolean' || typeof self[name] === 'undefined') {\n      // if no value, bool true, and we have a default, then use it!\n      if (val == null) {\n        self[name] = option.bool\n          ? defaultValue || true\n          : false;\n      } else {\n        self[name] = val;\n      }\n    } else if (val !== null) {\n      // reassign\n      self[name] = val;\n    }\n  });\n\n  return this;\n};\n\n/**\n * Allow unknown options on the command line.\n *\n * @param {Boolean} arg if `true` or omitted, no error will be thrown\n * for unknown options.\n * @api public\n */\nCommand.prototype.allowUnknownOption = function(arg) {\n  this._allowUnknownOption = arguments.length === 0 || arg;\n  return this;\n};\n\n/**\n * Parse `argv`, settings options and invoking commands when defined.\n *\n * @param {Array} argv\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.parse = function(argv) {\n  // implicit help\n  if (this.executables) this.addImplicitHelpCommand();\n\n  // store raw args\n  this.rawArgs = argv;\n\n  // guess name\n  this._name = this._name || basename(argv[1], '.js');\n\n  // github-style sub-commands with no sub-command\n  if (this.executables && argv.length < 3 && !this.defaultExecutable) {\n    // this user needs help\n    argv.push('--help');\n  }\n\n  // process argv\n  var parsed = this.parseOptions(this.normalize(argv.slice(2)));\n  var args = this.args = parsed.args;\n\n  var result = this.parseArgs(this.args, parsed.unknown);\n\n  // executable sub-commands\n  var name = result.args[0];\n\n  var aliasCommand = null;\n  // check alias of sub commands\n  if (name) {\n    aliasCommand = this.commands.filter(function(command) {\n      return command.alias() === name;\n    })[0];\n  }\n\n  if (this._execs[name] && typeof this._execs[name] !== 'function') {\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  } else if (aliasCommand) {\n    // is alias of a subCommand\n    args[0] = aliasCommand._name;\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  } else if (this.defaultExecutable) {\n    // use the default subcommand\n    args.unshift(this.defaultExecutable);\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  }\n\n  return result;\n};\n\n/**\n * Execute a sub-command executable.\n *\n * @param {Array} argv\n * @param {Array} args\n * @param {Array} unknown\n * @api private\n */\n\nCommand.prototype.executeSubCommand = function(argv, args, unknown) {\n  args = args.concat(unknown);\n\n  if (!args.length) this.help();\n  if (args[0] === 'help' && args.length === 1) this.help();\n\n  // <cmd> --help\n  if (args[0] === 'help') {\n    args[0] = args[1];\n    args[1] = '--help';\n  }\n\n  // executable\n  var f = argv[1];\n  // name of the subcommand, link `pm-install`\n  var bin = basename(f, '.js') + '-' + args[0];\n\n  // In case of globally installed, get the base dir where executable\n  //  subcommand file should be located at\n  var baseDir,\n    link = fs.lstatSync(f).isSymbolicLink() ? fs.readlinkSync(f) : f;\n\n  // when symbolink is relative path\n  if (link !== f && link.charAt(0) !== '/') {\n    link = path.join(dirname(f), link);\n  }\n  baseDir = dirname(link);\n\n  // prefer local `./<bin>` to bin in the $PATH\n  var localBin = path.join(baseDir, bin);\n\n  // whether bin file is a js script with explicit `.js` extension\n  var isExplicitJS = false;\n  if (exists(localBin + '.js')) {\n    bin = localBin + '.js';\n    isExplicitJS = true;\n  } else if (exists(localBin)) {\n    bin = localBin;\n  }\n\n  args = args.slice(1);\n\n  var proc;\n  if (process.platform !== 'win32') {\n    if (isExplicitJS) {\n      args.unshift(bin);\n      // add executable arguments to spawn\n      args = (process.execArgv || []).concat(args);\n\n      proc = spawn(process.argv[0], args, { stdio: 'inherit', customFds: [0, 1, 2] });\n    } else {\n      proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });\n    }\n  } else {\n    args.unshift(bin);\n    proc = spawn(process.execPath, args, { stdio: 'inherit' });\n  }\n\n  var signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n  signals.forEach(function(signal) {\n    process.on(signal, function() {\n      if (proc.killed === false && proc.exitCode === null) {\n        proc.kill(signal);\n      }\n    });\n  });\n  proc.on('close', process.exit.bind(process));\n  proc.on('error', function(err) {\n    if (err.code === 'ENOENT') {\n      console.error('\\n  %s(1) does not exist, try --help\\n', bin);\n    } else if (err.code === 'EACCES') {\n      console.error('\\n  %s(1) not executable. try chmod or run with root\\n', bin);\n    }\n    process.exit(1);\n  });\n\n  // Store the reference to the child process\n  this.runningCommand = proc;\n};\n\n/**\n * Normalize `args`, splitting joined short flags. For example\n * the arg \"-abc\" is equivalent to \"-a -b -c\".\n * This also normalizes equal sign and splits \"--abc=def\" into \"--abc def\".\n *\n * @param {Array} args\n * @return {Array}\n * @api private\n */\n\nCommand.prototype.normalize = function(args) {\n  var ret = [],\n    arg,\n    lastOpt,\n    index;\n\n  for (var i = 0, len = args.length; i < len; ++i) {\n    arg = args[i];\n    if (i > 0) {\n      lastOpt = this.optionFor(args[i - 1]);\n    }\n\n    if (arg === '--') {\n      // Honor option terminator\n      ret = ret.concat(args.slice(i));\n      break;\n    } else if (lastOpt && lastOpt.required) {\n      ret.push(arg);\n    } else if (arg.length > 1 && arg[0] === '-' && arg[1] !== '-') {\n      arg.slice(1).split('').forEach(function(c) {\n        ret.push('-' + c);\n      });\n    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {\n      ret.push(arg.slice(0, index), arg.slice(index + 1));\n    } else {\n      ret.push(arg);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Parse command `args`.\n *\n * When listener(s) are available those\n * callbacks are invoked, otherwise the \"*\"\n * event is emitted and those actions are invoked.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api private\n */\n\nCommand.prototype.parseArgs = function(args, unknown) {\n  var name;\n\n  if (args.length) {\n    name = args[0];\n    if (this.listeners('command:' + name).length) {\n      this.emit('command:' + args.shift(), args, unknown);\n    } else {\n      this.emit('command:*', args);\n    }\n  } else {\n    outputHelpIfNecessary(this, unknown);\n\n    // If there were no args and we have unknown options,\n    // then they are extraneous and we need to error.\n    if (unknown.length > 0) {\n      this.unknownOption(unknown[0]);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return an option matching `arg` if any.\n *\n * @param {String} arg\n * @return {Option}\n * @api private\n */\n\nCommand.prototype.optionFor = function(arg) {\n  for (var i = 0, len = this.options.length; i < len; ++i) {\n    if (this.options[i].is(arg)) {\n      return this.options[i];\n    }\n  }\n};\n\n/**\n * Parse options from `argv` returning `argv`\n * void of these options.\n *\n * @param {Array} argv\n * @return {Array}\n * @api public\n */\n\nCommand.prototype.parseOptions = function(argv) {\n  var args = [],\n    len = argv.length,\n    literal,\n    option,\n    arg;\n\n  var unknownOptions = [];\n\n  // parse options\n  for (var i = 0; i < len; ++i) {\n    arg = argv[i];\n\n    // literal args after --\n    if (literal) {\n      args.push(arg);\n      continue;\n    }\n\n    if (arg === '--') {\n      literal = true;\n      continue;\n    }\n\n    // find matching Option\n    option = this.optionFor(arg);\n\n    // option is defined\n    if (option) {\n      // requires arg\n      if (option.required) {\n        arg = argv[++i];\n        if (arg == null) return this.optionMissingArgument(option);\n        this.emit('option:' + option.name(), arg);\n      // optional arg\n      } else if (option.optional) {\n        arg = argv[i + 1];\n        if (arg == null || (arg[0] === '-' && arg !== '-')) {\n          arg = null;\n        } else {\n          ++i;\n        }\n        this.emit('option:' + option.name(), arg);\n      // bool\n      } else {\n        this.emit('option:' + option.name());\n      }\n      continue;\n    }\n\n    // looks like an option\n    if (arg.length > 1 && arg[0] === '-') {\n      unknownOptions.push(arg);\n\n      // If the next argument looks like it might be\n      // an argument for this option, we pass it on.\n      // If it isn't, then it'll simply be ignored\n      if ((i + 1) < argv.length && argv[i + 1][0] !== '-') {\n        unknownOptions.push(argv[++i]);\n      }\n      continue;\n    }\n\n    // arg\n    args.push(arg);\n  }\n\n  return { args: args, unknown: unknownOptions };\n};\n\n/**\n * Return an object containing options as key-value pairs\n *\n * @return {Object}\n * @api public\n */\nCommand.prototype.opts = function() {\n  var result = {},\n    len = this.options.length;\n\n  for (var i = 0; i < len; i++) {\n    var key = this.options[i].attributeName();\n    result[key] = key === this._versionOptionName ? this._version : this[key];\n  }\n  return result;\n};\n\n/**\n * Argument `name` is missing.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.missingArgument = function(name) {\n  console.error();\n  console.error(\"  error: missing required argument `%s'\", name);\n  console.error();\n  process.exit(1);\n};\n\n/**\n * `Option` is missing an argument, but received `flag` or nothing.\n *\n * @param {String} option\n * @param {String} flag\n * @api private\n */\n\nCommand.prototype.optionMissingArgument = function(option, flag) {\n  console.error();\n  if (flag) {\n    console.error(\"  error: option `%s' argument missing, got `%s'\", option.flags, flag);\n  } else {\n    console.error(\"  error: option `%s' argument missing\", option.flags);\n  }\n  console.error();\n  process.exit(1);\n};\n\n/**\n * Unknown option `flag`.\n *\n * @param {String} flag\n * @api private\n */\n\nCommand.prototype.unknownOption = function(flag) {\n  if (this._allowUnknownOption) return;\n  console.error();\n  console.error(\"  error: unknown option `%s'\", flag);\n  console.error();\n  process.exit(1);\n};\n\n/**\n * Variadic argument with `name` is not the last argument as required.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.variadicArgNotLast = function(name) {\n  console.error();\n  console.error(\"  error: variadic arguments must be last `%s'\", name);\n  console.error();\n  process.exit(1);\n};\n\n/**\n * Set the program version to `str`.\n *\n * This method auto-registers the \"-V, --version\" flag\n * which will print the version number when passed.\n *\n * @param {String} str\n * @param {String} [flags]\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.version = function(str, flags) {\n  if (arguments.length === 0) return this._version;\n  this._version = str;\n  flags = flags || '-V, --version';\n  var versionOption = new Option(flags, 'output the version number');\n  this._versionOptionName = versionOption.long.substr(2) || 'version';\n  this.options.push(versionOption);\n  this.on('option:' + this._versionOptionName, function() {\n    process.stdout.write(str + '\\n');\n    process.exit(0);\n  });\n  return this;\n};\n\n/**\n * Set the description to `str`.\n *\n * @param {String} str\n * @param {Object} argsDescription\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.description = function(str, argsDescription) {\n  if (arguments.length === 0) return this._description;\n  this._description = str;\n  this._argsDescription = argsDescription;\n  return this;\n};\n\n/**\n * Set an alias for the command\n *\n * @param {String} alias\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.alias = function(alias) {\n  var command = this;\n  if (this.commands.length !== 0) {\n    command = this.commands[this.commands.length - 1];\n  }\n\n  if (arguments.length === 0) return command._alias;\n\n  if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n  command._alias = alias;\n  return this;\n};\n\n/**\n * Set / get the command usage `str`.\n *\n * @param {String} str\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.usage = function(str) {\n  var args = this._args.map(function(arg) {\n    return humanReadableArgName(arg);\n  });\n\n  var usage = '[options]' +\n    (this.commands.length ? ' [command]' : '') +\n    (this._args.length ? ' ' + args.join(' ') : '');\n\n  if (arguments.length === 0) return this._usage || usage;\n  this._usage = str;\n\n  return this;\n};\n\n/**\n * Get or set the name of the command\n *\n * @param {String} str\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.name = function(str) {\n  if (arguments.length === 0) return this._name;\n  this._name = str;\n  return this;\n};\n\n/**\n * Return prepared commands.\n *\n * @return {Array}\n * @api private\n */\n\nCommand.prototype.prepareCommands = function() {\n  return this.commands.filter(function(cmd) {\n    return !cmd._noHelp;\n  }).map(function(cmd) {\n    var args = cmd._args.map(function(arg) {\n      return humanReadableArgName(arg);\n    }).join(' ');\n\n    return [\n      cmd._name +\n        (cmd._alias ? '|' + cmd._alias : '') +\n        (cmd.options.length ? ' [options]' : '') +\n        (args ? ' ' + args : ''),\n      cmd._description\n    ];\n  });\n};\n\n/**\n * Return the largest command length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestCommandLength = function() {\n  var commands = this.prepareCommands();\n  return commands.reduce(function(max, command) {\n    return Math.max(max, command[0].length);\n  }, 0);\n};\n\n/**\n * Return the largest option length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestOptionLength = function() {\n  var options = [].slice.call(this.options);\n  options.push({\n    flags: '-h, --help'\n  });\n  return options.reduce(function(max, option) {\n    return Math.max(max, option.flags.length);\n  }, 0);\n};\n\n/**\n * Return the largest arg length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestArgLength = function() {\n  return this._args.reduce(function(max, arg) {\n    return Math.max(max, arg.name.length);\n  }, 0);\n};\n\n/**\n * Return the pad width.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.padWidth = function() {\n  var width = this.largestOptionLength();\n  if (this._argsDescription && this._args.length) {\n    if (this.largestArgLength() > width) {\n      width = this.largestArgLength();\n    }\n  }\n\n  if (this.commands && this.commands.length) {\n    if (this.largestCommandLength() > width) {\n      width = this.largestCommandLength();\n    }\n  }\n\n  return width;\n};\n\n/**\n * Return help for options.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.optionHelp = function() {\n  var width = this.padWidth();\n\n  // Append the help information\n  return this.options.map(function(option) {\n    return pad(option.flags, width) + '  ' + option.description +\n      ((option.bool && option.defaultValue !== undefined) ? ' (default: ' + option.defaultValue + ')' : '');\n  }).concat([pad('-h, --help', width) + '  ' + 'output usage information'])\n    .join('\\n');\n};\n\n/**\n * Return command help documentation.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.commandHelp = function() {\n  if (!this.commands.length) return '';\n\n  var commands = this.prepareCommands();\n  var width = this.padWidth();\n\n  return [\n    '  Commands:',\n    '',\n    commands.map(function(cmd) {\n      var desc = cmd[1] ? '  ' + cmd[1] : '';\n      return (desc ? pad(cmd[0], width) : cmd[0]) + desc;\n    }).join('\\n').replace(/^/gm, '    '),\n    ''\n  ].join('\\n');\n};\n\n/**\n * Return program help documentation.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.helpInformation = function() {\n  var desc = [];\n  if (this._description) {\n    desc = [\n      '  ' + this._description,\n      ''\n    ];\n\n    var argsDescription = this._argsDescription;\n    if (argsDescription && this._args.length) {\n      var width = this.padWidth();\n      desc.push('  Arguments:');\n      desc.push('');\n      this._args.forEach(function(arg) {\n        desc.push('    ' + pad(arg.name, width) + '  ' + argsDescription[arg.name]);\n      });\n      desc.push('');\n    }\n  }\n\n  var cmdName = this._name;\n  if (this._alias) {\n    cmdName = cmdName + '|' + this._alias;\n  }\n  var usage = [\n    '',\n    '  Usage: ' + cmdName + ' ' + this.usage(),\n    ''\n  ];\n\n  var cmds = [];\n  var commandHelp = this.commandHelp();\n  if (commandHelp) cmds = [commandHelp];\n\n  var options = [\n    '  Options:',\n    '',\n    '' + this.optionHelp().replace(/^/gm, '    '),\n    ''\n  ];\n\n  return usage\n    .concat(desc)\n    .concat(options)\n    .concat(cmds)\n    .join('\\n');\n};\n\n/**\n * Output help information for this command\n *\n * @api public\n */\n\nCommand.prototype.outputHelp = function(cb) {\n  if (!cb) {\n    cb = function(passthru) {\n      return passthru;\n    };\n  }\n  process.stdout.write(cb(this.helpInformation()));\n  this.emit('--help');\n};\n\n/**\n * Output help information and exit.\n *\n * @api public\n */\n\nCommand.prototype.help = function(cb) {\n  this.outputHelp(cb);\n  process.exit();\n};\n\n/**\n * Camel-case the given `flag`\n *\n * @param {String} flag\n * @return {String}\n * @api private\n */\n\nfunction camelcase(flag) {\n  return flag.split('-').reduce(function(str, word) {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Pad `str` to `width`.\n *\n * @param {String} str\n * @param {Number} width\n * @return {String}\n * @api private\n */\n\nfunction pad(str, width) {\n  var len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}\n\n/**\n * Output help information if necessary\n *\n * @param {Command} command to output help for\n * @param {Array} array of options to search for -h or --help\n * @api private\n */\n\nfunction outputHelpIfNecessary(cmd, options) {\n  options = options || [];\n  for (var i = 0; i < options.length; i++) {\n    if (options[i] === '--help' || options[i] === '-h') {\n      cmd.outputHelp();\n      process.exit(0);\n    }\n  }\n}\n\n/**\n * Takes an argument an returns its human readable equivalent for help usage.\n *\n * @param {Object} arg\n * @return {String}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\n// for versions before node v0.8 when there weren't `fs.existsSync`\nfunction exists(file) {\n  try {\n    if (fs.statSync(file).isFile()) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}