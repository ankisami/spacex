{"ast":null,"code":"'use strict';\n\nconst colors = require('ansi-colors');\n\nconst interpolate = require('../interpolate');\n\nconst Prompt = require('../prompt');\n\nclass SnippetPrompt extends Prompt {\n  constructor(options) {\n    super(options);\n    this.cursorHide();\n    this.reset(true);\n  }\n\n  async initialize() {\n    this.interpolate = await interpolate(this);\n    await super.initialize();\n  }\n\n  async reset(first) {\n    this.state.keys = [];\n    this.state.invalid = new Map();\n    this.state.missing = new Set();\n    this.state.completed = 0;\n    this.state.values = {};\n\n    if (first !== true) {\n      await this.initialize();\n      await this.render();\n    }\n  }\n\n  moveCursor(n) {\n    let item = this.getItem();\n    this.cursor += n;\n    item.cursor += n;\n  }\n\n  dispatch(ch, key) {\n    if (!key.code && !key.ctrl && ch != null && this.getItem()) {\n      this.append(ch, key);\n      return;\n    }\n\n    this.alert();\n  }\n\n  append(ch, key) {\n    let item = this.getItem();\n    let prefix = item.input.slice(0, this.cursor);\n    let suffix = item.input.slice(this.cursor);\n    this.input = item.input = `${prefix}${ch}${suffix}`;\n    this.moveCursor(1);\n    this.render();\n  }\n\n  delete() {\n    let item = this.getItem();\n    if (this.cursor <= 0 || !item.input) return this.alert();\n    let suffix = item.input.slice(this.cursor);\n    let prefix = item.input.slice(0, this.cursor - 1);\n    this.input = item.input = `${prefix}${suffix}`;\n    this.moveCursor(-1);\n    this.render();\n  }\n\n  increment(i) {\n    return i >= this.state.keys.length - 1 ? 0 : i + 1;\n  }\n\n  decrement(i) {\n    return i <= 0 ? this.state.keys.length - 1 : i - 1;\n  }\n\n  first() {\n    this.state.index = 0;\n    this.render();\n  }\n\n  last() {\n    this.state.index = this.state.keys.length - 1;\n    this.render();\n  }\n\n  right() {\n    if (this.cursor >= this.input.length) return this.alert();\n    this.moveCursor(1);\n    this.render();\n  }\n\n  left() {\n    if (this.cursor <= 0) return this.alert();\n    this.moveCursor(-1);\n    this.render();\n  }\n\n  prev() {\n    this.state.index = this.decrement(this.state.index);\n    this.getItem();\n    this.render();\n  }\n\n  next() {\n    this.state.index = this.increment(this.state.index);\n    this.getItem();\n    this.render();\n  }\n\n  up() {\n    this.prev();\n  }\n\n  down() {\n    this.next();\n  }\n\n  format(value) {\n    let color = this.state.completed < 100 ? this.styles.warning : this.styles.success;\n\n    if (this.state.submitted === true && this.state.completed !== 100) {\n      color = this.styles.danger;\n    }\n\n    return color(`${this.state.completed}% completed`);\n  }\n\n  async render() {\n    let {\n      index,\n      keys = [],\n      submitted,\n      size\n    } = this.state;\n    let newline = [this.options.newline, '\\n'].find(v => v != null);\n    let prefix = await this.prefix();\n    let separator = await this.separator();\n    let message = await this.message();\n    let prompt = [prefix, message, separator].filter(Boolean).join(' ');\n    this.state.prompt = prompt;\n    let header = await this.header();\n    let error = (await this.error()) || '';\n    let hint = (await this.hint()) || '';\n    let body = submitted ? '' : await this.interpolate(this.state);\n    let key = this.state.key = keys[index] || '';\n    let input = await this.format(key);\n    let footer = await this.footer();\n    if (input) prompt += ' ' + input;\n    if (hint && !input && this.state.completed === 0) prompt += ' ' + hint;\n    this.clear(size);\n    let lines = [header, prompt, body, footer, error.trim()];\n    this.write(lines.filter(Boolean).join(newline));\n    this.restore();\n  }\n\n  getItem(name) {\n    let {\n      items,\n      keys,\n      index\n    } = this.state;\n    let item = items.find(ch => ch.name === keys[index]);\n\n    if (item && item.input != null) {\n      this.input = item.input;\n      this.cursor = item.cursor;\n    }\n\n    return item;\n  }\n\n  async submit() {\n    if (typeof this.interpolate !== 'function') await this.initialize();\n    await this.interpolate(this.state, true);\n    let {\n      invalid,\n      missing,\n      output,\n      values\n    } = this.state;\n\n    if (invalid.size) {\n      let err = '';\n\n      for (let [key, value] of invalid) err += `Invalid ${key}: ${value}\\n`;\n\n      this.state.error = err;\n      return super.submit();\n    }\n\n    if (missing.size) {\n      this.state.error = 'Required: ' + [...missing.keys()].join(', ');\n      return super.submit();\n    }\n\n    let lines = colors.unstyle(output).split('\\n');\n    let result = lines.map(v => v.slice(1)).join('\\n');\n    this.value = {\n      values,\n      result\n    };\n    return super.submit();\n  }\n\n}\n\nmodule.exports = SnippetPrompt;","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/lib/prompts/snippet.js"],"names":["colors","require","interpolate","Prompt","SnippetPrompt","constructor","options","cursorHide","reset","initialize","first","state","keys","invalid","Map","missing","Set","completed","values","render","moveCursor","n","item","getItem","cursor","dispatch","ch","key","code","ctrl","append","alert","prefix","input","slice","suffix","delete","increment","i","length","decrement","index","last","right","left","prev","next","up","down","format","value","color","styles","warning","success","submitted","danger","size","newline","find","v","separator","message","prompt","filter","Boolean","join","header","error","hint","body","footer","clear","lines","trim","write","restore","name","items","submit","output","err","unstyle","split","result","map","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst colors = require('ansi-colors');\nconst interpolate = require('../interpolate');\nconst Prompt = require('../prompt');\n\nclass SnippetPrompt extends Prompt {\n  constructor(options) {\n    super(options);\n    this.cursorHide();\n    this.reset(true);\n  }\n\n  async initialize() {\n    this.interpolate = await interpolate(this);\n    await super.initialize();\n  }\n\n  async reset(first) {\n    this.state.keys = [];\n    this.state.invalid = new Map();\n    this.state.missing = new Set();\n    this.state.completed = 0;\n    this.state.values = {};\n\n    if (first !== true) {\n      await this.initialize();\n      await this.render();\n    }\n  }\n\n  moveCursor(n) {\n    let item = this.getItem();\n    this.cursor += n;\n    item.cursor += n;\n  }\n\n  dispatch(ch, key) {\n    if (!key.code && !key.ctrl && ch != null && this.getItem()) {\n      this.append(ch, key);\n      return;\n    }\n    this.alert();\n  }\n\n  append(ch, key) {\n    let item = this.getItem();\n    let prefix = item.input.slice(0, this.cursor);\n    let suffix = item.input.slice(this.cursor);\n    this.input = item.input = `${prefix}${ch}${suffix}`;\n    this.moveCursor(1);\n    this.render();\n  }\n\n  delete() {\n    let item = this.getItem();\n    if (this.cursor <= 0 || !item.input) return this.alert();\n    let suffix = item.input.slice(this.cursor);\n    let prefix = item.input.slice(0, this.cursor - 1);\n    this.input = item.input = `${prefix}${suffix}`;\n    this.moveCursor(-1);\n    this.render();\n  }\n\n  increment(i) {\n    return i >= this.state.keys.length - 1 ? 0 : i + 1;\n  }\n\n  decrement(i) {\n    return i <= 0 ? this.state.keys.length - 1 : i - 1;\n  }\n\n  first() {\n    this.state.index = 0;\n    this.render();\n  }\n\n  last() {\n    this.state.index = this.state.keys.length - 1;\n    this.render();\n  }\n\n  right() {\n    if (this.cursor >= this.input.length) return this.alert();\n    this.moveCursor(1);\n    this.render();\n  }\n\n  left() {\n    if (this.cursor <= 0) return this.alert();\n    this.moveCursor(-1);\n    this.render();\n  }\n\n  prev() {\n    this.state.index = this.decrement(this.state.index);\n    this.getItem();\n    this.render();\n  }\n\n  next() {\n    this.state.index = this.increment(this.state.index);\n    this.getItem();\n    this.render();\n  }\n\n  up() {\n    this.prev();\n  }\n\n  down() {\n    this.next();\n  }\n\n  format(value) {\n    let color = this.state.completed < 100 ? this.styles.warning : this.styles.success;\n    if (this.state.submitted === true && this.state.completed !== 100) {\n      color = this.styles.danger;\n    }\n    return color(`${this.state.completed}% completed`);\n  }\n\n  async render() {\n    let { index, keys = [], submitted, size } = this.state;\n\n    let newline = [this.options.newline, '\\n'].find(v => v != null);\n    let prefix = await this.prefix();\n    let separator = await this.separator();\n    let message = await this.message();\n\n    let prompt = [prefix, message, separator].filter(Boolean).join(' ');\n    this.state.prompt = prompt;\n\n    let header = await this.header();\n    let error = (await this.error()) || '';\n    let hint = (await this.hint()) || '';\n    let body = submitted ? '' : await this.interpolate(this.state);\n\n    let key = this.state.key = keys[index] || '';\n    let input = await this.format(key);\n    let footer = await this.footer();\n    if (input) prompt += ' ' + input;\n    if (hint && !input && this.state.completed === 0) prompt += ' ' + hint;\n\n    this.clear(size);\n    let lines = [header, prompt, body, footer, error.trim()];\n    this.write(lines.filter(Boolean).join(newline));\n    this.restore();\n  }\n\n  getItem(name) {\n    let { items, keys, index } = this.state;\n    let item = items.find(ch => ch.name === keys[index]);\n    if (item && item.input != null) {\n      this.input = item.input;\n      this.cursor = item.cursor;\n    }\n    return item;\n  }\n\n  async submit() {\n    if (typeof this.interpolate !== 'function') await this.initialize();\n    await this.interpolate(this.state, true);\n\n    let { invalid, missing, output, values } = this.state;\n    if (invalid.size) {\n      let err = '';\n      for (let [key, value] of invalid) err += `Invalid ${key}: ${value}\\n`;\n      this.state.error = err;\n      return super.submit();\n    }\n\n    if (missing.size) {\n      this.state.error = 'Required: ' + [...missing.keys()].join(', ');\n      return super.submit();\n    }\n\n    let lines = colors.unstyle(output).split('\\n');\n    let result = lines.map(v => v.slice(1)).join('\\n');\n    this.value = { values, result };\n    return super.submit();\n  }\n}\n\nmodule.exports = SnippetPrompt;\n"]},"metadata":{},"sourceType":"script"}