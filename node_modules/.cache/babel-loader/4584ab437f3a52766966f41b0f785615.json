{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\nvar os = require('os');\n\nvar p = require('path');\n\nvar blessed = require('blessed');\n\nvar debug = require('debug')('pm2:monit');\n\nvar sprintf = require('sprintf-js').sprintf; // Total memory\n\n\nconst totalMem = os.totalmem();\nvar Dashboard = {};\nvar DEFAULT_PADDING = {\n  top: 0,\n  left: 1,\n  right: 1\n};\nvar WIDTH_LEFT_PANEL = 30;\n/**\n * Synchronous Dashboard init method\n * @method init\n * @return this\n */\n\nDashboard.init = function () {\n  // Init Screen\n  this.screen = blessed.screen({\n    smartCSR: true,\n    fullUnicode: true\n  });\n  this.screen.title = 'PM2 Dashboard';\n  this.logLines = {};\n  this.list = blessed.list({\n    top: '0',\n    left: '0',\n    width: WIDTH_LEFT_PANEL + '%',\n    height: '70%',\n    padding: 0,\n    scrollbar: {\n      ch: ' ',\n      inverse: false\n    },\n    border: {\n      type: 'line'\n    },\n    keys: true,\n    autoCommandKeys: true,\n    tags: true,\n    style: {\n      selected: {\n        bg: 'blue',\n        fg: 'white'\n      },\n      scrollbar: {\n        bg: 'blue',\n        fg: 'black'\n      },\n      fg: 'white',\n      border: {\n        fg: 'blue'\n      },\n      header: {\n        fg: 'blue'\n      }\n    }\n  });\n  this.list.on('select item', (item, i) => {\n    this.logLines = [];\n    this.logBox.clearItems();\n  });\n  this.logBox = blessed.list({\n    label: ' Logs ',\n    top: '0',\n    left: WIDTH_LEFT_PANEL + '%',\n    width: 100 - WIDTH_LEFT_PANEL + '%',\n    height: '70%',\n    padding: DEFAULT_PADDING,\n    scrollable: true,\n    scrollbar: {\n      ch: ' ',\n      inverse: false\n    },\n    keys: true,\n    autoCommandKeys: true,\n    tags: true,\n    border: {\n      type: 'line'\n    },\n    style: {\n      fg: 'white',\n      border: {\n        fg: 'white'\n      },\n      scrollbar: {\n        bg: 'blue',\n        fg: 'black'\n      }\n    }\n  });\n  this.metadataBox = blessed.box({\n    label: ' Metadata ',\n    top: '70%',\n    left: WIDTH_LEFT_PANEL + '%',\n    width: 100 - WIDTH_LEFT_PANEL + '%',\n    height: '26%',\n    padding: DEFAULT_PADDING,\n    scrollable: true,\n    scrollbar: {\n      ch: ' ',\n      inverse: false\n    },\n    keys: true,\n    autoCommandKeys: true,\n    tags: true,\n    border: {\n      type: 'line'\n    },\n    style: {\n      fg: 'white',\n      border: {\n        fg: 'white'\n      },\n      scrollbar: {\n        bg: 'blue',\n        fg: 'black'\n      }\n    }\n  });\n  this.metricsBox = blessed.list({\n    label: ' Custom Metrics ',\n    top: '70%',\n    left: '0%',\n    width: WIDTH_LEFT_PANEL + '%',\n    height: '26%',\n    padding: DEFAULT_PADDING,\n    scrollbar: {\n      ch: ' ',\n      inverse: false\n    },\n    keys: true,\n    autoCommandKeys: true,\n    tags: true,\n    border: {\n      type: 'line'\n    },\n    style: {\n      fg: 'white',\n      border: {\n        fg: 'white'\n      },\n      scrollbar: {\n        bg: 'blue',\n        fg: 'black'\n      }\n    }\n  });\n  this.box4 = blessed.text({\n    content: ' left/right: switch boards | up/down/mouse: scroll | Ctrl-C: exit{|} {cyan-fg}{bold}To go further check out https://pm2.io/{/}  ',\n    left: '0%',\n    top: '95%',\n    width: '100%',\n    height: '6%',\n    valign: 'middle',\n    tags: true,\n    style: {\n      fg: 'white'\n    }\n  });\n  this.list.focus();\n  this.screen.append(this.list);\n  this.screen.append(this.logBox);\n  this.screen.append(this.metadataBox);\n  this.screen.append(this.metricsBox);\n  this.screen.append(this.box4);\n  this.list.setLabel(' Process List ');\n  this.screen.render();\n  var that = this;\n  var i = 0;\n  var boards = ['list', 'logBox', 'metricsBox', 'metadataBox'];\n  this.screen.key(['left', 'right'], function (ch, key) {\n    key.name === 'left' ? i-- : i++;\n    if (i == 4) i = 0;\n    if (i == -1) i = 3;\n    that[boards[i]].focus();\n    that[boards[i]].style.border.fg = 'blue';\n\n    if (key.name === 'left') {\n      if (i == 3) that[boards[0]].style.border.fg = 'white';else that[boards[i + 1]].style.border.fg = 'white';\n    } else {\n      if (i == 0) that[boards[3]].style.border.fg = 'white';else that[boards[i - 1]].style.border.fg = 'white';\n    }\n  });\n  this.screen.key(['escape', 'q', 'C-c'], function (ch, key) {\n    this.screen.destroy();\n    process.exit(0);\n  }); // async refresh of the ui\n\n  setInterval(function () {\n    that.screen.render();\n  }, 300);\n  return this;\n};\n/**\n * Refresh dashboard\n * @method refresh\n * @param {} processes\n * @return this\n */\n\n\nDashboard.refresh = function (processes) {\n  debug('Monit refresh');\n\n  if (!processes) {\n    this.list.setItem(0, 'No process available');\n    return;\n  }\n\n  if (processes.length != this.list.items.length) {\n    this.list.clearItems();\n  } // Total of processes memory\n\n\n  var mem = 0;\n  processes.forEach(function (proc) {\n    mem += proc.monit.memory;\n  }); // Sort process list\n\n  processes.sort(function (a, b) {\n    if (a.pm2_env.name < b.pm2_env.name) return -1;\n    if (a.pm2_env.name > b.pm2_env.name) return 1;\n    return 0;\n  }); // Loop to get process infos\n\n  for (var i = 0; i < processes.length; i++) {\n    // Percent of memory use by one process in all pm2 processes\n    var memPercent = processes[i].monit.memory / mem * 100; // Status of process\n\n    var status = processes[i].pm2_env.status == 'online' ? '{green-fg}' : '{red-fg}';\n    status = status + '{bold}' + processes[i].pm2_env.status + '{/}';\n    var name = processes[i].pm2_env.name || p.basename(processes[i].pm2_env.pm_exec_path); // Line of list\n\n    var item = sprintf('[%2s] %s {|} Mem: {bold}{%s-fg}%3d{/} MB    CPU: {bold}{%s-fg}%2d{/} %s  %s', processes[i].pm2_env.pm_id, name, gradient(memPercent, [255, 0, 0], [0, 255, 0]), (processes[i].monit.memory / 1048576).toFixed(2), gradient(processes[i].monit.cpu, [255, 0, 0], [0, 255, 0]), processes[i].monit.cpu, \"%\", status); // Check if item exist\n\n    if (this.list.getItem(i)) {\n      this.list.setItem(i, item);\n    } else {\n      this.list.pushItem(item);\n    }\n\n    var proc = processes[this.list.selected]; // render the logBox\n\n    let process_id = proc.pm_id;\n    let logs = this.logLines[process_id];\n\n    if (typeof logs !== \"undefined\") {\n      this.logBox.setItems(logs);\n\n      if (!this.logBox.focused) {\n        this.logBox.setScrollPerc(100);\n      }\n    } else {\n      this.logBox.clearItems();\n    }\n\n    this.logBox.setLabel(`  ${proc.pm2_env.name} Logs  `);\n    this.metadataBox.setLine(0, 'App Name              ' + '{bold}' + proc.pm2_env.name + '{/}');\n    this.metadataBox.setLine(1, 'Namespace             ' + '{bold}' + proc.pm2_env.namespace + '{/}');\n    this.metadataBox.setLine(2, 'Version               ' + '{bold}' + proc.pm2_env.version + '{/}');\n    this.metadataBox.setLine(3, 'Restarts              ' + proc.pm2_env.restart_time);\n    this.metadataBox.setLine(4, 'Uptime                ' + (proc.pm2_env.pm_uptime && proc.pm2_env.status == 'online' ? timeSince(proc.pm2_env.pm_uptime) : 0));\n    this.metadataBox.setLine(5, 'Script path           ' + proc.pm2_env.pm_exec_path);\n    this.metadataBox.setLine(6, 'Script args           ' + (proc.pm2_env.args ? (typeof proc.pm2_env.args == 'string' ? JSON.parse(proc.pm2_env.args.replace(/'/g, '\"')) : proc.pm2_env.args).join(' ') : 'N/A'));\n    this.metadataBox.setLine(7, 'Interpreter           ' + proc.pm2_env.exec_interpreter);\n    this.metadataBox.setLine(8, 'Interpreter args      ' + (proc.pm2_env.node_args.length != 0 ? proc.pm2_env.node_args : 'N/A'));\n    this.metadataBox.setLine(9, 'Exec mode             ' + (proc.pm2_env.exec_mode == 'fork_mode' ? '{bold}fork{/}' : '{blue-fg}{bold}cluster{/}'));\n    this.metadataBox.setLine(10, 'Node.js version       ' + proc.pm2_env.node_version);\n    this.metadataBox.setLine(11, 'watch & reload        ' + (proc.pm2_env.watch ? '{green-fg}{bold}✔{/}' : '{red-fg}{bold}✘{/}'));\n    this.metadataBox.setLine(12, 'Unstable restarts     ' + proc.pm2_env.unstable_restarts);\n    this.metadataBox.setLine(13, 'Comment               ' + (proc.pm2_env.versioning ? proc.pm2_env.versioning.comment : 'N/A'));\n    this.metadataBox.setLine(14, 'Revision              ' + (proc.pm2_env.versioning ? proc.pm2_env.versioning.revision : 'N/A'));\n    this.metadataBox.setLine(15, 'Branch                ' + (proc.pm2_env.versioning ? proc.pm2_env.versioning.branch : 'N/A'));\n    this.metadataBox.setLine(16, 'Remote url            ' + (proc.pm2_env.versioning ? proc.pm2_env.versioning.url : 'N/A'));\n    this.metadataBox.deleteLine(17);\n    this.metadataBox.setLine(17, 'Last update           ' + (proc.pm2_env.versioning ? proc.pm2_env.versioning.update_time : 'N/A'));\n\n    if (Object.keys(proc.pm2_env.axm_monitor).length != this.metricsBox.items.length) {\n      this.metricsBox.clearItems();\n    }\n\n    var j = 0;\n\n    for (var key in proc.pm2_env.axm_monitor) {\n      var metric_name = proc.pm2_env.axm_monitor[key].hasOwnProperty('value') ? proc.pm2_env.axm_monitor[key].value : proc.pm2_env.axm_monitor[key];\n      var metric_unit = proc.pm2_env.axm_monitor[key].hasOwnProperty('unit') ? proc.pm2_env.axm_monitor[key].unit : null;\n      var probe = `{bold}${key}{/} {|} ${metric_name}${metric_unit == null ? '' : ' ' + metric_unit}`;\n\n      if (this.metricsBox.getItem(j)) {\n        this.metricsBox.setItem(j, probe);\n      } else {\n        this.metricsBox.pushItem(probe);\n      }\n\n      j++;\n    }\n\n    this.screen.render();\n  }\n\n  return this;\n};\n/**\n * Put Log\n * @method log\n * @param {} data\n * @return this\n */\n\n\nDashboard.log = function (type, data) {\n  var that = this;\n\n  if (typeof this.logLines[data.process.pm_id] == \"undefined\") {\n    this.logLines[data.process.pm_id] = [];\n  } // Logs colors\n\n\n  switch (type) {\n    case 'PM2':\n      var color = '{blue-fg}';\n      break;\n\n    case 'out':\n      var color = '{green-fg}';\n      break;\n\n    case 'err':\n      var color = '{red-fg}';\n      break;\n\n    default:\n      var color = '{white-fg}';\n  }\n\n  var logs = data.data.split('\\n');\n  logs.forEach(log => {\n    if (log.length > 0) {\n      this.logLines[data.process.pm_id].push(color + data.process.name + '{/} > ' + log); //removing logs if longer than limit\n\n      let count = 0;\n      let max_count = 0;\n      let leading_process_id = -1;\n\n      for (var process_id in this.logLines) {\n        count += this.logLines[process_id].length;\n\n        if (this.logLines[process_id].length > max_count) {\n          leading_process_id = process_id;\n          max_count = this.logLines[process_id].length;\n        }\n      }\n\n      if (count > 200) {\n        this.logLines[leading_process_id].shift();\n      }\n    }\n  });\n  return this;\n};\n\nmodule.exports = Dashboard;\n\nfunction timeSince(date) {\n  var seconds = Math.floor((new Date() - date) / 1000);\n  var interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return interval + 'Y';\n  }\n\n  interval = Math.floor(seconds / 2592000);\n\n  if (interval > 1) {\n    return interval + 'M';\n  }\n\n  interval = Math.floor(seconds / 86400);\n\n  if (interval > 1) {\n    return interval + 'D';\n  }\n\n  interval = Math.floor(seconds / 3600);\n\n  if (interval > 1) {\n    return interval + 'h';\n  }\n\n  interval = Math.floor(seconds / 60);\n\n  if (interval > 1) {\n    return interval + 'm';\n  }\n\n  return Math.floor(seconds) + 's';\n}\n/* Args :\n *  p : Percent 0 - 100\n *  rgb_ : Array of rgb [255, 255, 255]\n * Return :\n *  Hexa #FFFFFF\n */\n\n\nfunction gradient(p, rgb_beginning, rgb_end) {\n  var w = p / 100 * 2 - 1;\n  var w1 = (w + 1) / 2.0;\n  var w2 = 1 - w1;\n  var rgb = [parseInt(rgb_beginning[0] * w1 + rgb_end[0] * w2), parseInt(rgb_beginning[1] * w1 + rgb_end[1] * w2), parseInt(rgb_beginning[2] * w1 + rgb_end[2] * w2)];\n  return \"#\" + ((1 << 24) + (rgb[0] << 16) + (rgb[1] << 8) + rgb[2]).toString(16).slice(1);\n}","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/API/Dashboard.js"],"names":["os","require","p","blessed","debug","sprintf","totalMem","totalmem","Dashboard","DEFAULT_PADDING","top","left","right","WIDTH_LEFT_PANEL","init","screen","smartCSR","fullUnicode","title","logLines","list","width","height","padding","scrollbar","ch","inverse","border","type","keys","autoCommandKeys","tags","style","selected","bg","fg","header","on","item","i","logBox","clearItems","label","scrollable","metadataBox","box","metricsBox","box4","text","content","valign","focus","append","setLabel","render","that","boards","key","name","destroy","process","exit","setInterval","refresh","processes","setItem","length","items","mem","forEach","proc","monit","memory","sort","a","b","pm2_env","memPercent","status","basename","pm_exec_path","pm_id","gradient","toFixed","cpu","getItem","pushItem","process_id","logs","setItems","focused","setScrollPerc","setLine","namespace","version","restart_time","pm_uptime","timeSince","args","JSON","parse","replace","join","exec_interpreter","node_args","exec_mode","node_version","watch","unstable_restarts","versioning","comment","revision","branch","url","deleteLine","update_time","Object","axm_monitor","j","metric_name","hasOwnProperty","value","metric_unit","unit","probe","log","data","color","split","push","count","max_count","leading_process_id","shift","module","exports","date","seconds","Math","floor","Date","interval","rgb_beginning","rgb_end","w","w1","w2","rgb","parseInt","toString","slice"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n\nvar os         = require('os');\nvar p          = require('path');\nvar blessed    = require('blessed');\nvar debug      = require('debug')('pm2:monit');\nvar sprintf    = require('sprintf-js').sprintf;\n\n// Total memory\nconst totalMem = os.totalmem();\n\nvar Dashboard = {};\n\nvar DEFAULT_PADDING = {\n  top : 0,\n  left : 1,\n  right : 1\n};\n\nvar WIDTH_LEFT_PANEL = 30;\n\n/**\n * Synchronous Dashboard init method\n * @method init\n * @return this\n */\nDashboard.init = function() {\n  // Init Screen\n  this.screen = blessed.screen({\n    smartCSR: true,\n    fullUnicode: true\n  });\n  this.screen.title = 'PM2 Dashboard';\n\n  this.logLines = {}\n\n  this.list = blessed.list({\n    top: '0',\n    left: '0',\n    width: WIDTH_LEFT_PANEL + '%',\n    height: '70%',\n    padding: 0,\n    scrollbar: {\n      ch: ' ',\n      inverse: false\n    },\n    border: {\n      type: 'line'\n    },\n    keys: true,\n    autoCommandKeys: true,\n    tags: true,\n    style: {\n      selected: {\n        bg: 'blue',\n        fg: 'white'\n      },\n      scrollbar: {\n        bg: 'blue',\n        fg: 'black'\n      },\n      fg: 'white',\n      border: {\n        fg: 'blue'\n      },\n      header: {\n        fg: 'blue'\n      }\n    }\n  });\n\n  this.list.on('select item', (item, i) => {\n    this.logLines = []\n    this.logBox.clearItems()\n  })\n\n  this.logBox = blessed.list({\n    label: ' Logs ',\n    top: '0',\n    left: WIDTH_LEFT_PANEL + '%',\n    width: 100 - WIDTH_LEFT_PANEL + '%',\n    height: '70%',\n    padding: DEFAULT_PADDING,\n    scrollable: true,\n    scrollbar: {\n      ch: ' ',\n      inverse: false\n    },\n    keys: true,\n    autoCommandKeys: true,\n    tags: true,\n    border: {\n      type: 'line'\n    },\n    style: {\n      fg: 'white',\n      border: {\n        fg: 'white'\n      },\n      scrollbar: {\n        bg: 'blue',\n        fg: 'black'\n      }\n    }\n  });\n\n  this.metadataBox = blessed.box({\n    label: ' Metadata ',\n    top: '70%',\n    left: WIDTH_LEFT_PANEL + '%',\n    width: 100 - WIDTH_LEFT_PANEL + '%',\n    height: '26%',\n    padding: DEFAULT_PADDING,\n    scrollable: true,\n    scrollbar: {\n      ch: ' ',\n      inverse: false\n    },\n    keys: true,\n    autoCommandKeys: true,\n    tags: true,\n    border: {\n      type: 'line'\n    },\n    style: {\n      fg: 'white',\n      border: {\n        fg: 'white'\n      },\n      scrollbar: {\n        bg: 'blue',\n        fg: 'black'\n      }\n    }\n  });\n\n  this.metricsBox = blessed.list({\n    label: ' Custom Metrics ',\n    top: '70%',\n    left: '0%',\n    width: WIDTH_LEFT_PANEL + '%',\n    height: '26%',\n    padding: DEFAULT_PADDING,\n    scrollbar: {\n      ch: ' ',\n      inverse: false\n    },\n    keys: true,\n    autoCommandKeys: true,\n    tags: true,\n    border: {\n      type: 'line'\n    },\n    style: {\n      fg: 'white',\n      border: {\n        fg: 'white'\n      },\n      scrollbar: {\n        bg: 'blue',\n        fg: 'black'\n      }\n    }\n  });\n\n  this.box4 = blessed.text({\n    content: ' left/right: switch boards | up/down/mouse: scroll | Ctrl-C: exit{|} {cyan-fg}{bold}To go further check out https://pm2.io/{/}  ',\n    left: '0%',\n    top: '95%',\n    width: '100%',\n    height: '6%',\n    valign: 'middle',\n    tags: true,\n    style: {\n      fg: 'white'\n    }\n  });\n\n  this.list.focus();\n\n  this.screen.append(this.list);\n  this.screen.append(this.logBox);\n  this.screen.append(this.metadataBox);\n  this.screen.append(this.metricsBox);\n  this.screen.append(this.box4);\n\n  this.list.setLabel(' Process List ');\n\n  this.screen.render();\n\n  var that = this;\n\n  var i = 0;\n  var boards = ['list', 'logBox', 'metricsBox', 'metadataBox'];\n  this.screen.key(['left', 'right'], function(ch, key) {\n    (key.name === 'left') ? i-- : i++;\n    if (i == 4)\n      i = 0;\n    if (i == -1)\n      i = 3;\n    that[boards[i]].focus();\n    that[boards[i]].style.border.fg = 'blue';\n    if (key.name === 'left') {\n      if (i == 3)\n        that[boards[0]].style.border.fg = 'white';\n      else\n        that[boards[i + 1]].style.border.fg = 'white';\n    }\n    else {\n       if (i == 0)\n        that[boards[3]].style.border.fg = 'white';\n      else\n        that[boards[i - 1]].style.border.fg = 'white';\n    }\n  });\n\n  this.screen.key(['escape', 'q', 'C-c'], function(ch, key) {\n    this.screen.destroy();\n    process.exit(0);\n  });\n\n  // async refresh of the ui\n  setInterval(function () {\n    that.screen.render();\n  }, 300);\n\n  return this;\n}\n\n/**\n * Refresh dashboard\n * @method refresh\n * @param {} processes\n * @return this\n */\nDashboard.refresh = function(processes) {\n  debug('Monit refresh');\n\n  if(!processes) {\n    this.list.setItem(0, 'No process available');\n    return;\n  }\n\n  if (processes.length != this.list.items.length) {\n    this.list.clearItems();\n  }\n\n  // Total of processes memory\n  var mem = 0;\n  processes.forEach(function(proc) {\n    mem += proc.monit.memory;\n  })\n\n  // Sort process list\n  processes.sort(function(a, b) {\n    if (a.pm2_env.name < b.pm2_env.name)\n      return -1;\n    if (a.pm2_env.name > b.pm2_env.name)\n      return 1;\n    return 0;\n  });\n\n  // Loop to get process infos\n  for (var i = 0; i < processes.length; i++) {\n    // Percent of memory use by one process in all pm2 processes\n    var memPercent = (processes[i].monit.memory / mem) * 100;\n\n    // Status of process\n    var status = processes[i].pm2_env.status == 'online' ? '{green-fg}' : '{red-fg}';\n    status = status + '{bold}' + processes[i].pm2_env.status + '{/}';\n\n    var name = processes[i].pm2_env.name || p.basename(processes[i].pm2_env.pm_exec_path);\n\n    // Line of list\n    var item = sprintf('[%2s] %s {|} Mem: {bold}{%s-fg}%3d{/} MB    CPU: {bold}{%s-fg}%2d{/} %s  %s',\n                       processes[i].pm2_env.pm_id,\n                       name,\n                       gradient(memPercent, [255, 0, 0], [0, 255, 0]),\n                       (processes[i].monit.memory / 1048576).toFixed(2),\n                       gradient(processes[i].monit.cpu, [255, 0, 0], [0, 255, 0]),\n                       processes[i].monit.cpu,\n                       \"%\",\n                       status);\n\n    // Check if item exist\n    if (this.list.getItem(i)) {\n      this.list.setItem(i, item);\n    }\n    else {\n      this.list.pushItem(item);\n    }\n\n    var proc = processes[this.list.selected];\n    // render the logBox\n    let process_id = proc.pm_id\n    let logs = this.logLines[process_id];\n    if(typeof(logs) !== \"undefined\"){\n      this.logBox.setItems(logs)\n      if (!this.logBox.focused) {\n          this.logBox.setScrollPerc(100);\n      }\n    }else{\n      this.logBox.clearItems();\n    }\n    this.logBox.setLabel(`  ${proc.pm2_env.name} Logs  `)\n\n    this.metadataBox.setLine(0, 'App Name              ' + '{bold}' + proc.pm2_env.name + '{/}');\n    this.metadataBox.setLine(1, 'Namespace             ' + '{bold}' + proc.pm2_env.namespace + '{/}');\n    this.metadataBox.setLine(2, 'Version               ' + '{bold}' + proc.pm2_env.version + '{/}');\n    this.metadataBox.setLine(3, 'Restarts              ' + proc.pm2_env.restart_time);\n    this.metadataBox.setLine(4, 'Uptime                ' + ((proc.pm2_env.pm_uptime && proc.pm2_env.status == 'online') ? timeSince(proc.pm2_env.pm_uptime) : 0));\n    this.metadataBox.setLine(5, 'Script path           ' + proc.pm2_env.pm_exec_path);\n    this.metadataBox.setLine(6, 'Script args           ' + (proc.pm2_env.args ? (typeof proc.pm2_env.args == 'string' ? JSON.parse(proc.pm2_env.args.replace(/'/g, '\"')):proc.pm2_env.args).join(' ') : 'N/A'));\n    this.metadataBox.setLine(7, 'Interpreter           ' + proc.pm2_env.exec_interpreter);\n    this.metadataBox.setLine(8, 'Interpreter args      ' + (proc.pm2_env.node_args.length != 0 ? proc.pm2_env.node_args : 'N/A'));\n    this.metadataBox.setLine(9, 'Exec mode             ' + (proc.pm2_env.exec_mode == 'fork_mode' ? '{bold}fork{/}' : '{blue-fg}{bold}cluster{/}'));\n    this.metadataBox.setLine(10, 'Node.js version       ' + proc.pm2_env.node_version);\n    this.metadataBox.setLine(11, 'watch & reload        ' + (proc.pm2_env.watch ? '{green-fg}{bold}✔{/}' : '{red-fg}{bold}✘{/}'));\n    this.metadataBox.setLine(12, 'Unstable restarts     ' + proc.pm2_env.unstable_restarts);\n\n    this.metadataBox.setLine(13, 'Comment               ' + ((proc.pm2_env.versioning) ? proc.pm2_env.versioning.comment : 'N/A'));\n    this.metadataBox.setLine(14, 'Revision              ' + ((proc.pm2_env.versioning) ? proc.pm2_env.versioning.revision : 'N/A'));\n    this.metadataBox.setLine(15, 'Branch                ' + ((proc.pm2_env.versioning) ? proc.pm2_env.versioning.branch : 'N/A'));\n    this.metadataBox.setLine(16, 'Remote url            ' + ((proc.pm2_env.versioning) ? proc.pm2_env.versioning.url : 'N/A'));\n    this.metadataBox.deleteLine(17)\n    this.metadataBox.setLine(17, 'Last update           ' + ((proc.pm2_env.versioning) ? proc.pm2_env.versioning.update_time : 'N/A'));\n\n    if (Object.keys(proc.pm2_env.axm_monitor).length != this.metricsBox.items.length) {\n      this.metricsBox.clearItems();\n    }\n    var j = 0;\n    for (var key in proc.pm2_env.axm_monitor) {\n      var metric_name = proc.pm2_env.axm_monitor[key].hasOwnProperty('value') ? proc.pm2_env.axm_monitor[key].value : proc.pm2_env.axm_monitor[key]\n      var metric_unit = proc.pm2_env.axm_monitor[key].hasOwnProperty('unit') ? proc.pm2_env.axm_monitor[key].unit : null\n      var probe = `{bold}${key}{/} {|} ${metric_name}${metric_unit == null ? '' : ' ' + metric_unit}`\n\n      if (this.metricsBox.getItem(j)) {\n        this.metricsBox.setItem(j, probe);\n      }\n      else {\n        this.metricsBox.pushItem(probe);\n      }\n      j++;\n    }\n\n    this.screen.render();\n  }\n\n  return this;\n}\n\n/**\n * Put Log\n * @method log\n * @param {} data\n * @return this\n */\nDashboard.log = function(type, data) {\n  var that = this;\n\n  if(typeof(this.logLines[data.process.pm_id]) == \"undefined\"){\n    this.logLines[data.process.pm_id]=[];\n  }\n  // Logs colors\n  switch (type) {\n    case 'PM2':\n      var color = '{blue-fg}';\n      break;\n    case 'out':\n      var color = '{green-fg}';\n      break;\n    case 'err':\n      var color = '{red-fg}';\n      break;\n    default:\n      var color = '{white-fg}';\n  }\n\n  var logs = data.data.split('\\n')\n\n  logs.forEach((log) => {\n    if (log.length > 0) {\n      this.logLines[data.process.pm_id].push(color + data.process.name + '{/} > ' + log)\n\n\n      //removing logs if longer than limit\n      let count = 0;\n      let max_count = 0;\n      let leading_process_id = -1;\n\n      for(var process_id in this.logLines){\n        count += this.logLines[process_id].length;\n        if( this.logLines[process_id].length > max_count){\n          leading_process_id = process_id;\n          max_count = this.logLines[process_id].length;\n        }\n      }\n\n      if (count > 200) {\n        this.logLines[leading_process_id].shift()\n      }\n    }\n  })\n\n  return this;\n}\n\nmodule.exports = Dashboard;\n\nfunction timeSince(date) {\n\n  var seconds = Math.floor((new Date() - date) / 1000);\n\n  var interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return interval + 'Y';\n  }\n  interval = Math.floor(seconds / 2592000);\n  if (interval > 1) {\n    return interval + 'M';\n  }\n  interval = Math.floor(seconds / 86400);\n  if (interval > 1) {\n    return interval + 'D';\n  }\n  interval = Math.floor(seconds / 3600);\n  if (interval > 1) {\n    return interval + 'h';\n  }\n  interval = Math.floor(seconds / 60);\n  if (interval > 1) {\n    return interval + 'm';\n  }\n  return Math.floor(seconds) + 's';\n}\n\n/* Args :\n *  p : Percent 0 - 100\n *  rgb_ : Array of rgb [255, 255, 255]\n * Return :\n *  Hexa #FFFFFF\n */\nfunction gradient(p, rgb_beginning, rgb_end) {\n\n    var w = (p / 100) * 2 - 1;\n\n    var w1 = (w + 1) / 2.0;\n    var w2 = 1 - w1;\n\n    var rgb = [parseInt(rgb_beginning[0] * w1 + rgb_end[0] * w2),\n        parseInt(rgb_beginning[1] * w1 + rgb_end[1] * w2),\n            parseInt(rgb_beginning[2] * w1 + rgb_end[2] * w2)];\n\n    return \"#\" + ((1 << 24) + (rgb[0] << 16) + (rgb[1] << 8) + rgb[2]).toString(16).slice(1);\n}\n"]},"metadata":{},"sourceType":"script"}