{"ast":null,"code":"var fs = require('fs');\n\nvar async = require('async');\n\nvar exec = require('child_process').exec;\n\nvar svn = {};\n\nsvn.parse = function (folder, cb) {\n  var getMeta = function (cb) {\n    exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 svn info\", function (err, stdout, stderr) {\n      if (err !== null) return cb(err);\n      var data = {};\n      data.type = 'svn';\n      data.url = stdout.match(/Repository Root: ([^\\n]+)/);\n\n      if (data.url && typeof data.url === 'object') {\n        data.url = data.url[1];\n        data.branch = typeof data.url === 'string' ? data.url.match(/[^/]+$/) : null;\n      }\n\n      if (data.branch) data.branch = data.branch[0];\n      return cb(null, data);\n    });\n  };\n\n  var getRevComment = function (data, cb) {\n    exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 svn log -r BASE\", function (err, stdout, stderr) {\n      if (err !== null) return cb(err);\n      data.revision = stdout.match(/^(r[0-9]+)\\s\\|/m);\n      data.comment = stdout.match(/lines?\\s*\\n((.|\\n)*)\\n-{72}\\n$/);\n      if (data.revision) data.revision = data.revision[1];\n      if (data.comment) data.comment = data.comment[1].replace(/\\n/g, '');\n      cb(null, data);\n    });\n  };\n\n  var getDate = function (data, cb) {\n    fs.stat(folder + \".svn\", function (err, stats) {\n      if (err !== null) return cb(err);\n      data.update_time = stats.mtime;\n      return cb(null, data);\n    });\n  };\n\n  async.waterfall([getMeta, getRevComment, getDate], function (err, data) {\n    if (err !== null) return cb(err);\n    return cb(null, data);\n  });\n};\n\nsvn.isUpdated = function (folder, cb) {\n  var res = {};\n\n  var getRev = function (str) {\n    var matches = str.match(/Changed Rev: ([^\\n]+)/);\n    if (matches) matches = matches[1];\n    return matches;\n  };\n\n  exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 svn info\", function (err, stdout, stderr) {\n    if (err !== null) return cb(err);\n    var current_rev = getRev(stdout);\n    exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 svn info -r HEAD\", function (err, stdout, stderr) {\n      if (err !== null) return cb(err);\n      var recent_rev = getRev(stdout);\n      res.is_up_to_date = recent_rev === current_rev;\n      res.new_revision = recent_rev;\n      res.current_revision = current_rev;\n      return cb(null, res);\n    });\n  });\n};\n\nsvn.update = function (folder, cb) {\n  var res = {};\n  exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 svn update\", function (err, stdout, stderr) {\n    if (err !== null) return cb(err);\n    var new_rev = stdout.match(/Updated to revision ([^\\.]+)/);\n\n    if (new_rev === null) {\n      res.success = false;\n      var old_rev = stdout.match(/At revision ([^\\.]+)/);\n      res.current_revision = old_rev ? old_rev[1] : null;\n    } else {\n      res.success = true;\n      res.current_revision = new_rev[1];\n    }\n\n    return cb(null, res);\n  });\n};\n\nmodule.exports = svn;","map":{"version":3,"sources":["/Users/samianki/node_modules/vizion/lib/svn.js"],"names":["fs","require","async","exec","svn","parse","folder","cb","getMeta","err","stdout","stderr","data","type","url","match","branch","getRevComment","revision","comment","replace","getDate","stat","stats","update_time","mtime","waterfall","isUpdated","res","getRev","str","matches","current_rev","recent_rev","is_up_to_date","new_revision","current_revision","update","new_rev","success","old_rev","module","exports"],"mappings":"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","sourcesContent":["var fs = require('fs');\nvar async = require('async');\nvar exec = require('child_process').exec;\n\nvar svn = {};\n\nsvn.parse = function(folder, cb) {\n  var getMeta = function(cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 svn info\", function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      var data = {};\n      data.type = 'svn';\n      data.url = stdout.match(/Repository Root: ([^\\n]+)/);\n      if (data.url && typeof(data.url) === 'object') {\n        data.url = data.url[1];\n        data.branch = typeof(data.url) === 'string' ? data.url.match(/[^/]+$/) : null;\n      }\n      if (data.branch) data.branch = data.branch[0];\n      return cb(null, data);\n    });\n  }\n\n  var getRevComment = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 svn log -r BASE\", function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      data.revision = stdout.match(/^(r[0-9]+)\\s\\|/m);\n      data.comment = stdout.match(/lines?\\s*\\n((.|\\n)*)\\n-{72}\\n$/);\n      if (data.revision) data.revision = data.revision[1];\n      if (data.comment) data.comment = data.comment[1].replace(/\\n/g, '');\n      cb(null, data);\n    });\n  }\n\n  var getDate = function(data, cb) {\n    fs.stat(folder+\".svn\", function(err, stats) {\n      if(err !== null)\n        return cb(err);\n      data.update_time = stats.mtime;\n      return cb(null, data);\n    });\n  }\n\n  async.waterfall([getMeta, getRevComment, getDate],\n  function(err, data) {\n    if (err !== null)\n      return cb(err);\n    return cb(null, data);\n  });\n}\n\nsvn.isUpdated = function(folder, cb) {\n  var res = {};\n\n  var getRev = function(str) {\n    var matches = str.match(/Changed Rev: ([^\\n]+)/);\n    if (matches) matches = matches[1];\n    return matches;\n  }\n\n  exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 svn info\", function(err, stdout, stderr) {\n    if(err !== null)\n      return cb(err);\n    var current_rev = getRev(stdout);\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 svn info -r HEAD\", function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      var recent_rev = getRev(stdout);\n      res.is_up_to_date = (recent_rev === current_rev);\n      res.new_revision = recent_rev;\n      res.current_revision = current_rev;\n      return cb(null, res);\n    });\n  });\n}\n\nsvn.update = function(folder, cb) {\n  var res = {};\n\n  exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 svn update\", function(err, stdout, stderr) {\n    if(err !== null)\n      return cb(err);\n    var new_rev = stdout.match(/Updated to revision ([^\\.]+)/);\n    if (new_rev === null)\n    {\n      res.success = false;\n      var old_rev = stdout.match(/At revision ([^\\.]+)/);\n      res.current_revision = (old_rev) ? old_rev[1] : null;\n    }\n    else {\n      res.success = true;\n      res.current_revision = new_rev[1];\n    }\n    return cb(null, res);\n  });\n}\n\nmodule.exports = svn;\n"]},"metadata":{},"sourceType":"script"}