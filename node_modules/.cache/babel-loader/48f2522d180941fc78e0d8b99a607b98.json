{"ast":null,"code":"'use strict';\n\nconst StringPrompt = require('./string');\n\nclass NumberPrompt extends StringPrompt {\n  constructor(options = {}) {\n    super({\n      style: 'number',\n      ...options\n    });\n    this.min = this.isValue(options.min) ? this.toNumber(options.min) : -Infinity;\n    this.max = this.isValue(options.max) ? this.toNumber(options.max) : Infinity;\n    this.delay = options.delay != null ? options.delay : 1000;\n    this.float = options.float !== false;\n    this.round = options.round === true || options.float === false;\n    this.major = options.major || 10;\n    this.minor = options.minor || 1;\n    this.initial = options.initial != null ? options.initial : '';\n    this.input = String(this.initial);\n    this.cursor = this.input.length;\n    this.cursorShow();\n  }\n\n  append(ch) {\n    if (!/[-+.]/.test(ch) || ch === '.' && this.input.includes('.')) {\n      return this.alert('invalid number');\n    }\n\n    return super.append(ch);\n  }\n\n  number(ch) {\n    return super.append(ch);\n  }\n\n  next() {\n    if (this.input && this.input !== this.initial) return this.alert();\n    if (!this.isValue(this.initial)) return this.alert();\n    this.input = this.initial;\n    this.cursor = String(this.initial).length;\n    return this.render();\n  }\n\n  up(number) {\n    let step = number || this.minor;\n    let num = this.toNumber(this.input);\n    if (num > this.max + step) return this.alert();\n    this.input = `${num + step}`;\n    return this.render();\n  }\n\n  down(number) {\n    let step = number || this.minor;\n    let num = this.toNumber(this.input);\n    if (num < this.min - step) return this.alert();\n    this.input = `${num - step}`;\n    return this.render();\n  }\n\n  shiftDown() {\n    return this.down(this.major);\n  }\n\n  shiftUp() {\n    return this.up(this.major);\n  }\n\n  format(input = this.input) {\n    if (typeof this.options.format === 'function') {\n      return this.options.format.call(this, input);\n    }\n\n    return this.styles.info(input);\n  }\n\n  toNumber(value = '') {\n    return this.float ? +value : Math.round(+value);\n  }\n\n  isValue(value) {\n    return /^[-+]?[0-9]+((\\.)|(\\.[0-9]+))?$/.test(value);\n  }\n\n  submit() {\n    let value = [this.input, this.initial].find(v => this.isValue(v));\n    this.value = this.toNumber(value || 0);\n    return super.submit();\n  }\n\n}\n\nmodule.exports = NumberPrompt;","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/lib/types/number.js"],"names":["StringPrompt","require","NumberPrompt","constructor","options","style","min","isValue","toNumber","Infinity","max","delay","float","round","major","minor","initial","input","String","cursor","length","cursorShow","append","ch","test","includes","alert","number","next","render","up","step","num","down","shiftDown","shiftUp","format","call","styles","info","value","Math","submit","find","v","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst StringPrompt = require('./string');\n\nclass NumberPrompt extends StringPrompt {\n  constructor(options = {}) {\n    super({ style: 'number', ...options });\n    this.min = this.isValue(options.min) ? this.toNumber(options.min) : -Infinity;\n    this.max = this.isValue(options.max) ? this.toNumber(options.max) : Infinity;\n    this.delay = options.delay != null ? options.delay : 1000;\n    this.float = options.float !== false;\n    this.round = options.round === true || options.float === false;\n    this.major = options.major || 10;\n    this.minor = options.minor || 1;\n    this.initial = options.initial != null ? options.initial : '';\n    this.input = String(this.initial);\n    this.cursor = this.input.length;\n    this.cursorShow();\n  }\n\n  append(ch) {\n    if (!/[-+.]/.test(ch) || (ch === '.' && this.input.includes('.'))) {\n      return this.alert('invalid number');\n    }\n    return super.append(ch);\n  }\n\n  number(ch) {\n    return super.append(ch);\n  }\n\n  next() {\n    if (this.input && this.input !== this.initial) return this.alert();\n    if (!this.isValue(this.initial)) return this.alert();\n    this.input = this.initial;\n    this.cursor = String(this.initial).length;\n    return this.render();\n  }\n\n  up(number) {\n    let step = number || this.minor;\n    let num = this.toNumber(this.input);\n    if (num > this.max + step) return this.alert();\n    this.input = `${num + step}`;\n    return this.render();\n  }\n\n  down(number) {\n    let step = number || this.minor;\n    let num = this.toNumber(this.input);\n    if (num < this.min - step) return this.alert();\n    this.input = `${num - step}`;\n    return this.render();\n  }\n\n  shiftDown() {\n    return this.down(this.major);\n  }\n\n  shiftUp() {\n    return this.up(this.major);\n  }\n\n  format(input = this.input) {\n    if (typeof this.options.format === 'function') {\n      return this.options.format.call(this, input);\n    }\n    return this.styles.info(input);\n  }\n\n  toNumber(value = '') {\n    return this.float ? +value : Math.round(+value);\n  }\n\n  isValue(value) {\n    return /^[-+]?[0-9]+((\\.)|(\\.[0-9]+))?$/.test(value);\n  }\n\n  submit() {\n    let value = [this.input, this.initial].find(v => this.isValue(v));\n    this.value = this.toNumber(value || 0);\n    return super.submit();\n  }\n}\n\nmodule.exports = NumberPrompt;\n"]},"metadata":{},"sourceType":"script"}