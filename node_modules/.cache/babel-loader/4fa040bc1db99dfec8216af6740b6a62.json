{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar os = require('os');\n\nvar platformToMethod = {\n  aix: 'ps',\n  android: 'procfile',\n  alpine: 'procfile',\n  darwin: 'ps',\n  freebsd: 'ps',\n  linux: 'procfile',\n  netbsd: 'procfile',\n  sunos: 'ps',\n  win: 'wmic'\n};\n\nvar ps = require('./ps');\n\nvar platform = os.platform();\n\nif (fs.existsSync('/etc/alpine-release')) {\n  platform = 'alpine';\n}\n\nif (platform.match(/^win/)) {\n  platform = 'win';\n}\n\nvar stat;\n\ntry {\n  stat = require('./' + platformToMethod[platform]);\n} catch (err) {}\n/**\n * @callback pidCallback\n * @param {Error} err A possible error.\n * @param {Object} statistics The object containing the statistics.\n */\n\n/**\n * Get pid informations.\n * @public\n * @param  {Number|Number[]|String|String[]} pids A pid or a list of pids.\n * @param  {Object} [options={}] Options object\n * @param  {pidCallback} callback Called when the statistics are ready.\n */\n\n\nfunction get(pids, options, callback) {\n  var fn = stat;\n\n  if (platform !== 'win' && options.usePs === true) {\n    fn = ps;\n  }\n\n  if (stat === undefined) {\n    return callback(new Error(os.platform() + ' is not supported yet, please open an issue (https://github.com/soyuka/pidusage)'));\n  }\n\n  var single = false;\n\n  if (!Array.isArray(pids)) {\n    single = true;\n    pids = [pids];\n  }\n\n  if (pids.length === 0) {\n    return callback(new TypeError('You must provide at least one pid'));\n  }\n\n  for (var i = 0; i < pids.length; i++) {\n    pids[i] = parseInt(pids[i], 10);\n\n    if (isNaN(pids[i]) || pids[i] < 0) {\n      return callback(new TypeError('One of the pids provided is invalid'));\n    }\n  }\n\n  fn(pids, options, function (err, stats) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (single) {\n      callback(null, stats[pids[0]]);\n    } else {\n      callback(null, stats);\n    }\n  });\n}\n\nmodule.exports = get;","map":{"version":3,"sources":["/Users/samianki/node_modules/pidusage/lib/stats.js"],"names":["fs","require","os","platformToMethod","aix","android","alpine","darwin","freebsd","linux","netbsd","sunos","win","ps","platform","existsSync","match","stat","err","get","pids","options","callback","fn","usePs","undefined","Error","single","Array","isArray","length","TypeError","i","parseInt","isNaN","stats","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar fs = require('fs')\nvar os = require('os')\n\nvar platformToMethod = {\n  aix: 'ps',\n  android: 'procfile',\n  alpine: 'procfile',\n  darwin: 'ps',\n  freebsd: 'ps',\n  linux: 'procfile',\n  netbsd: 'procfile',\n  sunos: 'ps',\n  win: 'wmic'\n}\n\nvar ps = require('./ps')\nvar platform = os.platform()\n\nif (fs.existsSync('/etc/alpine-release')) {\n  platform = 'alpine'\n}\n\nif (platform.match(/^win/)) {\n  platform = 'win'\n}\n\nvar stat\ntry {\n  stat = require('./' + platformToMethod[platform])\n} catch (err) {}\n\n/**\n * @callback pidCallback\n * @param {Error} err A possible error.\n * @param {Object} statistics The object containing the statistics.\n */\n\n/**\n * Get pid informations.\n * @public\n * @param  {Number|Number[]|String|String[]} pids A pid or a list of pids.\n * @param  {Object} [options={}] Options object\n * @param  {pidCallback} callback Called when the statistics are ready.\n */\nfunction get (pids, options, callback) {\n  var fn = stat\n  if (platform !== 'win' && options.usePs === true) {\n    fn = ps\n  }\n\n  if (stat === undefined) {\n    return callback(new Error(os.platform() + ' is not supported yet, please open an issue (https://github.com/soyuka/pidusage)'))\n  }\n\n  var single = false\n  if (!Array.isArray(pids)) {\n    single = true\n    pids = [pids]\n  }\n\n  if (pids.length === 0) {\n    return callback(new TypeError('You must provide at least one pid'))\n  }\n\n  for (var i = 0; i < pids.length; i++) {\n    pids[i] = parseInt(pids[i], 10)\n    if (isNaN(pids[i]) || pids[i] < 0) {\n      return callback(new TypeError('One of the pids provided is invalid'))\n    }\n  }\n\n  fn(pids, options, function (err, stats) {\n    if (err) {\n      return callback(err)\n    }\n\n    if (single) {\n      callback(null, stats[pids[0]])\n    } else {\n      callback(null, stats)\n    }\n  })\n}\n\nmodule.exports = get\n"]},"metadata":{},"sourceType":"script"}