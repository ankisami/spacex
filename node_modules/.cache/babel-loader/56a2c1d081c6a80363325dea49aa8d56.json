{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('interactor:client');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst rpc = require('pm2-axon-rpc');\n\nconst axon = require('pm2-axon');\n\nconst chalk = require('chalk');\n\nconst os = require('os');\n\nconst constants = require('../constants');\n\nconst childProcess = require('child_process');\n\nconst printError = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC) return false;\n  if (msg instanceof Error) return console.error(msg.message);\n  return console.error.apply(console, arguments);\n};\n\nconst printOut = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC) return false;\n  return console.log.apply(console, arguments);\n};\n\nmodule.exports = class InteractorDaemonizer {\n  /**\n   * Ping the Interactor to see if its online\n   * @param {Object} opts global constants\n   * @param {String} opts.INTERACTOR_RPC_PORT path used to connect to the interactor\n   * @param {Function} cb invoked with <err, result>\n   */\n  static ping(opts, cb) {\n    if (typeof cb !== 'function') {\n      throw new Error('Missing parameters');\n    } else if (typeof opts !== 'object' || !opts || !opts.INTERACTOR_RPC_PORT) {\n      return cb(new Error('Missing parameters'));\n    }\n\n    const req = axon.socket('req');\n    const client = new rpc.Client(req);\n    log('[PING INTERACTOR] Trying to connect to Interactor daemon');\n    client.sock.once('reconnect attempt', _ => {\n      client.sock.close();\n      log('Interactor Daemon not launched');\n      return cb(null, false);\n    });\n    client.sock.once('connect', _ => {\n      client.sock.once('close', _ => {\n        return cb(null, true);\n      });\n      client.sock.close();\n      log('Interactor Daemon alive');\n    });\n    client.sock.once('error', e => {\n      if (e.code === 'EACCES') {\n        fs.stat(opts.INTERACTOR_RPC_PORT, (e, stats) => {\n          if (stats.uid === 0) {\n            console.error('Permission denied, activate current user');\n            return process.exit(1);\n          }\n        });\n      } else {\n        console.error('unexpected error');\n        console.error(e);\n      }\n    });\n    req.connect(opts.INTERACTOR_RPC_PORT);\n  }\n  /**\n   * Try to kill the interactor daemon via RPC\n   * @param {Object} conf global constants\n   * @param {String} conf.INTERACTOR_RPC_PORT path used to connect to the interactor\n   * @param {Function} cb invoked with <err>\n   */\n\n\n  static killInteractorDaemon(conf, cb) {\n    process.env.PM2_INTERACTOR_PROCESSING = true;\n    log('Killing interactor #1 ping');\n    this.ping(conf, (err, online) => {\n      log(`Interactor is ${!online || err ? 'offline' : 'online'}`);\n\n      if (!online || err) {\n        return cb ? err ? cb(err) : cb(new Error('Interactor not launched')) : printError('Interactor not launched');\n      }\n\n      this.launchRPC(conf, (err, data) => {\n        if (err) {\n          setTimeout(_ => {\n            this.disconnectRPC(cb);\n          }, 100);\n          return false;\n        }\n\n        this.rpc.kill(err => {\n          if (err) printError(err);\n          setTimeout(_ => {\n            this.disconnectRPC(cb);\n          }, 100);\n        });\n        return false;\n      });\n      return false;\n    });\n  }\n  /**\n   * Start a RPC client that connect to the InteractorDaemon\n   * @param {Object} conf global constants\n   * @param {Function} cb invoked with <err>\n   */\n\n\n  static launchRPC(conf, cb) {\n    const req = axon.socket('req');\n    this.rpc = {};\n    this.client = new rpc.Client(req);\n    log('Generating Interactor methods of RPC client'); // attach known methods to RPC client\n\n    const generateMethods = cb => {\n      this.client.methods((err, methods) => {\n        if (err) return cb(err);\n        Object.keys(methods).forEach(key => {\n          let method = methods[key];\n          log('+ Adding %s method to interactor RPC client', method.name);\n\n          (name => {\n            let self = this;\n\n            this.rpc[name] = function () {\n              let args = Array.prototype.slice.call(arguments);\n              args.unshift(name);\n              self.client.call.apply(self.client, args);\n            };\n          })(method.name);\n        });\n        return cb();\n      });\n    };\n\n    this.client.sock.once('reconnect attempt', err => {\n      this.client.sock.removeAllListeners();\n      return cb(err, {\n        success: false,\n        msg: 'reconnect attempt'\n      });\n    });\n    this.client.sock.once('error', err => {\n      log('-- Error in error catch all on Interactor --', err);\n      return cb(err, {\n        success: false,\n        msg: 'reconnect attempt'\n      });\n    });\n    this.client.sock.once('connect', () => {\n      this.client.sock.removeAllListeners();\n      generateMethods(_ => {\n        log('Methods of RPC client for Interaction ready.');\n        return cb(null, {\n          success: true\n        });\n      });\n    });\n    this.client_sock = req.connect(conf.INTERACTOR_RPC_PORT);\n  }\n  /**\n   * Start or Restart the Interaction Daemon depending if its online or not\n   * @private\n   * @param {Object} conf global constants\n   * @param {Object} infos data used to start the interactor [can be recovered from FS]\n   * @param {String} infos.secret_key the secret key used to cipher data\n   * @param {String} infos.public_key the public key used identify the user\n   * @param {String} infos.machine_name [optional] override name of the machine\n   * @param {Function} cb invoked with <err, msg, process>\n   */\n\n\n  static daemonize(cst, conf, cb) {\n    const InteractorJS = path.resolve(path.dirname(module.filename), 'InteractorDaemon.js'); // Redirect PM2 internal err and out\n    // to STDERR STDOUT when running with Travis\n\n    const testEnv = process.env.TRAVIS || process.env.NODE_ENV && process.env.NODE_ENV.match(/test/);\n    const out = testEnv ? 1 : fs.openSync(constants.INTERACTOR_LOG_FILE_PATH, 'a');\n    const err = testEnv ? 2 : fs.openSync(constants.INTERACTOR_LOG_FILE_PATH, 'a');\n    let binary = process.execPath;\n\n    if (binary.indexOf('node') === -1) {\n      binary = 'node';\n    }\n\n    if (process.env.NODEJS_EXECUTABLE) {\n      binary = process.env.NODEJS_EXECUTABLE;\n    }\n\n    const child = childProcess.spawn(binary, [InteractorJS], {\n      silent: false,\n      detached: true,\n      cwd: process.cwd(),\n      env: Object.assign({\n        PM2_HOME: cst.PM2_HOME,\n        PM2_MACHINE_NAME: conf.machine_name,\n        PM2_SECRET_KEY: conf.secret_key,\n        PM2_PUBLIC_KEY: conf.public_key,\n        PM2_REVERSE_INTERACT: conf.reverse_interact,\n        KEYMETRICS_NODE: conf.info_node,\n        AGENT_TRANSPORT_AXON: conf.agent_transport_axon,\n        AGENT_TRANSPORT_WEBSOCKET: conf.agent_transport_websocket,\n        PM2_VERSION: conf.pm2_version,\n        DEBUG: process.env.DEBUG || 'interactor:*,-interactor:axon,-interactor:websocket,-interactor:pm2:client,-interactor:push'\n      }, process.env),\n      stdio: ['ipc', out, err]\n    });\n\n    try {\n      let prevPid = fs.readFileSync(constants.INTERACTOR_PID_PATH);\n      prevPid = parseInt(prevPid);\n      process.kill(prevPid);\n    } catch (e) {}\n\n    let pid = '';\n    if (child.pid) pid = child.pid.toString();\n    fs.writeFileSync(cst.INTERACTOR_PID_PATH, pid);\n    child.on('close', status => {\n      if (status === constants.ERROR_EXIT) {\n        return cb(new Error('Agent has shutdown for unknown reason'));\n      }\n\n      return cb();\n    });\n    child.once('error', err => {\n      log('Error when launching Interactor, please check the agent logs');\n      return cb(err);\n    });\n    child.unref();\n    const timeout = setTimeout(_ => {\n      printOut(`${chalk.yellow('[PM2.IO][WARNING]')} Not managed to connect to PM2 Plus, retrying in background.`);\n      child.removeAllListeners();\n      child.disconnect();\n      return cb(null, {}, child);\n    }, 7000);\n    child.once('message', msg => {\n      clearTimeout(timeout);\n      log('Interactor daemon launched :', msg);\n\n      if (msg.log) {\n        return cb(null, msg, child);\n      }\n\n      child.removeAllListeners('error');\n      child.disconnect(); // Handle and show to user the different error message that can happen\n\n      if (msg.km_data && msg.km_data.error === true) {\n        if (!process.env.PM2_SILENT) {\n          console.log(chalk.red('[PM2.IO][ERROR]'), msg.km_data.msg);\n          console.log(chalk.cyan('[PM2.IO]') + ' Contact support contact@keymetrics.io and send us the error message');\n        }\n\n        return cb(msg);\n      } else if (msg.km_data && msg.km_data.disabled === true) {\n        if (!process.env.PM2_SILENT) {\n          console.log(chalk.cyan('[PM2.IO]') + ' Server DISABLED BY ADMINISTRATION contact support contact@keymetrics.io with reference to your public and secret keys)');\n        }\n\n        return cb(msg);\n      } else if (msg.km_data && msg.km_data.error === true) {\n        if (!process.env.PM2_SILENT) {\n          console.log('%s %s (Public: %s) (Secret: %s) (Machine name: %s)', chalk.red('[PM2.IO][ERROR]'), msg.km_data.msg, msg.public_key, msg.secret_key, msg.machine_name);\n        }\n\n        return cb(msg);\n      } else if (msg.km_data && msg.km_data.active === false && msg.km_data.pending === true) {\n        if (!process.env.PM2_SILENT) {\n          console.log('%s You must upgrade your bucket in order to monitor more servers.', chalk.red('[PM2.IO]'));\n        }\n\n        return cb(msg);\n      }\n\n      return cb(null, msg, child);\n    });\n  }\n  /**\n   * Start or Restart the Interaction Daemon depending if its online or not\n   * @private\n   * @param {Object} conf global constants\n   * @param {Object} infos data used to start the interactor [can be recovered from FS]\n   * @param {String} infos.secret_key the secret key used to cipher data\n   * @param {String} infos.public_key the public key used identify the user\n   * @param {String} infos.machine_name [optional] override name of the machine\n   * @param {Function} cb invoked with <err, msg, process>\n   */\n\n\n  static launchOrAttach(conf, infos, cb) {\n    this.ping(conf, (err, online) => {\n      if (!err && online) {\n        log('Interactor online, restarting it...');\n        this.launchRPC(conf, _ => {\n          this.rpc.kill(ignoredErr => {\n            this.daemonize(conf, infos, cb);\n          });\n        });\n      } else {\n        log('Interactor offline, launching it...');\n        this.daemonize(conf, infos, cb);\n      }\n    });\n  }\n  /**\n   * Restart the Interactor Daemon\n   * @param {Object} conf global constants\n   * @param {Function} cb invoked with <err, msg>\n   */\n\n\n  static update(conf, cb) {\n    this.ping(conf, (err, online) => {\n      if (err || !online) {\n        return cb ? cb(new Error('Interactor not launched')) : printError('Interactor not launched');\n      }\n\n      this.launchRPC(conf, _ => {\n        this.rpc.kill(err => {\n          if (err) {\n            return cb ? cb(err) : printError(err);\n          }\n\n          printOut('Interactor successfully killed');\n          setTimeout(_ => {\n            this.launchAndInteract(conf, {}, _ => {\n              return cb(null, {\n                msg: 'Daemon launched'\n              });\n            });\n          }, 500);\n        });\n      });\n    });\n  }\n  /**\n   * Retrieve Interactor configuration from env, params and filesystem.\n   * @param {Object} cst global constants\n   * @param {Object} infos data used to start the interactor [optional]\n   * @param {String} infos.secret_key the secret key used to cipher data [optional]\n   * @param {String} infos.public_key the public key used identify the user [optional]\n   * @param {String} infos.machine_name override name of the machine [optional]\n   * @param {Function} cb invoked with <err, configuration>\n   */\n\n\n  static getOrSetConf(cst, infos, cb) {\n    infos = infos || {};\n    let configuration = {\n      version_management: {\n        active: true\n      }\n    };\n    let confFS = {}; // Try loading configuration file on FS\n\n    try {\n      let fileContent = fs.readFileSync(cst.INTERACTION_CONF).toString(); // Handle old configuration with json5\n\n      fileContent = fileContent.replace(/\\s(\\w+):/g, '\"$1\":'); // parse\n\n      confFS = JSON.parse(fileContent);\n\n      if (confFS.version_management) {\n        configuration.version_management.active = confFS.version_management.active;\n      }\n    } catch (e) {\n      log('Interaction file does not exists');\n    } // load the configration (first have priority)\n    //    -> from env variable\n    //    -> from params (eg. CLI)\n    //    -> from configuration on FS\n\n\n    configuration.public_key = process.env.PM2_PUBLIC_KEY || process.env.KEYMETRICS_PUBLIC || infos.public_key || confFS.public_key;\n    configuration.secret_key = process.env.PM2_SECRET_KEY || process.env.KEYMETRICS_SECRET || infos.secret_key || confFS.secret_key;\n    configuration.machine_name = process.env.PM2_MACHINE_NAME || process.env.INSTANCE_NAME || infos.machine_name || confFS.machine_name || os.hostname();\n    configuration.pm2_version = process.env.PM2_VERSION || infos.pm2_version || confFS.pm2_version;\n    configuration.reverse_interact = confFS.reverse_interact || true; // is setup empty ? use the one provided in env OR root OTHERWISE get the one on FS conf OR fallback on root\n\n    configuration.info_node = process.env.KEYMETRICS_NODE || infos.info_node || confFS.info_node || cst.KEYMETRICS_ROOT_URL;\n    configuration.agent_transport_websocket = process.env.AGENT_TRANSPORT_WEBSOCKET || infos.agent_transport_websocket || confFS.agent_transport_websocket || 'false';\n    configuration.agent_transport_axon = process.env.AGENT_TRANSPORT_AXON || infos.agent_transport_axon || confFS.agent_transport_axon || 'true';\n\n    if (!configuration.secret_key) {\n      log('Secret key is not defined in configuration', configuration);\n      return cb(new Error('secret key is not defined'));\n    }\n\n    if (!configuration.public_key) {\n      log('Public key is not defined in configuration', configuration);\n      return cb(new Error('public key is not defined'));\n    } // write configuration on FS\n\n\n    try {\n      fs.writeFileSync(cst.INTERACTION_CONF, JSON.stringify(configuration, null, 4));\n    } catch (e) {\n      console.error('Error when writting configuration file %s', cst.INTERACTION_CONF);\n      return cb(e);\n    }\n\n    if (configuration.info_node.indexOf('http') === -1) {\n      // handle old file\n      configuration.info_node = `https://${configuration.info_node}`;\n    }\n\n    return cb(null, configuration);\n  }\n  /**\n   * Disconnect the RPC client from Interactor Daemon\n   * @param {Function} cb invoked with <err, msg>\n   */\n\n\n  static disconnectRPC(cb) {\n    log('Disconnect RPC');\n\n    if (!this.client_sock || !this.client_sock.close) {\n      log('RPC not launched');\n      return cb(null, {\n        success: false,\n        msg: 'RPC connection to Interactor Daemon is not launched'\n      });\n    }\n\n    if (this.client_sock.closing === true) {\n      log('RPC already closed');\n      return cb(null, {\n        success: false,\n        msg: 'RPC closed'\n      });\n    }\n\n    try {\n      let timer;\n      log('Closing RPC INTERACTOR');\n      this.client_sock.once('close', _ => {\n        log('RPC INTERACTOR cleanly closed');\n        clearTimeout(timer);\n        return cb ? cb(null, {\n          success: true\n        }) : false;\n      });\n      timer = setTimeout(_ => {\n        if (this.client_sock.destroy) {\n          this.client_sock.destroy();\n        }\n\n        return cb ? cb(null, {\n          success: true\n        }) : false;\n      }, 200);\n      this.client_sock.close();\n    } catch (err) {\n      log('Error while closing RPC INTERACTOR : %s', err.message || err);\n      return cb ? cb(err) : false;\n    }\n  }\n  /**\n   * Start the Interactor Daemon\n   * @param {Object} cst global constants\n   * @param {Object} infos data used to start the interactor [can be recovered from FS]\n   * @param {String} infos.secret_key the secret key used to cipher data\n   * @param {String} infos.public_key the public key used identify the user\n   * @param {String} infos.machine_name [optional] override name of the machine\n   * @param {Function} cb invoked with <err, msg, process>\n   */\n\n\n  static launchAndInteract(cst, opts, cb) {\n    // For Watchdog\n    if (process.env.PM2_AGENT_ONLINE) {\n      return cb();\n    }\n\n    process.env.PM2_INTERACTOR_PROCESSING = true;\n    this.getOrSetConf(Object.assign(cst, constants), opts, (err, conf) => {\n      if (err || !conf) return cb(err || new Error('Cant retrieve configuration'));\n\n      if (!process.env.PM2_SILENT) {\n        console.log(chalk.cyan('[PM2 I/O]') + ' Using: Public key: %s | Private key: %s | Machine name: %s', conf.public_key, conf.secret_key, conf.machine_name);\n      }\n\n      return this.launchOrAttach(cst, conf, cb);\n    });\n  }\n  /**\n   * Retrieve configuration used by the Interaction Daemon\n   * @param {Object} cst global constants\n   * @param {Function} cb invoked with <err, data>\n   */\n\n\n  static getInteractInfo(cst, cb) {\n    log('Getting interaction info');\n    if (process.env.PM2_NO_INTERACTION) return cb(new Error('PM2_NO_INTERACTION set'));\n    this.ping(cst, (err, online) => {\n      if (err || !online) return cb(new Error('Interactor is offline'));\n      this.launchRPC(cst, _ => {\n        this.rpc.getInfos((err, infos) => {\n          if (err) return cb(err); // Avoid general CLI to interfere with Keymetrics CLI commands\n\n          if (process.env.PM2_INTERACTOR_PROCESSING) return cb(null, infos);\n          this.disconnectRPC(() => {\n            return cb(null, infos);\n          });\n        });\n      });\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/@pm2/agent/src/InteractorClient.js"],"names":["log","require","fs","path","rpc","axon","chalk","os","constants","childProcess","printError","msg","process","env","PM2_SILENT","PM2_PROGRAMMATIC","Error","console","error","message","apply","arguments","printOut","module","exports","InteractorDaemonizer","ping","opts","cb","INTERACTOR_RPC_PORT","req","socket","client","Client","sock","once","_","close","e","code","stat","stats","uid","exit","connect","killInteractorDaemon","conf","PM2_INTERACTOR_PROCESSING","err","online","launchRPC","data","setTimeout","disconnectRPC","kill","generateMethods","methods","Object","keys","forEach","key","method","name","self","args","Array","prototype","slice","call","unshift","removeAllListeners","success","client_sock","daemonize","cst","InteractorJS","resolve","dirname","filename","testEnv","TRAVIS","NODE_ENV","match","out","openSync","INTERACTOR_LOG_FILE_PATH","binary","execPath","indexOf","NODEJS_EXECUTABLE","child","spawn","silent","detached","cwd","assign","PM2_HOME","PM2_MACHINE_NAME","machine_name","PM2_SECRET_KEY","secret_key","PM2_PUBLIC_KEY","public_key","PM2_REVERSE_INTERACT","reverse_interact","KEYMETRICS_NODE","info_node","AGENT_TRANSPORT_AXON","agent_transport_axon","AGENT_TRANSPORT_WEBSOCKET","agent_transport_websocket","PM2_VERSION","pm2_version","DEBUG","stdio","prevPid","readFileSync","INTERACTOR_PID_PATH","parseInt","pid","toString","writeFileSync","on","status","ERROR_EXIT","unref","timeout","yellow","disconnect","clearTimeout","km_data","red","cyan","disabled","active","pending","launchOrAttach","infos","ignoredErr","update","launchAndInteract","getOrSetConf","configuration","version_management","confFS","fileContent","INTERACTION_CONF","replace","JSON","parse","KEYMETRICS_PUBLIC","KEYMETRICS_SECRET","INSTANCE_NAME","hostname","KEYMETRICS_ROOT_URL","stringify","closing","timer","destroy","PM2_AGENT_ONLINE","getInteractInfo","PM2_NO_INTERACTION","getInfos"],"mappings":"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","sourcesContent":["'use strict'\n\nconst log = require('debug')('interactor:client')\nconst fs = require('fs')\nconst path = require('path')\nconst rpc = require('pm2-axon-rpc')\nconst axon = require('pm2-axon')\nconst chalk = require('chalk')\nconst os = require('os')\nconst constants = require('../constants')\nconst childProcess = require('child_process')\n\nconst printError = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC) return false\n  if (msg instanceof Error) return console.error(msg.message)\n  return console.error.apply(console, arguments)\n}\nconst printOut = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC) return false\n  return console.log.apply(console, arguments)\n}\n\nmodule.exports = class InteractorDaemonizer {\n  /**\n   * Ping the Interactor to see if its online\n   * @param {Object} opts global constants\n   * @param {String} opts.INTERACTOR_RPC_PORT path used to connect to the interactor\n   * @param {Function} cb invoked with <err, result>\n   */\n  static ping (opts, cb) {\n    if (typeof cb !== 'function') {\n      throw new Error('Missing parameters')\n    } else if (typeof opts !== 'object' || !opts || !opts.INTERACTOR_RPC_PORT) {\n      return cb(new Error('Missing parameters'))\n    }\n    const req = axon.socket('req')\n    const client = new rpc.Client(req)\n\n    log('[PING INTERACTOR] Trying to connect to Interactor daemon')\n\n    client.sock.once('reconnect attempt', _ => {\n      client.sock.close()\n      log('Interactor Daemon not launched')\n      return cb(null, false)\n    })\n\n    client.sock.once('connect', _ => {\n      client.sock.once('close', _ => {\n        return cb(null, true)\n      })\n      client.sock.close()\n      log('Interactor Daemon alive')\n    })\n\n    client.sock.once('error', (e) => {\n      if (e.code === 'EACCES') {\n        fs.stat(opts.INTERACTOR_RPC_PORT, (e, stats) => {\n          if (stats.uid === 0) {\n            console.error('Permission denied, activate current user')\n            return process.exit(1)\n          }\n        })\n      } else {\n        console.error('unexpected error')\n        console.error(e)\n      }\n    })\n\n    req.connect(opts.INTERACTOR_RPC_PORT)\n  }\n\n  /**\n   * Try to kill the interactor daemon via RPC\n   * @param {Object} conf global constants\n   * @param {String} conf.INTERACTOR_RPC_PORT path used to connect to the interactor\n   * @param {Function} cb invoked with <err>\n   */\n  static killInteractorDaemon (conf, cb) {\n    process.env.PM2_INTERACTOR_PROCESSING = true\n\n    log('Killing interactor #1 ping')\n    this.ping(conf, (err, online) => {\n      log(`Interactor is ${!online || err ? 'offline' : 'online'}`)\n\n      if (!online || err) {\n        return cb ? err ? cb(err) : cb(new Error('Interactor not launched')) : printError('Interactor not launched')\n      }\n\n      this.launchRPC(conf, (err, data) => {\n        if (err) {\n          setTimeout(_ => {\n            this.disconnectRPC(cb)\n          }, 100)\n          return false\n        }\n        this.rpc.kill((err) => {\n          if (err) printError(err)\n          setTimeout(_ => {\n            this.disconnectRPC(cb)\n          }, 100)\n        })\n        return false\n      })\n      return false\n    })\n  }\n\n  /**\n   * Start a RPC client that connect to the InteractorDaemon\n   * @param {Object} conf global constants\n   * @param {Function} cb invoked with <err>\n   */\n  static launchRPC (conf, cb) {\n    const req = axon.socket('req')\n    this.rpc = {}\n    this.client = new rpc.Client(req)\n\n    log('Generating Interactor methods of RPC client')\n\n    // attach known methods to RPC client\n    const generateMethods = (cb) => {\n      this.client.methods((err, methods) => {\n        if (err) return cb(err)\n        Object.keys(methods).forEach((key) => {\n          let method = methods[key]\n          log('+ Adding %s method to interactor RPC client', method.name);\n          ((name) => {\n            let self = this\n            this.rpc[name] = function () {\n              let args = Array.prototype.slice.call(arguments)\n              args.unshift(name)\n              self.client.call.apply(self.client, args)\n            }\n          })(method.name)\n        })\n        return cb()\n      })\n    }\n\n    this.client.sock.once('reconnect attempt', (err) => {\n      this.client.sock.removeAllListeners()\n      return cb(err, { success: false, msg: 'reconnect attempt' })\n    })\n\n    this.client.sock.once('error', (err) => {\n      log('-- Error in error catch all on Interactor --', err)\n      return cb(err, { success: false, msg: 'reconnect attempt' })\n    })\n\n    this.client.sock.once('connect', () => {\n      this.client.sock.removeAllListeners()\n      generateMethods(_ => {\n        log('Methods of RPC client for Interaction ready.')\n        return cb(null, { success: true })\n      })\n    })\n\n    this.client_sock = req.connect(conf.INTERACTOR_RPC_PORT)\n  }\n\n  /**\n   * Start or Restart the Interaction Daemon depending if its online or not\n   * @private\n   * @param {Object} conf global constants\n   * @param {Object} infos data used to start the interactor [can be recovered from FS]\n   * @param {String} infos.secret_key the secret key used to cipher data\n   * @param {String} infos.public_key the public key used identify the user\n   * @param {String} infos.machine_name [optional] override name of the machine\n   * @param {Function} cb invoked with <err, msg, process>\n   */\n  static daemonize (cst, conf, cb) {\n    const InteractorJS = path.resolve(path.dirname(module.filename), 'InteractorDaemon.js')\n\n    // Redirect PM2 internal err and out\n    // to STDERR STDOUT when running with Travis\n    const testEnv = process.env.TRAVIS || (process.env.NODE_ENV && process.env.NODE_ENV.match(/test/))\n    const out = testEnv ? 1 : fs.openSync(constants.INTERACTOR_LOG_FILE_PATH, 'a')\n    const err = testEnv ? 2 : fs.openSync(constants.INTERACTOR_LOG_FILE_PATH, 'a')\n\n    let binary = process.execPath\n    if (binary.indexOf('node') === -1) {\n      binary = 'node'\n    }\n    if (process.env.NODEJS_EXECUTABLE) {\n      binary = process.env.NODEJS_EXECUTABLE\n    }\n\n    const child = childProcess.spawn(binary, [InteractorJS], {\n      silent: false,\n      detached: true,\n      cwd: process.cwd(),\n      env: Object.assign({\n        PM2_HOME: cst.PM2_HOME,\n        PM2_MACHINE_NAME: conf.machine_name,\n        PM2_SECRET_KEY: conf.secret_key,\n        PM2_PUBLIC_KEY: conf.public_key,\n        PM2_REVERSE_INTERACT: conf.reverse_interact,\n        KEYMETRICS_NODE: conf.info_node,\n        AGENT_TRANSPORT_AXON: conf.agent_transport_axon,\n        AGENT_TRANSPORT_WEBSOCKET: conf.agent_transport_websocket,\n        PM2_VERSION: conf.pm2_version,\n        DEBUG: process.env.DEBUG || 'interactor:*,-interactor:axon,-interactor:websocket,-interactor:pm2:client,-interactor:push'\n      }, process.env),\n      stdio: ['ipc', out, err]\n    })\n\n    try {\n      let prevPid = fs.readFileSync(constants.INTERACTOR_PID_PATH)\n      prevPid = parseInt(prevPid)\n      process.kill(prevPid)\n    } catch (e) {\n    }\n\n    let pid = ''\n\n    if (child.pid)\n      pid = child.pid.toString()\n\n    fs.writeFileSync(cst.INTERACTOR_PID_PATH, pid)\n\n    child.on('close', (status) => {\n      if (status === constants.ERROR_EXIT) {\n        return cb(new Error('Agent has shutdown for unknown reason'))\n      }\n      return cb()\n    })\n\n    child.once('error', (err) => {\n      log('Error when launching Interactor, please check the agent logs')\n      return cb(err)\n    })\n\n    child.unref()\n\n    const timeout = setTimeout(_ => {\n      printOut(`${chalk.yellow('[PM2.IO][WARNING]')} Not managed to connect to PM2 Plus, retrying in background.`)\n      child.removeAllListeners()\n      child.disconnect()\n      return cb(null, {}, child)\n    }, 7000)\n\n    child.once('message', (msg) => {\n      clearTimeout(timeout)\n      log('Interactor daemon launched :', msg)\n\n      if (msg.log) {\n        return cb(null, msg, child)\n      }\n\n      child.removeAllListeners('error')\n      child.disconnect()\n\n      // Handle and show to user the different error message that can happen\n      if (msg.km_data && msg.km_data.error === true) {\n        if (!process.env.PM2_SILENT) {\n          console.log(chalk.red('[PM2.IO][ERROR]'), msg.km_data.msg)\n          console.log(chalk.cyan('[PM2.IO]') + ' Contact support contact@keymetrics.io and send us the error message')\n        }\n        return cb(msg)\n      } else if (msg.km_data && msg.km_data.disabled === true) {\n        if (!process.env.PM2_SILENT) {\n          console.log(chalk.cyan('[PM2.IO]') + ' Server DISABLED BY ADMINISTRATION contact support contact@keymetrics.io with reference to your public and secret keys)')\n        }\n        return cb(msg)\n      } else if (msg.km_data && msg.km_data.error === true) {\n        if (!process.env.PM2_SILENT) {\n          console.log('%s %s (Public: %s) (Secret: %s) (Machine name: %s)', chalk.red('[PM2.IO][ERROR]'),\n            msg.km_data.msg, msg.public_key, msg.secret_key, msg.machine_name)\n        }\n        return cb(msg)\n      } else if (msg.km_data && msg.km_data.active === false && msg.km_data.pending === true) {\n        if (!process.env.PM2_SILENT) {\n          console.log('%s You must upgrade your bucket in order to monitor more servers.', chalk.red('[PM2.IO]'))\n        }\n        return cb(msg)\n      }\n\n      return cb(null, msg, child)\n    })\n  }\n\n  /**\n   * Start or Restart the Interaction Daemon depending if its online or not\n   * @private\n   * @param {Object} conf global constants\n   * @param {Object} infos data used to start the interactor [can be recovered from FS]\n   * @param {String} infos.secret_key the secret key used to cipher data\n   * @param {String} infos.public_key the public key used identify the user\n   * @param {String} infos.machine_name [optional] override name of the machine\n   * @param {Function} cb invoked with <err, msg, process>\n   */\n  static launchOrAttach (conf, infos, cb) {\n    this.ping(conf, (err, online) => {\n      if (!err && online) {\n        log('Interactor online, restarting it...')\n        this.launchRPC(conf, _ => {\n          this.rpc.kill((ignoredErr) => {\n            this.daemonize(conf, infos, cb)\n          })\n        })\n      } else {\n        log('Interactor offline, launching it...')\n        this.daemonize(conf, infos, cb)\n      }\n    })\n  }\n\n  /**\n   * Restart the Interactor Daemon\n   * @param {Object} conf global constants\n   * @param {Function} cb invoked with <err, msg>\n   */\n  static update (conf, cb) {\n    this.ping(conf, (err, online) => {\n      if (err || !online) {\n        return cb ? cb(new Error('Interactor not launched')) : printError('Interactor not launched')\n      }\n      this.launchRPC(conf, _ => {\n        this.rpc.kill((err) => {\n          if (err) {\n            return cb ? cb(err) : printError(err)\n          }\n          printOut('Interactor successfully killed')\n          setTimeout(_ => {\n            this.launchAndInteract(conf, {}, _ => {\n              return cb(null, { msg: 'Daemon launched' })\n            })\n          }, 500)\n        })\n      })\n    })\n  }\n\n  /**\n   * Retrieve Interactor configuration from env, params and filesystem.\n   * @param {Object} cst global constants\n   * @param {Object} infos data used to start the interactor [optional]\n   * @param {String} infos.secret_key the secret key used to cipher data [optional]\n   * @param {String} infos.public_key the public key used identify the user [optional]\n   * @param {String} infos.machine_name override name of the machine [optional]\n   * @param {Function} cb invoked with <err, configuration>\n   */\n  static getOrSetConf (cst, infos, cb) {\n    infos = infos || {}\n    let configuration = {\n      version_management: {\n        active: true\n      }\n    }\n    let confFS = {}\n\n    // Try loading configuration file on FS\n    try {\n      let fileContent = fs.readFileSync(cst.INTERACTION_CONF).toString()\n      // Handle old configuration with json5\n      fileContent = fileContent.replace(/\\s(\\w+):/g, '\"$1\":')\n      // parse\n      confFS = JSON.parse(fileContent)\n\n      if (confFS.version_management) {\n        configuration.version_management.active = confFS.version_management.active\n      }\n    } catch (e) {\n      log('Interaction file does not exists')\n    }\n\n    // load the configration (first have priority)\n    //    -> from env variable\n    //    -> from params (eg. CLI)\n    //    -> from configuration on FS\n    configuration.public_key = process.env.PM2_PUBLIC_KEY || process.env.KEYMETRICS_PUBLIC || infos.public_key || confFS.public_key\n    configuration.secret_key = process.env.PM2_SECRET_KEY || process.env.KEYMETRICS_SECRET || infos.secret_key || confFS.secret_key\n    configuration.machine_name = process.env.PM2_MACHINE_NAME || process.env.INSTANCE_NAME || infos.machine_name || confFS.machine_name || os.hostname()\n    configuration.pm2_version = process.env.PM2_VERSION || infos.pm2_version || confFS.pm2_version\n    configuration.reverse_interact = confFS.reverse_interact || true\n    // is setup empty ? use the one provided in env OR root OTHERWISE get the one on FS conf OR fallback on root\n    configuration.info_node = process.env.KEYMETRICS_NODE || infos.info_node || confFS.info_node || cst.KEYMETRICS_ROOT_URL\n    configuration.agent_transport_websocket = process.env.AGENT_TRANSPORT_WEBSOCKET || infos.agent_transport_websocket || confFS.agent_transport_websocket || 'false'\n    configuration.agent_transport_axon = process.env.AGENT_TRANSPORT_AXON || infos.agent_transport_axon || confFS.agent_transport_axon || 'true'\n\n    if (!configuration.secret_key) {\n      log('Secret key is not defined in configuration', configuration)\n      return cb(new Error('secret key is not defined'))\n    }\n    if (!configuration.public_key) {\n      log('Public key is not defined in configuration', configuration)\n      return cb(new Error('public key is not defined'))\n    }\n\n    // write configuration on FS\n    try {\n      fs.writeFileSync(cst.INTERACTION_CONF, JSON.stringify(configuration, null, 4))\n    } catch (e) {\n      console.error('Error when writting configuration file %s', cst.INTERACTION_CONF)\n      return cb(e)\n    }\n    if (configuration.info_node.indexOf('http') === -1) { // handle old file\n      configuration.info_node = `https://${configuration.info_node}`\n    }\n    return cb(null, configuration)\n  }\n\n  /**\n   * Disconnect the RPC client from Interactor Daemon\n   * @param {Function} cb invoked with <err, msg>\n   */\n  static disconnectRPC (cb) {\n    log('Disconnect RPC')\n    if (!this.client_sock || !this.client_sock.close) {\n      log('RPC not launched')\n      return cb(null, {\n        success: false,\n        msg: 'RPC connection to Interactor Daemon is not launched'\n      })\n    }\n\n    if (this.client_sock.closing === true) {\n      log('RPC already closed')\n      return cb(null, {\n        success: false,\n        msg: 'RPC closed'\n      })\n    }\n\n    try {\n      let timer\n\n      log('Closing RPC INTERACTOR')\n\n      this.client_sock.once('close', _ => {\n        log('RPC INTERACTOR cleanly closed')\n        clearTimeout(timer)\n        return cb ? cb(null, { success: true }) : false\n      })\n\n      timer = setTimeout(_ => {\n        if (this.client_sock.destroy) {\n          this.client_sock.destroy()\n        }\n        return cb ? cb(null, { success: true }) : false\n      }, 200)\n\n      this.client_sock.close()\n    } catch (err) {\n      log('Error while closing RPC INTERACTOR : %s', err.message || err)\n      return cb ? cb(err) : false\n    }\n  }\n\n  /**\n   * Start the Interactor Daemon\n   * @param {Object} cst global constants\n   * @param {Object} infos data used to start the interactor [can be recovered from FS]\n   * @param {String} infos.secret_key the secret key used to cipher data\n   * @param {String} infos.public_key the public key used identify the user\n   * @param {String} infos.machine_name [optional] override name of the machine\n   * @param {Function} cb invoked with <err, msg, process>\n   */\n  static launchAndInteract (cst, opts, cb) {\n    // For Watchdog\n    if (process.env.PM2_AGENT_ONLINE) {\n      return cb()\n    }\n\n    process.env.PM2_INTERACTOR_PROCESSING = true\n\n    this.getOrSetConf(Object.assign(cst, constants), opts, (err, conf) => {\n      if (err || !conf) return cb(err || new Error('Cant retrieve configuration'))\n\n      if (!process.env.PM2_SILENT) {\n        console.log(chalk.cyan('[PM2 I/O]') + ' Using: Public key: %s | Private key: %s | Machine name: %s', conf.public_key, conf.secret_key, conf.machine_name)\n      }\n      return this.launchOrAttach(cst, conf, cb)\n    })\n  }\n\n  /**\n   * Retrieve configuration used by the Interaction Daemon\n   * @param {Object} cst global constants\n   * @param {Function} cb invoked with <err, data>\n   */\n  static getInteractInfo (cst, cb) {\n    log('Getting interaction info')\n    if (process.env.PM2_NO_INTERACTION) return cb(new Error('PM2_NO_INTERACTION set'))\n\n    this.ping(cst, (err, online) => {\n      if (err || !online) return cb(new Error('Interactor is offline'))\n\n      this.launchRPC(cst, _ => {\n        this.rpc.getInfos((err, infos) => {\n          if (err) return cb(err)\n\n          // Avoid general CLI to interfere with Keymetrics CLI commands\n          if (process.env.PM2_INTERACTOR_PROCESSING) return cb(null, infos)\n\n          this.disconnectRPC(() => {\n            return cb(null, infos)\n          })\n        })\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}