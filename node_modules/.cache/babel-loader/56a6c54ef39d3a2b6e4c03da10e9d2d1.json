{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar fmt = require('util').format;\n\nvar amp = require('amp');\n/**\n * Proxy methods.\n */\n\n\nvar methods = ['push', 'pop', 'shift', 'unshift'];\n/**\n * Expose `Message`.\n */\n\nmodule.exports = Message;\n/**\n * Initialize an AMP message with the\n * given `args` or message buffer.\n *\n * @param {Array|Buffer} args or blob\n * @api public\n */\n\nfunction Message(args) {\n  if (Buffer.isBuffer(args)) args = decode(args);\n  this.args = args || [];\n} // proxy methods\n\n\nmethods.forEach(function (method) {\n  Message.prototype[method] = function () {\n    return this.args[method].apply(this.args, arguments);\n  };\n});\n/**\n * Inspect the message.\n *\n * @return {String}\n * @api public\n */\n\nMessage.prototype.inspect = function () {\n  return fmt('<Message args=%d size=%d>', this.args.length, this.toBuffer().length);\n};\n/**\n * Return an encoded AMP message.\n *\n * @return {Buffer}\n * @api public\n */\n\n\nMessage.prototype.toBuffer = function () {\n  return encode(this.args);\n};\n/**\n * Decode `msg` and unpack all args.\n *\n * @param {Buffer} msg\n * @return {Array}\n * @api private\n */\n\n\nfunction decode(msg) {\n  var args = amp.decode(msg);\n\n  for (var i = 0; i < args.length; i++) {\n    args[i] = unpack(args[i]);\n  }\n\n  return args;\n}\n/**\n * Encode and pack all `args`.\n *\n * @param {Array} args\n * @return {Buffer}\n * @api private\n */\n\n\nfunction encode(args) {\n  var tmp = new Array(args.length);\n\n  for (var i = 0; i < args.length; i++) {\n    tmp[i] = pack(args[i]);\n  }\n\n  return amp.encode(tmp);\n}\n/**\n * Pack `arg`.\n *\n * @param {Mixed} arg\n * @return {Buffer}\n * @api private\n */\n\n\nfunction pack(arg) {\n  // blob\n  if (Buffer.isBuffer(arg)) return arg; // string\n\n  if ('string' == typeof arg) return new Buffer('s:' + arg); // undefined\n\n  if (arg === undefined) arg = null; // json\n\n  return new Buffer('j:' + JSON.stringify(arg));\n}\n/**\n * Unpack `arg`.\n *\n * @param {Buffer} arg\n * @return {Mixed}\n * @api private\n */\n\n\nfunction unpack(arg) {\n  // json\n  if (isJSON(arg)) return JSON.parse(arg.slice(2)); // string\n\n  if (isString(arg)) return arg.slice(2).toString(); // blob\n\n  return arg;\n}\n/**\n * String argument.\n */\n\n\nfunction isString(arg) {\n  return 115 == arg[0] && 58 == arg[1];\n}\n/**\n * JSON argument.\n */\n\n\nfunction isJSON(arg) {\n  return 106 == arg[0] && 58 == arg[1];\n}\n/**\n * ID argument.\n */\n\n\nfunction isId(arg) {\n  return 105 == arg[0] && 58 == arg[1];\n}","map":{"version":3,"sources":["/Users/samianki/node_modules/amp-message/index.js"],"names":["fmt","require","format","amp","methods","module","exports","Message","args","Buffer","isBuffer","decode","forEach","method","prototype","apply","arguments","inspect","length","toBuffer","encode","msg","i","unpack","tmp","Array","pack","arg","undefined","JSON","stringify","isJSON","parse","slice","isString","toString","isId"],"mappings":"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","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar fmt = require('util').format;\nvar amp = require('amp');\n\n/**\n * Proxy methods.\n */\n\nvar methods = [\n  'push',\n  'pop',\n  'shift',\n  'unshift'\n];\n\n/**\n * Expose `Message`.\n */\n\nmodule.exports = Message;\n\n/**\n * Initialize an AMP message with the\n * given `args` or message buffer.\n *\n * @param {Array|Buffer} args or blob\n * @api public\n */\n\nfunction Message(args) {\n  if (Buffer.isBuffer(args)) args = decode(args);\n  this.args = args || [];\n}\n\n// proxy methods\n\nmethods.forEach(function(method){\n  Message.prototype[method] = function(){\n    return this.args[method].apply(this.args, arguments);\n  };\n});\n\n/**\n * Inspect the message.\n *\n * @return {String}\n * @api public\n */\n\nMessage.prototype.inspect = function(){\n  return fmt('<Message args=%d size=%d>',\n    this.args.length,\n    this.toBuffer().length);\n};\n\n/**\n * Return an encoded AMP message.\n *\n * @return {Buffer}\n * @api public\n */\n\nMessage.prototype.toBuffer = function(){\n  return encode(this.args);\n};\n\n/**\n * Decode `msg` and unpack all args.\n *\n * @param {Buffer} msg\n * @return {Array}\n * @api private\n */\n\nfunction decode(msg) {\n  var args = amp.decode(msg);\n  \n  for (var i = 0; i < args.length; i++) {\n    args[i] = unpack(args[i]);\n  }\n\n  return args;\n}\n\n/**\n * Encode and pack all `args`.\n *\n * @param {Array} args\n * @return {Buffer}\n * @api private\n */\n\nfunction encode(args) {\n  var tmp = new Array(args.length);\n\n  for (var i = 0; i < args.length; i++) {\n    tmp[i] = pack(args[i]);\n  }\n\n  return amp.encode(tmp);\n}\n\n/**\n * Pack `arg`.\n *\n * @param {Mixed} arg\n * @return {Buffer}\n * @api private\n */\n\nfunction pack(arg) {\n  // blob\n  if (Buffer.isBuffer(arg)) return arg;\n\n  // string\n  if ('string' == typeof arg) return new Buffer('s:' + arg);\n\n  // undefined\n  if (arg === undefined) arg = null;\n\n  // json\n  return new Buffer('j:' + JSON.stringify(arg));\n}\n\n/**\n * Unpack `arg`.\n *\n * @param {Buffer} arg\n * @return {Mixed}\n * @api private\n */\n\nfunction unpack(arg) {\n  // json\n  if (isJSON(arg)) return JSON.parse(arg.slice(2));\n\n  // string\n  if (isString(arg)) return arg.slice(2).toString();\n \n  // blob\n  return arg;\n}\n\n/**\n * String argument.\n */\n\nfunction isString(arg) {\n  return 115 == arg[0] && 58 == arg[1];\n}\n\n/**\n * JSON argument.\n */\n\nfunction isJSON(arg) {\n  return 106 == arg[0] && 58 == arg[1];\n}\n\n/**\n * ID argument.\n */\n\nfunction isId(arg) {\n  return 105 == arg[0] && 58 == arg[1];\n}\n"]},"metadata":{},"sourceType":"script"}