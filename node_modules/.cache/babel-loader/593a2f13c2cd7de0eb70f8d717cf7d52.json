{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// wifi.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 9. wifi\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\n\nconst exec = require('child_process').exec;\n\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = _platform === 'linux';\n\nconst _darwin = _platform === 'darwin';\n\nconst _windows = _platform === 'win32';\n\nfunction wifiDBFromQuality(quality) {\n  return parseFloat(quality) / 2 - 100;\n}\n\nfunction wifiQualityFromDB(db) {\n  const result = 2 * (parseFloat(db) + 100);\n  return result <= 100 ? result : 100;\n}\n\nfunction wifiFrequencyFromChannel(channel) {\n  const frequencies = {\n    1: 2412,\n    2: 2417,\n    3: 2422,\n    4: 2427,\n    5: 2432,\n    6: 2437,\n    7: 2442,\n    8: 2447,\n    9: 2452,\n    10: 2457,\n    11: 2462,\n    12: 2467,\n    13: 2472,\n    14: 2484,\n    32: 5160,\n    34: 5170,\n    36: 5180,\n    38: 5190,\n    40: 5200,\n    42: 5210,\n    44: 5220,\n    46: 5230,\n    48: 5240,\n    50: 5250,\n    52: 5260,\n    54: 5270,\n    56: 5280,\n    58: 5290,\n    60: 5300,\n    62: 5310,\n    64: 5320,\n    68: 5340,\n    96: 5480,\n    100: 5500,\n    102: 5510,\n    104: 5520,\n    106: 5530,\n    108: 5540,\n    110: 5550,\n    112: 5560,\n    114: 5570,\n    116: 5580,\n    118: 5590,\n    120: 5600,\n    122: 5610,\n    124: 5620,\n    126: 5630,\n    128: 5640,\n    132: 5660,\n    134: 5670,\n    136: 5680,\n    138: 5690,\n    140: 5700,\n    142: 5710,\n    144: 5720,\n    149: 5745,\n    151: 5755,\n    153: 5765,\n    155: 5775,\n    157: 5785,\n    159: 5795,\n    161: 5805,\n    165: 5825,\n    169: 5845,\n    173: 5865,\n    183: 4915,\n    184: 4920,\n    185: 4925,\n    187: 4935,\n    188: 4940,\n    189: 4945,\n    192: 4960,\n    196: 4980\n  };\n  return {}.hasOwnProperty.call(frequencies, channel) ? frequencies[channel] : -1;\n}\n\nfunction wifiNetworks(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = [];\n\n      if (_linux) {\n        let cmd = 'nmcli --terse --fields active,ssid,bssid,mode,chan,freq,signal,security,wpa-flags,rsn-flags device wifi list 2>/dev/null';\n        exec(cmd, {\n          maxBuffer: 1024 * 20000\n        }, function (error, stdout) {\n          const parts = stdout.toString().split('ACTIVE:');\n          parts.shift();\n          parts.forEach(part => {\n            part = 'ACTIVE:' + part;\n            const lines = part.split(os.EOL);\n            const channel = util.getValue(lines, 'CHAN');\n            const frequency = util.getValue(lines, 'FREQ').toLowerCase().replace('mhz', '').trim();\n            const security = util.getValue(lines, 'SECURITY').replace('(', '').replace(')', '');\n            const wpaFlags = util.getValue(lines, 'WPA-FLAGS').replace('(', '').replace(')', '');\n            const rsnFlags = util.getValue(lines, 'RSN-FLAGS').replace('(', '').replace(')', '');\n            result.push({\n              ssid: util.getValue(lines, 'SSID'),\n              bssid: util.getValue(lines, 'BSSID'),\n              mode: util.getValue(lines, 'MODE'),\n              channel: channel ? parseInt(channel, 10) : -1,\n              frequency: frequency ? parseInt(frequency, 10) : -1,\n              signalLevel: wifiDBFromQuality(util.getValue(lines, 'SIGNAL')),\n              quality: parseFloat(util.getValue(lines, 'SIGNAL')),\n              security: security && security !== 'none' ? security.split(' ') : [],\n              wpaFlags: wpaFlags && wpaFlags !== 'none' ? wpaFlags.split(' ') : [],\n              rsnFlags: rsnFlags && rsnFlags !== 'none' ? rsnFlags.split(' ') : []\n            });\n          });\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      } else if (_darwin) {\n        let cmd = '/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s';\n        exec(cmd, {\n          maxBuffer: 1024 * 20000\n        }, function (error, stdout) {\n          const lines = stdout.toString().split(os.EOL);\n\n          if (lines && lines.length > 1) {\n            const parsedhead = util.parseHead(lines[0], 1);\n\n            if (parsedhead.length >= 7) {\n              lines.shift();\n              lines.forEach(line => {\n                if (line.trim()) {\n                  const channelStr = line.substring(parsedhead[3].from, parsedhead[3].to).trim();\n                  const channel = channelStr ? parseInt(channelStr, 10) : -1;\n                  const signalLevel = line.substring(parsedhead[2].from, parsedhead[2].to).trim();\n                  const securityAll = line.substring(parsedhead[6].from, 1000).trim().split(' ');\n                  let security = [];\n                  let wpaFlags = [];\n                  securityAll.forEach(securitySingle => {\n                    if (securitySingle.indexOf('(') > 0) {\n                      const parts = securitySingle.split('(');\n                      security.push(parts[0]);\n                      wpaFlags = wpaFlags.concat(parts[1].replace(')', '').split(','));\n                    }\n                  });\n                  wpaFlags = Array.from(new Set(wpaFlags));\n                  result.push({\n                    ssid: line.substring(parsedhead[0].from, parsedhead[0].to).trim(),\n                    bssid: line.substring(parsedhead[1].from, parsedhead[1].to).trim(),\n                    mode: '',\n                    channel,\n                    frequency: wifiFrequencyFromChannel(channel),\n                    signalLevel: signalLevel ? parseInt(signalLevel, 10) : -1,\n                    quality: wifiQualityFromDB(signalLevel),\n                    security,\n                    wpaFlags,\n                    rsnFlags: []\n                  });\n                }\n              });\n            }\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      } else if (_windows) {\n        let cmd = 'chcp 65001 && netsh wlan show networks mode=Bssid';\n        exec(cmd, util.execOptsWin, function (error, stdout) {\n          const parts = stdout.toString('utf8').split(os.EOL + os.EOL + 'SSID ');\n          parts.shift();\n          parts.forEach(part => {\n            const lines = part.split(os.EOL);\n\n            if (lines && lines.length >= 8 && lines[0].indexOf(':') >= 0) {\n              let bssid = lines[4].split(':');\n              bssid.shift();\n              bssid = bssid.join(':').trim();\n              const channel = lines[7].split(':').pop().trim();\n              const quality = lines[5].split(':').pop().trim();\n              result.push({\n                ssid: lines[0].split(':').pop().trim(),\n                bssid,\n                mode: '',\n                channel: channel ? parseInt(channel, 10) : -1,\n                frequency: wifiFrequencyFromChannel(channel),\n                signalLevel: wifiDBFromQuality(quality),\n                quality: quality ? parseInt(quality, 10) : -1,\n                security: [lines[2].split(':').pop().trim()],\n                wpaFlags: [lines[3].split(':').pop().trim()],\n                rsnFlags: []\n              });\n            }\n          });\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      } else {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.wifiNetworks = wifiNetworks;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/wifi.js"],"names":["os","require","exec","util","_platform","process","platform","_linux","_darwin","_windows","wifiDBFromQuality","quality","parseFloat","wifiQualityFromDB","db","result","wifiFrequencyFromChannel","channel","frequencies","hasOwnProperty","call","wifiNetworks","callback","Promise","resolve","nextTick","cmd","maxBuffer","error","stdout","parts","toString","split","shift","forEach","part","lines","EOL","getValue","frequency","toLowerCase","replace","trim","security","wpaFlags","rsnFlags","push","ssid","bssid","mode","parseInt","signalLevel","length","parsedhead","parseHead","line","channelStr","substring","from","to","securityAll","securitySingle","indexOf","concat","Array","Set","execOptsWin","join","pop","exports"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// wifi.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 9. wifi\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst exec = require('child_process').exec;\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\n\nfunction wifiDBFromQuality(quality) {\n  return (parseFloat(quality) / 2 - 100);\n}\n\nfunction wifiQualityFromDB(db) {\n  const result = 2 * (parseFloat(db) + 100);\n  return result <= 100 ? result : 100;\n}\n\nfunction wifiFrequencyFromChannel(channel) {\n  const frequencies = {\n    1: 2412,\n    2: 2417,\n    3: 2422,\n    4: 2427,\n    5: 2432,\n    6: 2437,\n    7: 2442,\n    8: 2447,\n    9: 2452,\n    10: 2457,\n    11: 2462,\n    12: 2467,\n    13: 2472,\n    14: 2484,\n    32: 5160,\n    34: 5170,\n    36: 5180,\n    38: 5190,\n    40: 5200,\n    42: 5210,\n    44: 5220,\n    46: 5230,\n    48: 5240,\n    50: 5250,\n    52: 5260,\n    54: 5270,\n    56: 5280,\n    58: 5290,\n    60: 5300,\n    62: 5310,\n    64: 5320,\n    68: 5340,\n    96: 5480,\n    100: 5500,\n    102: 5510,\n    104: 5520,\n    106: 5530,\n    108: 5540,\n    110: 5550,\n    112: 5560,\n    114: 5570,\n    116: 5580,\n    118: 5590,\n    120: 5600,\n    122: 5610,\n    124: 5620,\n    126: 5630,\n    128: 5640,\n    132: 5660,\n    134: 5670,\n    136: 5680,\n    138: 5690,\n    140: 5700,\n    142: 5710,\n    144: 5720,\n    149: 5745,\n    151: 5755,\n    153: 5765,\n    155: 5775,\n    157: 5785,\n    159: 5795,\n    161: 5805,\n    165: 5825,\n    169: 5845,\n    173: 5865,\n    183: 4915,\n    184: 4920,\n    185: 4925,\n    187: 4935,\n    188: 4940,\n    189: 4945,\n    192: 4960,\n    196: 4980\n  };\n  return {}.hasOwnProperty.call(frequencies, channel) ? frequencies[channel] : -1;\n}\n\nfunction wifiNetworks(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = [];\n      if (_linux) {\n        let cmd = 'nmcli --terse --fields active,ssid,bssid,mode,chan,freq,signal,security,wpa-flags,rsn-flags device wifi list 2>/dev/null';\n        exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n\n          const parts = stdout.toString().split('ACTIVE:');\n          parts.shift();\n          parts.forEach(part => {\n            part = 'ACTIVE:' + part;\n            const lines = part.split(os.EOL);\n            const channel = util.getValue(lines, 'CHAN');\n            const frequency = util.getValue(lines, 'FREQ').toLowerCase().replace('mhz', '').trim();\n            const security = util.getValue(lines, 'SECURITY').replace('(', '').replace(')', '');\n            const wpaFlags = util.getValue(lines, 'WPA-FLAGS').replace('(', '').replace(')', '');\n            const rsnFlags = util.getValue(lines, 'RSN-FLAGS').replace('(', '').replace(')', '');\n            result.push({\n              ssid: util.getValue(lines, 'SSID'),\n              bssid: util.getValue(lines, 'BSSID'),\n              mode: util.getValue(lines, 'MODE'),\n              channel: channel ? parseInt(channel, 10) : -1,\n              frequency: frequency ? parseInt(frequency, 10) : -1,\n              signalLevel: wifiDBFromQuality(util.getValue(lines, 'SIGNAL')),\n              quality: parseFloat(util.getValue(lines, 'SIGNAL')),\n              security: security && security !== 'none' ? security.split(' ') : [],\n              wpaFlags: wpaFlags && wpaFlags !== 'none' ? wpaFlags.split(' ') : [],\n              rsnFlags: rsnFlags && rsnFlags !== 'none' ? rsnFlags.split(' ') : []\n            });\n          });\n\n          if (callback) {\n            callback(result);\n          }\n          resolve(result);\n        });\n      } else if (_darwin) {\n        let cmd = '/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s';\n        exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n          const lines = stdout.toString().split(os.EOL);\n          if (lines && lines.length > 1) {\n            const parsedhead = util.parseHead(lines[0], 1);\n            if (parsedhead.length >= 7) {\n              lines.shift();\n              lines.forEach(line => {\n                if (line.trim()) {\n                  const channelStr = line.substring(parsedhead[3].from, parsedhead[3].to).trim();\n                  const channel = channelStr ? parseInt(channelStr, 10) : -1;\n                  const signalLevel = line.substring(parsedhead[2].from, parsedhead[2].to).trim();\n                  const securityAll = line.substring(parsedhead[6].from, 1000).trim().split(' ');\n                  let security = [];\n                  let wpaFlags = [];\n                  securityAll.forEach(securitySingle => {\n                    if (securitySingle.indexOf('(') > 0) {\n                      const parts = securitySingle.split('(');\n                      security.push(parts[0]);\n                      wpaFlags = wpaFlags.concat(parts[1].replace(')', '').split(','));\n                    }\n                  });\n                  wpaFlags = Array.from(new Set(wpaFlags));\n                  result.push({\n                    ssid: line.substring(parsedhead[0].from, parsedhead[0].to).trim(),\n                    bssid: line.substring(parsedhead[1].from, parsedhead[1].to).trim(),\n                    mode: '',\n                    channel,\n                    frequency: wifiFrequencyFromChannel(channel),\n                    signalLevel: signalLevel ? parseInt(signalLevel, 10) : -1,\n                    quality: wifiQualityFromDB(signalLevel),\n                    security,\n                    wpaFlags,\n                    rsnFlags: []\n                  });\n                }\n              });\n            }\n          }\n          if (callback) {\n            callback(result);\n          }\n          resolve(result);\n        });\n      } else if (_windows) {\n        let cmd = 'chcp 65001 && netsh wlan show networks mode=Bssid';\n        exec(cmd, util.execOptsWin, function (error, stdout) {\n\n          const parts = stdout.toString('utf8').split(os.EOL + os.EOL + 'SSID ');\n          parts.shift();\n\n          parts.forEach(part => {\n            const lines = part.split(os.EOL);\n            if (lines && lines.length >= 8 && lines[0].indexOf(':') >= 0) {\n              let bssid = lines[4].split(':');\n              bssid.shift();\n              bssid = bssid.join(':').trim();\n              const channel = lines[7].split(':').pop().trim();\n              const quality = lines[5].split(':').pop().trim();\n              result.push({\n                ssid: lines[0].split(':').pop().trim(),\n                bssid,\n                mode: '',\n                channel: channel ? parseInt(channel, 10) : -1,\n                frequency: wifiFrequencyFromChannel(channel),\n                signalLevel: wifiDBFromQuality(quality),\n                quality: quality ? parseInt(quality, 10) : -1,\n                security: [lines[2].split(':').pop().trim()],\n                wpaFlags: [lines[3].split(':').pop().trim()],\n                rsnFlags: []\n              });\n            }\n          });\n\n          if (callback) {\n            callback(result);\n          }\n          resolve(result);\n        });\n      } else {\n        if (callback) {\n          callback(result);\n        }\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.wifiNetworks = wifiNetworks;\n"]},"metadata":{},"sourceType":"script"}