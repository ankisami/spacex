{"ast":null,"code":"var fs = require('fs');\n\nvar async = require('async');\n\nvar exec = require('child_process').exec;\n\nvar git = {};\nvar TIMEOUT = 5000;\nvar MAXBUFFER = 1024 * 64; // 16KB\n\ngit.parse = function (folder, cb) {\n  var myTrim = function (str) {\n    if (typeof str === 'string') return str.replace(/\\n/g, '');\n    return str;\n  };\n\n  var getUrl = function (cb) {\n    exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 git config --get remote.origin.url\", {\n      timeout: TIMEOUT,\n      maxBuffer: MAXBUFFER\n    }, function (err, stdout, stderr) {\n      if (err !== null) return cb(err);\n      var data = {};\n      data.type = 'git';\n      data.url = myTrim(stdout);\n      return cb(null, data);\n    });\n  };\n\n  var getMeta = function (data, cb) {\n    exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 git show --quiet --format=%H%n%aD%n%s%n%B HEAD\", {\n      timeout: TIMEOUT,\n      maxBuffer: MAXBUFFER\n    }, function (err, stdout, stderr) {\n      if (err !== null) return cb(err);\n      var lines = stdout.split(\"\\n\");\n      data.revision = myTrim(lines.shift());\n      data.update_time = myTrim(lines.shift());\n      data.comment = myTrim(lines.shift());\n      return cb(null, data);\n    });\n  };\n\n  var getStaged = function (data, cb) {\n    exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 git status -s\", {\n      timeout: TIMEOUT,\n      maxBuffer: MAXBUFFER\n    }, function (err, stdout, stderr) {\n      if (err !== null) return cb(err);\n      data.unstaged = stdout === '' ? false : true;\n      return cb(null, data);\n    });\n  };\n\n  var getBranch = function (data, cb) {\n    exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 git rev-parse --abbrev-ref HEAD\", {\n      timeout: TIMEOUT,\n      maxBuffer: MAXBUFFER\n    }, function (err, stdout, stderr) {\n      if (err !== null) return cb(err);\n      data.branch = myTrim(stdout);\n      return cb(null, data);\n    });\n  };\n\n  var getRemote = function (data, cb) {\n    exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 git remote\", {\n      timeout: TIMEOUT,\n      maxBuffer: MAXBUFFER\n    }, function (err, stdout, stderr) {\n      if (err !== null) return cb(err);\n      data.remotes = stdout.split('\\n');\n      data.remotes.pop();\n      data.remote = data.remotes.indexOf('origin') === -1 ? data.remotes[0] : 'origin';\n      return cb(null, data);\n    });\n  };\n\n  var getRemoteBrancheExistence = function (data, cb) {\n    exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 git show-ref refs/remotes/\" + data.remote + \"/\" + data.branch, {\n      timeout: TIMEOUT,\n      maxBuffer: MAXBUFFER\n    }, function (err, stdout, stderr) {\n      if (err) data.branch_exists_on_remote = false;else data.branch_exists_on_remote = true;\n      return cb(null, data);\n    });\n  };\n\n  var getPrevNext = function (data, cb) {\n    var prefix = '';\n    if (data.branch_exists_on_remote) prefix = data.remote + '/';\n    exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 git log \" + prefix + data.branch + \" --pretty=oneline -n 100\", {\n      timeout: TIMEOUT,\n      maxBuffer: MAXBUFFER\n    }, function (err, stdout, stderr) {\n      if (err !== null) return cb(err);\n      var commit_history = [];\n      var lines = stdout.split('\\n');\n      lines.forEach(function (key) {\n        var parse = key.match(/([^ ]*) (.*)/);\n        if (parse) commit_history.push(parse[1]);\n      });\n      var current = commit_history.indexOf(data.revision);\n      data.ahead = false;\n      data.next_rev = null;\n      data.prev_rev = null;\n\n      if (current === -1) {\n        data.ahead = true;\n      } else {\n        data.next_rev = current === 0 ? null : commit_history[current - 1];\n        data.prev_rev = current === commit_history.length - 1 ? null : commit_history[current + 1];\n      }\n\n      return cb(null, data);\n    });\n  };\n\n  var getDate = function (data, cb) {\n    fs.stat(folder + \".git\", function (err, stats) {\n      if (err !== null) return cb(err);\n      data.update_time = myTrim(stats.mtime);\n      return cb(null, data);\n    });\n  };\n\n  var getTags = function (data, cb) {\n    exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 git tag\", {\n      timeout: TIMEOUT,\n      maxBuffer: MAXBUFFER\n    }, function (err, stdout, stderr) {\n      if (err !== null) return cb(err);\n\n      if (stdout.length) {\n        data.tags = stdout.split('\\n');\n        data.tags.pop();\n        data.tags = data.tags.slice(0, 10);\n      }\n\n      return cb(null, data);\n    });\n  };\n\n  async.waterfall([getUrl, getMeta, getStaged, getBranch, getRemote, getRemoteBrancheExistence, getPrevNext, getDate, getTags], function (err, data) {\n    if (err !== null) return cb(err);\n    return cb(null, data);\n  });\n};\n\ngit.isUpdated = function (folder, cb) {\n  git.parse(folder, function (err, data) {\n    var prefix = '';\n    if (err !== null) return cb(err);\n    if (data.branch_exists_on_remote) prefix = data.remote + '/';\n    exec(\"cd '\" + folder + \"';LC_ALL=en_US.UTF-8 git remote update >> /dev/null 2>&1; git log \" + prefix + data.branch + \" --pretty=oneline -n 1\", {\n      timeout: 60000,\n      maxBuffer: MAXBUFFER\n    }, function (err, stdout, stderr) {\n      var res = {};\n      if (err !== null) return cb(err);\n      if (stdout.substring(0, 40) === data.revision.substring(0, 40)) res.is_up_to_date = true;else res.is_up_to_date = false;\n      res.new_revision = stdout.substring(0, 40);\n      res.current_revision = data.revision.substring(0, 40);\n      return cb(null, res);\n    });\n  });\n};\n\ngit.revert = function (args, cb) {\n  var ret = {};\n  var command = \"cd '\" + args.folder + \"';LC_ALL=en_US.UTF-8 git reset --hard \" + args.revision;\n  ret.output = '';\n  ret.output += command + '\\n';\n  ret.success = true;\n  exec(command, {\n    timeout: TIMEOUT,\n    maxBuffer: MAXBUFFER\n  }, function (err, stdout, stderr) {\n    ret.output += stdout;\n    if (err !== null || stderr.substring(0, 6) === 'fatal:') ret.success = false;\n    return cb(null, ret);\n  });\n};\n\ngit.update = function (folder, cb) {\n  git.isUpdated(folder, function (err, data) {\n    var res = {};\n    if (err !== null) return cb(err);\n\n    if (data.is_up_to_date === true) {\n      res.success = false;\n      res.current_revision = data.new_revision;\n      return cb(null, res);\n    } else {\n      git.revert({\n        folder: folder,\n        revision: data.new_revision\n      }, function (err, dt) {\n        if (err !== null) return cb(err);\n        res.output = dt.output;\n        res.success = dt.success;\n        res.current_revision = dt.success ? data.new_revision : data.current_revision;\n        return cb(null, res);\n      });\n    }\n  });\n};\n\ngit.prev = function (folder, cb) {\n  git.parse(folder, function (err, data) {\n    if (err !== null) return cb(err);\n    var res = {};\n\n    if (data.prev_rev !== null) {\n      git.revert({\n        folder: folder,\n        revision: data.prev_rev\n      }, function (err, meta) {\n        if (err !== null) return cb(err);\n        res.output = meta.output;\n        res.success = meta.success;\n        res.current_revision = res.success ? data.prev_rev : data.revision;\n        return cb(null, res);\n      });\n    } else {\n      res.success = false;\n      res.current_revision = data.revision;\n      return cb(null, res);\n    }\n  });\n};\n\ngit.next = function (folder, cb) {\n  git.parse(folder, function (err, data) {\n    if (err !== null) return cb(err);\n    var res = {};\n\n    if (data.next_rev !== null) {\n      git.revert({\n        folder: folder,\n        revision: data.next_rev\n      }, function (err, meta) {\n        if (err !== null) return cb(err);\n        res.output = meta.output;\n        res.success = meta.success;\n        res.current_revision = res.success ? data.next_rev : data.revision;\n        return cb(null, res);\n      });\n    } else {\n      res.success = false;\n      res.current_revision = data.revision;\n      return cb(null, res);\n    }\n  });\n};\n\nmodule.exports = git;","map":{"version":3,"sources":["/Users/samianki/node_modules/vizion/lib/git.js"],"names":["fs","require","async","exec","git","TIMEOUT","MAXBUFFER","parse","folder","cb","myTrim","str","replace","getUrl","timeout","maxBuffer","err","stdout","stderr","data","type","url","getMeta","lines","split","revision","shift","update_time","comment","getStaged","unstaged","getBranch","branch","getRemote","remotes","pop","remote","indexOf","getRemoteBrancheExistence","branch_exists_on_remote","getPrevNext","prefix","commit_history","forEach","key","match","push","current","ahead","next_rev","prev_rev","length","getDate","stat","stats","mtime","getTags","tags","slice","waterfall","isUpdated","res","substring","is_up_to_date","new_revision","current_revision","revert","args","ret","command","output","success","update","dt","prev","meta","next","module","exports"],"mappings":"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","sourcesContent":["var fs = require('fs');\nvar async = require('async');\nvar exec = require('child_process').exec;\n\nvar git = {};\n\nvar TIMEOUT = 5000;\nvar MAXBUFFER = 1024 * 64; // 16KB\n\ngit.parse = function(folder, cb) {\n  var myTrim = function(str) {\n    if (typeof(str) === 'string')\n      return str.replace(/\\n/g, '');\n    return str;\n  };\n\n  var getUrl = function(cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git config --get remote.origin.url\", {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      var data = {};\n      data.type = 'git';\n      data.url = myTrim(stdout);\n      return cb(null, data);\n    });\n  };\n\n  var getMeta = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git show --quiet --format=%H%n%aD%n%s%n%B HEAD\", {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      var lines = stdout.split(\"\\n\");\n      data.revision = myTrim(lines.shift());\n      data.update_time = myTrim(lines.shift());\n      data.comment = myTrim(lines.shift());\n      return cb(null, data);\n    });\n  };\n\n  var getStaged = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git status -s\", {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      data.unstaged = (stdout === '') ? false : true;\n      return cb(null, data);\n    });\n  };\n\n  var getBranch = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git rev-parse --abbrev-ref HEAD\", {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      data.branch = myTrim(stdout);\n      return cb(null, data);\n    });\n  };\n\n  var getRemote = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git remote\", {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      data.remotes = stdout.split('\\n');\n      data.remotes.pop();\n      data.remote = (data.remotes.indexOf('origin') === -1)\n                    ? data.remotes[0] : 'origin';\n      return cb(null, data);\n    });\n  };\n\n  var getRemoteBrancheExistence = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git show-ref refs/remotes/\"+data.remote+\"/\"+data.branch, {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n         function(err, stdout, stderr) {\n      if (err)\n        data.branch_exists_on_remote = false;\n      else\n        data.branch_exists_on_remote = true;\n\n      return cb(null, data);\n    });\n  };\n\n  var getPrevNext = function(data, cb) {\n    var prefix = '';\n\n    if (data.branch_exists_on_remote)\n      prefix = data.remote + '/';\n\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git log \"+ prefix + data.branch +\" --pretty=oneline -n 100\",\n         {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if(err !== null)\n        return cb(err);\n      var commit_history = [];\n      var lines = stdout.split('\\n');\n\n      lines.forEach(function(key) {\n        var parse = key.match(/([^ ]*) (.*)/);\n        if (parse)\n          commit_history.push(parse[1]);\n      });\n\n      var current = commit_history.indexOf(data.revision);\n      data.ahead = false;\n      data.next_rev = null;\n      data.prev_rev = null;\n      if (current === -1) {\n        data.ahead = true;\n      }\n      else {\n        data.next_rev = (current === 0) ? null : commit_history[current - 1];\n        data.prev_rev = (current === (commit_history.length - 1)) ? null : commit_history[current + 1];\n      }\n      return cb(null, data);\n    });\n  };\n\n  var getDate = function(data, cb) {\n    fs.stat(folder+\".git\", function(err, stats) {\n      if(err !== null)\n        return cb(err);\n      data.update_time = myTrim(stats.mtime);\n      return cb(null, data);\n    });\n  };\n\n  var getTags = function(data, cb) {\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git tag\", {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n      if (err !== null)\n        return cb(err);\n      if (stdout.length) {\n        data.tags = stdout.split('\\n');\n        data.tags.pop();\n        data.tags = data.tags.slice(0, 10);\n      }\n      return cb(null, data);\n    });\n  };\n\n  async.waterfall([getUrl, getMeta, getStaged, getBranch, getRemote, getRemoteBrancheExistence, getPrevNext, getDate, getTags],\n  function(err, data) {\n    if (err !== null)\n      return cb(err);\n    return cb(null, data);\n  });\n};\n\ngit.isUpdated = function(folder, cb) {\n  git.parse(folder, function(err, data) {\n    var prefix = '';\n\n    if (err !== null)\n      return cb(err);\n\n    if (data.branch_exists_on_remote)\n      prefix = data.remote + '/';\n\n    exec(\"cd '\"+folder+\"';LC_ALL=en_US.UTF-8 git remote update >> /dev/null 2>&1; git log \"+ prefix+data.branch+\n         \" --pretty=oneline -n 1\", {timeout: 60000, maxBuffer: MAXBUFFER},\n    function(err, stdout, stderr) {\n           var res = {};\n\n           if(err !== null)\n             return cb(err);\n           if (stdout.substring(0, 40) === data.revision.substring(0, 40))\n             res.is_up_to_date = true;\n           else\n             res.is_up_to_date = false;\n           res.new_revision = stdout.substring(0, 40);\n           res.current_revision = data.revision.substring(0, 40);\n           return cb(null, res);\n    });\n  });\n};\n\ngit.revert = function(args, cb) {\n  var ret = {};\n  var command = \"cd '\"+args.folder+\"';LC_ALL=en_US.UTF-8 git reset --hard \"+args.revision;\n  ret.output = '';\n  ret.output += command + '\\n';\n  ret.success = true;\n  exec(command, {timeout: TIMEOUT, maxBuffer: MAXBUFFER},\n  function(err, stdout, stderr) {\n    ret.output += stdout;\n    if (err !== null || stderr.substring(0, 6) === 'fatal:')\n      ret.success = false;\n    return cb(null, ret);\n  });\n};\n\ngit.update = function(folder, cb) {\n  git.isUpdated(folder, function(err, data) {\n    var res = {};\n    if (err !== null)\n      return cb(err);\n    if (data.is_up_to_date === true) {\n      res.success = false;\n      res.current_revision = data.new_revision;\n      return cb(null, res);\n    }\n    else {\n      git.revert({folder: folder, revision: data.new_revision},\n      function (err, dt) {\n        if (err !== null)\n          return cb(err);\n        res.output = dt.output;\n        res.success = dt.success;\n        res.current_revision = (dt.success) ? data.new_revision : data.current_revision;\n        return cb(null, res);\n      });\n    }\n  });\n};\n\ngit.prev = function(folder, cb) {\n  git.parse(folder, function(err, data) {\n    if (err !== null)\n      return cb(err);\n    var res = {};\n    if (data.prev_rev !== null) {\n      git.revert({folder: folder, revision: data.prev_rev}, function(err, meta){\n        if (err !== null)\n          return cb(err);\n        res.output = meta.output;\n        res.success = meta.success;\n        res.current_revision = (res.success) ? data.prev_rev : data.revision;\n        return cb(null, res);\n      });\n    }\n    else {\n      res.success = false;\n      res.current_revision = data.revision;\n      return cb(null, res);\n    }\n  });\n};\n\ngit.next = function(folder, cb) {\n  git.parse(folder, function(err, data) {\n    if (err !== null)\n      return cb(err);\n    var res = {};\n    if (data.next_rev !== null) {\n      git.revert({folder: folder, revision: data.next_rev}, function(err, meta){\n        if (err !== null)\n          return cb(err);\n        res.output = meta.output;\n        res.success = meta.success;\n        res.current_revision = (res.success) ? data.next_rev : data.revision;\n        return cb(null, res);\n      });\n    }\n    else {\n      res.success = false;\n      res.current_revision = data.revision;\n      return cb(null, res);\n    }\n  });\n};\n\nmodule.exports = git;\n"]},"metadata":{},"sourceType":"script"}