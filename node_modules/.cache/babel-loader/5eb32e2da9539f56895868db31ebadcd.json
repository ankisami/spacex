{"ast":null,"code":"/**\n * Expose `Client`.\n */\nmodule.exports = Client;\n/**\n * Initialize an rpc client with `sock`.\n *\n * @param {Socket} sock\n * @api public\n */\n\nfunction Client(sock) {\n  if (typeof sock.format === 'function') sock.format('json');\n  this.sock = sock;\n}\n/**\n * Invoke method `name` with args and invoke the\n * tailing callback function.\n *\n * @param {String} name\n * @param {Mixed} ...\n * @param {Function} fn\n * @api public\n */\n\n\nClient.prototype.call = function (name) {\n  var args = [].slice.call(arguments, 1, -1);\n  var fn = arguments[arguments.length - 1];\n  this.sock.send({\n    type: 'call',\n    method: name,\n    args: args\n  }, function (msg) {\n    if ('error' in msg) {\n      var err = new Error(msg.error);\n      err.stack = msg.stack || err.stack;\n      fn(err);\n    } else {\n      msg.args.unshift(null);\n      fn.apply(null, msg.args);\n    }\n  });\n};\n/**\n * Fetch the methods exposed and invoke `fn(err, methods)`.\n *\n * @param {Function} fn\n * @api public\n */\n\n\nClient.prototype.methods = function (fn) {\n  this.sock.send({\n    type: 'methods'\n  }, function (msg) {\n    fn(null, msg.methods);\n  });\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/@pm2/agent/node_modules/pm2-axon-rpc/lib/client.js"],"names":["module","exports","Client","sock","format","prototype","call","name","args","slice","arguments","fn","length","send","type","method","msg","err","Error","error","stack","unshift","apply","methods"],"mappings":"AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,MAAI,OAAOA,IAAI,CAACC,MAAZ,KAAuB,UAA3B,EAAuCD,IAAI,CAACC,MAAL,CAAY,MAAZ;AACvC,OAAKD,IAAL,GAAYA,IAAZ;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAD,MAAM,CAACG,SAAP,CAAiBC,IAAjB,GAAwB,UAASC,IAAT,EAAc;AACpC,MAAIC,IAAI,GAAG,GAAGC,KAAH,CAASH,IAAT,CAAcI,SAAd,EAAyB,CAAzB,EAA4B,CAAC,CAA7B,CAAX;AACA,MAAIC,EAAE,GAAGD,SAAS,CAACA,SAAS,CAACE,MAAV,GAAmB,CAApB,CAAlB;AAEA,OAAKT,IAAL,CAAUU,IAAV,CAAe;AACbC,IAAAA,IAAI,EAAE,MADO;AAEbC,IAAAA,MAAM,EAAER,IAFK;AAGbC,IAAAA,IAAI,EAAEA;AAHO,GAAf,EAIG,UAASQ,GAAT,EAAa;AACd,QAAI,WAAWA,GAAf,EAAoB;AAClB,UAAIC,GAAG,GAAG,IAAIC,KAAJ,CAAUF,GAAG,CAACG,KAAd,CAAV;AACAF,MAAAA,GAAG,CAACG,KAAJ,GAAYJ,GAAG,CAACI,KAAJ,IAAaH,GAAG,CAACG,KAA7B;AACAT,MAAAA,EAAE,CAACM,GAAD,CAAF;AACD,KAJD,MAIO;AACLD,MAAAA,GAAG,CAACR,IAAJ,CAASa,OAAT,CAAiB,IAAjB;AACAV,MAAAA,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeN,GAAG,CAACR,IAAnB;AACD;AACF,GAbD;AAcD,CAlBD;AAoBA;AACA;AACA;AACA;AACA;AACA;;;AAEAN,MAAM,CAACG,SAAP,CAAiBkB,OAAjB,GAA2B,UAASZ,EAAT,EAAY;AACrC,OAAKR,IAAL,CAAUU,IAAV,CAAe;AACbC,IAAAA,IAAI,EAAE;AADO,GAAf,EAEG,UAASE,GAAT,EAAa;AACdL,IAAAA,EAAE,CAAC,IAAD,EAAOK,GAAG,CAACO,OAAX,CAAF;AACD,GAJD;AAKD,CAND","sourcesContent":["\n/**\n * Expose `Client`.\n */\n\nmodule.exports = Client;\n\n/**\n * Initialize an rpc client with `sock`.\n *\n * @param {Socket} sock\n * @api public\n */\n\nfunction Client(sock) {\n  if (typeof sock.format === 'function') sock.format('json');\n  this.sock = sock;\n}\n\n/**\n * Invoke method `name` with args and invoke the\n * tailing callback function.\n *\n * @param {String} name\n * @param {Mixed} ...\n * @param {Function} fn\n * @api public\n */\n\nClient.prototype.call = function(name){\n  var args = [].slice.call(arguments, 1, -1);\n  var fn = arguments[arguments.length - 1];\n\n  this.sock.send({\n    type: 'call',\n    method: name,\n    args: args\n  }, function(msg){\n    if ('error' in msg) {\n      var err = new Error(msg.error);\n      err.stack = msg.stack || err.stack;\n      fn(err);\n    } else {\n      msg.args.unshift(null);\n      fn.apply(null, msg.args);\n    }\n  });\n};\n\n/**\n * Fetch the methods exposed and invoke `fn(err, methods)`.\n *\n * @param {Function} fn\n * @api public\n */\n\nClient.prototype.methods = function(fn){\n  this.sock.send({\n    type: 'methods'\n  }, function(msg){\n    fn(null, msg.methods);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}