{"ast":null,"code":"/**\n * Constructors.\n */\nexports.PubEmitterSocket = require('./sockets/pub-emitter');\nexports.SubEmitterSocket = require('./sockets/sub-emitter');\nexports.PushSocket = require('./sockets/push');\nexports.PullSocket = require('./sockets/pull');\nexports.PubSocket = require('./sockets/pub');\nexports.SubSocket = require('./sockets/sub');\nexports.ReqSocket = require('./sockets/req');\nexports.RepSocket = require('./sockets/rep');\nexports.Socket = require('./sockets/sock');\n/**\n * Socket types.\n */\n\nexports.types = {\n  'pub-emitter': exports.PubEmitterSocket,\n  'sub-emitter': exports.SubEmitterSocket,\n  'push': exports.PushSocket,\n  'pull': exports.PullSocket,\n  'pub': exports.PubSocket,\n  'sub': exports.SubSocket,\n  'req': exports.ReqSocket,\n  'rep': exports.RepSocket\n};\n/**\n * Return a new socket of the given `type`.\n *\n * @param {String} type\n * @param {Object} options\n * @return {Socket}\n * @api public\n */\n\nexports.socket = function (type, options) {\n  var fn = exports.types[type];\n  if (!fn) throw new Error('invalid socket type \"' + type + '\"');\n  return new fn(options);\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2-axon/lib/index.js"],"names":["exports","PubEmitterSocket","require","SubEmitterSocket","PushSocket","PullSocket","PubSocket","SubSocket","ReqSocket","RepSocket","Socket","types","socket","type","options","fn","Error"],"mappings":"AACA;AACA;AACA;AAEAA,OAAO,CAACC,gBAAR,GAA2BC,OAAO,CAAC,uBAAD,CAAlC;AACAF,OAAO,CAACG,gBAAR,GAA2BD,OAAO,CAAC,uBAAD,CAAlC;AACAF,OAAO,CAACI,UAAR,GAAqBF,OAAO,CAAC,gBAAD,CAA5B;AACAF,OAAO,CAACK,UAAR,GAAqBH,OAAO,CAAC,gBAAD,CAA5B;AACAF,OAAO,CAACM,SAAR,GAAoBJ,OAAO,CAAC,eAAD,CAA3B;AACAF,OAAO,CAACO,SAAR,GAAoBL,OAAO,CAAC,eAAD,CAA3B;AACAF,OAAO,CAACQ,SAAR,GAAoBN,OAAO,CAAC,eAAD,CAA3B;AACAF,OAAO,CAACS,SAAR,GAAoBP,OAAO,CAAC,eAAD,CAA3B;AACAF,OAAO,CAACU,MAAR,GAAiBR,OAAO,CAAC,gBAAD,CAAxB;AAEA;AACA;AACA;;AAEAF,OAAO,CAACW,KAAR,GAAgB;AACd,iBAAeX,OAAO,CAACC,gBADT;AAEd,iBAAeD,OAAO,CAACG,gBAFT;AAGd,UAAQH,OAAO,CAACI,UAHF;AAId,UAAQJ,OAAO,CAACK,UAJF;AAKd,SAAOL,OAAO,CAACM,SALD;AAMd,SAAON,OAAO,CAACO,SAND;AAOd,SAAOP,OAAO,CAACQ,SAPD;AAQd,SAAOR,OAAO,CAACS;AARD,CAAhB;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAT,OAAO,CAACY,MAAR,GAAiB,UAASC,IAAT,EAAeC,OAAf,EAAuB;AACtC,MAAIC,EAAE,GAAGf,OAAO,CAACW,KAAR,CAAcE,IAAd,CAAT;AACA,MAAI,CAACE,EAAL,EAAS,MAAM,IAAIC,KAAJ,CAAU,0BAA0BH,IAA1B,GAAiC,GAA3C,CAAN;AACT,SAAO,IAAIE,EAAJ,CAAOD,OAAP,CAAP;AACD,CAJD","sourcesContent":["\n/**\n * Constructors.\n */\n\nexports.PubEmitterSocket = require('./sockets/pub-emitter');\nexports.SubEmitterSocket = require('./sockets/sub-emitter');\nexports.PushSocket = require('./sockets/push');\nexports.PullSocket = require('./sockets/pull');\nexports.PubSocket = require('./sockets/pub');\nexports.SubSocket = require('./sockets/sub');\nexports.ReqSocket = require('./sockets/req');\nexports.RepSocket = require('./sockets/rep');\nexports.Socket = require('./sockets/sock');\n\n/**\n * Socket types.\n */\n\nexports.types = {\n  'pub-emitter': exports.PubEmitterSocket,\n  'sub-emitter': exports.SubEmitterSocket,\n  'push': exports.PushSocket,\n  'pull': exports.PullSocket,\n  'pub': exports.PubSocket,\n  'sub': exports.SubSocket,\n  'req': exports.ReqSocket,\n  'rep': exports.RepSocket\n};\n\n/**\n * Return a new socket of the given `type`.\n *\n * @param {String} type\n * @param {Object} options\n * @return {Socket}\n * @api public\n */\n\nexports.socket = function(type, options){\n  var fn = exports.types[type];\n  if (!fn) throw new Error('invalid socket type \"' + type + '\"');\n  return new fn(options);\n};\n"]},"metadata":{},"sourceType":"script"}