{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// system.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 2. System (Hardware, BIOS, Base Board)\n// ----------------------------------------------------------------------------------\n\nconst exec = require('child_process').exec;\n\nconst execSync = require('child_process').execSync;\n\nconst fs = require('fs');\n\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = _platform === 'linux';\n\nconst _darwin = _platform === 'darwin';\n\nconst _windows = _platform === 'win32';\n\nconst _freebsd = _platform === 'freebsd';\n\nconst _openbsd = _platform === 'openbsd';\n\nconst _netbsd = _platform === 'netbsd';\n\nconst _sunos = _platform === 'sunos';\n\nfunction system(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = {\n        manufacturer: '',\n        model: 'Computer',\n        version: '',\n        serial: '-',\n        uuid: '-',\n        sku: '-'\n      };\n\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        exec('export LC_ALL=C; dmidecode -t system 2>/dev/null; unset LC_ALL', function (error, stdout) {\n          // if (!error) {\n          let lines = stdout.toString().split('\\n');\n          result.manufacturer = util.getValue(lines, 'manufacturer');\n          result.model = util.getValue(lines, 'product name');\n          result.version = util.getValue(lines, 'version');\n          result.serial = util.getValue(lines, 'serial number');\n          result.uuid = util.getValue(lines, 'uuid');\n          result.sku = util.getValue(lines, 'sku number'); // }\n          // Non-Root values\n\n          const cmd = `echo -n \"product_name: \"; cat /sys/devices/virtual/dmi/id/product_name 2>/dev/null; echo;\n            echo -n \"product_serial: \"; cat /sys/devices/virtual/dmi/id/product_serial 2>/dev/null; echo;\n            echo -n \"product_uuid: \"; cat /sys/devices/virtual/dmi/id/product_uuid 2>/dev/null; echo;\n            echo -n \"product_version: \"; cat /sys/devices/virtual/dmi/id/product_version 2>/dev/null; echo;\n            echo -n \"sys_vendor: \"; cat /sys/devices/virtual/dmi/id/sys_vendor 2>/dev/null; echo;`;\n\n          try {\n            lines = execSync(cmd).toString().split('\\n');\n            result.manufacturer = result.manufacturer === '' ? util.getValue(lines, 'sys_vendor') : result.manufacturer;\n            result.model = result.model === '' ? util.getValue(lines, 'product_name') : result.model;\n            result.version = result.version === '' ? util.getValue(lines, 'product_version') : result.version;\n            result.serial = result.serial === '' ? util.getValue(lines, 'product_serial') : result.serial;\n            result.uuid = result.uuid === '' ? util.getValue(lines, 'product_uuid') : result.uuid;\n          } catch (e) {\n            util.noop();\n          }\n\n          if (!result.serial || result.serial.toLowerCase().indexOf('o.e.m.') !== -1) result.serial = '-';\n          if (!result.manufacturer || result.manufacturer.toLowerCase().indexOf('o.e.m.') !== -1) result.manufacturer = '';\n          if (!result.model || result.model.toLowerCase().indexOf('o.e.m.') !== -1) result.model = 'Computer';\n          if (!result.version || result.version.toLowerCase().indexOf('o.e.m.') !== -1) result.version = '';\n          if (!result.sku || result.sku.toLowerCase().indexOf('o.e.m.') !== -1) result.sku = '-'; // detect docker\n\n          if (fs.existsSync('/.dockerenv') || fs.existsSync('/.dockerinit')) {\n            result.model = 'Docker Container';\n          }\n\n          if (result.manufacturer === '' && result.model === 'Computer' && result.version === '') {\n            // still default values\n            exec('dmesg | grep -i virtual | grep -iE \"vmware|qemu|kvm|xen\"', function (error, stdout) {\n              // detect virtual machines\n              if (!error) {\n                let lines = stdout.toString().split('\\n');\n                if (lines.length > 0) result.model = 'Virtual machine';\n              }\n\n              if (result.manufacturer === '' && result.model === 'Computer' && result.version === '') {\n                // Check Raspberry Pi\n                fs.readFile('/proc/cpuinfo', function (error, stdout) {\n                  if (!error) {\n                    let lines = stdout.toString().split('\\n');\n                    result.model = util.getValue(lines, 'hardware', ':', true).toUpperCase();\n                    result.version = util.getValue(lines, 'revision', ':', true).toLowerCase();\n                    result.serial = util.getValue(lines, 'serial', ':', true);\n                    const model = util.getValue(lines, 'model:', ':', true); // reference values: https://elinux.org/RPi_HardwareHistory\n                    // https://www.raspberrypi.org/documentation/hardware/raspberrypi/revision-codes/README.md\n\n                    if ((result.model === 'BCM2835' || result.model === 'BCM2708' || result.model === 'BCM2709' || result.model === 'BCM2835' || result.model === 'BCM2837') && model.toLowerCase().indexOf('raspberry') >= 0) {\n                      const rPIRevision = util.decodePiCpuinfo(lines);\n                      result.model = rPIRevision.model;\n                      result.version = rPIRevision.revisionCode;\n                      result.manufacturer = 'Raspberry Pi Foundation';\n                      result.raspberry = {\n                        manufacturer: rPIRevision.manufacturer,\n                        processor: rPIRevision.processor,\n                        type: rPIRevision.type,\n                        revision: rPIRevision.revision\n                      };\n                    } // if (result.model === 'BCM2835' || result.model === 'BCM2708' || result.model === 'BCM2709' || result.model === 'BCM2835' || result.model === 'BCM2837') {\n                    //   // Pi 4\n                    //   if (['d03114'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 4 Model B';\n                    //     result.version = result.version + ' - Rev. 1.4';\n                    //   }\n                    //   if (['b03112', 'c03112'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 4 Model B';\n                    //     result.version = result.version + ' - Rev. 1.2';\n                    //   }\n                    //   if (['a03111', 'b03111', 'c03111'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 4 Model B';\n                    //     result.version = result.version + ' - Rev. 1.1';\n                    //   }\n                    //   // Pi 3\n                    //   if (['a02082', 'a22082', 'a32082', 'a52082'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 3 Model B';\n                    //     result.version = result.version + ' - Rev. 1.2';\n                    //   }\n                    //   if (['a22083'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 3 Model B';\n                    //     result.version = result.version + ' - Rev. 1.3';\n                    //   }\n                    //   if (['a020d3'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 3 Model B+';\n                    //     result.version = result.version + ' - Rev. 1.3';\n                    //   }\n                    //   if (['9020e0'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 3 Model A+';\n                    //     result.version = result.version + ' - Rev. 1.3';\n                    //   }\n                    //   // Pi 2 Model B\n                    //   if (['a01040'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 2 Model B';\n                    //     result.version = result.version + ' - Rev. 1.0';\n                    //   }\n                    //   if (['a01041', 'a21041'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 2 Model B';\n                    //     result.version = result.version + ' - Rev. 1.1';\n                    //   }\n                    //   if (['a22042', 'a02042'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 2 Model B';\n                    //     result.version = result.version + ' - Rev. 1.2';\n                    //   }\n                    //   // Compute Model\n                    //   if (['a02100'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi CM3+';\n                    //     result.version = result.version + ' - Rev 1.0';\n                    //   }\n                    //   if (['a020a0', 'a220a0'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi CM3';\n                    //     result.version = result.version + ' - Rev 1.0';\n                    //   }\n                    //   if (['900061'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi CM';\n                    //     result.version = result.version + ' - Rev 1.1';\n                    //   }\n                    //   // Pi Zero\n                    //   if (['900092', '920092'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Zero';\n                    //     result.version = result.version + ' - Rev 1.2';\n                    //   }\n                    //   if (['900093', '920093'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Zero';\n                    //     result.version = result.version + ' - Rev 1.3';\n                    //   }\n                    //   if (['9000c1'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Zero W';\n                    //     result.version = result.version + ' - Rev 1.1';\n                    //   }\n                    //   // A, B, A+ B+\n                    //   if (['0002', '0003'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model B';\n                    //     result.version = result.version + ' - Rev 1.0';\n                    //   }\n                    //   if (['0004', '0005', '0006', '000d', '000e', '000f'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model B';\n                    //     result.version = result.version + ' - Rev 2.0';\n                    //   }\n                    //   if (['0007', '0008', '0009'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model A';\n                    //     result.version = result.version + ' - Rev 2.0';\n                    //   }\n                    //   if (['0010'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model B+';\n                    //     result.version = result.version + ' - Rev 1.0';\n                    //   }\n                    //   if (['0012'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model A+';\n                    //     result.version = result.version + ' - Rev 1.0';\n                    //   }\n                    //   if (['0013', '900032'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model B+';\n                    //     result.version = result.version + ' - Rev 1.2';\n                    //   }\n                    //   if (['0015', '900021'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model A+';\n                    //     result.version = result.version + ' - Rev 1.1';\n                    //   }\n                    //   if (result.model.indexOf('Pi') !== -1 && result.version) {  // Pi, Pi Zero\n                    //     result.manufacturer = 'Raspberry Pi Foundation';\n                    //   }\n                    // }\n\n                  }\n\n                  if (callback) {\n                    callback(result);\n                  }\n\n                  resolve(result);\n                });\n              } else {\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              }\n            });\n          } else {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        });\n      }\n\n      if (_darwin) {\n        exec('ioreg -c IOPlatformExpertDevice -d 2', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().replace(/[<>\"]/g, '').split('\\n');\n            result.manufacturer = util.getValue(lines, 'manufacturer', '=', true);\n            result.model = util.getValue(lines, 'model', '=', true);\n            result.version = util.getValue(lines, 'version', '=', true);\n            result.serial = util.getValue(lines, 'ioplatformserialnumber', '=', true);\n            result.uuid = util.getValue(lines, 'ioplatformuuid', '=', true);\n            result.sku = util.getValue(lines, 'board-id', '=', true);\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        try {\n          util.wmic('csproduct get /value').then((stdout, error) => {\n            if (!error) {\n              // let lines = stdout.split('\\r\\n').filter(line => line.trim() !== '').filter((line, idx) => idx > 0)[0].trim().split(/\\s\\s+/);\n              let lines = stdout.split('\\r\\n');\n              result.manufacturer = util.getValue(lines, 'vendor', '=');\n              result.model = util.getValue(lines, 'name', '=');\n              result.version = util.getValue(lines, 'version', '=');\n              result.serial = util.getValue(lines, 'identifyingnumber', '=');\n              result.uuid = util.getValue(lines, 'uuid', '=');\n              util.wmic('/namespace:\\\\\\\\root\\\\wmi path MS_SystemInformation get /value').then((stdout, error) => {\n                if (!error) {\n                  let lines = stdout.split('\\r\\n');\n                  result.sku = util.getValue(lines, 'systemsku', '=');\n                }\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              });\n            } else {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.system = system;\n\nfunction bios(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = {\n        vendor: '',\n        version: '',\n        releaseDate: '',\n        revision: ''\n      };\n      let cmd = '';\n\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        if (process.arch === 'arm') {\n          cmd = 'cat /proc/cpuinfo | grep Serial';\n        } else {\n          cmd = 'export LC_ALL=C; dmidecode --type 0 2>/dev/null; unset LC_ALL';\n        }\n\n        exec(cmd, function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          result.vendor = util.getValue(lines, 'Vendor');\n          result.version = util.getValue(lines, 'Version');\n          let datetime = util.getValue(lines, 'Release Date');\n          result.releaseDate = util.parseDateTime(datetime).date;\n          result.revision = util.getValue(lines, 'BIOS Revision'); // Non-Root values\n\n          const cmd = `echo -n \"bios_date: \"; cat /sys/devices/virtual/dmi/id/bios_date 2>/dev/null; echo;\n            echo -n \"bios_vendor: \"; cat /sys/devices/virtual/dmi/id/bios_vendor 2>/dev/null; echo;\n            echo -n \"bios_version: \"; cat /sys/devices/virtual/dmi/id/bios_version 2>/dev/null; echo;`;\n\n          try {\n            lines = execSync(cmd).toString().split('\\n');\n            result.vendor = !result.vendor ? util.getValue(lines, 'bios_vendor') : result.vendor;\n            result.version = !result.version ? util.getValue(lines, 'bios_version') : result.version;\n            datetime = util.getValue(lines, 'bios_date');\n            result.releaseDate = !result.releaseDate ? util.parseDateTime(datetime).date : result.releaseDate;\n          } catch (e) {\n            util.noop();\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        result.vendor = 'Apple Inc.';\n\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_sunos) {\n        result.vendor = 'Sun Microsystems';\n\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        try {\n          util.wmic('bios get /value').then((stdout, error) => {\n            if (!error) {\n              let lines = stdout.toString().split('\\r\\n');\n              const description = util.getValue(lines, 'description', '=');\n\n              if (description.indexOf(' Version ') !== -1) {\n                // ... Phoenix ROM BIOS PLUS Version 1.10 A04\n                result.vendor = description.split(' Version ')[0].trim();\n                result.version = description.split(' Version ')[1].trim();\n              } else if (description.indexOf(' Ver: ') !== -1) {\n                // ... BIOS Date: 06/27/16 17:50:16 Ver: 1.4.5\n                result.vendor = util.getValue(lines, 'manufacturer', '=');\n                result.version = description.split(' Ver: ')[1].trim();\n              } else {\n                result.vendor = util.getValue(lines, 'manufacturer', '=');\n                result.version = util.getValue(lines, 'version', '=');\n              }\n\n              result.releaseDate = util.getValue(lines, 'releasedate', '=');\n\n              if (result.releaseDate.length >= 10) {\n                result.releaseDate = result.releaseDate.substr(0, 4) + '-' + result.releaseDate.substr(4, 2) + '-' + result.releaseDate.substr(6, 2);\n              }\n\n              result.revision = util.getValue(lines, 'buildnumber', '=');\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.bios = bios;\n\nfunction baseboard(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = {\n        manufacturer: '',\n        model: '',\n        version: '',\n        serial: '-',\n        assetTag: '-'\n      };\n      let cmd = '';\n\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        if (process.arch === 'arm') {\n          cmd = 'cat /proc/cpuinfo | grep Serial'; // 'BCM2709', 'BCM2835', 'BCM2708' -->\n        } else {\n          cmd = 'export LC_ALL=C; dmidecode -t 2 2>/dev/null; unset LC_ALL';\n        }\n\n        exec(cmd, function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          result.manufacturer = util.getValue(lines, 'Manufacturer');\n          result.model = util.getValue(lines, 'Product Name');\n          result.version = util.getValue(lines, 'Version');\n          result.serial = util.getValue(lines, 'Serial Number');\n          result.assetTag = util.getValue(lines, 'Asset Tag'); // Non-Root values\n\n          const cmd = `echo -n \"board_asset_tag: \"; cat /sys/devices/virtual/dmi/id/board_asset_tag 2>/dev/null; echo;\n            echo -n \"board_name: \"; cat /sys/devices/virtual/dmi/id/board_name 2>/dev/null; echo;\n            echo -n \"board_serial: \"; cat /sys/devices/virtual/dmi/id/board_serial 2>/dev/null; echo;\n            echo -n \"board_vendor: \"; cat /sys/devices/virtual/dmi/id/board_vendor 2>/dev/null; echo;\n            echo -n \"board_version: \"; cat /sys/devices/virtual/dmi/id/board_version 2>/dev/null; echo;`;\n\n          try {\n            lines = execSync(cmd).toString().split('\\n');\n            result.manufacturer = !result.manufacturer ? util.getValue(lines, 'board_vendor') : result.manufacturer;\n            result.model = !result.model ? util.getValue(lines, 'board_name') : result.model;\n            result.version = !result.version ? util.getValue(lines, 'board_version') : result.version;\n            result.serial = !result.serial ? util.getValue(lines, 'board_serial') : result.serial;\n            result.assetTag = !result.assetTag ? util.getValue(lines, 'board_asset_tag') : result.assetTag;\n          } catch (e) {\n            util.noop();\n          }\n\n          if (result.serial.toLowerCase().indexOf('o.e.m.') !== -1) result.serial = '-';\n          if (result.assetTag.toLowerCase().indexOf('o.e.m.') !== -1) result.assetTag = '-';\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('ioreg -c IOPlatformExpertDevice -d 2', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().replace(/[<>\"]/g, '').split('\\n');\n            result.manufacturer = util.getValue(lines, 'manufacturer', '=', true);\n            result.model = util.getValue(lines, 'model', '=', true);\n            result.version = util.getValue(lines, 'version', '=', true);\n            result.serial = util.getValue(lines, 'ioplatformserialnumber', '=', true);\n            result.assetTag = util.getValue(lines, 'board-id', '=', true);\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        try {\n          util.wmic('baseboard get /value').then((stdout, error) => {\n            if (!error) {\n              let lines = stdout.toString().split('\\r\\n');\n              result.manufacturer = util.getValue(lines, 'manufacturer', '=');\n              result.model = util.getValue(lines, 'model', '=');\n\n              if (!result.model) {\n                result.model = util.getValue(lines, 'product', '=');\n              }\n\n              result.version = util.getValue(lines, 'version', '=');\n              result.serial = util.getValue(lines, 'serialnumber', '=');\n              result.assetTag = util.getValue(lines, 'partnumber', '=');\n\n              if (!result.assetTag) {\n                result.assetTag = util.getValue(lines, 'sku', '=');\n              }\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.baseboard = baseboard;\n\nfunction chassis(callback) {\n  const chassisTypes = ['Other', 'Unknown', 'Desktop', 'Low Profile Desktop', 'Pizza Box', 'Mini Tower', 'Tower', 'Portable', 'Laptop', 'Notebook', 'Hand Held', 'Docking Station', 'All in One', 'Sub Notebook', 'Space-Saving', 'Lunch Box', 'Main System Chassis', 'Expansion Chassis', 'SubChassis', 'Bus Expansion Chassis', 'Peripheral Chassis', 'Storage Chassis', 'Rack Mount Chassis', 'Sealed-Case PC', 'Multi-System Chassis', 'Compact PCI', 'Advanced TCA', 'Blade', 'Blade Enclosure', 'Tablet', 'Concertible', 'Detachable', 'IoT Gateway ', 'Embedded PC', 'Mini PC', 'Stick PC'];\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = {\n        manufacturer: '',\n        model: '',\n        type: '',\n        version: '',\n        serial: '-',\n        assetTag: '-',\n        sku: ''\n      };\n\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        const cmd = `echo -n \"chassis_asset_tag: \"; cat /sys/devices/virtual/dmi/id/chassis_asset_tag 2>/dev/null; echo;\n            echo -n \"chassis_serial: \"; cat /sys/devices/virtual/dmi/id/chassis_serial 2>/dev/null; echo;\n            echo -n \"chassis_type: \"; cat /sys/devices/virtual/dmi/id/chassis_type 2>/dev/null; echo;\n            echo -n \"chassis_vendor: \"; cat /sys/devices/virtual/dmi/id/chassis_vendor 2>/dev/null; echo;\n            echo -n \"chassis_version: \"; cat /sys/devices/virtual/dmi/id/chassis_version 2>/dev/null; echo;`;\n        exec(cmd, function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          result.manufacturer = util.getValue(lines, 'chassis_vendor');\n          const ctype = parseInt(util.getValue(lines, 'chassis_type').replace(/\\D/g, ''));\n          result.type = ctype && !isNaN(ctype) && ctype < chassisTypes.length ? chassisTypes[ctype - 1] : '';\n          result.version = util.getValue(lines, 'chassis_version');\n          result.serial = util.getValue(lines, 'chassis_serial');\n          result.assetTag = util.getValue(lines, 'chassis_asset_tag');\n          if (result.serial.toLowerCase().indexOf('o.e.m.') !== -1) result.serial = '-';\n          if (result.assetTag.toLowerCase().indexOf('o.e.m.') !== -1) result.assetTag = '-';\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('ioreg -c IOPlatformExpertDevice -d 2', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().replace(/[<>\"]/g, '').split('\\n');\n            result.manufacturer = util.getValue(lines, 'manufacturer', '=', true);\n            result.model = util.getValue(lines, 'model', '=', true);\n            result.version = util.getValue(lines, 'version', '=', true);\n            result.serial = util.getValue(lines, 'ioplatformserialnumber', '=', true);\n            result.assetTag = util.getValue(lines, 'board-id', '=', true);\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        try {\n          util.wmic('path Win32_SystemEnclosure get /value').then((stdout, error) => {\n            if (!error) {\n              let lines = stdout.toString().split('\\r\\n');\n              result.manufacturer = util.getValue(lines, 'manufacturer', '=');\n              result.model = util.getValue(lines, 'model', '=');\n              const ctype = parseInt(util.getValue(lines, 'ChassisTypes', '=').replace(/\\D/g, ''));\n              result.type = ctype && !isNaN(ctype) && ctype < chassisTypes.length ? chassisTypes[ctype - 1] : '';\n              result.version = util.getValue(lines, 'version', '=');\n              result.serial = util.getValue(lines, 'serialnumber', '=');\n              result.assetTag = util.getValue(lines, 'partnumber', '=');\n              result.sku = util.getValue(lines, 'sku', '=');\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.chassis = chassis;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/system.js"],"names":["exec","require","execSync","fs","util","_platform","process","platform","_linux","_darwin","_windows","_freebsd","_openbsd","_netbsd","_sunos","system","callback","Promise","resolve","nextTick","result","manufacturer","model","version","serial","uuid","sku","error","stdout","lines","toString","split","getValue","cmd","e","noop","toLowerCase","indexOf","existsSync","length","readFile","toUpperCase","rPIRevision","decodePiCpuinfo","revisionCode","raspberry","processor","type","revision","replace","wmic","then","exports","bios","vendor","releaseDate","arch","datetime","parseDateTime","date","description","trim","substr","baseboard","assetTag","chassis","chassisTypes","ctype","parseInt","isNaN"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// system.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 2. System (Hardware, BIOS, Base Board)\n// ----------------------------------------------------------------------------------\n\nconst exec = require('child_process').exec;\nconst execSync = require('child_process').execSync;\nconst fs = require('fs');\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nfunction system(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      let result = {\n        manufacturer: '',\n        model: 'Computer',\n        version: '',\n        serial: '-',\n        uuid: '-',\n        sku: '-',\n      };\n\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        exec('export LC_ALL=C; dmidecode -t system 2>/dev/null; unset LC_ALL', function (error, stdout) {\n          // if (!error) {\n          let lines = stdout.toString().split('\\n');\n          result.manufacturer = util.getValue(lines, 'manufacturer');\n          result.model = util.getValue(lines, 'product name');\n          result.version = util.getValue(lines, 'version');\n          result.serial = util.getValue(lines, 'serial number');\n          result.uuid = util.getValue(lines, 'uuid');\n          result.sku = util.getValue(lines, 'sku number');\n          // }\n          // Non-Root values\n          const cmd = `echo -n \"product_name: \"; cat /sys/devices/virtual/dmi/id/product_name 2>/dev/null; echo;\n            echo -n \"product_serial: \"; cat /sys/devices/virtual/dmi/id/product_serial 2>/dev/null; echo;\n            echo -n \"product_uuid: \"; cat /sys/devices/virtual/dmi/id/product_uuid 2>/dev/null; echo;\n            echo -n \"product_version: \"; cat /sys/devices/virtual/dmi/id/product_version 2>/dev/null; echo;\n            echo -n \"sys_vendor: \"; cat /sys/devices/virtual/dmi/id/sys_vendor 2>/dev/null; echo;`;\n          try {\n            lines = execSync(cmd).toString().split('\\n');\n            result.manufacturer = result.manufacturer === '' ? util.getValue(lines, 'sys_vendor') : result.manufacturer;\n            result.model = result.model === '' ? util.getValue(lines, 'product_name') : result.model;\n            result.version = result.version === '' ? util.getValue(lines, 'product_version') : result.version;\n            result.serial = result.serial === '' ? util.getValue(lines, 'product_serial') : result.serial;\n            result.uuid = result.uuid === '' ? util.getValue(lines, 'product_uuid') : result.uuid;\n          } catch (e) {\n            util.noop();\n          }\n          if (!result.serial || result.serial.toLowerCase().indexOf('o.e.m.') !== -1) result.serial = '-';\n          if (!result.manufacturer || result.manufacturer.toLowerCase().indexOf('o.e.m.') !== -1) result.manufacturer = '';\n          if (!result.model || result.model.toLowerCase().indexOf('o.e.m.') !== -1) result.model = 'Computer';\n          if (!result.version || result.version.toLowerCase().indexOf('o.e.m.') !== -1) result.version = '';\n          if (!result.sku || result.sku.toLowerCase().indexOf('o.e.m.') !== -1) result.sku = '-';\n          // detect docker\n          if (fs.existsSync('/.dockerenv') || fs.existsSync('/.dockerinit')) {\n            result.model = 'Docker Container';\n          }\n          if (result.manufacturer === '' && result.model === 'Computer' && result.version === '') { // still default values\n            exec('dmesg | grep -i virtual | grep -iE \"vmware|qemu|kvm|xen\"', function (error, stdout) {\n              // detect virtual machines\n              if (!error) {\n                let lines = stdout.toString().split('\\n');\n                if (lines.length > 0) result.model = 'Virtual machine';\n              }\n\n              if (result.manufacturer === '' && result.model === 'Computer' && result.version === '') {\n                // Check Raspberry Pi\n                fs.readFile('/proc/cpuinfo', function (error, stdout) {\n                  if (!error) {\n                    let lines = stdout.toString().split('\\n');\n                    result.model = util.getValue(lines, 'hardware', ':', true).toUpperCase();\n                    result.version = util.getValue(lines, 'revision', ':', true).toLowerCase();\n                    result.serial = util.getValue(lines, 'serial', ':', true);\n                    const model = util.getValue(lines, 'model:', ':', true);\n                    // reference values: https://elinux.org/RPi_HardwareHistory\n                    // https://www.raspberrypi.org/documentation/hardware/raspberrypi/revision-codes/README.md\n                    if ((result.model === 'BCM2835' || result.model === 'BCM2708' || result.model === 'BCM2709' || result.model === 'BCM2835' || result.model === 'BCM2837') && model.toLowerCase().indexOf('raspberry') >= 0) {\n                      const rPIRevision = util.decodePiCpuinfo(lines);\n                      result.model = rPIRevision.model;\n                      result.version = rPIRevision.revisionCode;\n                      result.manufacturer = 'Raspberry Pi Foundation';\n                      result.raspberry = {\n                        manufacturer: rPIRevision.manufacturer,\n                        processor: rPIRevision.processor,\n                        type: rPIRevision.type,\n                        revision: rPIRevision.revision\n                      };\n                    }\n\n                    // if (result.model === 'BCM2835' || result.model === 'BCM2708' || result.model === 'BCM2709' || result.model === 'BCM2835' || result.model === 'BCM2837') {\n\n\n                    //   // Pi 4\n                    //   if (['d03114'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 4 Model B';\n                    //     result.version = result.version + ' - Rev. 1.4';\n                    //   }\n                    //   if (['b03112', 'c03112'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 4 Model B';\n                    //     result.version = result.version + ' - Rev. 1.2';\n                    //   }\n                    //   if (['a03111', 'b03111', 'c03111'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 4 Model B';\n                    //     result.version = result.version + ' - Rev. 1.1';\n                    //   }\n                    //   // Pi 3\n                    //   if (['a02082', 'a22082', 'a32082', 'a52082'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 3 Model B';\n                    //     result.version = result.version + ' - Rev. 1.2';\n                    //   }\n                    //   if (['a22083'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 3 Model B';\n                    //     result.version = result.version + ' - Rev. 1.3';\n                    //   }\n                    //   if (['a020d3'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 3 Model B+';\n                    //     result.version = result.version + ' - Rev. 1.3';\n                    //   }\n                    //   if (['9020e0'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 3 Model A+';\n                    //     result.version = result.version + ' - Rev. 1.3';\n                    //   }\n                    //   // Pi 2 Model B\n                    //   if (['a01040'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 2 Model B';\n                    //     result.version = result.version + ' - Rev. 1.0';\n                    //   }\n                    //   if (['a01041', 'a21041'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 2 Model B';\n                    //     result.version = result.version + ' - Rev. 1.1';\n                    //   }\n                    //   if (['a22042', 'a02042'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi 2 Model B';\n                    //     result.version = result.version + ' - Rev. 1.2';\n                    //   }\n\n                    //   // Compute Model\n                    //   if (['a02100'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi CM3+';\n                    //     result.version = result.version + ' - Rev 1.0';\n                    //   }\n                    //   if (['a020a0', 'a220a0'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi CM3';\n                    //     result.version = result.version + ' - Rev 1.0';\n                    //   }\n                    //   if (['900061'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi CM';\n                    //     result.version = result.version + ' - Rev 1.1';\n                    //   }\n\n                    //   // Pi Zero\n                    //   if (['900092', '920092'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Zero';\n                    //     result.version = result.version + ' - Rev 1.2';\n                    //   }\n                    //   if (['900093', '920093'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Zero';\n                    //     result.version = result.version + ' - Rev 1.3';\n                    //   }\n                    //   if (['9000c1'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Zero W';\n                    //     result.version = result.version + ' - Rev 1.1';\n                    //   }\n\n                    //   // A, B, A+ B+\n                    //   if (['0002', '0003'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model B';\n                    //     result.version = result.version + ' - Rev 1.0';\n                    //   }\n                    //   if (['0004', '0005', '0006', '000d', '000e', '000f'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model B';\n                    //     result.version = result.version + ' - Rev 2.0';\n                    //   }\n                    //   if (['0007', '0008', '0009'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model A';\n                    //     result.version = result.version + ' - Rev 2.0';\n                    //   }\n                    //   if (['0010'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model B+';\n                    //     result.version = result.version + ' - Rev 1.0';\n                    //   }\n                    //   if (['0012'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model A+';\n                    //     result.version = result.version + ' - Rev 1.0';\n                    //   }\n                    //   if (['0013', '900032'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model B+';\n                    //     result.version = result.version + ' - Rev 1.2';\n                    //   }\n                    //   if (['0015', '900021'].indexOf(result.version) >= 0) {\n                    //     result.model = result.model + ' - Pi Model A+';\n                    //     result.version = result.version + ' - Rev 1.1';\n                    //   }\n                    //   if (result.model.indexOf('Pi') !== -1 && result.version) {  // Pi, Pi Zero\n                    //     result.manufacturer = 'Raspberry Pi Foundation';\n                    //   }\n                    // }\n                  }\n                  if (callback) { callback(result); }\n                  resolve(result);\n                });\n              } else {\n                if (callback) { callback(result); }\n                resolve(result);\n              }\n            });\n          } else {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        });\n      }\n      if (_darwin) {\n        exec('ioreg -c IOPlatformExpertDevice -d 2', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().replace(/[<>\"]/g, '').split('\\n');\n            result.manufacturer = util.getValue(lines, 'manufacturer', '=', true);\n            result.model = util.getValue(lines, 'model', '=', true);\n            result.version = util.getValue(lines, 'version', '=', true);\n            result.serial = util.getValue(lines, 'ioplatformserialnumber', '=', true);\n            result.uuid = util.getValue(lines, 'ioplatformuuid', '=', true);\n            result.sku = util.getValue(lines, 'board-id', '=', true);\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_windows) {\n        try {\n          util.wmic('csproduct get /value').then((stdout, error) => {\n            if (!error) {\n              // let lines = stdout.split('\\r\\n').filter(line => line.trim() !== '').filter((line, idx) => idx > 0)[0].trim().split(/\\s\\s+/);\n              let lines = stdout.split('\\r\\n');\n              result.manufacturer = util.getValue(lines, 'vendor', '=');\n              result.model = util.getValue(lines, 'name', '=');\n              result.version = util.getValue(lines, 'version', '=');\n              result.serial = util.getValue(lines, 'identifyingnumber', '=');\n              result.uuid = util.getValue(lines, 'uuid', '=');\n              util.wmic('/namespace:\\\\\\\\root\\\\wmi path MS_SystemInformation get /value').then((stdout, error) => {\n                if (!error) {\n                  let lines = stdout.split('\\r\\n');\n                  result.sku = util.getValue(lines, 'systemsku', '=');\n                }\n                if (callback) { callback(result); }\n                resolve(result);\n              });\n            } else {\n              if (callback) { callback(result); }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.system = system;\n\nfunction bios(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      let result = {\n        vendor: '',\n        version: '',\n        releaseDate: '',\n        revision: '',\n      };\n      let cmd = '';\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        if (process.arch === 'arm') {\n          cmd = 'cat /proc/cpuinfo | grep Serial';\n\n        } else {\n          cmd = 'export LC_ALL=C; dmidecode --type 0 2>/dev/null; unset LC_ALL';\n        }\n        exec(cmd, function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          result.vendor = util.getValue(lines, 'Vendor');\n          result.version = util.getValue(lines, 'Version');\n          let datetime = util.getValue(lines, 'Release Date');\n          result.releaseDate = util.parseDateTime(datetime).date;\n          result.revision = util.getValue(lines, 'BIOS Revision');\n          // Non-Root values\n          const cmd = `echo -n \"bios_date: \"; cat /sys/devices/virtual/dmi/id/bios_date 2>/dev/null; echo;\n            echo -n \"bios_vendor: \"; cat /sys/devices/virtual/dmi/id/bios_vendor 2>/dev/null; echo;\n            echo -n \"bios_version: \"; cat /sys/devices/virtual/dmi/id/bios_version 2>/dev/null; echo;`;\n          try {\n            lines = execSync(cmd).toString().split('\\n');\n            result.vendor = !result.vendor ? util.getValue(lines, 'bios_vendor') : result.vendor;\n            result.version = !result.version ? util.getValue(lines, 'bios_version') : result.version;\n            datetime = util.getValue(lines, 'bios_date');\n            result.releaseDate = !result.releaseDate ? util.parseDateTime(datetime).date : result.releaseDate;\n          } catch (e) {\n            util.noop();\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_darwin) {\n        result.vendor = 'Apple Inc.';\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_sunos) {\n        result.vendor = 'Sun Microsystems';\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_windows) {\n        try {\n          util.wmic('bios get /value').then((stdout, error) => {\n            if (!error) {\n              let lines = stdout.toString().split('\\r\\n');\n              const description = util.getValue(lines, 'description', '=');\n              if (description.indexOf(' Version ') !== -1) {\n                // ... Phoenix ROM BIOS PLUS Version 1.10 A04\n                result.vendor = description.split(' Version ')[0].trim();\n                result.version = description.split(' Version ')[1].trim();\n              } else if (description.indexOf(' Ver: ') !== -1) {\n                // ... BIOS Date: 06/27/16 17:50:16 Ver: 1.4.5\n                result.vendor = util.getValue(lines, 'manufacturer', '=');\n                result.version = description.split(' Ver: ')[1].trim();\n              } else {\n                result.vendor = util.getValue(lines, 'manufacturer', '=');\n                result.version = util.getValue(lines, 'version', '=');\n              }\n              result.releaseDate = util.getValue(lines, 'releasedate', '=');\n              if (result.releaseDate.length >= 10) {\n                result.releaseDate = result.releaseDate.substr(0, 4) + '-' + result.releaseDate.substr(4, 2) + '-' + result.releaseDate.substr(6, 2);\n              }\n              result.revision = util.getValue(lines, 'buildnumber', '=');\n            }\n\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.bios = bios;\n\nfunction baseboard(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      let result = {\n        manufacturer: '',\n        model: '',\n        version: '',\n        serial: '-',\n        assetTag: '-',\n      };\n      let cmd = '';\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        if (process.arch === 'arm') {\n          cmd = 'cat /proc/cpuinfo | grep Serial';\n          // 'BCM2709', 'BCM2835', 'BCM2708' -->\n        } else {\n          cmd = 'export LC_ALL=C; dmidecode -t 2 2>/dev/null; unset LC_ALL';\n        }\n        exec(cmd, function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          result.manufacturer = util.getValue(lines, 'Manufacturer');\n          result.model = util.getValue(lines, 'Product Name');\n          result.version = util.getValue(lines, 'Version');\n          result.serial = util.getValue(lines, 'Serial Number');\n          result.assetTag = util.getValue(lines, 'Asset Tag');\n          // Non-Root values\n          const cmd = `echo -n \"board_asset_tag: \"; cat /sys/devices/virtual/dmi/id/board_asset_tag 2>/dev/null; echo;\n            echo -n \"board_name: \"; cat /sys/devices/virtual/dmi/id/board_name 2>/dev/null; echo;\n            echo -n \"board_serial: \"; cat /sys/devices/virtual/dmi/id/board_serial 2>/dev/null; echo;\n            echo -n \"board_vendor: \"; cat /sys/devices/virtual/dmi/id/board_vendor 2>/dev/null; echo;\n            echo -n \"board_version: \"; cat /sys/devices/virtual/dmi/id/board_version 2>/dev/null; echo;`;\n          try {\n            lines = execSync(cmd).toString().split('\\n');\n            result.manufacturer = !result.manufacturer ? util.getValue(lines, 'board_vendor') : result.manufacturer;\n            result.model = !result.model ? util.getValue(lines, 'board_name') : result.model;\n            result.version = !result.version ? util.getValue(lines, 'board_version') : result.version;\n            result.serial = !result.serial ? util.getValue(lines, 'board_serial') : result.serial;\n            result.assetTag = !result.assetTag ? util.getValue(lines, 'board_asset_tag') : result.assetTag;\n          } catch (e) {\n            util.noop();\n          }\n          if (result.serial.toLowerCase().indexOf('o.e.m.') !== -1) result.serial = '-';\n          if (result.assetTag.toLowerCase().indexOf('o.e.m.') !== -1) result.assetTag = '-';\n\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_darwin) {\n        exec('ioreg -c IOPlatformExpertDevice -d 2', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().replace(/[<>\"]/g, '').split('\\n');\n            result.manufacturer = util.getValue(lines, 'manufacturer', '=', true);\n            result.model = util.getValue(lines, 'model', '=', true);\n            result.version = util.getValue(lines, 'version', '=', true);\n            result.serial = util.getValue(lines, 'ioplatformserialnumber', '=', true);\n            result.assetTag = util.getValue(lines, 'board-id', '=', true);\n          }\n\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_windows) {\n        try {\n          util.wmic('baseboard get /value').then((stdout, error) => {\n            if (!error) {\n              let lines = stdout.toString().split('\\r\\n');\n\n              result.manufacturer = util.getValue(lines, 'manufacturer', '=');\n              result.model = util.getValue(lines, 'model', '=');\n              if (!result.model) {\n                result.model = util.getValue(lines, 'product', '=');\n              }\n              result.version = util.getValue(lines, 'version', '=');\n              result.serial = util.getValue(lines, 'serialnumber', '=');\n              result.assetTag = util.getValue(lines, 'partnumber', '=');\n              if (!result.assetTag) {\n                result.assetTag = util.getValue(lines, 'sku', '=');\n              }\n            }\n\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.baseboard = baseboard;\n\nfunction chassis(callback) {\n  const chassisTypes = ['Other',\n    'Unknown',\n    'Desktop',\n    'Low Profile Desktop',\n    'Pizza Box',\n    'Mini Tower',\n    'Tower',\n    'Portable',\n    'Laptop',\n    'Notebook',\n    'Hand Held',\n    'Docking Station',\n    'All in One',\n    'Sub Notebook',\n    'Space-Saving',\n    'Lunch Box',\n    'Main System Chassis',\n    'Expansion Chassis',\n    'SubChassis',\n    'Bus Expansion Chassis',\n    'Peripheral Chassis',\n    'Storage Chassis',\n    'Rack Mount Chassis',\n    'Sealed-Case PC',\n    'Multi-System Chassis',\n    'Compact PCI',\n    'Advanced TCA',\n    'Blade',\n    'Blade Enclosure',\n    'Tablet',\n    'Concertible',\n    'Detachable',\n    'IoT Gateway ',\n    'Embedded PC',\n    'Mini PC',\n    'Stick PC',\n  ];\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      let result = {\n        manufacturer: '',\n        model: '',\n        type: '',\n        version: '',\n        serial: '-',\n        assetTag: '-',\n        sku: '',\n      };\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        const cmd = `echo -n \"chassis_asset_tag: \"; cat /sys/devices/virtual/dmi/id/chassis_asset_tag 2>/dev/null; echo;\n            echo -n \"chassis_serial: \"; cat /sys/devices/virtual/dmi/id/chassis_serial 2>/dev/null; echo;\n            echo -n \"chassis_type: \"; cat /sys/devices/virtual/dmi/id/chassis_type 2>/dev/null; echo;\n            echo -n \"chassis_vendor: \"; cat /sys/devices/virtual/dmi/id/chassis_vendor 2>/dev/null; echo;\n            echo -n \"chassis_version: \"; cat /sys/devices/virtual/dmi/id/chassis_version 2>/dev/null; echo;`;\n        exec(cmd, function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          result.manufacturer = util.getValue(lines, 'chassis_vendor');\n          const ctype = parseInt(util.getValue(lines, 'chassis_type').replace(/\\D/g, ''));\n          result.type = (ctype && !isNaN(ctype) && ctype < chassisTypes.length) ? chassisTypes[ctype - 1] : '';\n          result.version = util.getValue(lines, 'chassis_version');\n          result.serial = util.getValue(lines, 'chassis_serial');\n          result.assetTag = util.getValue(lines, 'chassis_asset_tag');\n          if (result.serial.toLowerCase().indexOf('o.e.m.') !== -1) result.serial = '-';\n          if (result.assetTag.toLowerCase().indexOf('o.e.m.') !== -1) result.assetTag = '-';\n\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_darwin) {\n        exec('ioreg -c IOPlatformExpertDevice -d 2', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().replace(/[<>\"]/g, '').split('\\n');\n            result.manufacturer = util.getValue(lines, 'manufacturer', '=', true);\n            result.model = util.getValue(lines, 'model', '=', true);\n            result.version = util.getValue(lines, 'version', '=', true);\n            result.serial = util.getValue(lines, 'ioplatformserialnumber', '=', true);\n            result.assetTag = util.getValue(lines, 'board-id', '=', true);\n          }\n\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_windows) {\n        try {\n          util.wmic('path Win32_SystemEnclosure get /value').then((stdout, error) => {\n            if (!error) {\n              let lines = stdout.toString().split('\\r\\n');\n\n              result.manufacturer = util.getValue(lines, 'manufacturer', '=');\n              result.model = util.getValue(lines, 'model', '=');\n              const ctype = parseInt(util.getValue(lines, 'ChassisTypes', '=').replace(/\\D/g, ''));\n              result.type = (ctype && !isNaN(ctype) && ctype < chassisTypes.length) ? chassisTypes[ctype - 1] : '';\n              result.version = util.getValue(lines, 'version', '=');\n              result.serial = util.getValue(lines, 'serialnumber', '=');\n              result.assetTag = util.getValue(lines, 'partnumber', '=');\n              result.sku = util.getValue(lines, 'sku', '=');\n            }\n\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.chassis = chassis;\n\n"]},"metadata":{},"sourceType":"script"}