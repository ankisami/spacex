{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\nvar debug = require('debug')('pm2:daemon');\n\nvar pkg = require('../package.json');\n\nvar cst = require('../constants.js');\n\nvar rpc = require('pm2-axon-rpc');\n\nvar axon = require('pm2-axon');\n\nvar domain = require('domain');\n\nvar Utility = require('./Utility.js');\n\nvar util = require('util');\n\nvar fs = require('fs');\n\nvar God = require('./God');\n\nvar eachLimit = require('async/eachLimit');\n\nvar fmt = require('./tools/fmt.js');\n\nvar semver = require('semver');\n\nvar Daemon = module.exports = function (opts) {\n  if (!opts) opts = {};\n  this.ignore_signals = opts.ignore_signals || false;\n  this.rpc_socket_ready = false;\n  this.pub_socket_ready = false;\n  this.pub_socket_file = opts.pub_socket_file || cst.DAEMON_PUB_PORT;\n  this.rpc_socket_file = opts.rpc_socket_file || cst.DAEMON_RPC_PORT;\n  this.pid_path = opts.pid_file || cst.PM2_PID_FILE_PATH;\n};\n\nDaemon.prototype.start = function () {\n  var that = this;\n  var d = domain.create();\n  d.once('error', function (err) {\n    fmt.sep();\n    fmt.title('PM2 global error caught');\n    fmt.field('Time', new Date());\n    console.error(err.message);\n    console.error(err.stack);\n    fmt.sep();\n    console.error('[PM2] Resurrecting PM2');\n    var path = cst.IS_WINDOWS ? __dirname + '/../bin/pm2' : process.env['_'];\n\n    var fork_new_pm2 = require('child_process').spawn('node', [path, 'update'], {\n      detached: true,\n      stdio: 'inherit'\n    });\n\n    fork_new_pm2.on('close', function () {\n      console.log('PM2 successfully forked');\n      process.exit(0);\n    });\n  });\n  d.run(function () {\n    that.innerStart();\n  });\n};\n\nDaemon.prototype.innerStart = function (cb) {\n  var that = this;\n  if (!cb) cb = function () {\n    fmt.sep();\n    fmt.title('New PM2 Daemon started');\n    fmt.field('Time', new Date());\n    fmt.field('PM2 version', pkg.version);\n    fmt.field('Node.js version', process.versions.node);\n    fmt.field('Current arch', process.arch);\n    fmt.field('PM2 home', cst.PM2_HOME);\n    fmt.field('PM2 PID file', that.pid_path);\n    fmt.field('RPC socket file', that.rpc_socket_file);\n    fmt.field('BUS socket file', that.pub_socket_file);\n    fmt.field('Application log path', cst.DEFAULT_LOG_PATH);\n    fmt.field('Worker Interval', cst.WORKER_INTERVAL);\n    fmt.field('Process dump file', cst.DUMP_FILE_PATH);\n    fmt.field('Concurrent actions', cst.CONCURRENT_ACTIONS);\n    fmt.field('SIGTERM timeout', cst.KILL_TIMEOUT);\n    fmt.sep();\n  }; // Write Daemon PID into file\n\n  try {\n    fs.writeFileSync(that.pid_path, process.pid.toString());\n  } catch (e) {\n    console.error(e.stack || e);\n  }\n\n  if (this.ignore_signals != true) this.handleSignals();\n  /**\n   * Pub system for real time notifications\n   */\n\n  this.pub = axon.socket('pub-emitter');\n  this.pub_socket = this.pub.bind(this.pub_socket_file);\n  this.pub_socket.once('bind', function () {\n    fs.chmod(that.pub_socket_file, '775', function (e) {\n      if (e) console.error(e);\n\n      try {\n        if (process.env.PM2_SOCKET_USER && process.env.PM2_SOCKET_GROUP) fs.chown(that.pub_socket_file, parseInt(process.env.PM2_SOCKET_USER), parseInt(process.env.PM2_SOCKET_GROUP), function (e) {\n          if (e) console.error(e);\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    });\n    that.pub_socket_ready = true;\n    that.sendReady(cb);\n  });\n  /**\n   * Rep/Req - RPC system to interact with God\n   */\n\n  this.rep = axon.socket('rep');\n  var server = new rpc.Server(this.rep);\n  this.rpc_socket = this.rep.bind(this.rpc_socket_file);\n  this.rpc_socket.once('bind', function () {\n    fs.chmod(that.rpc_socket_file, '775', function (e) {\n      if (e) console.error(e);\n\n      try {\n        if (process.env.PM2_SOCKET_USER && process.env.PM2_SOCKET_GROUP) fs.chown(that.rpc_socket_file, parseInt(process.env.PM2_SOCKET_USER), parseInt(process.env.PM2_SOCKET_GROUP), function (e) {\n          if (e) console.error(e);\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    });\n    that.rpc_socket_ready = true;\n    that.sendReady(cb);\n  });\n  /**\n   * Memory Snapshot\n   */\n\n  function profile(type, msg, cb) {\n    if (semver.satisfies(process.version, '< 8')) return cb(null, {\n      error: 'Node.js is not on right version'\n    });\n    var cmd;\n\n    if (type === 'cpu') {\n      cmd = {\n        enable: 'Profiler.enable',\n        start: 'Profiler.start',\n        stop: 'Profiler.stop',\n        disable: 'Profiler.disable'\n      };\n    }\n\n    if (type == 'mem') {\n      cmd = {\n        enable: 'HeapProfiler.enable',\n        start: 'HeapProfiler.startSampling',\n        stop: 'HeapProfiler.stopSampling',\n        disable: 'HeapProfiler.disable'\n      };\n    }\n\n    const inspector = require('inspector');\n\n    var session = new inspector.Session();\n    session.connect();\n    var timeout = msg.timeout || 5000;\n    session.post(cmd.enable, (err, data) => {\n      if (err) return cb(null, {\n        error: err.message || err\n      });\n      console.log(`Starting ${cmd.start}`);\n      session.post(cmd.start, (err, data) => {\n        if (err) return cb(null, {\n          error: err.message || err\n        });\n        setTimeout(() => {\n          session.post(cmd.stop, (err, data) => {\n            if (err) return cb(null, {\n              error: err.message || err\n            });\n            const profile = data.profile;\n            console.log(`Stopping ${cmd.stop}`);\n            session.post(cmd.disable);\n            fs.writeFile(msg.pwd, JSON.stringify(profile), err => {\n              if (err) return cb(null, {\n                error: err.message || err\n              });\n              return cb(null, {\n                file: msg.pwd\n              });\n            });\n          });\n        }, timeout);\n      });\n    });\n  }\n\n  server.expose({\n    killMe: that.close.bind(this),\n    profileCPU: profile.bind(this, 'cpu'),\n    profileMEM: profile.bind(this, 'mem'),\n    prepare: God.prepare,\n    launchSysMonitoring: God.launchSysMonitoring,\n    getMonitorData: God.getMonitorData,\n    getSystemData: God.getSystemData,\n    startProcessId: God.startProcessId,\n    stopProcessId: God.stopProcessId,\n    restartProcessId: God.restartProcessId,\n    deleteProcessId: God.deleteProcessId,\n    sendLineToStdin: God.sendLineToStdin,\n    softReloadProcessId: God.softReloadProcessId,\n    reloadProcessId: God.reloadProcessId,\n    duplicateProcessId: God.duplicateProcessId,\n    resetMetaProcessId: God.resetMetaProcessId,\n    stopWatch: God.stopWatch,\n    startWatch: God.startWatch,\n    toggleWatch: God.toggleWatch,\n    notifyByProcessId: God.notifyByProcessId,\n    notifyKillPM2: God.notifyKillPM2,\n    monitor: God.monitor,\n    unmonitor: God.unmonitor,\n    msgProcess: God.msgProcess,\n    sendDataToProcessId: God.sendDataToProcessId,\n    sendSignalToProcessId: God.sendSignalToProcessId,\n    sendSignalToProcessName: God.sendSignalToProcessName,\n    ping: God.ping,\n    getVersion: God.getVersion,\n    getReport: God.getReport,\n    reloadLogs: God.reloadLogs\n  });\n  this.startLogic();\n};\n\nDaemon.prototype.close = function (opts, cb) {\n  var that = this;\n  God.bus.emit('pm2:kill', {\n    status: 'killed',\n    msg: 'pm2 has been killed via CLI'\n  });\n  if (God.system_infos_proc !== null) God.system_infos_proc.kill();\n  /**\n   * Cleanly kill pm2\n   */\n\n  that.rpc_socket.close(function () {\n    that.pub_socket.close(function () {\n      // notify cli that the daemon is shuting down (only under unix since windows doesnt handle signals)\n      if (cst.IS_WINDOWS === false) {\n        try {\n          process.kill(parseInt(opts.pid), 'SIGQUIT');\n        } catch (e) {\n          console.error('Could not send SIGQUIT to CLI');\n        }\n      }\n\n      try {\n        fs.unlinkSync(that.pid_path);\n      } catch (e) {}\n\n      console.log('PM2 successfully stopped');\n      setTimeout(function () {\n        process.exit(cst.SUCCESS_EXIT);\n      }, 2);\n    });\n  });\n};\n\nDaemon.prototype.handleSignals = function () {\n  var that = this;\n  process.on('SIGTERM', that.gracefullExit.bind(this));\n  process.on('SIGINT', that.gracefullExit.bind(this));\n  process.on('SIGHUP', function () {});\n  process.on('SIGQUIT', that.gracefullExit.bind(this));\n  process.on('SIGUSR2', function () {\n    God.reloadLogs({}, function () {});\n  });\n};\n\nDaemon.prototype.sendReady = function (cb) {\n  // Send ready message to Client\n  if (this.rpc_socket_ready == true && this.pub_socket_ready == true) {\n    cb(null, {\n      pid: process.pid,\n      pm2_version: pkg.version\n    });\n    if (typeof process.send != 'function') return false;\n    process.send({\n      online: true,\n      success: true,\n      pid: process.pid,\n      pm2_version: pkg.version\n    });\n  }\n\n  ;\n};\n\nDaemon.prototype.gracefullExit = function () {\n  var that = this; // never execute multiple gracefullExit simultaneously\n  // this can lead to loss of some apps in dump file\n\n  if (this.isExiting) return;\n  this.isExiting = true;\n  God.bus.emit('pm2:kill', {\n    status: 'killed',\n    msg: 'pm2 has been killed by SIGNAL'\n  });\n  console.log('pm2 has been killed by signal, dumping process list before exit...');\n  if (God.system_infos_proc !== null) God.system_infos_proc.kill();\n  God.dumpProcessList(function () {\n    var processes = God.getFormatedProcesses();\n    eachLimit(processes, 1, function (proc, next) {\n      console.log('Deleting process %s', proc.pm2_env.pm_id);\n      God.deleteProcessId(proc.pm2_env.pm_id, function () {\n        return next();\n      });\n    }, function (err) {\n      try {\n        fs.unlinkSync(that.pid_path);\n      } catch (e) {}\n\n      setTimeout(function () {\n        that.isExiting = false;\n        console.log('Exited peacefully');\n        process.exit(cst.SUCCESS_EXIT);\n      }, 2);\n    });\n  });\n};\n\nDaemon.prototype.startLogic = function () {\n  var that = this;\n  /**\n   * Action treatment specifics\n   * Attach actions to pm2_env.axm_actions variables (name + options)\n   */\n\n  God.bus.on('axm:action', function axmActions(msg) {\n    var pm2_env = msg.process;\n    var exists = false;\n    var axm_action = msg.data;\n    if (!pm2_env || !God.clusters_db[pm2_env.pm_id]) return console.error('AXM ACTION Unknown id %s', pm2_env.pm_id);\n    if (!God.clusters_db[pm2_env.pm_id].pm2_env.axm_actions) God.clusters_db[pm2_env.pm_id].pm2_env.axm_actions = [];\n    God.clusters_db[pm2_env.pm_id].pm2_env.axm_actions.forEach(function (actions) {\n      if (actions.action_name == axm_action.action_name) exists = true;\n    });\n\n    if (exists === false) {\n      debug('Adding action', axm_action);\n      God.clusters_db[pm2_env.pm_id].pm2_env.axm_actions.push(axm_action);\n    }\n\n    msg = null;\n  });\n  /**\n   * Configure module\n   */\n\n  God.bus.on('axm:option:configuration', function axmMonitor(msg) {\n    if (!msg.process) return console.error('[axm:option:configuration] no process defined');\n    if (!God.clusters_db[msg.process.pm_id]) return console.error('[axm:option:configuration] Unknown id %s', msg.process.pm_id);\n\n    try {\n      // Application Name nverride\n      if (msg.data.name) God.clusters_db[msg.process.pm_id].pm2_env.name = msg.data.name;\n      Object.keys(msg.data).forEach(function (conf_key) {\n        God.clusters_db[msg.process.pm_id].pm2_env.axm_options[conf_key] = Utility.clone(msg.data[conf_key]);\n      });\n    } catch (e) {\n      console.error(e.stack || e);\n    }\n\n    msg = null;\n  });\n  /**\n   * Process monitoring data (probes)\n   */\n\n  God.bus.on('axm:monitor', function axmMonitor(msg) {\n    if (!msg.process) return console.error('[axm:monitor] no process defined');\n    if (!msg.process || !God.clusters_db[msg.process.pm_id]) return console.error('AXM MONITOR Unknown id %s', msg.process.pm_id);\n\n    util._extend(God.clusters_db[msg.process.pm_id].pm2_env.axm_monitor, Utility.clone(msg.data));\n\n    msg = null;\n  });\n  /**\n   * Broadcast messages\n   */\n\n  God.bus.onAny(function (event, data_v) {\n    if (['axm:action', 'axm:monitor', 'axm:option:setPID', 'axm:option:configuration'].indexOf(event) > -1) {\n      data_v = null;\n      return false;\n    }\n\n    that.pub.emit(event, Utility.clone(data_v));\n    data_v = null;\n  });\n};\n\nif (require.main === module) {\n  process.title = process.env.PM2_DAEMON_TITLE || 'PM2 v' + pkg.version + ': God Daemon (' + process.env.PM2_HOME + ')';\n  var daemon = new Daemon();\n  daemon.start();\n}","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/Daemon.js"],"names":["debug","require","pkg","cst","rpc","axon","domain","Utility","util","fs","God","eachLimit","fmt","semver","Daemon","module","exports","opts","ignore_signals","rpc_socket_ready","pub_socket_ready","pub_socket_file","DAEMON_PUB_PORT","rpc_socket_file","DAEMON_RPC_PORT","pid_path","pid_file","PM2_PID_FILE_PATH","prototype","start","that","d","create","once","err","sep","title","field","Date","console","error","message","stack","path","IS_WINDOWS","__dirname","process","env","fork_new_pm2","spawn","detached","stdio","on","log","exit","run","innerStart","cb","version","versions","node","arch","PM2_HOME","DEFAULT_LOG_PATH","WORKER_INTERVAL","DUMP_FILE_PATH","CONCURRENT_ACTIONS","KILL_TIMEOUT","writeFileSync","pid","toString","e","handleSignals","pub","socket","pub_socket","bind","chmod","PM2_SOCKET_USER","PM2_SOCKET_GROUP","chown","parseInt","sendReady","rep","server","Server","rpc_socket","profile","type","msg","satisfies","cmd","enable","stop","disable","inspector","session","Session","connect","timeout","post","data","setTimeout","writeFile","pwd","JSON","stringify","file","expose","killMe","close","profileCPU","profileMEM","prepare","launchSysMonitoring","getMonitorData","getSystemData","startProcessId","stopProcessId","restartProcessId","deleteProcessId","sendLineToStdin","softReloadProcessId","reloadProcessId","duplicateProcessId","resetMetaProcessId","stopWatch","startWatch","toggleWatch","notifyByProcessId","notifyKillPM2","monitor","unmonitor","msgProcess","sendDataToProcessId","sendSignalToProcessId","sendSignalToProcessName","ping","getVersion","getReport","reloadLogs","startLogic","bus","emit","status","system_infos_proc","kill","unlinkSync","SUCCESS_EXIT","gracefullExit","pm2_version","send","online","success","isExiting","dumpProcessList","processes","getFormatedProcesses","proc","next","pm2_env","pm_id","axmActions","exists","axm_action","clusters_db","axm_actions","forEach","actions","action_name","push","axmMonitor","name","Object","keys","conf_key","axm_options","clone","_extend","axm_monitor","onAny","event","data_v","indexOf","main","PM2_DAEMON_TITLE","daemon"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n\nvar debug        = require('debug')('pm2:daemon');\nvar pkg          = require('../package.json');\nvar cst          = require('../constants.js');\nvar rpc          = require('pm2-axon-rpc');\nvar axon         = require('pm2-axon');\nvar domain       = require('domain');\nvar Utility      = require('./Utility.js');\nvar util         = require('util');\nvar fs           = require('fs');\nvar God          = require('./God');\nvar eachLimit    = require('async/eachLimit');\nvar fmt          = require('./tools/fmt.js');\nvar semver       = require('semver');\n\nvar Daemon = module.exports = function(opts) {\n  if (!opts) opts = {};\n\n  this.ignore_signals = opts.ignore_signals || false;\n  this.rpc_socket_ready = false;\n  this.pub_socket_ready = false;\n\n  this.pub_socket_file = opts.pub_socket_file || cst.DAEMON_PUB_PORT;\n  this.rpc_socket_file = opts.rpc_socket_file || cst.DAEMON_RPC_PORT;\n\n  this.pid_path        = opts.pid_file || cst.PM2_PID_FILE_PATH;\n};\n\nDaemon.prototype.start = function() {\n  var that = this;\n  var d = domain.create();\n\n  d.once('error', function(err) {\n    fmt.sep();\n    fmt.title('PM2 global error caught');\n    fmt.field('Time', new Date());\n    console.error(err.message);\n    console.error(err.stack);\n    fmt.sep();\n\n    console.error('[PM2] Resurrecting PM2');\n\n\t\tvar path = cst.IS_WINDOWS ? __dirname + '/../bin/pm2' : process.env['_'];\n    var fork_new_pm2 = require('child_process').spawn('node', [path, 'update'], {\n      detached: true,\n      stdio: 'inherit'\n    });\n\n    fork_new_pm2.on('close', function() {\n      console.log('PM2 successfully forked');\n      process.exit(0);\n    })\n\n  });\n\n  d.run(function() {\n    that.innerStart();\n  });\n}\n\nDaemon.prototype.innerStart = function(cb) {\n  var that = this;\n\n  if (!cb) cb = function() {\n    fmt.sep();\n    fmt.title('New PM2 Daemon started');\n    fmt.field('Time', new Date());\n    fmt.field('PM2 version', pkg.version);\n    fmt.field('Node.js version', process.versions.node);\n    fmt.field('Current arch', process.arch);\n    fmt.field('PM2 home', cst.PM2_HOME);\n    fmt.field('PM2 PID file', that.pid_path);\n    fmt.field('RPC socket file', that.rpc_socket_file);\n    fmt.field('BUS socket file', that.pub_socket_file);\n    fmt.field('Application log path', cst.DEFAULT_LOG_PATH);\n    fmt.field('Worker Interval', cst.WORKER_INTERVAL);\n    fmt.field('Process dump file', cst.DUMP_FILE_PATH);\n    fmt.field('Concurrent actions', cst.CONCURRENT_ACTIONS);\n    fmt.field('SIGTERM timeout', cst.KILL_TIMEOUT);\n    fmt.sep();\n  };\n\n  // Write Daemon PID into file\n  try {\n    fs.writeFileSync(that.pid_path, process.pid.toString());\n  } catch (e) {\n    console.error(e.stack || e);\n  }\n\n  if (this.ignore_signals != true)\n    this.handleSignals();\n\n  /**\n   * Pub system for real time notifications\n   */\n  this.pub    = axon.socket('pub-emitter');\n\n  this.pub_socket = this.pub.bind(this.pub_socket_file);\n\n  this.pub_socket.once('bind', function() {\n    fs.chmod(that.pub_socket_file, '775', function(e) {\n      if (e) console.error(e);\n\n      try {\n        if (process.env.PM2_SOCKET_USER && process.env.PM2_SOCKET_GROUP)\n          fs.chown(that.pub_socket_file,\n                   parseInt(process.env.PM2_SOCKET_USER),\n                   parseInt(process.env.PM2_SOCKET_GROUP), function(e) {\n                     if (e) console.error(e);\n                   });\n      } catch(e) {\n        console.error(e);\n      }\n    });\n\n    that.pub_socket_ready = true;\n    that.sendReady(cb);\n  });\n\n  /**\n   * Rep/Req - RPC system to interact with God\n   */\n  this.rep    = axon.socket('rep');\n\n  var server = new rpc.Server(this.rep);\n\n  this.rpc_socket = this.rep.bind(this.rpc_socket_file);\n\n  this.rpc_socket.once('bind', function() {\n    fs.chmod(that.rpc_socket_file, '775', function(e) {\n      if (e) console.error(e);\n\n      try {\n        if (process.env.PM2_SOCKET_USER && process.env.PM2_SOCKET_GROUP)\n          fs.chown(that.rpc_socket_file,\n                   parseInt(process.env.PM2_SOCKET_USER),\n                   parseInt(process.env.PM2_SOCKET_GROUP), function(e) {\n                     if (e) console.error(e);\n                   });\n      } catch(e) {\n        console.error(e);\n      }\n    });\n\n\n    that.rpc_socket_ready = true;\n    that.sendReady(cb);\n  });\n\n\n  /**\n   * Memory Snapshot\n   */\n  function profile(type, msg, cb) {\n    if (semver.satisfies(process.version, '< 8'))\n      return cb(null, { error: 'Node.js is not on right version' })\n\n    var cmd\n\n    if (type === 'cpu') {\n      cmd = {\n        enable: 'Profiler.enable',\n        start: 'Profiler.start',\n        stop: 'Profiler.stop',\n        disable: 'Profiler.disable'\n      }\n    }\n    if (type == 'mem') {\n      cmd = {\n        enable: 'HeapProfiler.enable',\n        start: 'HeapProfiler.startSampling',\n        stop: 'HeapProfiler.stopSampling',\n        disable: 'HeapProfiler.disable'\n      }\n    }\n\n    const inspector = require('inspector')\n    var session = new inspector.Session()\n\n    session.connect()\n\n    var timeout = msg.timeout || 5000\n\n    session.post(cmd.enable, (err, data) => {\n      if (err) return cb(null, { error: err.message || err })\n\n      console.log(`Starting ${cmd.start}`)\n      session.post(cmd.start, (err, data) => {\n        if (err) return cb(null, { error: err.message || err })\n\n        setTimeout(() => {\n          session.post(cmd.stop, (err, data) => {\n            if (err) return cb(null, { error: err.message || err })\n            const profile = data.profile\n\n            console.log(`Stopping ${cmd.stop}`)\n            session.post(cmd.disable)\n\n            fs.writeFile(msg.pwd, JSON.stringify(profile), (err) => {\n              if (err) return cb(null, { error: err.message || err })\n              return cb(null, { file : msg.pwd })\n            })\n          })\n        }, timeout)\n      })\n    })\n  }\n\n  server.expose({\n    killMe                  : that.close.bind(this),\n    profileCPU              : profile.bind(this, 'cpu'),\n    profileMEM              : profile.bind(this, 'mem'),\n    prepare                 : God.prepare,\n    launchSysMonitoring     : God.launchSysMonitoring,\n    getMonitorData          : God.getMonitorData,\n    getSystemData           : God.getSystemData,\n\n    startProcessId          : God.startProcessId,\n    stopProcessId           : God.stopProcessId,\n    restartProcessId        : God.restartProcessId,\n    deleteProcessId         : God.deleteProcessId,\n\n    sendLineToStdin         : God.sendLineToStdin,\n    softReloadProcessId     : God.softReloadProcessId,\n    reloadProcessId         : God.reloadProcessId,\n    duplicateProcessId      : God.duplicateProcessId,\n    resetMetaProcessId      : God.resetMetaProcessId,\n    stopWatch               : God.stopWatch,\n    startWatch              : God.startWatch,\n    toggleWatch             : God.toggleWatch,\n    notifyByProcessId       : God.notifyByProcessId,\n\n    notifyKillPM2           : God.notifyKillPM2,\n    monitor                 : God.monitor,\n    unmonitor               : God.unmonitor,\n\n    msgProcess              : God.msgProcess,\n    sendDataToProcessId     : God.sendDataToProcessId,\n    sendSignalToProcessId   : God.sendSignalToProcessId,\n    sendSignalToProcessName : God.sendSignalToProcessName,\n\n    ping                    : God.ping,\n    getVersion              : God.getVersion,\n    getReport               : God.getReport,\n    reloadLogs              : God.reloadLogs\n  });\n\n  this.startLogic();\n}\n\nDaemon.prototype.close = function(opts, cb) {\n  var that = this;\n\n  God.bus.emit('pm2:kill', {\n    status : 'killed',\n    msg    : 'pm2 has been killed via CLI'\n  });\n\n  if (God.system_infos_proc !== null)\n    God.system_infos_proc.kill()\n\n  /**\n   * Cleanly kill pm2\n   */\n  that.rpc_socket.close(function() {\n    that.pub_socket.close(function() {\n\n      // notify cli that the daemon is shuting down (only under unix since windows doesnt handle signals)\n      if (cst.IS_WINDOWS === false) {\n        try {\n          process.kill(parseInt(opts.pid), 'SIGQUIT');\n        } catch(e) {\n          console.error('Could not send SIGQUIT to CLI');\n        }\n      }\n\n      try {\n        fs.unlinkSync(that.pid_path);\n      } catch(e) {}\n\n      console.log('PM2 successfully stopped');\n      setTimeout(function() {\n        process.exit(cst.SUCCESS_EXIT);\n      }, 2);\n    });\n  });\n}\n\nDaemon.prototype.handleSignals = function() {\n  var that = this;\n\n  process.on('SIGTERM', that.gracefullExit.bind(this));\n  process.on('SIGINT', that.gracefullExit.bind(this));\n  process.on('SIGHUP', function() {});\n  process.on('SIGQUIT', that.gracefullExit.bind(this));\n  process.on('SIGUSR2', function() {\n    God.reloadLogs({}, function() {});\n  });\n}\n\nDaemon.prototype.sendReady = function(cb) {\n  // Send ready message to Client\n  if (this.rpc_socket_ready == true && this.pub_socket_ready == true) {\n    cb(null, {\n      pid         : process.pid,\n      pm2_version : pkg.version\n    });\n    if (typeof(process.send) != 'function')\n      return false;\n\n    process.send({\n      online      : true,\n      success     : true,\n      pid         : process.pid,\n      pm2_version : pkg.version\n    });\n  };\n}\n\nDaemon.prototype.gracefullExit = function() {\n  var that = this;\n\n  // never execute multiple gracefullExit simultaneously\n  // this can lead to loss of some apps in dump file\n  if (this.isExiting) return\n\n  this.isExiting = true\n\n  God.bus.emit('pm2:kill', {\n    status : 'killed',\n    msg    : 'pm2 has been killed by SIGNAL'\n  });\n\n  console.log('pm2 has been killed by signal, dumping process list before exit...');\n\n  if (God.system_infos_proc !== null)\n    God.system_infos_proc.kill()\n\n  God.dumpProcessList(function() {\n\n    var processes = God.getFormatedProcesses();\n\n    eachLimit(processes, 1, function(proc, next) {\n      console.log('Deleting process %s', proc.pm2_env.pm_id);\n      God.deleteProcessId(proc.pm2_env.pm_id, function() {\n        return next();\n      });\n    }, function(err) {\n      try {\n        fs.unlinkSync(that.pid_path);\n      } catch(e) {}\n      setTimeout(function() {\n        that.isExiting = false\n        console.log('Exited peacefully');\n        process.exit(cst.SUCCESS_EXIT);\n      }, 2);\n    });\n  });\n}\n\nDaemon.prototype.startLogic = function() {\n  var that = this;\n\n  /**\n   * Action treatment specifics\n   * Attach actions to pm2_env.axm_actions variables (name + options)\n   */\n  God.bus.on('axm:action', function axmActions(msg) {\n    var pm2_env = msg.process;\n    var exists  = false;\n    var axm_action = msg.data;\n\n    if (!pm2_env || !God.clusters_db[pm2_env.pm_id])\n      return console.error('AXM ACTION Unknown id %s', pm2_env.pm_id);\n\n    if (!God.clusters_db[pm2_env.pm_id].pm2_env.axm_actions)\n      God.clusters_db[pm2_env.pm_id].pm2_env.axm_actions = [];\n\n    God.clusters_db[pm2_env.pm_id].pm2_env.axm_actions.forEach(function(actions) {\n      if (actions.action_name == axm_action.action_name)\n        exists = true;\n    });\n\n    if (exists === false) {\n      debug('Adding action', axm_action);\n      God.clusters_db[pm2_env.pm_id].pm2_env.axm_actions.push(axm_action);\n    }\n    msg = null;\n  });\n\n  /**\n   * Configure module\n   */\n  God.bus.on('axm:option:configuration', function axmMonitor(msg) {\n    if (!msg.process)\n      return console.error('[axm:option:configuration] no process defined');\n\n    if (!God.clusters_db[msg.process.pm_id])\n      return console.error('[axm:option:configuration] Unknown id %s', msg.process.pm_id);\n\n    try {\n      // Application Name nverride\n      if (msg.data.name)\n        God.clusters_db[msg.process.pm_id].pm2_env.name = msg.data.name;\n\n      Object.keys(msg.data).forEach(function(conf_key) {\n        God.clusters_db[msg.process.pm_id].pm2_env.axm_options[conf_key] = Utility.clone(msg.data[conf_key]);\n      });\n    } catch(e) {\n      console.error(e.stack || e);\n    }\n    msg = null;\n  });\n\n  /**\n   * Process monitoring data (probes)\n   */\n  God.bus.on('axm:monitor', function axmMonitor(msg) {\n    if (!msg.process)\n      return console.error('[axm:monitor] no process defined');\n\n    if (!msg.process || !God.clusters_db[msg.process.pm_id])\n      return console.error('AXM MONITOR Unknown id %s', msg.process.pm_id);\n\n    util._extend(God.clusters_db[msg.process.pm_id].pm2_env.axm_monitor, Utility.clone(msg.data));\n    msg = null;\n  });\n\n  /**\n   * Broadcast messages\n   */\n  God.bus.onAny(function(event, data_v) {\n    if (['axm:action',\n         'axm:monitor',\n         'axm:option:setPID',\n         'axm:option:configuration'].indexOf(event) > -1) {\n      data_v = null;\n      return false;\n    }\n    that.pub.emit(event, Utility.clone(data_v));\n    data_v = null;\n  });\n};\n\nif (require.main === module) {\n  process.title = process.env.PM2_DAEMON_TITLE || 'PM2 v' + pkg.version + ': God Daemon (' + process.env.PM2_HOME + ')';\n\n  var daemon = new Daemon();\n\n  daemon.start();\n}\n"]},"metadata":{},"sourceType":"script"}