{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar debug = require('debug')('axon:queue');\n/**\n * Queue plugin.\n *\n * Provides an `.enqueue()` method to the `sock`. Messages\n * passed to `enqueue` will be buffered until the next\n * `connect` event is emitted.\n *\n * Emits:\n *\n *  - `drop` (msg) when a message is dropped\n *  - `flush` (msgs) when the queue is flushed\n *\n * @param {Object} options\n * @api private\n */\n\n\nmodule.exports = function (options) {\n  options = options || {};\n  return function (sock) {\n    /**\n     * Message buffer.\n     */\n    sock.queue = [];\n    /**\n     * Flush `buf` on `connect`.\n     */\n\n    sock.on('connect', function () {\n      var prev = sock.queue;\n      var len = prev.length;\n      sock.queue = [];\n      debug('flush %d messages', len);\n\n      for (var i = 0; i < len; ++i) {\n        this.send.apply(this, prev[i]);\n      }\n\n      sock.emit('flush', prev);\n    });\n    /**\n     * Pushes `msg` into `buf`.\n     */\n\n    sock.enqueue = function (msg) {\n      var hwm = sock.settings.hwm;\n      if (sock.queue.length >= hwm) return drop(msg);\n      sock.queue.push(msg);\n    };\n    /**\n     * Drop the given `msg`.\n     */\n\n\n    function drop(msg) {\n      debug('drop');\n      sock.emit('drop', msg);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/@pm2/agent/node_modules/pm2-axon/lib/plugins/queue.js"],"names":["debug","require","module","exports","options","sock","queue","on","prev","len","length","i","send","apply","emit","enqueue","msg","hwm","settings","drop","push"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,YAAjB,CAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAiB;AAChCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAO,UAASC,IAAT,EAAc;AAEnB;AACJ;AACA;AAEIA,IAAAA,IAAI,CAACC,KAAL,GAAa,EAAb;AAEA;AACJ;AACA;;AAEID,IAAAA,IAAI,CAACE,EAAL,CAAQ,SAAR,EAAmB,YAAU;AAC3B,UAAIC,IAAI,GAAGH,IAAI,CAACC,KAAhB;AACA,UAAIG,GAAG,GAAGD,IAAI,CAACE,MAAf;AACAL,MAAAA,IAAI,CAACC,KAAL,GAAa,EAAb;AACAN,MAAAA,KAAK,CAAC,mBAAD,EAAsBS,GAAtB,CAAL;;AAEA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyB,EAAEE,CAA3B,EAA8B;AAC5B,aAAKC,IAAL,CAAUC,KAAV,CAAgB,IAAhB,EAAsBL,IAAI,CAACG,CAAD,CAA1B;AACD;;AAEDN,MAAAA,IAAI,CAACS,IAAL,CAAU,OAAV,EAAmBN,IAAnB;AACD,KAXD;AAaA;AACJ;AACA;;AAEIH,IAAAA,IAAI,CAACU,OAAL,GAAe,UAASC,GAAT,EAAa;AAC1B,UAAIC,GAAG,GAAGZ,IAAI,CAACa,QAAL,CAAcD,GAAxB;AACA,UAAIZ,IAAI,CAACC,KAAL,CAAWI,MAAX,IAAqBO,GAAzB,EAA8B,OAAOE,IAAI,CAACH,GAAD,CAAX;AAC9BX,MAAAA,IAAI,CAACC,KAAL,CAAWc,IAAX,CAAgBJ,GAAhB;AACD,KAJD;AAMA;AACJ;AACA;;;AAEI,aAASG,IAAT,CAAcH,GAAd,EAAmB;AACjBhB,MAAAA,KAAK,CAAC,MAAD,CAAL;AACAK,MAAAA,IAAI,CAACS,IAAL,CAAU,MAAV,EAAkBE,GAAlB;AACD;AACF,GA3CD;AA4CD,CA/CD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('axon:queue');\n\n/**\n * Queue plugin.\n *\n * Provides an `.enqueue()` method to the `sock`. Messages\n * passed to `enqueue` will be buffered until the next\n * `connect` event is emitted.\n *\n * Emits:\n *\n *  - `drop` (msg) when a message is dropped\n *  - `flush` (msgs) when the queue is flushed\n *\n * @param {Object} options\n * @api private\n */\n\nmodule.exports = function(options){\n  options = options || {};\n\n  return function(sock){\n\n    /**\n     * Message buffer.\n     */\n\n    sock.queue = [];\n\n    /**\n     * Flush `buf` on `connect`.\n     */\n\n    sock.on('connect', function(){\n      var prev = sock.queue;\n      var len = prev.length;\n      sock.queue = [];\n      debug('flush %d messages', len);\n\n      for (var i = 0; i < len; ++i) {\n        this.send.apply(this, prev[i]);\n      }\n\n      sock.emit('flush', prev);\n    });\n\n    /**\n     * Pushes `msg` into `buf`.\n     */\n\n    sock.enqueue = function(msg){\n      var hwm = sock.settings.hwm;\n      if (sock.queue.length >= hwm) return drop(msg);\n      sock.queue.push(msg);\n    };\n\n    /**\n     * Drop the given `msg`.\n     */\n\n    function drop(msg) {\n      debug('drop');\n      sock.emit('drop', msg);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}