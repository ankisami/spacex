{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// users.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 11. Users/Sessions\n// ----------------------------------------------------------------------------------\n\nconst exec = require('child_process').exec;\n\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = _platform === 'linux';\n\nconst _darwin = _platform === 'darwin';\n\nconst _windows = _platform === 'win32';\n\nconst _freebsd = _platform === 'freebsd';\n\nconst _openbsd = _platform === 'openbsd';\n\nconst _netbsd = _platform === 'netbsd';\n\nconst _sunos = _platform === 'sunos';\n\nlet _winDateFormat = {\n  dateFormat: '',\n  dateSeperator: '',\n  timeFormat: '',\n  timeSeperator: '',\n  amDesignator: '',\n  pmDesignator: ''\n}; // --------------------------\n// array of users online = sessions\n\nfunction getWinCulture() {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      if (!_winDateFormat.dateFormat) {\n        util.powerShell('(get-culture).DateTimeFormat').then(data => {\n          let lines = data.toString().split('\\r\\n');\n          _winDateFormat.dateFormat = util.getValue(lines, 'ShortDatePattern', ':');\n          _winDateFormat.dateSeperator = util.getValue(lines, 'DateSeparator', ':');\n          _winDateFormat.timeFormat = util.getValue(lines, 'ShortTimePattern', ':');\n          _winDateFormat.timeSeperator = util.getValue(lines, 'TimeSeparator', ':');\n          _winDateFormat.amDesignator = util.getValue(lines, 'AMDesignator', ':');\n          _winDateFormat.pmDesignator = util.getValue(lines, 'PMDesignator', ':');\n          resolve(_winDateFormat);\n        }).catch(() => {\n          resolve(_winDateFormat);\n        });\n      } else {\n        resolve(_winDateFormat);\n      }\n    });\n  });\n}\n\nfunction parseUsersLinux(lines, phase) {\n  let result = [];\n  let result_who = [];\n  let result_w = {};\n  let w_first = true;\n  let w_header = [];\n  let w_pos = [];\n  let who_line = {};\n  let is_whopart = true;\n  lines.forEach(function (line) {\n    if (line === '---') {\n      is_whopart = false;\n    } else {\n      let l = line.replace(/ +/g, ' ').split(' '); // who part\n\n      if (is_whopart) {\n        result_who.push({\n          user: l[0],\n          tty: l[1],\n          date: l[2],\n          time: l[3],\n          ip: l && l.length > 4 ? l[4].replace(/\\(/g, '').replace(/\\)/g, '') : ''\n        });\n      } else {\n        // w part\n        if (w_first) {\n          // header\n          w_header = l;\n          w_header.forEach(function (item) {\n            w_pos.push(line.indexOf(item));\n          });\n          w_first = false;\n        } else {\n          // split by w_pos\n          result_w.user = line.substring(w_pos[0], w_pos[1] - 1).trim();\n          result_w.tty = line.substring(w_pos[1], w_pos[2] - 1).trim();\n          result_w.ip = line.substring(w_pos[2], w_pos[3] - 1).replace(/\\(/g, '').replace(/\\)/g, '').trim();\n          result_w.command = line.substring(w_pos[7], 1000).trim(); // find corresponding 'who' line\n\n          who_line = result_who.filter(function (obj) {\n            return obj.user.substring(0, 8).trim() === result_w.user && obj.tty === result_w.tty;\n          });\n\n          if (who_line.length === 1) {\n            result.push({\n              user: who_line[0].user,\n              tty: who_line[0].tty,\n              date: who_line[0].date,\n              time: who_line[0].time,\n              ip: who_line[0].ip,\n              command: result_w.command\n            });\n          }\n        }\n      }\n    }\n  });\n\n  if (result.length === 0 && phase === 2) {\n    return result_who;\n  } else {\n    return result;\n  }\n}\n\nfunction parseUsersDarwin(lines) {\n  let result = [];\n  let result_who = [];\n  let result_w = {};\n  let who_line = {};\n  let is_whopart = true;\n  lines.forEach(function (line) {\n    if (line === '---') {\n      is_whopart = false;\n    } else {\n      let l = line.replace(/ +/g, ' ').split(' '); // who part\n\n      if (is_whopart) {\n        result_who.push({\n          user: l[0],\n          tty: l[1],\n          date: '' + new Date().getFullYear() + '-' + ('0' + ('JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'.indexOf(l[2].toUpperCase()) / 3 + 1)).slice(-2) + '-' + ('0' + l[3]).slice(-2),\n          time: l[4]\n        });\n      } else {\n        // w part\n        // split by w_pos\n        result_w.user = l[0];\n        result_w.tty = l[1];\n        result_w.ip = l[2] !== '-' ? l[2] : '';\n        result_w.command = l.slice(5, 1000).join(' '); // find corresponding 'who' line\n\n        who_line = result_who.filter(function (obj) {\n          return obj.user === result_w.user && (obj.tty.substring(3, 1000) === result_w.tty || obj.tty === result_w.tty);\n        });\n\n        if (who_line.length === 1) {\n          result.push({\n            user: who_line[0].user,\n            tty: who_line[0].tty,\n            date: who_line[0].date,\n            time: who_line[0].time,\n            ip: result_w.ip,\n            command: result_w.command\n          });\n        }\n      }\n    }\n  });\n  return result;\n}\n\nfunction parseUsersWin(lines, culture) {\n  let result = [];\n  const header = lines[0];\n  const headerDelimiter = [];\n\n  if (header) {\n    const start = header[0] === ' ' ? 1 : 0;\n    headerDelimiter.push(start - 1);\n    let nextSpace = 0;\n\n    for (let i = start + 1; i < header.length; i++) {\n      if (header[i] === ' ' && (header[i - 1] === ' ' || header[i - 1] === '.')) {\n        nextSpace = i;\n      } else {\n        if (nextSpace) {\n          headerDelimiter.push(nextSpace);\n          nextSpace = 0;\n        }\n      }\n    }\n\n    for (let i = 1; i < lines.length; i++) {\n      if (lines[i].trim()) {\n        const user = lines[i].substring(headerDelimiter[0] + 1, headerDelimiter[1]).trim() || '';\n        const tty = lines[i].substring(headerDelimiter[1] + 1, headerDelimiter[2] - 2).trim() || '';\n        const dateTime = util.parseDateTime(lines[i].substring(headerDelimiter[5] + 1, 2000).trim(), culture) || '';\n        result.push({\n          user: user,\n          tty: tty,\n          date: dateTime.date,\n          time: dateTime.time,\n          ip: '',\n          command: ''\n        });\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction users(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = []; // linux\n\n      if (_linux) {\n        exec('who --ips; echo \"---\"; w | tail -n +2', function (error, stdout) {\n          if (!error) {\n            // lines / split\n            let lines = stdout.toString().split('\\n');\n            result = parseUsersLinux(lines, 1);\n\n            if (result.length === 0) {\n              exec('who; echo \"---\"; w | tail -n +2', function (error, stdout) {\n                if (!error) {\n                  // lines / split\n                  lines = stdout.toString().split('\\n');\n                  result = parseUsersLinux(lines, 2);\n                }\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              });\n            } else {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          } else {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        });\n      }\n\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('who; echo \"---\"; w -ih', function (error, stdout) {\n          if (!error) {\n            // lines / split\n            let lines = stdout.toString().split('\\n');\n            result = parseUsersDarwin(lines);\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        exec('who; echo \"---\"; w -h', function (error, stdout) {\n          if (!error) {\n            // lines / split\n            let lines = stdout.toString().split('\\n');\n            result = parseUsersDarwin(lines);\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('who; echo \"---\"; w -ih', function (error, stdout) {\n          if (!error) {\n            // lines / split\n            let lines = stdout.toString().split('\\n');\n            result = parseUsersDarwin(lines);\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_windows) {\n        try {\n          exec('query user', util.execOptsWin, function (error, stdout) {\n            if (stdout) {\n              // lines / split\n              let lines = stdout.toString().split('\\r\\n');\n              getWinCulture().then(culture => {\n                result = parseUsersWin(lines, culture);\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              });\n            } else {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.users = users;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/users.js"],"names":["exec","require","util","_platform","process","platform","_linux","_darwin","_windows","_freebsd","_openbsd","_netbsd","_sunos","_winDateFormat","dateFormat","dateSeperator","timeFormat","timeSeperator","amDesignator","pmDesignator","getWinCulture","Promise","resolve","nextTick","powerShell","then","data","lines","toString","split","getValue","catch","parseUsersLinux","phase","result","result_who","result_w","w_first","w_header","w_pos","who_line","is_whopart","forEach","line","l","replace","push","user","tty","date","time","ip","length","item","indexOf","substring","trim","command","filter","obj","parseUsersDarwin","Date","getFullYear","toUpperCase","slice","join","parseUsersWin","culture","header","headerDelimiter","start","nextSpace","i","dateTime","parseDateTime","users","callback","error","stdout","execOptsWin","e","exports"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// users.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 11. Users/Sessions\n// ----------------------------------------------------------------------------------\n\nconst exec = require('child_process').exec;\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nlet _winDateFormat = {\n  dateFormat: '',\n  dateSeperator: '',\n  timeFormat: '',\n  timeSeperator: '',\n  amDesignator: '',\n  pmDesignator: ''\n};\n\n// --------------------------\n// array of users online = sessions\n\nfunction getWinCulture() {\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      if (!_winDateFormat.dateFormat) {\n        util.powerShell('(get-culture).DateTimeFormat')\n          .then(data => {\n            let lines = data.toString().split('\\r\\n');\n            _winDateFormat.dateFormat = util.getValue(lines, 'ShortDatePattern', ':');\n            _winDateFormat.dateSeperator = util.getValue(lines, 'DateSeparator', ':');\n            _winDateFormat.timeFormat = util.getValue(lines, 'ShortTimePattern', ':');\n            _winDateFormat.timeSeperator = util.getValue(lines, 'TimeSeparator', ':');\n            _winDateFormat.amDesignator = util.getValue(lines, 'AMDesignator', ':');\n            _winDateFormat.pmDesignator = util.getValue(lines, 'PMDesignator', ':');\n\n            resolve(_winDateFormat);\n          })\n          .catch(() => {\n            resolve(_winDateFormat);\n          });\n      } else {\n        resolve(_winDateFormat);\n      }\n    });\n  });\n}\n\nfunction parseUsersLinux(lines, phase) {\n  let result = [];\n  let result_who = [];\n  let result_w = {};\n  let w_first = true;\n  let w_header = [];\n  let w_pos = [];\n  let who_line = {};\n\n  let is_whopart = true;\n  lines.forEach(function (line) {\n    if (line === '---') {\n      is_whopart = false;\n    } else {\n      let l = line.replace(/ +/g, ' ').split(' ');\n\n      // who part\n      if (is_whopart) {\n        result_who.push({\n          user: l[0],\n          tty: l[1],\n          date: l[2],\n          time: l[3],\n          ip: (l && l.length > 4) ? l[4].replace(/\\(/g, '').replace(/\\)/g, '') : ''\n        });\n      } else {\n        // w part\n        if (w_first) {    // header\n          w_header = l;\n          w_header.forEach(function (item) {\n            w_pos.push(line.indexOf(item));\n          });\n          w_first = false;\n        } else {\n          // split by w_pos\n          result_w.user = line.substring(w_pos[0], w_pos[1] - 1).trim();\n          result_w.tty = line.substring(w_pos[1], w_pos[2] - 1).trim();\n          result_w.ip = line.substring(w_pos[2], w_pos[3] - 1).replace(/\\(/g, '').replace(/\\)/g, '').trim();\n          result_w.command = line.substring(w_pos[7], 1000).trim();\n          // find corresponding 'who' line\n          who_line = result_who.filter(function (obj) {\n            return (obj.user.substring(0, 8).trim() === result_w.user && obj.tty === result_w.tty);\n          });\n          if (who_line.length === 1) {\n            result.push({\n              user: who_line[0].user,\n              tty: who_line[0].tty,\n              date: who_line[0].date,\n              time: who_line[0].time,\n              ip: who_line[0].ip,\n              command: result_w.command\n            });\n          }\n        }\n      }\n    }\n  });\n  if (result.length === 0 && phase === 2) {\n    return result_who;\n  } else {\n    return result;\n  }\n}\n\nfunction parseUsersDarwin(lines) {\n  let result = [];\n  let result_who = [];\n  let result_w = {};\n  let who_line = {};\n\n  let is_whopart = true;\n  lines.forEach(function (line) {\n    if (line === '---') {\n      is_whopart = false;\n    } else {\n      let l = line.replace(/ +/g, ' ').split(' ');\n\n      // who part\n      if (is_whopart) {\n        result_who.push({\n          user: l[0],\n          tty: l[1],\n          date: ('' + new Date().getFullYear()) + '-' + ('0' + ('JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'.indexOf(l[2].toUpperCase()) / 3 + 1)).slice(-2) + '-' + ('0' + l[3]).slice(-2),\n          time: l[4],\n        });\n      } else {\n        // w part\n        // split by w_pos\n        result_w.user = l[0];\n        result_w.tty = l[1];\n        result_w.ip = (l[2] !== '-') ? l[2] : '';\n        result_w.command = l.slice(5, 1000).join(' ');\n        // find corresponding 'who' line\n        who_line = result_who.filter(function (obj) {\n          return (obj.user === result_w.user && (obj.tty.substring(3, 1000) === result_w.tty || obj.tty === result_w.tty));\n        });\n        if (who_line.length === 1) {\n          result.push({\n            user: who_line[0].user,\n            tty: who_line[0].tty,\n            date: who_line[0].date,\n            time: who_line[0].time,\n            ip: result_w.ip,\n            command: result_w.command\n          });\n        }\n      }\n    }\n  });\n  return result;\n}\n\nfunction parseUsersWin(lines, culture) {\n\n  let result = [];\n  const header = lines[0];\n  const headerDelimiter = [];\n  if (header) {\n    const start = (header[0] === ' ') ? 1 : 0;\n    headerDelimiter.push(start - 1);\n    let nextSpace = 0;\n    for (let i = start + 1; i < header.length; i++) {\n      if (header[i] === ' ' && ((header[i - 1] === ' ') || (header[i - 1] === '.'))) {\n        nextSpace = i;\n      } else {\n        if (nextSpace) {\n          headerDelimiter.push(nextSpace);\n          nextSpace = 0;\n        }\n      }\n    }\n    for (let i = 1; i < lines.length; i++) {\n      if (lines[i].trim()) {\n        const user = lines[i].substring(headerDelimiter[0] + 1, headerDelimiter[1]).trim() || '';\n        const tty = lines[i].substring(headerDelimiter[1] + 1, headerDelimiter[2] - 2).trim() || '';\n        const dateTime = util.parseDateTime(lines[i].substring(headerDelimiter[5] + 1, 2000).trim(), culture) || '';\n        result.push({\n          user: user,\n          tty: tty,\n          date: dateTime.date,\n          time: dateTime.time,\n          ip: '',\n          command: ''\n        });\n      }\n    }\n  }\n  return result;\n}\n\nfunction users(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = [];\n\n      // linux\n      if (_linux) {\n        exec('who --ips; echo \"---\"; w | tail -n +2', function (error, stdout) {\n          if (!error) {\n            // lines / split\n            let lines = stdout.toString().split('\\n');\n            result = parseUsersLinux(lines, 1);\n            if (result.length === 0) {\n              exec('who; echo \"---\"; w | tail -n +2', function (error, stdout) {\n                if (!error) {\n                  // lines / split\n                  lines = stdout.toString().split('\\n');\n                  result = parseUsersLinux(lines, 2);\n                }\n                if (callback) { callback(result); }\n                resolve(result);\n              });\n            } else {\n              if (callback) { callback(result); }\n              resolve(result);\n            }\n          } else {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        });\n      }\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('who; echo \"---\"; w -ih', function (error, stdout) {\n          if (!error) {\n            // lines / split\n            let lines = stdout.toString().split('\\n');\n            result = parseUsersDarwin(lines);\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        exec('who; echo \"---\"; w -h', function (error, stdout) {\n          if (!error) {\n            // lines / split\n            let lines = stdout.toString().split('\\n');\n            result = parseUsersDarwin(lines);\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('who; echo \"---\"; w -ih', function (error, stdout) {\n          if (!error) {\n            // lines / split\n            let lines = stdout.toString().split('\\n');\n            result = parseUsersDarwin(lines);\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_windows) {\n        try {\n          exec('query user', util.execOptsWin, function (error, stdout) {\n            if (stdout) {\n              // lines / split\n              let lines = stdout.toString().split('\\r\\n');\n              getWinCulture()\n                .then(culture => {\n                  result = parseUsersWin(lines, culture);\n                  if (callback) { callback(result); }\n                  resolve(result);\n                });\n            } else {\n              if (callback) { callback(result); }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n\n    });\n  });\n}\n\nexports.users = users;\n"]},"metadata":{},"sourceType":"script"}