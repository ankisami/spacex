{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// internet.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 12. Internet\n// ----------------------------------------------------------------------------------\n\nconst exec = require('child_process').exec;\n\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = _platform === 'linux';\n\nconst _darwin = _platform === 'darwin';\n\nconst _windows = _platform === 'win32';\n\nconst _freebsd = _platform === 'freebsd';\n\nconst _openbsd = _platform === 'openbsd';\n\nconst _netbsd = _platform === 'netbsd';\n\nconst _sunos = _platform === 'sunos'; // --------------------------\n// check if external site is available\n\n\nfunction inetChecksite(url, callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let urlSanitized = util.sanitizeShellString(url).toLowerCase();\n      urlSanitized = urlSanitized.replace(/ /g, '');\n      urlSanitized = urlSanitized.replace(/\\$/g, '');\n      urlSanitized = urlSanitized.replace(/\\(/g, '');\n      urlSanitized = urlSanitized.replace(/\\)/g, '');\n      urlSanitized = urlSanitized.replace(/{/g, '');\n      urlSanitized = urlSanitized.replace(/}/g, '');\n      let result = {\n        url: urlSanitized,\n        ok: false,\n        status: 404,\n        ms: -1\n      };\n\n      if (urlSanitized) {\n        let t = Date.now();\n\n        if (_linux || _freebsd || _openbsd || _netbsd || _darwin || _sunos) {\n          let args = ' -I --connect-timeout 5 -m 5 ' + urlSanitized + ' 2>/dev/null | head -n 1 | cut -d \" \" -f2';\n          let cmd = 'curl';\n          exec(cmd + args, function (error, stdout) {\n            let statusCode = parseInt(stdout.toString());\n            result.status = statusCode || 404;\n            result.ok = !error && (statusCode === 200 || statusCode === 301 || statusCode === 302 || statusCode === 304);\n            result.ms = result.ok ? Date.now() - t : -1;\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        }\n\n        if (_windows) {\n          // if this is stable, this can be used for all OS types\n          const http = urlSanitized.startsWith('https:') ? require('https') : require('http');\n\n          try {\n            http.get(urlSanitized, res => {\n              const statusCode = res.statusCode;\n              result.status = statusCode || 404;\n              result.ok = statusCode === 200 || statusCode === 301 || statusCode === 302 || statusCode === 304;\n\n              if (statusCode !== 200) {\n                res.resume();\n                result.ms = result.ok ? Date.now() - t : -1;\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              } else {\n                res.on('data', () => {});\n                res.on('end', () => {\n                  result.ms = result.ok ? Date.now() - t : -1;\n\n                  if (callback) {\n                    callback(result);\n                  }\n\n                  resolve(result);\n                });\n              }\n            }).on('error', () => {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            });\n          } catch (err) {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        }\n      } else {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.inetChecksite = inetChecksite; // --------------------------\n// check inet latency\n\nfunction inetLatency(host, callback) {\n  // fallback - if only callback is given\n  if (util.isFunction(host) && !callback) {\n    callback = host;\n    host = '';\n  }\n\n  host = host || '8.8.8.8';\n  const hostSanitized = util.sanitizeShellString(host);\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let cmd;\n\n      if (_linux || _freebsd || _openbsd || _netbsd || _darwin) {\n        if (_linux) {\n          cmd = 'ping -c 2 -w 3 ' + hostSanitized + ' | grep rtt';\n        }\n\n        if (_freebsd || _openbsd || _netbsd) {\n          cmd = 'ping -c 2 -t 3 ' + hostSanitized + ' | grep round-trip';\n        }\n\n        if (_darwin) {\n          cmd = 'ping -c 2 -t 3 ' + hostSanitized + ' | grep avg';\n        }\n\n        exec(cmd, function (error, stdout) {\n          let result = -1;\n\n          if (!error) {\n            const line = stdout.toString().split('=');\n\n            if (line.length > 1) {\n              const parts = line[1].split('/');\n\n              if (parts.length > 1) {\n                result = parseFloat(parts[1]);\n              }\n            }\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        exec('ping -s -a ' + hostSanitized + ' 56 2 | grep avg', {\n          timeout: 3000\n        }, function (error, stdout) {\n          let result = -1;\n\n          if (!error) {\n            const line = stdout.toString().split('=');\n\n            if (line.length > 1) {\n              const parts = line[1].split('/');\n\n              if (parts.length > 1) {\n                result = parseFloat(parts[1].replace(',', '.'));\n              }\n            }\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_windows) {\n        let result = -1;\n\n        try {\n          exec('ping ' + hostSanitized + ' -n 1', util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\r\\n');\n              lines.shift();\n              lines.forEach(function (line) {\n                if ((line.toLowerCase().match(/ms/g) || []).length === 3) {\n                  let l = line.replace(/ +/g, ' ').split(' ');\n\n                  if (l.length > 6) {\n                    result = parseFloat(l[l.length - 1]);\n                  }\n                }\n              });\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.inetLatency = inetLatency;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/internet.js"],"names":["exec","require","util","_platform","process","platform","_linux","_darwin","_windows","_freebsd","_openbsd","_netbsd","_sunos","inetChecksite","url","callback","Promise","resolve","nextTick","urlSanitized","sanitizeShellString","toLowerCase","replace","result","ok","status","ms","t","Date","now","args","cmd","error","stdout","statusCode","parseInt","toString","http","startsWith","get","res","resume","on","err","exports","inetLatency","host","isFunction","hostSanitized","line","split","length","parts","parseFloat","timeout","execOptsWin","lines","shift","forEach","match","l","e"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,IAAtC;;AACA,MAAME,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIE,SAAS,GAAGC,OAAO,CAACC,QAAxB;;AAEA,MAAMC,MAAM,GAAIH,SAAS,KAAK,OAA9B;;AACA,MAAMI,OAAO,GAAIJ,SAAS,KAAK,QAA/B;;AACA,MAAMK,QAAQ,GAAIL,SAAS,KAAK,OAAhC;;AACA,MAAMM,QAAQ,GAAIN,SAAS,KAAK,SAAhC;;AACA,MAAMO,QAAQ,GAAIP,SAAS,KAAK,SAAhC;;AACA,MAAMQ,OAAO,GAAIR,SAAS,KAAK,QAA/B;;AACA,MAAMS,MAAM,GAAIT,SAAS,KAAK,OAA9B,C,CAEA;AACA;;;AAEA,SAASU,aAAT,CAAuBC,GAAvB,EAA4BC,QAA5B,EAAsC;AAEpC,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9Bb,IAAAA,OAAO,CAACc,QAAR,CAAiB,MAAM;AAErB,UAAIC,YAAY,GAAGjB,IAAI,CAACkB,mBAAL,CAAyBN,GAAzB,EAA8BO,WAA9B,EAAnB;AACAF,MAAAA,YAAY,GAAGA,YAAY,CAACG,OAAb,CAAqB,IAArB,EAA2B,EAA3B,CAAf;AACAH,MAAAA,YAAY,GAAGA,YAAY,CAACG,OAAb,CAAqB,KAArB,EAA4B,EAA5B,CAAf;AACAH,MAAAA,YAAY,GAAGA,YAAY,CAACG,OAAb,CAAqB,KAArB,EAA4B,EAA5B,CAAf;AACAH,MAAAA,YAAY,GAAGA,YAAY,CAACG,OAAb,CAAqB,KAArB,EAA4B,EAA5B,CAAf;AACAH,MAAAA,YAAY,GAAGA,YAAY,CAACG,OAAb,CAAqB,IAArB,EAA2B,EAA3B,CAAf;AACAH,MAAAA,YAAY,GAAGA,YAAY,CAACG,OAAb,CAAqB,IAArB,EAA2B,EAA3B,CAAf;AACA,UAAIC,MAAM,GAAG;AACXT,QAAAA,GAAG,EAAEK,YADM;AAEXK,QAAAA,EAAE,EAAE,KAFO;AAGXC,QAAAA,MAAM,EAAE,GAHG;AAIXC,QAAAA,EAAE,EAAE,CAAC;AAJM,OAAb;;AAMA,UAAIP,YAAJ,EAAkB;AAChB,YAAIQ,CAAC,GAAGC,IAAI,CAACC,GAAL,EAAR;;AACA,YAAIvB,MAAM,IAAIG,QAAV,IAAsBC,QAAtB,IAAkCC,OAAlC,IAA6CJ,OAA7C,IAAwDK,MAA5D,EAAoE;AAClE,cAAIkB,IAAI,GAAG,kCAAkCX,YAAlC,GAAiD,2CAA5D;AACA,cAAIY,GAAG,GAAG,MAAV;AACA/B,UAAAA,IAAI,CAAC+B,GAAG,GAAGD,IAAP,EAAa,UAAUE,KAAV,EAAiBC,MAAjB,EAAyB;AACxC,gBAAIC,UAAU,GAAGC,QAAQ,CAACF,MAAM,CAACG,QAAP,EAAD,CAAzB;AACAb,YAAAA,MAAM,CAACE,MAAP,GAAgBS,UAAU,IAAI,GAA9B;AACAX,YAAAA,MAAM,CAACC,EAAP,GAAY,CAACQ,KAAD,KAAWE,UAAU,KAAK,GAAf,IAAsBA,UAAU,KAAK,GAArC,IAA4CA,UAAU,KAAK,GAA3D,IAAkEA,UAAU,KAAK,GAA5F,CAAZ;AACAX,YAAAA,MAAM,CAACG,EAAP,GAAaH,MAAM,CAACC,EAAP,GAAYI,IAAI,CAACC,GAAL,KAAaF,CAAzB,GAA6B,CAAC,CAA3C;;AACA,gBAAIZ,QAAJ,EAAc;AAAEA,cAAAA,QAAQ,CAACQ,MAAD,CAAR;AAAmB;;AACnCN,YAAAA,OAAO,CAACM,MAAD,CAAP;AACD,WAPG,CAAJ;AAQD;;AACD,YAAIf,QAAJ,EAAc;AAAI;AAChB,gBAAM6B,IAAI,GAAIlB,YAAY,CAACmB,UAAb,CAAwB,QAAxB,IAAoCrC,OAAO,CAAC,OAAD,CAA3C,GAAuDA,OAAO,CAAC,MAAD,CAA5E;;AACA,cAAI;AACFoC,YAAAA,IAAI,CAACE,GAAL,CAASpB,YAAT,EAAwBqB,GAAD,IAAS;AAC9B,oBAAMN,UAAU,GAAGM,GAAG,CAACN,UAAvB;AAEAX,cAAAA,MAAM,CAACE,MAAP,GAAgBS,UAAU,IAAI,GAA9B;AACAX,cAAAA,MAAM,CAACC,EAAP,GAAaU,UAAU,KAAK,GAAf,IAAsBA,UAAU,KAAK,GAArC,IAA4CA,UAAU,KAAK,GAA3D,IAAkEA,UAAU,KAAK,GAA9F;;AAEA,kBAAIA,UAAU,KAAK,GAAnB,EAAwB;AACtBM,gBAAAA,GAAG,CAACC,MAAJ;AACAlB,gBAAAA,MAAM,CAACG,EAAP,GAAaH,MAAM,CAACC,EAAP,GAAYI,IAAI,CAACC,GAAL,KAAaF,CAAzB,GAA6B,CAAC,CAA3C;;AACA,oBAAIZ,QAAJ,EAAc;AAAEA,kBAAAA,QAAQ,CAACQ,MAAD,CAAR;AAAmB;;AACnCN,gBAAAA,OAAO,CAACM,MAAD,CAAP;AACD,eALD,MAKO;AACLiB,gBAAAA,GAAG,CAACE,EAAJ,CAAO,MAAP,EAAe,MAAM,CAAG,CAAxB;AACAF,gBAAAA,GAAG,CAACE,EAAJ,CAAO,KAAP,EAAc,MAAM;AAClBnB,kBAAAA,MAAM,CAACG,EAAP,GAAaH,MAAM,CAACC,EAAP,GAAYI,IAAI,CAACC,GAAL,KAAaF,CAAzB,GAA6B,CAAC,CAA3C;;AACA,sBAAIZ,QAAJ,EAAc;AAAEA,oBAAAA,QAAQ,CAACQ,MAAD,CAAR;AAAmB;;AACnCN,kBAAAA,OAAO,CAACM,MAAD,CAAP;AACD,iBAJD;AAKD;AACF,aAnBD,EAmBGmB,EAnBH,CAmBM,OAnBN,EAmBe,MAAM;AACnB,kBAAI3B,QAAJ,EAAc;AAAEA,gBAAAA,QAAQ,CAACQ,MAAD,CAAR;AAAmB;;AACnCN,cAAAA,OAAO,CAACM,MAAD,CAAP;AACD,aAtBD;AAuBD,WAxBD,CAwBE,OAAOoB,GAAP,EAAY;AACZ,gBAAI5B,QAAJ,EAAc;AAAEA,cAAAA,QAAQ,CAACQ,MAAD,CAAR;AAAmB;;AACnCN,YAAAA,OAAO,CAACM,MAAD,CAAP;AACD;AACF;AACF,OA7CD,MA6CO;AACL,YAAIR,QAAJ,EAAc;AAAEA,UAAAA,QAAQ,CAACQ,MAAD,CAAR;AAAmB;;AACnCN,QAAAA,OAAO,CAACM,MAAD,CAAP;AACD;AACF,KAhED;AAiED,GAlEM,CAAP;AAmED;;AAEDqB,OAAO,CAAC/B,aAAR,GAAwBA,aAAxB,C,CAEA;AACA;;AAEA,SAASgC,WAAT,CAAqBC,IAArB,EAA2B/B,QAA3B,EAAqC;AAEnC;AACA,MAAIb,IAAI,CAAC6C,UAAL,CAAgBD,IAAhB,KAAyB,CAAC/B,QAA9B,EAAwC;AACtCA,IAAAA,QAAQ,GAAG+B,IAAX;AACAA,IAAAA,IAAI,GAAG,EAAP;AACD;;AAEDA,EAAAA,IAAI,GAAGA,IAAI,IAAI,SAAf;AACA,QAAME,aAAa,GAAG9C,IAAI,CAACkB,mBAAL,CAAyB0B,IAAzB,CAAtB;AAEA,SAAO,IAAI9B,OAAJ,CAAaC,OAAD,IAAa;AAC9Bb,IAAAA,OAAO,CAACc,QAAR,CAAiB,MAAM;AACrB,UAAIa,GAAJ;;AACA,UAAIzB,MAAM,IAAIG,QAAV,IAAsBC,QAAtB,IAAkCC,OAAlC,IAA6CJ,OAAjD,EAA0D;AACxD,YAAID,MAAJ,EAAY;AACVyB,UAAAA,GAAG,GAAG,oBAAoBiB,aAApB,GAAoC,aAA1C;AACD;;AACD,YAAIvC,QAAQ,IAAIC,QAAZ,IAAwBC,OAA5B,EAAqC;AACnCoB,UAAAA,GAAG,GAAG,oBAAoBiB,aAApB,GAAoC,oBAA1C;AACD;;AACD,YAAIzC,OAAJ,EAAa;AACXwB,UAAAA,GAAG,GAAG,oBAAoBiB,aAApB,GAAoC,aAA1C;AACD;;AAEDhD,QAAAA,IAAI,CAAC+B,GAAD,EAAM,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACjC,cAAIV,MAAM,GAAG,CAAC,CAAd;;AACA,cAAI,CAACS,KAAL,EAAY;AACV,kBAAMiB,IAAI,GAAGhB,MAAM,CAACG,QAAP,GAAkBc,KAAlB,CAAwB,GAAxB,CAAb;;AACA,gBAAID,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnB,oBAAMC,KAAK,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAAR,CAAc,GAAd,CAAd;;AACA,kBAAIE,KAAK,CAACD,MAAN,GAAe,CAAnB,EAAsB;AACpB5B,gBAAAA,MAAM,GAAG8B,UAAU,CAACD,KAAK,CAAC,CAAD,CAAN,CAAnB;AACD;AACF;AACF;;AACD,cAAIrC,QAAJ,EAAc;AAAEA,YAAAA,QAAQ,CAACQ,MAAD,CAAR;AAAmB;;AACnCN,UAAAA,OAAO,CAACM,MAAD,CAAP;AACD,SAbG,CAAJ;AAcD;;AACD,UAAIX,MAAJ,EAAY;AACVZ,QAAAA,IAAI,CAAC,gBAAgBgD,aAAhB,GAAgC,kBAAjC,EAAqD;AAAEM,UAAAA,OAAO,EAAE;AAAX,SAArD,EAAwE,UAAUtB,KAAV,EAAiBC,MAAjB,EAAyB;AACnG,cAAIV,MAAM,GAAG,CAAC,CAAd;;AACA,cAAI,CAACS,KAAL,EAAY;AACV,kBAAMiB,IAAI,GAAGhB,MAAM,CAACG,QAAP,GAAkBc,KAAlB,CAAwB,GAAxB,CAAb;;AACA,gBAAID,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnB,oBAAMC,KAAK,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAAR,CAAc,GAAd,CAAd;;AACA,kBAAIE,KAAK,CAACD,MAAN,GAAe,CAAnB,EAAsB;AACpB5B,gBAAAA,MAAM,GAAG8B,UAAU,CAACD,KAAK,CAAC,CAAD,CAAL,CAAS9B,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,CAAD,CAAnB;AACD;AACF;AACF;;AACD,cAAIP,QAAJ,EAAc;AAAEA,YAAAA,QAAQ,CAACQ,MAAD,CAAR;AAAmB;;AACnCN,UAAAA,OAAO,CAACM,MAAD,CAAP;AACD,SAbG,CAAJ;AAcD;;AACD,UAAIf,QAAJ,EAAc;AACZ,YAAIe,MAAM,GAAG,CAAC,CAAd;;AACA,YAAI;AACFvB,UAAAA,IAAI,CAAC,UAAUgD,aAAV,GAA0B,OAA3B,EAAoC9C,IAAI,CAACqD,WAAzC,EAAsD,UAAUvB,KAAV,EAAiBC,MAAjB,EAAyB;AACjF,gBAAI,CAACD,KAAL,EAAY;AACV,kBAAIwB,KAAK,GAAGvB,MAAM,CAACG,QAAP,GAAkBc,KAAlB,CAAwB,MAAxB,CAAZ;AACAM,cAAAA,KAAK,CAACC,KAAN;AACAD,cAAAA,KAAK,CAACE,OAAN,CAAc,UAAUT,IAAV,EAAgB;AAC5B,oBAAI,CAACA,IAAI,CAAC5B,WAAL,GAAmBsC,KAAnB,CAAyB,KAAzB,KAAmC,EAApC,EAAwCR,MAAxC,KAAmD,CAAvD,EAA0D;AACxD,sBAAIS,CAAC,GAAGX,IAAI,CAAC3B,OAAL,CAAa,KAAb,EAAoB,GAApB,EAAyB4B,KAAzB,CAA+B,GAA/B,CAAR;;AACA,sBAAIU,CAAC,CAACT,MAAF,GAAW,CAAf,EAAkB;AAChB5B,oBAAAA,MAAM,GAAG8B,UAAU,CAACO,CAAC,CAACA,CAAC,CAACT,MAAF,GAAW,CAAZ,CAAF,CAAnB;AACD;AACF;AACF,eAPD;AAQD;;AACD,gBAAIpC,QAAJ,EAAc;AAAEA,cAAAA,QAAQ,CAACQ,MAAD,CAAR;AAAmB;;AACnCN,YAAAA,OAAO,CAACM,MAAD,CAAP;AACD,WAfG,CAAJ;AAgBD,SAjBD,CAiBE,OAAOsC,CAAP,EAAU;AACV,cAAI9C,QAAJ,EAAc;AAAEA,YAAAA,QAAQ,CAACQ,MAAD,CAAR;AAAmB;;AACnCN,UAAAA,OAAO,CAACM,MAAD,CAAP;AACD;AACF;AACF,KApED;AAqED,GAtEM,CAAP;AAuED;;AAEDqB,OAAO,CAACC,WAAR,GAAsBA,WAAtB","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// internet.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 12. Internet\n// ----------------------------------------------------------------------------------\n\nconst exec = require('child_process').exec;\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\n// --------------------------\n// check if external site is available\n\nfunction inetChecksite(url, callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      let urlSanitized = util.sanitizeShellString(url).toLowerCase();\n      urlSanitized = urlSanitized.replace(/ /g, '');\n      urlSanitized = urlSanitized.replace(/\\$/g, '');\n      urlSanitized = urlSanitized.replace(/\\(/g, '');\n      urlSanitized = urlSanitized.replace(/\\)/g, '');\n      urlSanitized = urlSanitized.replace(/{/g, '');\n      urlSanitized = urlSanitized.replace(/}/g, '');\n      let result = {\n        url: urlSanitized,\n        ok: false,\n        status: 404,\n        ms: -1\n      };\n      if (urlSanitized) {\n        let t = Date.now();\n        if (_linux || _freebsd || _openbsd || _netbsd || _darwin || _sunos) {\n          let args = ' -I --connect-timeout 5 -m 5 ' + urlSanitized + ' 2>/dev/null | head -n 1 | cut -d \" \" -f2';\n          let cmd = 'curl';\n          exec(cmd + args, function (error, stdout) {\n            let statusCode = parseInt(stdout.toString());\n            result.status = statusCode || 404;\n            result.ok = !error && (statusCode === 200 || statusCode === 301 || statusCode === 302 || statusCode === 304);\n            result.ms = (result.ok ? Date.now() - t : -1);\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        }\n        if (_windows) {   // if this is stable, this can be used for all OS types\n          const http = (urlSanitized.startsWith('https:') ? require('https') : require('http'));\n          try {\n            http.get(urlSanitized, (res) => {\n              const statusCode = res.statusCode;\n\n              result.status = statusCode || 404;\n              result.ok = (statusCode === 200 || statusCode === 301 || statusCode === 302 || statusCode === 304);\n\n              if (statusCode !== 200) {\n                res.resume();\n                result.ms = (result.ok ? Date.now() - t : -1);\n                if (callback) { callback(result); }\n                resolve(result);\n              } else {\n                res.on('data', () => { });\n                res.on('end', () => {\n                  result.ms = (result.ok ? Date.now() - t : -1);\n                  if (callback) { callback(result); }\n                  resolve(result);\n                });\n              }\n            }).on('error', () => {\n              if (callback) { callback(result); }\n              resolve(result);\n            });\n          } catch (err) {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        }\n      } else {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.inetChecksite = inetChecksite;\n\n// --------------------------\n// check inet latency\n\nfunction inetLatency(host, callback) {\n\n  // fallback - if only callback is given\n  if (util.isFunction(host) && !callback) {\n    callback = host;\n    host = '';\n  }\n\n  host = host || '8.8.8.8';\n  const hostSanitized = util.sanitizeShellString(host);\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let cmd;\n      if (_linux || _freebsd || _openbsd || _netbsd || _darwin) {\n        if (_linux) {\n          cmd = 'ping -c 2 -w 3 ' + hostSanitized + ' | grep rtt';\n        }\n        if (_freebsd || _openbsd || _netbsd) {\n          cmd = 'ping -c 2 -t 3 ' + hostSanitized + ' | grep round-trip';\n        }\n        if (_darwin) {\n          cmd = 'ping -c 2 -t 3 ' + hostSanitized + ' | grep avg';\n        }\n\n        exec(cmd, function (error, stdout) {\n          let result = -1;\n          if (!error) {\n            const line = stdout.toString().split('=');\n            if (line.length > 1) {\n              const parts = line[1].split('/');\n              if (parts.length > 1) {\n                result = parseFloat(parts[1]);\n              }\n            }\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        exec('ping -s -a ' + hostSanitized + ' 56 2 | grep avg', { timeout: 3000 }, function (error, stdout) {\n          let result = -1;\n          if (!error) {\n            const line = stdout.toString().split('=');\n            if (line.length > 1) {\n              const parts = line[1].split('/');\n              if (parts.length > 1) {\n                result = parseFloat(parts[1].replace(',', '.'));\n              }\n            }\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_windows) {\n        let result = -1;\n        try {\n          exec('ping ' + hostSanitized + ' -n 1', util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\r\\n');\n              lines.shift();\n              lines.forEach(function (line) {\n                if ((line.toLowerCase().match(/ms/g) || []).length === 3) {\n                  let l = line.replace(/ +/g, ' ').split(' ');\n                  if (l.length > 6) {\n                    result = parseFloat(l[l.length - 1]);\n                  }\n                }\n              });\n            }\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.inetLatency = inetLatency;\n"]},"metadata":{},"sourceType":"script"}