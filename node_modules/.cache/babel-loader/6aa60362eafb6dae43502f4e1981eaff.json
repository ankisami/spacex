{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n'use strict';\n/**\n * @file Fork execution related functions\n * @author Alexandre Strzelewicz <as@unitech.io>\n * @project PM2\n */\n\nvar log = require('debug')('pm2:fork_mode');\n\nvar fs = require('fs');\n\nvar Utility = require('../Utility.js');\n\nvar path = require('path');\n\nvar dayjs = require('dayjs');\n\nvar semver = require('semver');\n/**\n * Description\n * @method exports\n * @param {} God\n * @return\n */\n\n\nmodule.exports = function ForkMode(God) {\n  /**\n   * For all apps - FORK MODE\n   * fork the app\n   * @method forkMode\n   * @param {} pm2_env\n   * @param {} cb\n   * @return\n   */\n  God.forkMode = function forkMode(pm2_env, cb) {\n    var command = '';\n    var args = [];\n    console.log(`App [${pm2_env.name}:${pm2_env.pm_id}] starting in -fork mode-`);\n\n    var spawn = require('child_process').spawn;\n\n    var interpreter = pm2_env.exec_interpreter || 'node';\n    var pidFile = pm2_env.pm_pid_path;\n\n    if (interpreter !== 'none') {\n      command = interpreter;\n\n      if (pm2_env.node_args && Array.isArray(pm2_env.node_args)) {\n        args = args.concat(pm2_env.node_args);\n      } // Deprecated - to remove at some point\n\n\n      if (process.env.PM2_NODE_OPTIONS) {\n        args = args.concat(process.env.PM2_NODE_OPTIONS.split(' '));\n      }\n\n      if (interpreter === 'node' || RegExp('node$').test(interpreter)) {\n        if (semver.lt(process.version, '10.0.0')) {\n          args.push(path.resolve(path.dirname(module.filename), '..', 'ProcessContainerForkLegacy.js'));\n        } else {\n          args.push(path.resolve(path.dirname(module.filename), '..', 'ProcessContainerFork.js'));\n        }\n      } else args.push(pm2_env.pm_exec_path);\n    } else {\n      command = pm2_env.pm_exec_path;\n      args = [];\n    }\n\n    if (pm2_env.args) {\n      args = args.concat(pm2_env.args);\n    } // piping stream o file\n\n\n    var stds = {\n      out: pm2_env.pm_out_log_path,\n      err: pm2_env.pm_err_log_path\n    }; // entire log std if necessary.\n\n    if ('pm_log_path' in pm2_env) {\n      stds.std = pm2_env.pm_log_path;\n    }\n\n    log(\"stds: %j\", stds);\n    Utility.startLogging(stds, function (err, result) {\n      if (err) {\n        God.logAndGenerateError(err);\n        return cb(err);\n      }\n\n      ;\n\n      try {\n        var options = {\n          env: pm2_env,\n          detached: true,\n          cwd: pm2_env.pm_cwd || process.cwd(),\n          stdio: ['pipe', 'pipe', 'pipe', 'ipc'] //Same as fork() in node core\n\n        };\n\n        if (typeof pm2_env.windowsHide === \"boolean\") {\n          options.windowsHide = pm2_env.windowsHide;\n        } else {\n          options.windowsHide = true;\n        }\n\n        if (pm2_env.uid) {\n          options.uid = pm2_env.uid;\n        }\n\n        if (pm2_env.gid) {\n          options.gid = pm2_env.gid;\n        }\n\n        var cspr = spawn(command, args, options);\n      } catch (e) {\n        God.logAndGenerateError(e);\n        return cb(e);\n      }\n\n      if (!cspr || !cspr.stderr || !cspr.stdout) {\n        var fatalError = new Error('Process could not be forked properly, check your system health');\n        God.logAndGenerateError(fatalError);\n        return cb(fatalError);\n      }\n\n      cspr.process = {};\n      cspr.process.pid = cspr.pid;\n      cspr.pm2_env = pm2_env;\n\n      function transformLogToJson(pm2_env, type, data) {\n        return JSON.stringify({\n          message: data.toString(),\n          timestamp: pm2_env.log_date_format ? dayjs().format(pm2_env.log_date_format) : new Date().toISOString(),\n          type: type,\n          process_id: cspr.pm2_env.pm_id,\n          app_name: cspr.pm2_env.name\n        }) + '\\n';\n      }\n\n      function prefixLogWithDate(pm2_env, data) {\n        var log_data = [];\n        log_data = data.toString().split('\\n');\n        if (log_data.length > 1) log_data.pop();\n        log_data = log_data.map(line => `${dayjs().format(pm2_env.log_date_format)}: ${line}\\n`);\n        log_data = log_data.join('');\n        return log_data;\n      }\n\n      cspr.stderr.on('data', function forkErrData(data) {\n        var log_data = null; // via --out /dev/null --err /dev/null\n\n        if (pm2_env.disable_logs === true) return false;\n        if (pm2_env.log_type && pm2_env.log_type === 'json') log_data = transformLogToJson(pm2_env, 'err', data);else if (pm2_env.log_date_format) log_data = prefixLogWithDate(pm2_env, data);else log_data = data.toString();\n        God.bus.emit('log:err', {\n          process: {\n            pm_id: cspr.pm2_env.pm_id,\n            name: cspr.pm2_env.name,\n            rev: cspr.pm2_env.versioning && cspr.pm2_env.versioning.revision ? cspr.pm2_env.versioning.revision : null,\n            namespace: cspr.pm2_env.namespace\n          },\n          at: Utility.getDate(),\n          data: log_data\n        });\n\n        if (Utility.checkPathIsNull(pm2_env.pm_err_log_path) && (!pm2_env.pm_log_path || Utility.checkPathIsNull(pm2_env.pm_log_path))) {\n          return false;\n        }\n\n        stds.std && stds.std.write && stds.std.write(log_data);\n        stds.err && stds.err.write && stds.err.write(log_data);\n      });\n      cspr.stdout.on('data', function forkOutData(data) {\n        var log_data = null;\n        if (pm2_env.disable_logs === true) return false;\n        if (pm2_env.log_type && pm2_env.log_type === 'json') log_data = transformLogToJson(pm2_env, 'out', data);else if (pm2_env.log_date_format) log_data = prefixLogWithDate(pm2_env, data);else log_data = data.toString();\n        God.bus.emit('log:out', {\n          process: {\n            pm_id: cspr.pm2_env.pm_id,\n            name: cspr.pm2_env.name,\n            rev: cspr.pm2_env.versioning && cspr.pm2_env.versioning.revision ? cspr.pm2_env.versioning.revision : null,\n            namespace: cspr.pm2_env.namespace\n          },\n          at: Utility.getDate(),\n          data: log_data\n        });\n        if (Utility.checkPathIsNull(pm2_env.pm_out_log_path) && (!pm2_env.pm_log_path || Utility.checkPathIsNull(pm2_env.pm_log_path))) return false;\n        stds.std && stds.std.write && stds.std.write(log_data);\n        stds.out && stds.out.write && stds.out.write(log_data);\n      });\n      /**\n       * Broadcast message to God\n       */\n\n      cspr.on('message', function forkMessage(msg) {\n        /*********************************\n         * If you edit this function\n         * Do the same in ClusterMode.js !\n         *********************************/\n        if (msg.data && msg.type) {\n          process.nextTick(function () {\n            return God.bus.emit(msg.type ? msg.type : 'process:msg', {\n              at: Utility.getDate(),\n              data: msg.data,\n              process: {\n                pm_id: cspr.pm2_env.pm_id,\n                name: cspr.pm2_env.name,\n                versioning: cspr.pm2_env.versioning,\n                namespace: cspr.pm2_env.namespace\n              }\n            });\n          });\n        } else {\n          if (typeof msg == 'object' && 'node_version' in msg) {\n            cspr.pm2_env.node_version = msg.node_version;\n            return false;\n          } else if (typeof msg == 'object' && 'cron_restart' in msg) {\n            // cron onTick is invoked in the process\n            return God.restartProcessId({\n              id: cspr.pm2_env.pm_id\n            }, function () {\n              console.log('Application %s has been restarted via CRON', cspr.pm2_env.name);\n            });\n          }\n\n          return God.bus.emit('process:msg', {\n            at: Utility.getDate(),\n            raw: msg,\n            process: {\n              pm_id: cspr.pm2_env.pm_id,\n              name: cspr.pm2_env.name,\n              namespace: cspr.pm2_env.namespace\n            }\n          });\n        }\n      });\n\n      try {\n        var pid = cspr.pid;\n        if (typeof pid !== 'undefined') fs.writeFileSync(pidFile, pid.toString());\n      } catch (e) {\n        console.error(e.stack || e);\n      }\n\n      cspr.once('exit', function forkClose(status) {\n        try {\n          for (var k in stds) {\n            if (stds[k] && stds[k].destroy) stds[k].destroy();else if (stds[k] && stds[k].end) stds[k].end();else if (stds[k] && stds[k].close) stds[k].close();\n            stds[k] = stds[k]._file;\n          }\n        } catch (e) {\n          God.logAndGenerateError(e);\n        }\n      });\n\n      cspr._reloadLogs = function (cb) {\n        try {\n          for (var k in stds) {\n            if (stds[k] && stds[k].destroy) stds[k].destroy();else if (stds[k] && stds[k].end) stds[k].end();else if (stds[k] && stds[k].close) stds[k].close();\n            stds[k] = stds[k]._file;\n          }\n        } catch (e) {\n          God.logAndGenerateError(e);\n        } //cspr.removeAllListeners();\n\n\n        Utility.startLogging(stds, cb);\n      };\n\n      cspr.unref();\n      return cb(null, cspr);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/God/ForkMode.js"],"names":["log","require","fs","Utility","path","dayjs","semver","module","exports","ForkMode","God","forkMode","pm2_env","cb","command","args","console","name","pm_id","spawn","interpreter","exec_interpreter","pidFile","pm_pid_path","node_args","Array","isArray","concat","process","env","PM2_NODE_OPTIONS","split","RegExp","test","lt","version","push","resolve","dirname","filename","pm_exec_path","stds","out","pm_out_log_path","err","pm_err_log_path","std","pm_log_path","startLogging","result","logAndGenerateError","options","detached","cwd","pm_cwd","stdio","windowsHide","uid","gid","cspr","e","stderr","stdout","fatalError","Error","pid","transformLogToJson","type","data","JSON","stringify","message","toString","timestamp","log_date_format","format","Date","toISOString","process_id","app_name","prefixLogWithDate","log_data","length","pop","map","line","join","on","forkErrData","disable_logs","log_type","bus","emit","rev","versioning","revision","namespace","at","getDate","checkPathIsNull","write","forkOutData","forkMessage","msg","nextTick","node_version","restartProcessId","id","raw","writeFileSync","error","stack","once","forkClose","status","k","destroy","end","close","_file","_reloadLogs","unref"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n'use strict';\n\n/**\n * @file Fork execution related functions\n * @author Alexandre Strzelewicz <as@unitech.io>\n * @project PM2\n */\nvar log           = require('debug')('pm2:fork_mode');\nvar fs            = require('fs');\nvar Utility       = require('../Utility.js');\nvar path          = require('path');\nvar dayjs         = require('dayjs');\nvar semver  = require('semver')\n\n/**\n * Description\n * @method exports\n * @param {} God\n * @return\n */\nmodule.exports = function ForkMode(God) {\n  /**\n   * For all apps - FORK MODE\n   * fork the app\n   * @method forkMode\n   * @param {} pm2_env\n   * @param {} cb\n   * @return\n   */\n  God.forkMode = function forkMode(pm2_env, cb) {\n    var command = '';\n    var args    = [];\n\n    console.log(`App [${pm2_env.name}:${pm2_env.pm_id}] starting in -fork mode-`)\n    var spawn = require('child_process').spawn;\n\n    var interpreter = pm2_env.exec_interpreter || 'node';\n    var pidFile     = pm2_env.pm_pid_path;\n\n    if (interpreter !== 'none') {\n      command = interpreter;\n\n      if (pm2_env.node_args && Array.isArray(pm2_env.node_args)) {\n        args = args.concat(pm2_env.node_args);\n      }\n\n      // Deprecated - to remove at some point\n      if (process.env.PM2_NODE_OPTIONS) {\n        args = args.concat(process.env.PM2_NODE_OPTIONS.split(' '));\n      }\n\n      if (interpreter === 'node' || RegExp('node$').test(interpreter)) {\n        if (semver.lt(process.version, '10.0.0')) {\n          args.push(path.resolve(path.dirname(module.filename), '..', 'ProcessContainerForkLegacy.js'));\n        }\n        else {\n          args.push(path.resolve(path.dirname(module.filename), '..', 'ProcessContainerFork.js'));\n        }\n      }\n      else\n        args.push(pm2_env.pm_exec_path);\n    }\n    else {\n      command = pm2_env.pm_exec_path;\n      args = [ ];\n    }\n\n    if (pm2_env.args) {\n      args = args.concat(pm2_env.args);\n    }\n\n    // piping stream o file\n    var stds = {\n      out: pm2_env.pm_out_log_path,\n      err: pm2_env.pm_err_log_path\n    };\n\n    // entire log std if necessary.\n    if ('pm_log_path' in pm2_env){\n      stds.std = pm2_env.pm_log_path;\n    }\n\n    log(\"stds: %j\", stds);\n\n    Utility.startLogging(stds, function(err, result) {\n      if (err) {\n        God.logAndGenerateError(err);\n        return cb(err);\n      };\n\n      try {\n        var options = {\n          env      : pm2_env,\n          detached : true,\n          cwd      : pm2_env.pm_cwd || process.cwd(),\n          stdio    : ['pipe', 'pipe', 'pipe', 'ipc'] //Same as fork() in node core\n        }\n\n        if (typeof(pm2_env.windowsHide) === \"boolean\") {\n          options.windowsHide = pm2_env.windowsHide;\n        } else {\n          options.windowsHide = true;\n        }\n\n        if (pm2_env.uid) {\n          options.uid = pm2_env.uid\n        }\n\n        if (pm2_env.gid) {\n          options.gid = pm2_env.gid\n        }\n\n        var cspr = spawn(command, args, options);\n      } catch(e) {\n        God.logAndGenerateError(e);\n        return cb(e);\n      }\n\n      if (!cspr || !cspr.stderr || !cspr.stdout) {\n        var fatalError = new Error('Process could not be forked properly, check your system health')\n        God.logAndGenerateError(fatalError);\n        return cb(fatalError);\n      }\n\n      cspr.process = {};\n      cspr.process.pid = cspr.pid;\n      cspr.pm2_env = pm2_env;\n\n      function transformLogToJson(pm2_env, type, data) {\n        return JSON.stringify({\n          message : data.toString(),\n          timestamp : pm2_env.log_date_format ? dayjs().format(pm2_env.log_date_format) : new Date().toISOString(),\n          type : type,\n          process_id : cspr.pm2_env.pm_id,\n          app_name : cspr.pm2_env.name\n        }) + '\\n'\n      }\n\n      function prefixLogWithDate(pm2_env, data) {\n        var log_data = []\n        log_data = data.toString().split('\\n')\n        if (log_data.length > 1)\n          log_data.pop()\n        log_data = log_data.map(line => `${dayjs().format(pm2_env.log_date_format)}: ${line}\\n`)\n        log_data = log_data.join('')\n        return log_data\n      }\n\n      cspr.stderr.on('data', function forkErrData(data) {\n        var log_data = null;\n\n        // via --out /dev/null --err /dev/null\n        if (pm2_env.disable_logs === true) return false;\n\n        if (pm2_env.log_type && pm2_env.log_type === 'json')\n          log_data = transformLogToJson(pm2_env, 'err', data)\n        else if (pm2_env.log_date_format)\n          log_data = prefixLogWithDate(pm2_env, data)\n        else\n          log_data = data.toString();\n\n        God.bus.emit('log:err', {\n          process : {\n            pm_id      : cspr.pm2_env.pm_id,\n            name       : cspr.pm2_env.name,\n            rev        : (cspr.pm2_env.versioning && cspr.pm2_env.versioning.revision) ? cspr.pm2_env.versioning.revision : null,\n            namespace  : cspr.pm2_env.namespace\n          },\n          at  : Utility.getDate(),\n          data : log_data\n        });\n\n        if (Utility.checkPathIsNull(pm2_env.pm_err_log_path) &&\n          (!pm2_env.pm_log_path || Utility.checkPathIsNull(pm2_env.pm_log_path))) {\n          return false;\n        }\n\n        stds.std && stds.std.write && stds.std.write(log_data);\n        stds.err && stds.err.write && stds.err.write(log_data);\n      });\n\n      cspr.stdout.on('data', function forkOutData(data) {\n        var log_data = null;\n\n        if (pm2_env.disable_logs === true)\n          return false;\n\n        if (pm2_env.log_type && pm2_env.log_type === 'json')\n          log_data = transformLogToJson(pm2_env, 'out', data)\n        else if (pm2_env.log_date_format)\n          log_data = prefixLogWithDate(pm2_env, data)\n        else\n          log_data = data.toString()\n\n        God.bus.emit('log:out', {\n          process : {\n            pm_id      : cspr.pm2_env.pm_id,\n            name       : cspr.pm2_env.name,\n            rev        : (cspr.pm2_env.versioning && cspr.pm2_env.versioning.revision) ? cspr.pm2_env.versioning.revision : null,\n            namespace  : cspr.pm2_env.namespace\n          },\n          at  : Utility.getDate(),\n          data : log_data\n        });\n\n        if (Utility.checkPathIsNull(pm2_env.pm_out_log_path) &&\n          (!pm2_env.pm_log_path || Utility.checkPathIsNull(pm2_env.pm_log_path)))\n          return false;\n\n        stds.std && stds.std.write && stds.std.write(log_data);\n        stds.out && stds.out.write && stds.out.write(log_data);\n      });\n\n      /**\n       * Broadcast message to God\n       */\n      cspr.on('message', function forkMessage(msg) {\n        /*********************************\n         * If you edit this function\n         * Do the same in ClusterMode.js !\n         *********************************/\n        if (msg.data && msg.type) {\n          process.nextTick(function() {\n            return God.bus.emit(msg.type ? msg.type : 'process:msg', {\n              at      : Utility.getDate(),\n              data    : msg.data,\n              process : {\n                pm_id      : cspr.pm2_env.pm_id,\n                name       : cspr.pm2_env.name,\n                versioning : cspr.pm2_env.versioning,\n                namespace  : cspr.pm2_env.namespace\n              }\n            });\n          });\n        }\n        else {\n\n          if (typeof msg == 'object' && 'node_version' in msg) {\n            cspr.pm2_env.node_version = msg.node_version;\n            return false;\n          } else if (typeof msg == 'object' && 'cron_restart' in msg) {\n            // cron onTick is invoked in the process\n            return God.restartProcessId({\n              id : cspr.pm2_env.pm_id\n            }, function() {\n              console.log('Application %s has been restarted via CRON', cspr.pm2_env.name);\n            });\n          }\n\n          return God.bus.emit('process:msg', {\n            at      : Utility.getDate(),\n            raw     : msg,\n            process :  {\n              pm_id      : cspr.pm2_env.pm_id,\n              name       : cspr.pm2_env.name,\n              namespace  : cspr.pm2_env.namespace\n            }\n          });\n        }\n      });\n\n      try {\n        var pid = cspr.pid\n        if (typeof(pid) !== 'undefined')\n          fs.writeFileSync(pidFile, pid.toString());\n      } catch (e) {\n        console.error(e.stack || e);\n      }\n\n      cspr.once('exit', function forkClose(status) {\n        try {\n          for(var k in stds){\n            if (stds[k] && stds[k].destroy) stds[k].destroy();\n            else if (stds[k] && stds[k].end) stds[k].end();\n            else if (stds[k] && stds[k].close) stds[k].close();\n            stds[k] = stds[k]._file;\n          }\n        } catch(e) { God.logAndGenerateError(e);}\n      });\n\n      cspr._reloadLogs = function(cb) {\n        try {\n          for (var k in stds){\n            if (stds[k] && stds[k].destroy) stds[k].destroy();\n            else if (stds[k] && stds[k].end) stds[k].end();\n            else if (stds[k] && stds[k].close) stds[k].close();\n            stds[k] = stds[k]._file;\n          }\n        } catch(e) { God.logAndGenerateError(e);}\n        //cspr.removeAllListeners();\n        Utility.startLogging(stds, cb);\n      };\n\n      cspr.unref();\n\n      return cb(null, cspr);\n    });\n\n  };\n};\n"]},"metadata":{},"sourceType":"script"}