{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n'use strict';\n/**\n * @file ActionMethod like restart, stop, monitor... are here\n * @author Alexandre Strzelewicz <as@unitech.io>\n * @project PM2\n */\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar eachLimit = require('async/eachLimit');\n\nvar os = require('os');\n\nvar p = path;\n\nvar cst = require('../../constants.js');\n\nvar pkg = require('../../package.json');\n\nvar pidusage = require('pidusage');\n\nvar util = require('util');\n\nvar debug = require('debug')('pm2:ActionMethod');\n\nvar Utility = require('../Utility');\n/**\n * Description\n * @method exports\n * @param {} God\n * @return\n */\n\n\nmodule.exports = function (God) {\n  /**\n   * Description\n   * @method getMonitorData\n   * @param {} env\n   * @param {} cb\n   * @return\n   */\n  God.getMonitorData = function getMonitorData(env, cb) {\n    var processes = God.getFormatedProcesses();\n    var pids = processes.filter(filterBadProcess).map(function (pro, i) {\n      var pid = getProcessId(pro);\n      return pid;\n    }); // No pids, return empty statistics\n\n    if (pids.length === 0) {\n      return cb(null, processes.map(function (pro) {\n        pro['monit'] = {\n          memory: 0,\n          cpu: 0\n        };\n        return pro;\n      }));\n    }\n\n    pidusage(pids, function retPidUsage(err, statistics) {\n      // Just log, we'll set empty statistics\n      if (err) {\n        console.error('Error caught while calling pidusage');\n        console.error(err);\n        return cb(null, processes.map(function (pro) {\n          pro['monit'] = {\n            memory: 0,\n            cpu: 0\n          };\n          return pro;\n        }));\n      }\n\n      if (!statistics) {\n        console.error('Statistics is not defined!');\n        return cb(null, processes.map(function (pro) {\n          pro['monit'] = {\n            memory: 0,\n            cpu: 0\n          };\n          return pro;\n        }));\n      }\n\n      processes = processes.map(function (pro) {\n        if (filterBadProcess(pro) === false) {\n          pro['monit'] = {\n            memory: 0,\n            cpu: 0\n          };\n          return pro;\n        }\n\n        var pid = getProcessId(pro);\n        var stat = statistics[pid];\n\n        if (!stat) {\n          pro['monit'] = {\n            memory: 0,\n            cpu: 0\n          };\n          return pro;\n        }\n\n        pro['monit'] = {\n          memory: stat.memory,\n          cpu: Math.round(stat.cpu * 10) / 10\n        };\n        return pro;\n      });\n      cb(null, processes);\n    });\n  };\n  /**\n   * Description\n   * @method getSystemData\n   * @param {} env\n   * @param {} cb\n   * @return\n   */\n\n\n  God.getSystemData = function getSystemData(env, cb) {\n    if (God.system_infos_proc !== null) God.system_infos_proc.query((err, data) => {\n      cb(null, data);\n    });else {\n      cb(new Error('Sysinfos not launched, type: pm2 sysmonit'));\n    }\n  };\n  /**\n   * Description\n   * @method dumpProcessList\n   * @param {} cb\n   * @return\n   */\n\n\n  God.dumpProcessList = function (cb) {\n    var process_list = [];\n    var apps = Utility.clone(God.getFormatedProcesses());\n    var that = this; // Don't override the actual dump file if process list is empty\n    // unless user explicitely did `pm2 dump`.\n    // This often happens when PM2 crashed, we don't want to override\n    // the dump file with an empty list of process.\n\n    if (!apps[0]) {\n      debug('[PM2] Did not override dump file because list of processes is empty');\n      return cb(null, {\n        success: true,\n        process_list: process_list\n      });\n    }\n\n    function fin(err) {\n      // try to fix issues with empty dump file\n      // like #3485\n      if (process_list.length === 0) {\n        // fix : if no dump file, no process, only module and after pm2 update\n        if (!fs.existsSync(cst.DUMP_FILE_PATH) && typeof that.clearDump === 'function') {\n          that.clearDump(function () {});\n        } // if no process in list don't modify dump file\n        // process list should not be empty\n\n\n        return cb(null, {\n          success: true,\n          process_list: process_list\n        });\n      } // Back up dump file\n\n\n      try {\n        if (fs.existsSync(cst.DUMP_FILE_PATH)) {\n          fs.writeFileSync(cst.DUMP_BACKUP_FILE_PATH, fs.readFileSync(cst.DUMP_FILE_PATH));\n        }\n      } catch (e) {\n        console.error(e.stack || e);\n      } // Overwrite dump file, delete if broken\n\n\n      try {\n        fs.writeFileSync(cst.DUMP_FILE_PATH, JSON.stringify(process_list));\n      } catch (e) {\n        console.error(e.stack || e);\n\n        try {\n          // try to backup file\n          if (fs.existsSync(cst.DUMP_BACKUP_FILE_PATH)) {\n            fs.writeFileSync(cst.DUMP_FILE_PATH, fs.readFileSync(cst.DUMP_BACKUP_FILE_PATH));\n          }\n        } catch (e) {\n          // don't keep broken file\n          fs.unlinkSync(cst.DUMP_FILE_PATH);\n          console.error(e.stack || e);\n        }\n      }\n\n      return cb(null, {\n        success: true,\n        process_list: process_list\n      });\n    }\n\n    function saveProc(apps) {\n      if (!apps[0]) return fin(null);\n      delete apps[0].pm2_env.instances;\n      delete apps[0].pm2_env.pm_id; // Do not dump modules\n\n      if (!apps[0].pm2_env.pmx_module) process_list.push(apps[0].pm2_env);\n      apps.shift();\n      return saveProc(apps);\n    }\n\n    saveProc(apps);\n  };\n  /**\n   * Description\n   * @method ping\n   * @param {} env\n   * @param {} cb\n   * @return CallExpression\n   */\n\n\n  God.ping = function (env, cb) {\n    return cb(null, {\n      msg: 'pong'\n    });\n  };\n  /**\n   * Description\n   * @method notifyKillPM2\n   */\n\n\n  God.notifyKillPM2 = function () {\n    God.pm2_being_killed = true;\n  };\n  /**\n   * Duplicate a process\n   * @method duplicateProcessId\n   * @param {} id\n   * @param {} cb\n   * @return CallExpression\n   */\n\n\n  God.duplicateProcessId = function (id, cb) {\n    if (!(id in God.clusters_db)) return cb(God.logAndGenerateError(id + ' id unknown'), {});\n    if (!God.clusters_db[id] || !God.clusters_db[id].pm2_env) return cb(God.logAndGenerateError('Error when getting proc || proc.pm2_env'), {});\n    var proc = Utility.clone(God.clusters_db[id].pm2_env);\n    delete proc.created_at;\n    delete proc.pm_id;\n    delete proc.unique_id; // generate a new unique id for new process\n\n    proc.unique_id = Utility.generateUUID();\n    God.injectVariables(proc, function inject(_err, proc) {\n      return God.executeApp(Utility.clone(proc), function (err, clu) {\n        if (err) return cb(err);\n        God.notify('start', clu, true);\n        return cb(err, Utility.clone(clu));\n      });\n    });\n  };\n  /**\n   * Start a stopped process by ID\n   * @method startProcessId\n   * @param {} id\n   * @param {} cb\n   * @return CallExpression\n   */\n\n\n  God.startProcessId = function (id, cb) {\n    if (!(id in God.clusters_db)) return cb(God.logAndGenerateError(id + ' id unknown'), {});\n    var proc = God.clusters_db[id];\n    if (proc.pm2_env.status == cst.ONLINE_STATUS) return cb(God.logAndGenerateError('process already online'), {});\n    if (proc.pm2_env.status == cst.LAUNCHING_STATUS) return cb(God.logAndGenerateError('process already started'), {});\n    if (proc.process && proc.process.pid) return cb(God.logAndGenerateError('Process with pid ' + proc.process.pid + ' already exists'), {});\n    return God.executeApp(God.clusters_db[id].pm2_env, function (err, proc) {\n      return cb(err, Utility.clone(proc));\n    });\n  };\n  /**\n   * Stop a process and set it on state 'stopped'\n   * @method stopProcessId\n   * @param {} id\n   * @param {} cb\n   * @return Literal\n   */\n\n\n  God.stopProcessId = function (id, cb) {\n    if (typeof id == 'object' && 'id' in id) id = id.id;\n    if (!(id in God.clusters_db)) return cb(God.logAndGenerateError(id + ' : id unknown'), {});\n    var proc = God.clusters_db[id]; //clear time-out restart task\n\n    clearTimeout(proc.pm2_env.restart_task);\n\n    if (proc.pm2_env.status == cst.STOPPED_STATUS) {\n      proc.process.pid = 0;\n      return cb(null, God.getFormatedProcess(id));\n    } // state == 'none' means that the process is not online yet\n\n\n    if (proc.state && proc.state === 'none') return setTimeout(function () {\n      God.stopProcessId(id, cb);\n    }, 250);\n    console.log('Stopping app:%s id:%s', proc.pm2_env.name, proc.pm2_env.pm_id);\n    proc.pm2_env.status = cst.STOPPING_STATUS;\n\n    if (!proc.process.pid) {\n      console.error('app=%s id=%d does not have a pid', proc.pm2_env.name, proc.pm2_env.pm_id);\n      proc.pm2_env.status = cst.STOPPED_STATUS;\n      return cb(null, {\n        error: true,\n        message: 'could not kill process w/o pid'\n      });\n    }\n\n    God.killProcess(proc.process.pid, proc.pm2_env, function (err) {\n      proc.pm2_env.status = cst.STOPPED_STATUS;\n      God.notify('exit', proc);\n\n      if (err && err.type && err.type === 'timeout') {\n        console.error('app=%s id=%d pid=%s could not be stopped', proc.pm2_env.name, proc.pm2_env.pm_id, proc.process.pid);\n        proc.pm2_env.status = cst.ERRORED_STATUS;\n        return cb(null, God.getFormatedProcess(id));\n      }\n\n      if (proc.pm2_env.pm_id.toString().indexOf('_old_') !== 0) {\n        try {\n          fs.unlinkSync(proc.pm2_env.pm_pid_path);\n        } catch (e) {}\n      }\n\n      if (proc.pm2_env.axm_actions) proc.pm2_env.axm_actions = [];\n      if (proc.pm2_env.axm_monitor) proc.pm2_env.axm_monitor = {};\n      proc.process.pid = 0;\n      return cb(null, God.getFormatedProcess(id));\n    });\n  };\n\n  God.resetMetaProcessId = function (id, cb) {\n    if (!(id in God.clusters_db)) return cb(God.logAndGenerateError(id + ' id unknown'), {});\n    if (!God.clusters_db[id] || !God.clusters_db[id].pm2_env) return cb(God.logAndGenerateError('Error when getting proc || proc.pm2_env'), {});\n    God.clusters_db[id].pm2_env.created_at = Utility.getDate();\n    God.clusters_db[id].pm2_env.unstable_restarts = 0;\n    God.clusters_db[id].pm2_env.restart_time = 0;\n    return cb(null, God.getFormatedProcesses());\n  };\n  /**\n   * Delete a process by id\n   * It will stop it and remove it from the database\n   * @method deleteProcessId\n   * @param {} id\n   * @param {} cb\n   * @return Literal\n   */\n\n\n  God.deleteProcessId = function (id, cb) {\n    God.deleteCron(id);\n    God.stopProcessId(id, function (err, proc) {\n      if (err) return cb(God.logAndGenerateError(err), {}); // ! transform to slow object\n\n      delete God.clusters_db[id];\n      if (Object.keys(God.clusters_db).length == 0) God.next_id = 0;\n      return cb(null, proc);\n    });\n    return false;\n  };\n  /**\n   * Restart a process ID\n   * If the process is online it will not put it on state stopped\n   * but directly kill it and let God restart it\n   * @method restartProcessId\n   * @param {} id\n   * @param {} cb\n   * @return Literal\n   */\n\n\n  God.restartProcessId = function (opts, cb) {\n    var id = opts.id;\n    var env = opts.env || {};\n    if (typeof id === 'undefined') return cb(God.logAndGenerateError('opts.id not passed to restartProcessId', opts));\n    if (!(id in God.clusters_db)) return cb(God.logAndGenerateError('God db process id unknown'), {});\n    var proc = God.clusters_db[id];\n    God.resetState(proc.pm2_env);\n    /**\n     * Merge new application configuration on restart\n     * Same system in reloadProcessId and softReloadProcessId\n     */\n\n    Utility.extend(proc.pm2_env.env, env);\n    Utility.extendExtraConfig(proc, opts);\n\n    if (God.pm2_being_killed) {\n      return cb(God.logAndGenerateError('[RestartProcessId] PM2 is being killed, stopping restart procedure...'));\n    }\n\n    if (proc.pm2_env.status === cst.ONLINE_STATUS || proc.pm2_env.status === cst.LAUNCHING_STATUS) {\n      God.stopProcessId(id, function (err) {\n        if (God.pm2_being_killed) return cb(God.logAndGenerateError('[RestartProcessId] PM2 is being killed, stopping restart procedure...'));\n        proc.pm2_env.restart_time += 1;\n        return God.startProcessId(id, cb);\n      });\n      return false;\n    } else {\n      debug('[restart] process not online, starting it');\n      return God.startProcessId(id, cb);\n    }\n  };\n  /**\n   * Restart all process by name\n   * @method restartProcessName\n   * @param {} name\n   * @param {} cb\n   * @return Literal\n   */\n\n\n  God.restartProcessName = function (name, cb) {\n    var processes = God.findByName(name);\n    if (processes && processes.length === 0) return cb(God.logAndGenerateError('Unknown process'), {});\n    eachLimit(processes, cst.CONCURRENT_ACTIONS, function (proc, next) {\n      if (God.pm2_being_killed) return next('[Watch] PM2 is being killed, stopping restart procedure...');\n      if (proc.pm2_env.status === cst.ONLINE_STATUS) return God.restartProcessId({\n        id: proc.pm2_env.pm_id\n      }, next);else if (proc.pm2_env.status !== cst.STOPPING_STATUS && proc.pm2_env.status !== cst.LAUNCHING_STATUS) return God.startProcessId(proc.pm2_env.pm_id, next);else return next(util.format('[Watch] Process name %s is being stopped so I won\\'t restart it', name));\n    }, function (err) {\n      if (err) return cb(God.logAndGenerateError(err));\n      return cb(null, God.getFormatedProcesses());\n    });\n    return false;\n  };\n  /**\n   * Send system signal to process id\n   * @method sendSignalToProcessId\n   * @param {} opts\n   * @param {} cb\n   * @return CallExpression\n   */\n\n\n  God.sendSignalToProcessId = function (opts, cb) {\n    var id = opts.process_id;\n    var signal = opts.signal;\n    if (!(id in God.clusters_db)) return cb(God.logAndGenerateError(id + ' id unknown'), {});\n    var proc = God.clusters_db[id]; //God.notify('send signal ' + signal, proc, true);\n\n    try {\n      process.kill(God.clusters_db[id].process.pid, signal);\n    } catch (e) {\n      return cb(God.logAndGenerateError('Error when sending signal (signal unknown)'), {});\n    }\n\n    return cb(null, God.getFormatedProcesses());\n  };\n  /**\n   * Send system signal to all processes by name\n   * @method sendSignalToProcessName\n   * @param {} opts\n   * @param {} cb\n   * @return\n   */\n\n\n  God.sendSignalToProcessName = function (opts, cb) {\n    var processes = God.findByName(opts.process_name);\n    var signal = opts.signal;\n    if (processes && processes.length === 0) return cb(God.logAndGenerateError('Unknown process name'), {});\n    eachLimit(processes, cst.CONCURRENT_ACTIONS, function (proc, next) {\n      if (proc.pm2_env.status == cst.ONLINE_STATUS || proc.pm2_env.status == cst.LAUNCHING_STATUS) {\n        try {\n          process.kill(proc.process.pid, signal);\n        } catch (e) {\n          return next(e);\n        }\n      }\n\n      return setTimeout(next, 200);\n    }, function (err) {\n      if (err) return cb(God.logAndGenerateError(err), {});\n      return cb(null, God.getFormatedProcesses());\n    });\n  };\n  /**\n   * Stop watching daemon\n   * @method stopWatch\n   * @param {} method\n   * @param {} value\n   * @param {} fn\n   * @return\n   */\n\n\n  God.stopWatch = function (method, value, fn) {\n    var env = null;\n\n    if (method == 'stopAll' || method == 'deleteAll') {\n      var processes = God.getFormatedProcesses();\n      processes.forEach(function (proc) {\n        God.clusters_db[proc.pm_id].pm2_env.watch = false;\n        God.watch.disable(proc.pm2_env);\n      });\n    } else {\n      if (method.indexOf('ProcessId') !== -1) {\n        env = God.clusters_db[value];\n      } else if (method.indexOf('ProcessName') !== -1) {\n        env = God.clusters_db[God.findByName(value)];\n      }\n\n      if (env) {\n        God.watch.disable(env.pm2_env);\n        env.pm2_env.watch = false;\n      }\n    }\n\n    return fn(null, {\n      success: true\n    });\n  };\n  /**\n   * Toggle watching daemon\n   * @method toggleWatch\n   * @param {String} method\n   * @param {Object} application environment, should include id\n   * @param {Function} callback\n   */\n\n\n  God.toggleWatch = function (method, value, fn) {\n    var env = null;\n\n    if (method == 'restartProcessId') {\n      env = God.clusters_db[value.id];\n    } else if (method == 'restartProcessName') {\n      env = God.clusters_db[God.findByName(value)];\n    }\n\n    if (env) {\n      env.pm2_env.watch = !env.pm2_env.watch;\n      if (env.pm2_env.watch) God.watch.enable(env.pm2_env);else God.watch.disable(env.pm2_env);\n    }\n\n    return fn(null, {\n      success: true\n    });\n  };\n  /**\n   * Start Watch\n   * @method startWatch\n   * @param {String} method\n   * @param {Object} application environment, should include id\n   * @param {Function} callback\n   */\n\n\n  God.startWatch = function (method, value, fn) {\n    var env = null;\n\n    if (method == 'restartProcessId') {\n      env = God.clusters_db[value.id];\n    } else if (method == 'restartProcessName') {\n      env = God.clusters_db[God.findByName(value)];\n    }\n\n    if (env) {\n      if (env.pm2_env.watch) return fn(null, {\n        success: true,\n        notrestarted: true\n      });\n      God.watch.enable(env.pm2_env); //env.pm2_env.env.watch = true;\n\n      env.pm2_env.watch = true;\n    }\n\n    return fn(null, {\n      success: true\n    });\n  };\n  /**\n   * Description\n   * @method reloadLogs\n   * @param {} opts\n   * @param {} cb\n   * @return CallExpression\n   */\n\n\n  God.reloadLogs = function (opts, cb) {\n    console.log('Reloading logs...');\n    var processIds = Object.keys(God.clusters_db);\n    processIds.forEach(function (id) {\n      var cluster = God.clusters_db[id];\n      console.log('Reloading logs for process id %d', id);\n\n      if (cluster && cluster.pm2_env) {\n        // Cluster mode\n        if (cluster.send && cluster.pm2_env.exec_mode == 'cluster_mode') {\n          try {\n            cluster.send({\n              type: 'log:reload'\n            });\n          } catch (e) {\n            console.error(e.message || e);\n          }\n        } // Fork mode\n        else if (cluster._reloadLogs) {\n            cluster._reloadLogs(function (err) {\n              if (err) God.logAndGenerateError(err);\n            });\n          }\n      }\n    });\n    return cb(null, {});\n  };\n  /**\n   * Send Line To Stdin\n   * @method sendLineToStdin\n   * @param Object packet\n   * @param String pm_id Process ID\n   * @param String line  Line to send to process stdin\n   */\n\n\n  God.sendLineToStdin = function (packet, cb) {\n    if (typeof packet.pm_id == 'undefined' || !packet.line) return cb(God.logAndGenerateError('pm_id or line field missing'), {});\n    var pm_id = packet.pm_id;\n    var line = packet.line;\n    var proc = God.clusters_db[pm_id];\n    if (!proc) return cb(God.logAndGenerateError('Process with ID <' + pm_id + '> unknown.'), {});\n    if (proc.pm2_env.exec_mode == 'cluster_mode') return cb(God.logAndGenerateError('Cannot send line to processes in cluster mode'), {});\n    if (proc.pm2_env.status != cst.ONLINE_STATUS && proc.pm2_env.status != cst.LAUNCHING_STATUS) return cb(God.logAndGenerateError('Process with ID <' + pm_id + '> offline.'), {});\n\n    try {\n      proc.stdin.write(line, function () {\n        return cb(null, {\n          pm_id: pm_id,\n          line: line\n        });\n      });\n    } catch (e) {\n      return cb(God.logAndGenerateError(e), {});\n    }\n  };\n  /**\n   * @param {object} packet\n   * @param {function} cb\n   */\n\n\n  God.sendDataToProcessId = function (packet, cb) {\n    if (typeof packet.id == 'undefined' || typeof packet.data == 'undefined' || !packet.topic) return cb(God.logAndGenerateError('ID, DATA or TOPIC field is missing'), {});\n    var pm_id = packet.id;\n    var data = packet.data;\n    var proc = God.clusters_db[pm_id];\n    if (!proc) return cb(God.logAndGenerateError('Process with ID <' + pm_id + '> unknown.'), {});\n    if (proc.pm2_env.status != cst.ONLINE_STATUS && proc.pm2_env.status != cst.LAUNCHING_STATUS) return cb(God.logAndGenerateError('Process with ID <' + pm_id + '> offline.'), {});\n\n    try {\n      proc.send(packet);\n    } catch (e) {\n      return cb(God.logAndGenerateError(e), {});\n    }\n\n    return cb(null, {\n      success: true,\n      data: packet\n    });\n  };\n  /**\n   * Send Message to Process by id or name\n   * @method msgProcess\n   * @param {} cmd\n   * @param {} cb\n   * @return Literal\n   */\n\n\n  God.msgProcess = function (cmd, cb) {\n    if ('id' in cmd) {\n      var id = cmd.id;\n      if (!(id in God.clusters_db)) return cb(God.logAndGenerateError(id + ' id unknown'), {});\n      var proc = God.clusters_db[id];\n      var action_exist = false;\n      proc.pm2_env.axm_actions.forEach(function (action) {\n        if (action.action_name == cmd.msg) {\n          action_exist = true; // Reset output buffer\n\n          action.output = [];\n        }\n      });\n\n      if (action_exist == false) {\n        return cb(God.logAndGenerateError('Action doesn\\'t exist ' + cmd.msg + ' for ' + proc.pm2_env.name), {});\n      }\n\n      if (proc.pm2_env.status == cst.ONLINE_STATUS || proc.pm2_env.status == cst.LAUNCHING_STATUS) {\n        /*\n         * Send message\n         */\n        if (cmd.opts == null && !cmd.uuid) proc.send(cmd.msg);else proc.send(cmd);\n        return cb(null, {\n          process_count: 1,\n          success: true\n        });\n      } else return cb(God.logAndGenerateError(id + ' : id offline'), {});\n    } else if ('name' in cmd) {\n      /*\n       * As names are not unique in case of cluster, this\n       * will send msg to all process matching  'name'\n       */\n      var name = cmd.name;\n      var arr = Object.keys(God.clusters_db);\n      var sent = 0;\n\n      (function ex(arr) {\n        if (arr[0] == null || !arr) {\n          return cb(null, {\n            process_count: sent,\n            success: true\n          });\n        }\n\n        var id = arr[0];\n\n        if (!God.clusters_db[id] || !God.clusters_db[id].pm2_env) {\n          arr.shift();\n          return ex(arr);\n        }\n\n        var proc_env = God.clusters_db[id].pm2_env;\n        const isActionAvailable = proc_env.axm_actions.find(action => action.action_name === cmd.msg) !== undefined; // if action doesn't exist for this app\n        // try with the next one\n\n        if (isActionAvailable === false) {\n          arr.shift();\n          return ex(arr);\n        }\n\n        if ((p.basename(proc_env.pm_exec_path) == name || proc_env.name == name || proc_env.namespace == name || name == 'all') && (proc_env.status == cst.ONLINE_STATUS || proc_env.status == cst.LAUNCHING_STATUS)) {\n          proc_env.axm_actions.forEach(function (action) {\n            if (action.action_name == cmd.msg) {\n              action_exist = true;\n            }\n          });\n\n          if (action_exist == false || proc_env.axm_actions.length == 0) {\n            arr.shift();\n            return ex(arr);\n          }\n\n          if (cmd.opts == null) God.clusters_db[id].send(cmd.msg);else God.clusters_db[id].send(cmd);\n          sent++;\n          arr.shift();\n          return ex(arr);\n        } else {\n          arr.shift();\n          return ex(arr);\n        }\n\n        return false;\n      })(arr);\n    } else return cb(God.logAndGenerateError('method requires name or id field'), {});\n\n    return false;\n  };\n  /**\n   * Description\n   * @method getVersion\n   * @param {} env\n   * @param {} cb\n   * @return CallExpression\n   */\n\n\n  God.getVersion = function (env, cb) {\n    process.nextTick(function () {\n      return cb(null, pkg.version);\n    });\n  };\n\n  God.monitor = function Monitor(pm_id, cb) {\n    if (!God.clusters_db[pm_id] || !God.clusters_db[pm_id].pm2_env) return cb(new Error('Unknown pm_id'));\n    God.clusters_db[pm_id].pm2_env._km_monitored = true;\n    return cb(null, {\n      success: true,\n      pm_id: pm_id\n    });\n  };\n\n  God.unmonitor = function Monitor(pm_id, cb) {\n    if (!God.clusters_db[pm_id] || !God.clusters_db[pm_id].pm2_env) return cb(new Error('Unknown pm_id'));\n    God.clusters_db[pm_id].pm2_env._km_monitored = false;\n    return cb(null, {\n      success: true,\n      pm_id: pm_id\n    });\n  };\n\n  God.getReport = function (arg, cb) {\n    var report = {\n      pm2_version: pkg.version,\n      node_version: 'N/A',\n      node_path: process.env['_'] || 'not found',\n      argv0: process.argv0,\n      argv: process.argv,\n      user: process.env.USER,\n      uid: cst.IS_WINDOWS === false && process.geteuid ? process.geteuid() : 'N/A',\n      gid: cst.IS_WINDOWS === false && process.getegid ? process.getegid() : 'N/A',\n      env: process.env,\n      managed_apps: Object.keys(God.clusters_db).length,\n      started_at: God.started_at\n    };\n\n    if (process.versions && process.versions.node) {\n      report.node_version = process.versions.node;\n    }\n\n    process.nextTick(function () {\n      return cb(null, report);\n    });\n  };\n};\n\nfunction filterBadProcess(pro) {\n  if (pro.pm2_env.status !== cst.ONLINE_STATUS) {\n    return false;\n  }\n\n  if (pro.pm2_env.axm_options && pro.pm2_env.axm_options.pid) {\n    if (isNaN(pro.pm2_env.axm_options.pid)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getProcessId(pro) {\n  var pid = pro.pid;\n\n  if (pro.pm2_env.axm_options && pro.pm2_env.axm_options.pid) {\n    pid = pro.pm2_env.axm_options.pid;\n  }\n\n  return pid;\n}","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/God/ActionMethods.js"],"names":["fs","require","path","eachLimit","os","p","cst","pkg","pidusage","util","debug","Utility","module","exports","God","getMonitorData","env","cb","processes","getFormatedProcesses","pids","filter","filterBadProcess","map","pro","i","pid","getProcessId","length","memory","cpu","retPidUsage","err","statistics","console","error","stat","Math","round","getSystemData","system_infos_proc","query","data","Error","dumpProcessList","process_list","apps","clone","that","success","fin","existsSync","DUMP_FILE_PATH","clearDump","writeFileSync","DUMP_BACKUP_FILE_PATH","readFileSync","e","stack","JSON","stringify","unlinkSync","saveProc","pm2_env","instances","pm_id","pmx_module","push","shift","ping","msg","notifyKillPM2","pm2_being_killed","duplicateProcessId","id","clusters_db","logAndGenerateError","proc","created_at","unique_id","generateUUID","injectVariables","inject","_err","executeApp","clu","notify","startProcessId","status","ONLINE_STATUS","LAUNCHING_STATUS","process","stopProcessId","clearTimeout","restart_task","STOPPED_STATUS","getFormatedProcess","state","setTimeout","log","name","STOPPING_STATUS","message","killProcess","type","ERRORED_STATUS","toString","indexOf","pm_pid_path","axm_actions","axm_monitor","resetMetaProcessId","getDate","unstable_restarts","restart_time","deleteProcessId","deleteCron","Object","keys","next_id","restartProcessId","opts","resetState","extend","extendExtraConfig","restartProcessName","findByName","CONCURRENT_ACTIONS","next","format","sendSignalToProcessId","process_id","signal","kill","sendSignalToProcessName","process_name","stopWatch","method","value","fn","forEach","watch","disable","toggleWatch","enable","startWatch","notrestarted","reloadLogs","processIds","cluster","send","exec_mode","_reloadLogs","sendLineToStdin","packet","line","stdin","write","sendDataToProcessId","topic","msgProcess","cmd","action_exist","action","action_name","output","uuid","process_count","arr","sent","ex","proc_env","isActionAvailable","find","undefined","basename","pm_exec_path","namespace","getVersion","nextTick","version","monitor","Monitor","_km_monitored","unmonitor","getReport","arg","report","pm2_version","node_version","node_path","argv0","argv","user","USER","uid","IS_WINDOWS","geteuid","gid","getegid","managed_apps","started_at","versions","node","axm_options","isNaN"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n'use strict';\n\n/**\n * @file ActionMethod like restart, stop, monitor... are here\n * @author Alexandre Strzelewicz <as@unitech.io>\n * @project PM2\n */\n\nvar fs            = require('fs');\nvar path          = require('path');\nvar eachLimit     = require('async/eachLimit');\nvar os            = require('os');\nvar p             = path;\nvar cst           = require('../../constants.js');\nvar pkg           = require('../../package.json');\nvar pidusage      = require('pidusage');\nvar util          = require('util');\nvar debug         = require('debug')('pm2:ActionMethod');\nvar Utility       = require('../Utility');\n\n/**\n * Description\n * @method exports\n * @param {} God\n * @return\n */\nmodule.exports = function(God) {\n  /**\n   * Description\n   * @method getMonitorData\n   * @param {} env\n   * @param {} cb\n   * @return\n   */\n  God.getMonitorData = function getMonitorData(env, cb) {\n    var processes = God.getFormatedProcesses();\n    var pids = processes.filter(filterBadProcess)\n      .map(function(pro, i) {\n        var pid = getProcessId(pro)\n        return pid;\n      })\n\n    // No pids, return empty statistics\n    if (pids.length === 0) {\n      return cb(null, processes.map(function(pro) {\n        pro['monit'] = {\n          memory : 0,\n          cpu : 0\n        };\n\n        return pro\n      }))\n    }\n\n    pidusage(pids, function retPidUsage(err, statistics) {\n      // Just log, we'll set empty statistics\n      if (err) {\n        console.error('Error caught while calling pidusage');\n        console.error(err);\n\n        return cb(null, processes.map(function(pro) {\n          pro['monit'] = {\n            memory : 0,\n            cpu : 0\n          };\n          return pro\n        }))\n      }\n\n      if (!statistics) {\n        console.error('Statistics is not defined!')\n\n        return cb(null, processes.map(function(pro) {\n          pro['monit'] = {\n            memory : 0,\n            cpu : 0\n          };\n          return pro\n        }))\n      }\n\n      processes = processes.map(function(pro) {\n        if (filterBadProcess(pro) === false) {\n          pro['monit'] = {\n            memory : 0,\n            cpu : 0\n          };\n\n          return pro;\n        }\n\n        var pid = getProcessId(pro);\n        var stat = statistics[pid];\n\n        if (!stat) {\n          pro['monit'] = {\n            memory : 0,\n            cpu : 0\n          };\n\n          return pro;\n        }\n\n        pro['monit'] = {\n          memory: stat.memory,\n          cpu: Math.round(stat.cpu * 10) / 10\n        };\n\n        return pro;\n      });\n\n      cb(null, processes);\n    });\n  };\n\n  /**\n   * Description\n   * @method getSystemData\n   * @param {} env\n   * @param {} cb\n   * @return\n   */\n  God.getSystemData = function getSystemData(env, cb) {\n    if (God.system_infos_proc !== null)\n      God.system_infos_proc.query((err, data) => {\n        cb(null, data)\n      })\n    else {\n      cb(new Error('Sysinfos not launched, type: pm2 sysmonit'))\n    }\n  };\n\n  /**\n   * Description\n   * @method dumpProcessList\n   * @param {} cb\n   * @return\n   */\n  God.dumpProcessList = function(cb) {\n    var process_list = [];\n    var apps         = Utility.clone(God.getFormatedProcesses());\n    var that = this;\n\n    // Don't override the actual dump file if process list is empty\n    // unless user explicitely did `pm2 dump`.\n    // This often happens when PM2 crashed, we don't want to override\n    // the dump file with an empty list of process.\n    if (!apps[0]) {\n      debug('[PM2] Did not override dump file because list of processes is empty');\n      return cb(null, {success:true, process_list: process_list});\n    }\n\n    function fin(err) {\n\n      // try to fix issues with empty dump file\n      // like #3485\n      if (process_list.length === 0) {\n\n        // fix : if no dump file, no process, only module and after pm2 update\n        if (!fs.existsSync(cst.DUMP_FILE_PATH) && typeof that.clearDump === 'function') {\n          that.clearDump(function(){});\n        }\n\n        // if no process in list don't modify dump file\n        // process list should not be empty\n        return cb(null, {success:true, process_list: process_list});\n      }\n\n      // Back up dump file\n      try {\n        if (fs.existsSync(cst.DUMP_FILE_PATH)) {\n          fs.writeFileSync(cst.DUMP_BACKUP_FILE_PATH, fs.readFileSync(cst.DUMP_FILE_PATH));\n        }\n      } catch (e) {\n        console.error(e.stack || e);\n      }\n\n      // Overwrite dump file, delete if broken\n      try {\n        fs.writeFileSync(cst.DUMP_FILE_PATH, JSON.stringify(process_list));\n      } catch (e) {\n        console.error(e.stack || e);\n        try {\n          // try to backup file\n          if (fs.existsSync(cst.DUMP_BACKUP_FILE_PATH)) {\n            fs.writeFileSync(cst.DUMP_FILE_PATH, fs.readFileSync(cst.DUMP_BACKUP_FILE_PATH));\n          }\n        } catch (e) {\n          // don't keep broken file\n          fs.unlinkSync(cst.DUMP_FILE_PATH);\n          console.error(e.stack || e);\n        }\n      }\n\n      return cb(null, {success:true, process_list: process_list});\n    }\n\n    function saveProc(apps) {\n      if (!apps[0])\n        return fin(null);\n      delete apps[0].pm2_env.instances;\n      delete apps[0].pm2_env.pm_id;\n      // Do not dump modules\n      if (!apps[0].pm2_env.pmx_module)\n        process_list.push(apps[0].pm2_env);\n      apps.shift();\n      return saveProc(apps);\n    }\n    saveProc(apps);\n  };\n\n  /**\n   * Description\n   * @method ping\n   * @param {} env\n   * @param {} cb\n   * @return CallExpression\n   */\n  God.ping = function(env, cb) {\n    return cb(null, {msg : 'pong'});\n  };\n\n  /**\n   * Description\n   * @method notifyKillPM2\n   */\n  God.notifyKillPM2 = function() {\n    God.pm2_being_killed = true;\n  };\n\n  /**\n   * Duplicate a process\n   * @method duplicateProcessId\n   * @param {} id\n   * @param {} cb\n   * @return CallExpression\n   */\n  God.duplicateProcessId = function(id, cb) {\n    if (!(id in God.clusters_db))\n      return cb(God.logAndGenerateError(id + ' id unknown'), {});\n\n    if (!God.clusters_db[id] || !God.clusters_db[id].pm2_env)\n      return cb(God.logAndGenerateError('Error when getting proc || proc.pm2_env'), {});\n\n    var proc = Utility.clone(God.clusters_db[id].pm2_env);\n\n\n    delete proc.created_at;\n    delete proc.pm_id;\n    delete proc.unique_id;\n\n    // generate a new unique id for new process\n    proc.unique_id = Utility.generateUUID()\n\n    God.injectVariables(proc, function inject (_err, proc) {\n      return God.executeApp(Utility.clone(proc), function (err, clu) {\n        if (err) return cb(err);\n        God.notify('start', clu, true);\n        return cb(err, Utility.clone(clu));\n      });\n    });\n  };\n\n  /**\n   * Start a stopped process by ID\n   * @method startProcessId\n   * @param {} id\n   * @param {} cb\n   * @return CallExpression\n   */\n  God.startProcessId = function(id, cb) {\n    if (!(id in God.clusters_db))\n      return cb(God.logAndGenerateError(id + ' id unknown'), {});\n\n    var proc = God.clusters_db[id];\n    if (proc.pm2_env.status == cst.ONLINE_STATUS)\n      return cb(God.logAndGenerateError('process already online'), {});\n    if (proc.pm2_env.status == cst.LAUNCHING_STATUS)\n      return cb(God.logAndGenerateError('process already started'), {});\n    if (proc.process && proc.process.pid)\n      return cb(God.logAndGenerateError('Process with pid ' + proc.process.pid + ' already exists'), {});\n\n    return God.executeApp(God.clusters_db[id].pm2_env, function(err, proc) {\n      return cb(err, Utility.clone(proc));\n    });\n  };\n\n\n  /**\n   * Stop a process and set it on state 'stopped'\n   * @method stopProcessId\n   * @param {} id\n   * @param {} cb\n   * @return Literal\n   */\n  God.stopProcessId = function(id, cb) {\n    if (typeof id == 'object' && 'id' in id)\n      id = id.id;\n\n    if (!(id in God.clusters_db))\n      return cb(God.logAndGenerateError(id + ' : id unknown'), {});\n\n    var proc     = God.clusters_db[id];\n\n    //clear time-out restart task\n    clearTimeout(proc.pm2_env.restart_task);\n\n    if (proc.pm2_env.status == cst.STOPPED_STATUS) {\n      proc.process.pid = 0;\n      return cb(null, God.getFormatedProcess(id));\n    }\n    // state == 'none' means that the process is not online yet\n    if (proc.state && proc.state === 'none')\n      return setTimeout(function() { God.stopProcessId(id, cb); }, 250);\n\n    console.log('Stopping app:%s id:%s', proc.pm2_env.name, proc.pm2_env.pm_id);\n    proc.pm2_env.status = cst.STOPPING_STATUS;\n\n    if (!proc.process.pid) {\n      console.error('app=%s id=%d does not have a pid', proc.pm2_env.name, proc.pm2_env.pm_id);\n      proc.pm2_env.status = cst.STOPPED_STATUS;\n      return cb(null, { error : true, message : 'could not kill process w/o pid'});\n    }\n\n    God.killProcess(proc.process.pid, proc.pm2_env, function(err) {\n      proc.pm2_env.status = cst.STOPPED_STATUS;\n\n      God.notify('exit', proc);\n\n      if (err && err.type && err.type === 'timeout') {\n        console.error('app=%s id=%d pid=%s could not be stopped',\n                      proc.pm2_env.name,\n                      proc.pm2_env.pm_id,\n                      proc.process.pid);\n        proc.pm2_env.status = cst.ERRORED_STATUS;\n        return cb(null, God.getFormatedProcess(id));\n      }\n\n      if (proc.pm2_env.pm_id.toString().indexOf('_old_') !== 0) {\n        try {\n          fs.unlinkSync(proc.pm2_env.pm_pid_path);\n        } catch (e) {}\n      }\n\n      if (proc.pm2_env.axm_actions) proc.pm2_env.axm_actions = [];\n      if (proc.pm2_env.axm_monitor) proc.pm2_env.axm_monitor = {};\n\n      proc.process.pid = 0;\n      return cb(null, God.getFormatedProcess(id));\n    });\n  };\n\n  God.resetMetaProcessId = function(id, cb) {\n    if (!(id in God.clusters_db))\n      return cb(God.logAndGenerateError(id + ' id unknown'), {});\n\n    if (!God.clusters_db[id] || !God.clusters_db[id].pm2_env)\n      return cb(God.logAndGenerateError('Error when getting proc || proc.pm2_env'), {});\n\n    God.clusters_db[id].pm2_env.created_at = Utility.getDate();\n    God.clusters_db[id].pm2_env.unstable_restarts = 0;\n    God.clusters_db[id].pm2_env.restart_time = 0;\n\n    return cb(null, God.getFormatedProcesses());\n  };\n\n  /**\n   * Delete a process by id\n   * It will stop it and remove it from the database\n   * @method deleteProcessId\n   * @param {} id\n   * @param {} cb\n   * @return Literal\n   */\n  God.deleteProcessId = function(id, cb) {\n    God.deleteCron(id);\n\n    God.stopProcessId(id, function(err, proc) {\n      if (err) return cb(God.logAndGenerateError(err), {});\n      // ! transform to slow object\n      delete God.clusters_db[id];\n\n      if (Object.keys(God.clusters_db).length == 0)\n        God.next_id = 0;\n      return cb(null, proc);\n    });\n    return false;\n  };\n\n  /**\n   * Restart a process ID\n   * If the process is online it will not put it on state stopped\n   * but directly kill it and let God restart it\n   * @method restartProcessId\n   * @param {} id\n   * @param {} cb\n   * @return Literal\n   */\n  God.restartProcessId = function(opts, cb) {\n    var id = opts.id;\n    var env = opts.env || {};\n\n    if (typeof(id) === 'undefined')\n      return cb(God.logAndGenerateError('opts.id not passed to restartProcessId', opts));\n    if (!(id in God.clusters_db))\n      return cb(God.logAndGenerateError('God db process id unknown'), {});\n\n    var proc = God.clusters_db[id];\n\n    God.resetState(proc.pm2_env);\n\n    /**\n     * Merge new application configuration on restart\n     * Same system in reloadProcessId and softReloadProcessId\n     */\n    Utility.extend(proc.pm2_env.env, env);\n    Utility.extendExtraConfig(proc, opts);\n\n    if (God.pm2_being_killed) {\n      return cb(God.logAndGenerateError('[RestartProcessId] PM2 is being killed, stopping restart procedure...'));\n    }\n    if (proc.pm2_env.status === cst.ONLINE_STATUS || proc.pm2_env.status === cst.LAUNCHING_STATUS) {\n      God.stopProcessId(id, function(err) {\n        if (God.pm2_being_killed)\n          return cb(God.logAndGenerateError('[RestartProcessId] PM2 is being killed, stopping restart procedure...'));\n        proc.pm2_env.restart_time += 1;\n        return God.startProcessId(id, cb);\n      });\n\n      return false;\n    }\n    else {\n      debug('[restart] process not online, starting it');\n      return God.startProcessId(id, cb);\n    }\n  };\n\n\n  /**\n   * Restart all process by name\n   * @method restartProcessName\n   * @param {} name\n   * @param {} cb\n   * @return Literal\n   */\n  God.restartProcessName = function(name, cb) {\n    var processes = God.findByName(name);\n\n    if (processes && processes.length === 0)\n      return cb(God.logAndGenerateError('Unknown process'), {});\n\n    eachLimit(processes, cst.CONCURRENT_ACTIONS, function(proc, next) {\n      if (God.pm2_being_killed)\n        return next('[Watch] PM2 is being killed, stopping restart procedure...');\n      if (proc.pm2_env.status === cst.ONLINE_STATUS)\n        return God.restartProcessId({id:proc.pm2_env.pm_id}, next);\n      else if (proc.pm2_env.status !== cst.STOPPING_STATUS\n               && proc.pm2_env.status !== cst.LAUNCHING_STATUS)\n        return God.startProcessId(proc.pm2_env.pm_id, next);\n      else\n        return next(util.format('[Watch] Process name %s is being stopped so I won\\'t restart it', name));\n    }, function(err) {\n      if (err) return cb(God.logAndGenerateError(err));\n      return cb(null, God.getFormatedProcesses());\n    });\n\n    return false;\n  };\n\n  /**\n   * Send system signal to process id\n   * @method sendSignalToProcessId\n   * @param {} opts\n   * @param {} cb\n   * @return CallExpression\n   */\n  God.sendSignalToProcessId = function(opts, cb) {\n    var id = opts.process_id;\n    var signal = opts.signal;\n\n    if (!(id in God.clusters_db))\n      return cb(God.logAndGenerateError(id + ' id unknown'), {});\n\n    var proc = God.clusters_db[id];\n\n    //God.notify('send signal ' + signal, proc, true);\n\n    try {\n      process.kill(God.clusters_db[id].process.pid, signal);\n    } catch(e) {\n      return cb(God.logAndGenerateError('Error when sending signal (signal unknown)'), {});\n    }\n    return cb(null, God.getFormatedProcesses());\n  };\n\n  /**\n   * Send system signal to all processes by name\n   * @method sendSignalToProcessName\n   * @param {} opts\n   * @param {} cb\n   * @return\n   */\n  God.sendSignalToProcessName = function(opts, cb) {\n    var processes = God.findByName(opts.process_name);\n    var signal    = opts.signal;\n\n    if (processes && processes.length === 0)\n      return cb(God.logAndGenerateError('Unknown process name'), {});\n\n    eachLimit(processes, cst.CONCURRENT_ACTIONS, function(proc, next) {\n      if (proc.pm2_env.status == cst.ONLINE_STATUS || proc.pm2_env.status == cst.LAUNCHING_STATUS) {\n        try {\n          process.kill(proc.process.pid, signal);\n        } catch(e) {\n          return next(e);\n        }\n      }\n      return setTimeout(next, 200);\n    }, function(err) {\n      if (err) return cb(God.logAndGenerateError(err), {});\n      return cb(null, God.getFormatedProcesses());\n    });\n\n  };\n\n  /**\n   * Stop watching daemon\n   * @method stopWatch\n   * @param {} method\n   * @param {} value\n   * @param {} fn\n   * @return\n   */\n  God.stopWatch = function(method, value, fn) {\n    var env = null;\n\n    if (method == 'stopAll' || method == 'deleteAll') {\n      var processes = God.getFormatedProcesses();\n\n      processes.forEach(function(proc) {\n        God.clusters_db[proc.pm_id].pm2_env.watch = false;\n        God.watch.disable(proc.pm2_env);\n      });\n\n    } else {\n\n      if (method.indexOf('ProcessId') !== -1) {\n        env = God.clusters_db[value];\n      } else if (method.indexOf('ProcessName') !== -1) {\n        env = God.clusters_db[God.findByName(value)];\n      }\n\n      if (env) {\n        God.watch.disable(env.pm2_env);\n        env.pm2_env.watch = false;\n      }\n    }\n    return fn(null, {success:true});\n  };\n\n\n  /**\n   * Toggle watching daemon\n   * @method toggleWatch\n   * @param {String} method\n   * @param {Object} application environment, should include id\n   * @param {Function} callback\n   */\n  God.toggleWatch = function(method, value, fn) {\n    var env = null;\n\n    if (method == 'restartProcessId') {\n      env = God.clusters_db[value.id];\n    } else if(method == 'restartProcessName') {\n      env = God.clusters_db[God.findByName(value)];\n    }\n\n    if (env) {\n      env.pm2_env.watch = !env.pm2_env.watch;\n      if (env.pm2_env.watch)\n        God.watch.enable(env.pm2_env);\n      else\n        God.watch.disable(env.pm2_env);\n    }\n\n    return fn(null, {success:true});\n  };\n\n  /**\n   * Start Watch\n   * @method startWatch\n   * @param {String} method\n   * @param {Object} application environment, should include id\n   * @param {Function} callback\n   */\n  God.startWatch = function(method, value, fn) {\n    var env = null;\n\n    if (method == 'restartProcessId') {\n      env = God.clusters_db[value.id];\n    } else if(method == 'restartProcessName') {\n      env = God.clusters_db[God.findByName(value)];\n    }\n\n    if (env) {\n      if (env.pm2_env.watch)\n        return fn(null, {success:true, notrestarted:true});\n\n      God.watch.enable(env.pm2_env);\n      //env.pm2_env.env.watch = true;\n      env.pm2_env.watch = true;\n    }\n\n    return fn(null, {success:true});\n  };\n\n  /**\n   * Description\n   * @method reloadLogs\n   * @param {} opts\n   * @param {} cb\n   * @return CallExpression\n   */\n  God.reloadLogs = function(opts, cb) {\n    console.log('Reloading logs...');\n    var processIds = Object.keys(God.clusters_db);\n\n    processIds.forEach(function (id) {\n      var cluster = God.clusters_db[id];\n\n      console.log('Reloading logs for process id %d', id);\n\n      if (cluster && cluster.pm2_env) {\n        // Cluster mode\n        if (cluster.send && cluster.pm2_env.exec_mode == 'cluster_mode') {\n          try {\n            cluster.send({\n              type:'log:reload'\n            });\n          } catch(e) {\n            console.error(e.message || e);\n          }\n        }\n        // Fork mode\n        else if (cluster._reloadLogs) {\n          cluster._reloadLogs(function(err) {\n            if (err) God.logAndGenerateError(err);\n          });\n        }\n      }\n    });\n\n    return cb(null, {});\n  };\n\n  /**\n   * Send Line To Stdin\n   * @method sendLineToStdin\n   * @param Object packet\n   * @param String pm_id Process ID\n   * @param String line  Line to send to process stdin\n   */\n  God.sendLineToStdin = function(packet, cb) {\n    if (typeof(packet.pm_id) == 'undefined' || !packet.line)\n      return cb(God.logAndGenerateError('pm_id or line field missing'), {});\n\n    var pm_id = packet.pm_id;\n    var line  = packet.line;\n\n    var proc = God.clusters_db[pm_id];\n\n    if (!proc)\n      return cb(God.logAndGenerateError('Process with ID <' + pm_id + '> unknown.'), {});\n\n    if (proc.pm2_env.exec_mode == 'cluster_mode')\n      return cb(God.logAndGenerateError('Cannot send line to processes in cluster mode'), {});\n\n    if (proc.pm2_env.status != cst.ONLINE_STATUS && proc.pm2_env.status != cst.LAUNCHING_STATUS)\n      return cb(God.logAndGenerateError('Process with ID <' + pm_id + '> offline.'), {});\n\n    try {\n      proc.stdin.write(line, function() {\n        return cb(null, {\n          pm_id : pm_id,\n          line : line\n        });\n      });\n    } catch(e) {\n      return cb(God.logAndGenerateError(e), {});\n    }\n  }\n\n  /**\n   * @param {object} packet\n   * @param {function} cb\n   */\n  God.sendDataToProcessId = function(packet, cb) {\n    if (typeof(packet.id) == 'undefined' ||\n        typeof(packet.data) == 'undefined' ||\n        !packet.topic)\n      return cb(God.logAndGenerateError('ID, DATA or TOPIC field is missing'), {});\n\n    var pm_id = packet.id;\n    var data  = packet.data;\n\n    var proc = God.clusters_db[pm_id];\n\n    if (!proc)\n      return cb(God.logAndGenerateError('Process with ID <' + pm_id + '> unknown.'), {});\n\n    if (proc.pm2_env.status != cst.ONLINE_STATUS && proc.pm2_env.status != cst.LAUNCHING_STATUS)\n      return cb(God.logAndGenerateError('Process with ID <' + pm_id + '> offline.'), {});\n\n    try {\n      proc.send(packet);\n    }\n    catch(e) {\n      return cb(God.logAndGenerateError(e), {});\n    }\n\n    return cb(null, {\n      success: true,\n      data   : packet\n    });\n  };\n\n  /**\n   * Send Message to Process by id or name\n   * @method msgProcess\n   * @param {} cmd\n   * @param {} cb\n   * @return Literal\n   */\n  God.msgProcess = function(cmd, cb) {\n    if ('id' in cmd) {\n      var id = cmd.id;\n      if (!(id in God.clusters_db))\n        return cb(God.logAndGenerateError(id + ' id unknown'), {});\n      var proc = God.clusters_db[id];\n\n      var action_exist = false;\n\n      proc.pm2_env.axm_actions.forEach(function(action) {\n        if (action.action_name == cmd.msg) {\n          action_exist = true;\n          // Reset output buffer\n          action.output = [];\n        }\n      });\n      if (action_exist == false) {\n        return cb(God.logAndGenerateError('Action doesn\\'t exist ' + cmd.msg + ' for ' + proc.pm2_env.name), {});\n      }\n\n      if (proc.pm2_env.status == cst.ONLINE_STATUS || proc.pm2_env.status == cst.LAUNCHING_STATUS) {\n        /*\n         * Send message\n         */\n        if (cmd.opts == null && !cmd.uuid)\n          proc.send(cmd.msg);\n        else\n          proc.send(cmd);\n\n        return cb(null, { process_count : 1, success : true });\n      }\n      else\n        return cb(God.logAndGenerateError(id + ' : id offline'), {});\n    }\n\n    else if ('name' in cmd) {\n      /*\n       * As names are not unique in case of cluster, this\n       * will send msg to all process matching  'name'\n       */\n      var name = cmd.name;\n      var arr = Object.keys(God.clusters_db);\n      var sent = 0;\n\n      (function ex(arr) {\n        if (arr[0] == null || !arr) {\n          return cb(null, {\n            process_count : sent,\n            success : true\n          });\n        }\n\n        var id = arr[0];\n\n        if (!God.clusters_db[id] || !God.clusters_db[id].pm2_env) {\n          arr.shift();\n          return ex(arr);\n        }\n\n        var proc_env = God.clusters_db[id].pm2_env;\n\n        const isActionAvailable = proc_env.axm_actions.find(action => action.action_name === cmd.msg) !== undefined\n\n        // if action doesn't exist for this app\n        // try with the next one\n        if (isActionAvailable === false) {\n          arr.shift();\n          return ex(arr);\n        }\n\n\n        if ((p.basename(proc_env.pm_exec_path) == name ||\n             proc_env.name == name ||\n             proc_env.namespace == name ||\n             name == 'all') &&\n            (proc_env.status == cst.ONLINE_STATUS ||\n             proc_env.status == cst.LAUNCHING_STATUS)) {\n\n          proc_env.axm_actions.forEach(function(action) {\n            if (action.action_name == cmd.msg) {\n              action_exist = true;\n            }\n          });\n\n          if (action_exist == false || proc_env.axm_actions.length == 0) {\n            arr.shift();\n            return ex(arr);\n          }\n\n          if (cmd.opts == null)\n            God.clusters_db[id].send(cmd.msg);\n          else\n            God.clusters_db[id].send(cmd);\n\n          sent++;\n          arr.shift();\n          return ex(arr);\n        }\n        else {\n          arr.shift();\n          return ex(arr);\n        }\n        return false;\n      })(arr);\n    }\n\n    else return cb(God.logAndGenerateError('method requires name or id field'), {});\n    return false;\n  };\n\n  /**\n   * Description\n   * @method getVersion\n   * @param {} env\n   * @param {} cb\n   * @return CallExpression\n   */\n  God.getVersion = function(env, cb) {\n    process.nextTick(function() {\n      return cb(null, pkg.version);\n    });\n  };\n\n  God.monitor = function Monitor(pm_id, cb) {\n    if (!God.clusters_db[pm_id] || !God.clusters_db[pm_id].pm2_env)\n      return cb(new Error('Unknown pm_id'));\n\n    God.clusters_db[pm_id].pm2_env._km_monitored = true;\n    return cb(null, { success : true, pm_id : pm_id });\n  }\n\n  God.unmonitor = function Monitor(pm_id, cb) {\n    if (!God.clusters_db[pm_id] || !God.clusters_db[pm_id].pm2_env)\n      return cb(new Error('Unknown pm_id'));\n\n    God.clusters_db[pm_id].pm2_env._km_monitored = false;\n    return cb(null, { success : true, pm_id : pm_id });\n  }\n\n  God.getReport = function(arg, cb) {\n    var report = {\n      pm2_version : pkg.version,\n      node_version : 'N/A',\n      node_path : process.env['_'] || 'not found',\n      argv0 : process.argv0,\n      argv : process.argv,\n      user : process.env.USER,\n      uid : (cst.IS_WINDOWS === false && process.geteuid) ? process.geteuid() : 'N/A',\n      gid : (cst.IS_WINDOWS === false && process.getegid) ? process.getegid() : 'N/A',\n      env : process.env,\n      managed_apps : Object.keys(God.clusters_db).length,\n      started_at : God.started_at\n    };\n\n    if (process.versions && process.versions.node) {\n      report.node_version = process.versions.node;\n    }\n\n    process.nextTick(function() {\n      return cb(null, report);\n    });\n  };\n};\n\nfunction filterBadProcess(pro) {\n  if (pro.pm2_env.status !== cst.ONLINE_STATUS) {\n    return false;\n  }\n\n  if (pro.pm2_env.axm_options && pro.pm2_env.axm_options.pid) {\n    if (isNaN(pro.pm2_env.axm_options.pid))  {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getProcessId(pro) {\n  var pid = pro.pid\n\n  if (pro.pm2_env.axm_options && pro.pm2_env.axm_options.pid) {\n    pid = pro.pm2_env.axm_options.pid;\n  }\n\n  return pid\n}\n"]},"metadata":{},"sourceType":"script"}