{"ast":null,"code":"'use strict';\n\nvar os = require('os');\n\nvar bin = require('./bin');\n\nvar history = require('./history');\n\nvar PLATFORM = os.platform();\n\nfunction parseTime(timestr, centisec) {\n  var time = 0;\n  var tpart = timestr.split(/-|:|\\./);\n  var i = tpart.length - 1;\n\n  if (i >= 0 && centisec && PLATFORM === 'darwin') {\n    time += parseInt(tpart[i--], 10) * 10;\n  }\n\n  if (i >= 0) {\n    // Seconds\n    time += parseInt(tpart[i--], 10) * 1000;\n  }\n\n  if (i >= 0) {\n    // Minutes\n    time += parseInt(tpart[i--], 10) * 60000;\n  }\n\n  if (i >= 0) {\n    // Hours\n    time += parseInt(tpart[i--], 10) * 3600000;\n  }\n\n  if (i >= 0) {\n    // Days\n    time += parseInt(tpart[i--], 10) * 86400000;\n  }\n\n  return time;\n}\n/**\n  * Get pid informations through ps command.\n  * @param  {Number[]} pids\n  * @param  {Object} options\n  * @param  {Function} done(err, stat)\n  */\n\n\nfunction ps(pids, options, done) {\n  var pArg = pids.join(',');\n  var args = ['-o', 'etime,pid,ppid,pcpu,rss,time', '-p', pArg];\n\n  if (PLATFORM === 'aix') {\n    args = ['-o', 'etime,pid,ppid,pcpu,rssize,time', '-p', pArg];\n  }\n\n  bin('ps', args, function (err, stdout, code) {\n    if (err) return done(err);\n\n    if (code === 1) {\n      const error = new Error('No matching pid found');\n      error.code = 'ENOENT';\n      return done(error);\n    }\n\n    if (code !== 0) {\n      return done(new Error('pidusage ps command exited with code ' + code));\n    }\n\n    var date = Date.now(); // Example of stdout on *nix.\n    // ELAPSED: format is [[dd-]hh:]mm:ss\n    // RSS: is counted as blocks of 1024 bytes\n    // TIME: format is [[dd-]hh:]mm:ss\n    // %CPU: goes from 0 to vcore * 100\n    //\n    // Refs: http://www.manpages.info/linux/ps.1.html\n    // NB: The columns are returned in the order given inside the -o option\n    //\n    //    ELAPSED   PID  PPID  %CPU     RSS        TIME\n    // 2-40:50:53   430     1   3.0    5145  1-02:03:04\n    //   40:50:53   432   430   0.0    2364  1-01:02:03\n    //   01:50:50   727     1  10.0  348932       14:27\n    //      00:20  7166     1   0.1    3756        0:00\n    // Example of stdout on Darwin\n    // ELAPSED: format is [[dd-]hh:]mm:ss\n    // RSS: is counted as blocks of 1024 bytes\n    // TIME: format is [[dd-]hh:]mm:ss.cc (cc are centiseconds)\n    // %CPU: goes from 0 to vcore * 100\n    //\n    // Refs: https://ss64.com/osx/ps.html\n    // NB: The columns are returned in the order given inside the -o option\n    //\n    //    ELAPSED   PID  PPID  %CPU     RSS           TIME\n    // 2-40:50:53   430     1   3.0    5145  1-02:03:04.07\n    //   40:50:53   432   430   0.0    2364  1-01:02:03.10\n    //   01:50:50   727     1  10.0  348932       14:27.26\n    //      00:20  7166     1   0.1    3756        0:00.02\n\n    stdout = stdout.split(os.EOL);\n    var statistics = {};\n\n    for (var i = 1; i < stdout.length; i++) {\n      var line = stdout[i].trim().split(/\\s+/);\n\n      if (!line || line.length !== 6) {\n        continue;\n      }\n\n      var pid = parseInt(line[1], 10);\n      var hst = history.get(pid, options.maxage);\n      if (hst === undefined) hst = {};\n      var ppid = parseInt(line[2], 10);\n      var memory = parseInt(line[4], 10) * 1024;\n      var etime = parseTime(line[0]);\n      var ctime = parseTime(line[5], true);\n      var total = ctime - (hst.ctime || 0); // time elapsed between calls in seconds\n\n      var seconds = Math.abs(hst.elapsed !== undefined ? etime - hst.elapsed : etime);\n      var cpu = seconds > 0 ? total / seconds * 100 : 0;\n      statistics[pid] = {\n        cpu: cpu,\n        memory: memory,\n        ppid: ppid,\n        pid: pid,\n        ctime: ctime,\n        elapsed: etime,\n        timestamp: date\n      };\n      history.set(pid, statistics[pid], options.maxage);\n    }\n\n    done(null, statistics);\n  });\n}\n\nmodule.exports = ps;","map":{"version":3,"sources":["/Users/samianki/node_modules/pidusage/lib/ps.js"],"names":["os","require","bin","history","PLATFORM","platform","parseTime","timestr","centisec","time","tpart","split","i","length","parseInt","ps","pids","options","done","pArg","join","args","err","stdout","code","error","Error","date","Date","now","EOL","statistics","line","trim","pid","hst","get","maxage","undefined","ppid","memory","etime","ctime","total","seconds","Math","abs","elapsed","cpu","timestamp","set","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar os = require('os')\nvar bin = require('./bin')\nvar history = require('./history')\n\nvar PLATFORM = os.platform()\n\nfunction parseTime (timestr, centisec) {\n  var time = 0\n  var tpart = timestr.split(/-|:|\\./)\n  var i = tpart.length - 1\n  if (i >= 0 && centisec && PLATFORM === 'darwin') {\n    time += parseInt(tpart[i--], 10) * 10\n  }\n  if (i >= 0) { // Seconds\n    time += parseInt(tpart[i--], 10) * 1000\n  }\n  if (i >= 0) { // Minutes\n    time += parseInt(tpart[i--], 10) * 60000\n  }\n  if (i >= 0) { // Hours\n    time += parseInt(tpart[i--], 10) * 3600000\n  }\n  if (i >= 0) { // Days\n    time += parseInt(tpart[i--], 10) * 86400000\n  }\n  return time\n}\n\n/**\n  * Get pid informations through ps command.\n  * @param  {Number[]} pids\n  * @param  {Object} options\n  * @param  {Function} done(err, stat)\n  */\nfunction ps (pids, options, done) {\n  var pArg = pids.join(',')\n  var args = ['-o', 'etime,pid,ppid,pcpu,rss,time', '-p', pArg]\n\n  if (PLATFORM === 'aix') {\n    args = ['-o', 'etime,pid,ppid,pcpu,rssize,time', '-p', pArg]\n  }\n\n  bin('ps', args, function (err, stdout, code) {\n    if (err) return done(err)\n    if (code === 1) {\n      const error = new Error('No matching pid found')\n      error.code = 'ENOENT'\n      return done(error)\n    }\n    if (code !== 0) {\n      return done(new Error('pidusage ps command exited with code ' + code))\n    }\n    var date = Date.now()\n\n    // Example of stdout on *nix.\n    // ELAPSED: format is [[dd-]hh:]mm:ss\n    // RSS: is counted as blocks of 1024 bytes\n    // TIME: format is [[dd-]hh:]mm:ss\n    // %CPU: goes from 0 to vcore * 100\n    //\n    // Refs: http://www.manpages.info/linux/ps.1.html\n    // NB: The columns are returned in the order given inside the -o option\n    //\n    //    ELAPSED   PID  PPID  %CPU     RSS        TIME\n    // 2-40:50:53   430     1   3.0    5145  1-02:03:04\n    //   40:50:53   432   430   0.0    2364  1-01:02:03\n    //   01:50:50   727     1  10.0  348932       14:27\n    //      00:20  7166     1   0.1    3756        0:00\n\n    // Example of stdout on Darwin\n    // ELAPSED: format is [[dd-]hh:]mm:ss\n    // RSS: is counted as blocks of 1024 bytes\n    // TIME: format is [[dd-]hh:]mm:ss.cc (cc are centiseconds)\n    // %CPU: goes from 0 to vcore * 100\n    //\n    // Refs: https://ss64.com/osx/ps.html\n    // NB: The columns are returned in the order given inside the -o option\n    //\n    //    ELAPSED   PID  PPID  %CPU     RSS           TIME\n    // 2-40:50:53   430     1   3.0    5145  1-02:03:04.07\n    //   40:50:53   432   430   0.0    2364  1-01:02:03.10\n    //   01:50:50   727     1  10.0  348932       14:27.26\n    //      00:20  7166     1   0.1    3756        0:00.02\n\n    stdout = stdout.split(os.EOL)\n\n    var statistics = {}\n    for (var i = 1; i < stdout.length; i++) {\n      var line = stdout[i].trim().split(/\\s+/)\n\n      if (!line || line.length !== 6) {\n        continue\n      }\n\n      var pid = parseInt(line[1], 10)\n      var hst = history.get(pid, options.maxage)\n      if (hst === undefined) hst = {}\n\n      var ppid = parseInt(line[2], 10)\n      var memory = parseInt(line[4], 10) * 1024\n      var etime = parseTime(line[0])\n      var ctime = parseTime(line[5], true)\n\n      var total = (ctime - (hst.ctime || 0))\n      // time elapsed between calls in seconds\n      var seconds = Math.abs(hst.elapsed !== undefined ? etime - hst.elapsed : etime)\n      var cpu = seconds > 0 ? (total / seconds) * 100 : 0\n\n      statistics[pid] = {\n        cpu: cpu,\n        memory: memory,\n        ppid: ppid,\n        pid: pid,\n        ctime: ctime,\n        elapsed: etime,\n        timestamp: date\n      }\n\n      history.set(pid, statistics[pid], options.maxage)\n    }\n\n    done(null, statistics)\n  })\n}\n\nmodule.exports = ps\n"]},"metadata":{},"sourceType":"script"}