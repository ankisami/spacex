{"ast":null,"code":"'use strict';\n\nconst Prompt = require('../prompt');\n\nconst placeholder = require('../placeholder');\n\nconst {\n  isPrimitive\n} = require('../utils');\n\nclass StringPrompt extends Prompt {\n  constructor(options) {\n    super(options);\n    this.initial = isPrimitive(this.initial) ? String(this.initial) : '';\n    if (this.initial) this.cursorHide();\n    this.state.prevCursor = 0;\n    this.state.clipboard = [];\n  }\n\n  async keypress(input, key = {}) {\n    let prev = this.state.prevKeypress;\n    this.state.prevKeypress = key;\n\n    if (this.options.multiline === true && key.name === 'return') {\n      if (!prev || prev.name !== 'return') {\n        return this.append('\\n', key);\n      }\n    }\n\n    return super.keypress(input, key);\n  }\n\n  moveCursor(n) {\n    this.cursor += n;\n  }\n\n  reset() {\n    this.input = this.value = '';\n    this.cursor = 0;\n    return this.render();\n  }\n\n  dispatch(ch, key) {\n    if (!ch || key.ctrl || key.code) return this.alert();\n    this.append(ch);\n  }\n\n  append(ch) {\n    let {\n      cursor,\n      input\n    } = this.state;\n    this.input = `${input}`.slice(0, cursor) + ch + `${input}`.slice(cursor);\n    this.moveCursor(String(ch).length);\n    this.render();\n  }\n\n  insert(str) {\n    this.append(str);\n  }\n\n  delete() {\n    let {\n      cursor,\n      input\n    } = this.state;\n    if (cursor <= 0) return this.alert();\n    this.input = `${input}`.slice(0, cursor - 1) + `${input}`.slice(cursor);\n    this.moveCursor(-1);\n    this.render();\n  }\n\n  deleteForward() {\n    let {\n      cursor,\n      input\n    } = this.state;\n    if (input[cursor] === void 0) return this.alert();\n    this.input = `${input}`.slice(0, cursor) + `${input}`.slice(cursor + 1);\n    this.render();\n  }\n\n  cutForward() {\n    let pos = this.cursor;\n    if (this.input.length <= pos) return this.alert();\n    this.state.clipboard.push(this.input.slice(pos));\n    this.input = this.input.slice(0, pos);\n    this.render();\n  }\n\n  cutLeft() {\n    let pos = this.cursor;\n    if (pos === 0) return this.alert();\n    let before = this.input.slice(0, pos);\n    let after = this.input.slice(pos);\n    let words = before.split(' ');\n    this.state.clipboard.push(words.pop());\n    this.input = words.join(' ');\n    this.cursor = this.input.length;\n    this.input += after;\n    this.render();\n  }\n\n  paste() {\n    if (!this.state.clipboard.length) return this.alert();\n    this.insert(this.state.clipboard.pop());\n    this.render();\n  }\n\n  toggleCursor() {\n    if (this.state.prevCursor) {\n      this.cursor = this.state.prevCursor;\n      this.state.prevCursor = 0;\n    } else {\n      this.state.prevCursor = this.cursor;\n      this.cursor = 0;\n    }\n\n    this.render();\n  }\n\n  first() {\n    this.cursor = 0;\n    this.render();\n  }\n\n  last() {\n    this.cursor = this.input.length - 1;\n    this.render();\n  }\n\n  next() {\n    let init = this.initial != null ? String(this.initial) : '';\n    if (!init || !init.startsWith(this.input)) return this.alert();\n    this.input = this.initial;\n    this.cursor = this.initial.length;\n    this.render();\n  }\n\n  prev() {\n    if (!this.input) return this.alert();\n    this.reset();\n  }\n\n  backward() {\n    return this.left();\n  }\n\n  forward() {\n    return this.right();\n  }\n\n  right() {\n    if (this.cursor >= this.input.length) return this.alert();\n    this.moveCursor(1);\n    return this.render();\n  }\n\n  left() {\n    if (this.cursor <= 0) return this.alert();\n    this.moveCursor(-1);\n    return this.render();\n  }\n\n  isValue(value) {\n    return !!value;\n  }\n\n  async format(input = this.value) {\n    let initial = await this.resolve(this.initial, this.state);\n\n    if (!this.state.submitted) {\n      return placeholder(this, {\n        input,\n        initial,\n        pos: this.cursor\n      });\n    }\n\n    return this.styles.submitted(input || initial);\n  }\n\n  async render() {\n    let size = this.state.size;\n    let prefix = await this.prefix();\n    let separator = await this.separator();\n    let message = await this.message();\n    let prompt = [prefix, message, separator].filter(Boolean).join(' ');\n    this.state.prompt = prompt;\n    let header = await this.header();\n    let output = await this.format();\n    let help = (await this.error()) || (await this.hint());\n    let footer = await this.footer();\n    if (help && !output.includes(help)) output += ' ' + help;\n    prompt += ' ' + output;\n    this.clear(size);\n    this.write([header, prompt, footer].filter(Boolean).join('\\n'));\n    this.restore();\n  }\n\n}\n\nmodule.exports = StringPrompt;","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/lib/types/string.js"],"names":["Prompt","require","placeholder","isPrimitive","StringPrompt","constructor","options","initial","String","cursorHide","state","prevCursor","clipboard","keypress","input","key","prev","prevKeypress","multiline","name","append","moveCursor","n","cursor","reset","value","render","dispatch","ch","ctrl","code","alert","slice","length","insert","str","delete","deleteForward","cutForward","pos","push","cutLeft","before","after","words","split","pop","join","paste","toggleCursor","first","last","next","init","startsWith","backward","left","forward","right","isValue","format","resolve","submitted","styles","size","prefix","separator","message","prompt","filter","Boolean","header","output","help","error","hint","footer","includes","clear","write","restore","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Prompt = require('../prompt');\nconst placeholder = require('../placeholder');\nconst { isPrimitive } = require('../utils');\n\nclass StringPrompt extends Prompt {\n  constructor(options) {\n    super(options);\n    this.initial = isPrimitive(this.initial) ? String(this.initial) : '';\n    if (this.initial) this.cursorHide();\n    this.state.prevCursor = 0;\n    this.state.clipboard = [];\n  }\n\n  async keypress(input, key = {}) {\n    let prev = this.state.prevKeypress;\n    this.state.prevKeypress = key;\n    if (this.options.multiline === true && key.name === 'return') {\n      if (!prev || prev.name !== 'return') {\n        return this.append('\\n', key);\n      }\n    }\n    return super.keypress(input, key);\n  }\n\n  moveCursor(n) {\n    this.cursor += n;\n  }\n\n  reset() {\n    this.input = this.value = '';\n    this.cursor = 0;\n    return this.render();\n  }\n\n  dispatch(ch, key) {\n    if (!ch || key.ctrl || key.code) return this.alert();\n    this.append(ch);\n  }\n\n  append(ch) {\n    let { cursor, input } = this.state;\n    this.input = `${input}`.slice(0, cursor) + ch + `${input}`.slice(cursor);\n    this.moveCursor(String(ch).length);\n    this.render();\n  }\n\n  insert(str) {\n    this.append(str);\n  }\n\n  delete() {\n    let { cursor, input } = this.state;\n    if (cursor <= 0) return this.alert();\n    this.input = `${input}`.slice(0, cursor - 1) + `${input}`.slice(cursor);\n    this.moveCursor(-1);\n    this.render();\n  }\n\n  deleteForward() {\n    let { cursor, input } = this.state;\n    if (input[cursor] === void 0) return this.alert();\n    this.input = `${input}`.slice(0, cursor) + `${input}`.slice(cursor + 1);\n    this.render();\n  }\n\n  cutForward() {\n    let pos = this.cursor;\n    if (this.input.length <= pos) return this.alert();\n    this.state.clipboard.push(this.input.slice(pos));\n    this.input = this.input.slice(0, pos);\n    this.render();\n  }\n\n  cutLeft() {\n    let pos = this.cursor;\n    if (pos === 0) return this.alert();\n    let before = this.input.slice(0, pos);\n    let after = this.input.slice(pos);\n    let words = before.split(' ');\n    this.state.clipboard.push(words.pop());\n    this.input = words.join(' ');\n    this.cursor = this.input.length;\n    this.input += after;\n    this.render();\n  }\n\n  paste() {\n    if (!this.state.clipboard.length) return this.alert();\n    this.insert(this.state.clipboard.pop());\n    this.render();\n  }\n\n  toggleCursor() {\n    if (this.state.prevCursor) {\n      this.cursor = this.state.prevCursor;\n      this.state.prevCursor = 0;\n    } else {\n      this.state.prevCursor = this.cursor;\n      this.cursor = 0;\n    }\n    this.render();\n  }\n\n  first() {\n    this.cursor = 0;\n    this.render();\n  }\n\n  last() {\n    this.cursor = this.input.length - 1;\n    this.render();\n  }\n\n  next() {\n    let init = this.initial != null ? String(this.initial) : '';\n    if (!init || !init.startsWith(this.input)) return this.alert();\n    this.input = this.initial;\n    this.cursor = this.initial.length;\n    this.render();\n  }\n\n  prev() {\n    if (!this.input) return this.alert();\n    this.reset();\n  }\n\n  backward() {\n    return this.left();\n  }\n\n  forward() {\n    return this.right();\n  }\n\n  right() {\n    if (this.cursor >= this.input.length) return this.alert();\n    this.moveCursor(1);\n    return this.render();\n  }\n\n  left() {\n    if (this.cursor <= 0) return this.alert();\n    this.moveCursor(-1);\n    return this.render();\n  }\n\n  isValue(value) {\n    return !!value;\n  }\n\n  async format(input = this.value) {\n    let initial = await this.resolve(this.initial, this.state);\n    if (!this.state.submitted) {\n      return placeholder(this, { input, initial, pos: this.cursor });\n    }\n    return this.styles.submitted(input || initial);\n  }\n\n  async render() {\n    let size = this.state.size;\n\n    let prefix = await this.prefix();\n    let separator = await this.separator();\n    let message = await this.message();\n\n    let prompt = [prefix, message, separator].filter(Boolean).join(' ');\n    this.state.prompt = prompt;\n\n    let header = await this.header();\n    let output = await this.format();\n    let help = (await this.error()) || (await this.hint());\n    let footer = await this.footer();\n\n    if (help && !output.includes(help)) output += ' ' + help;\n    prompt += ' ' + output;\n\n    this.clear(size);\n    this.write([header, prompt, footer].filter(Boolean).join('\\n'));\n    this.restore();\n  }\n}\n\nmodule.exports = StringPrompt;\n"]},"metadata":{},"sourceType":"script"}