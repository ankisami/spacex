{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n/*\n  options: {\n    utimes: false,  // Boolean | Object, keep utimes if true\n    mode: false,    // Boolean | Number, keep file mode if true\n    cover: true,    // Boolean, cover if file exists\n    filter: true,   // Boolean | Function, file filter\n  }\n*/\n\n\nfunction copydirSync(from, to, options) {\n  if (typeof options === 'function') {\n    options = {\n      filter: options\n    };\n  }\n\n  if (typeof options === 'undefined') options = {};\n\n  if (typeof options.cover === 'undefined') {\n    options.cover = true;\n  }\n\n  options.filter = typeof options.filter === 'function' ? options.filter : function (state, filepath, filename) {\n    return options.filter;\n  };\n  var stats = fs.lstatSync(from);\n  var statsname = stats.isDirectory() ? 'directory' : stats.isFile() ? 'file' : stats.isSymbolicLink() ? 'symbolicLink' : '';\n  var valid = options.filter(statsname, from, path.dirname(from), path.basename(from));\n\n  if (statsname === 'directory' || statsname === 'symbolicLink') {\n    // Directory or SymbolicLink\n    if (valid) {\n      try {\n        fs.statSync(to);\n      } catch (err) {\n        if (err.code === 'ENOENT') {\n          fs.mkdirSync(to);\n          options.debug && console.log('>> ' + to);\n        } else {\n          throw err;\n        }\n      }\n\n      rewriteSync(to, options, stats);\n      if (statsname != 'symbolicLink') listDirectorySync(from, to, options);\n    }\n  } else if (stats.isFile()) {\n    // File\n    if (valid) {\n      if (options.cover) {\n        writeFileSync(from, to, options, stats);\n      } else {\n        try {\n          fs.statSync(to);\n        } catch (err) {\n          if (err.code === 'ENOENT') {\n            writeFileSync(from, to, options, stats);\n          } else {\n            throw err;\n          }\n        }\n      }\n    }\n  } else {\n    throw new Error('stats invalid: ' + from);\n  }\n}\n\n;\n\nfunction listDirectorySync(from, to, options) {\n  var files = fs.readdirSync(from);\n  copyFromArraySync(files, from, to, options);\n}\n\nfunction copyFromArraySync(files, from, to, options) {\n  if (files.length === 0) return true;\n  var f = files.shift();\n  copydirSync(path.join(from, f), path.join(to, f), options);\n  copyFromArraySync(files, from, to, options);\n}\n\nfunction writeFileSync(from, to, options, stats) {\n  fs.writeFileSync(to, fs.readFileSync(from, 'binary'), 'binary');\n  options.debug && console.log('>> ' + to);\n  rewriteSync(to, options, stats);\n}\n\nfunction rewriteSync(f, options, stats, callback) {\n  if (options.cover) {\n    var mode = options.mode === true ? stats.mode : options.mode;\n    var utimes = options.utimes === true ? {\n      atime: stats.atime,\n      mtime: stats.mtime\n    } : options.utimes;\n    mode && fs.chmodSync(f, mode);\n    utimes && fs.utimesSync(f, utimes.atime, utimes.mtime);\n  }\n\n  return true;\n}\n\nmodule.exports = copydirSync;","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/tools/copydirSync.js"],"names":["fs","require","path","copydirSync","from","to","options","filter","cover","state","filepath","filename","stats","lstatSync","statsname","isDirectory","isFile","isSymbolicLink","valid","dirname","basename","statSync","err","code","mkdirSync","debug","console","log","rewriteSync","listDirectorySync","writeFileSync","Error","files","readdirSync","copyFromArraySync","length","f","shift","join","readFileSync","callback","mode","utimes","atime","mtime","chmodSync","utimesSync","module","exports"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBC,IAArB,EAA2BC,EAA3B,EAA+BC,OAA/B,EAAwC;AACtC,MAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjCA,IAAAA,OAAO,GAAG;AACRC,MAAAA,MAAM,EAAED;AADA,KAAV;AAGD;;AACD,MAAG,OAAOA,OAAP,KAAmB,WAAtB,EAAmCA,OAAO,GAAG,EAAV;;AACnC,MAAG,OAAOA,OAAO,CAACE,KAAf,KAAyB,WAA5B,EAAyC;AACvCF,IAAAA,OAAO,CAACE,KAAR,GAAgB,IAAhB;AACD;;AACDF,EAAAA,OAAO,CAACC,MAAR,GAAiB,OAAOD,OAAO,CAACC,MAAf,KAA0B,UAA1B,GAAuCD,OAAO,CAACC,MAA/C,GAAwD,UAASE,KAAT,EAAgBC,QAAhB,EAA0BC,QAA1B,EAAoC;AAC3G,WAAOL,OAAO,CAACC,MAAf;AACD,GAFD;AAGA,MAAIK,KAAK,GAAGZ,EAAE,CAACa,SAAH,CAAaT,IAAb,CAAZ;AACA,MAAIU,SAAS,GAAGF,KAAK,CAACG,WAAN,KAAsB,WAAtB,GACdH,KAAK,CAACI,MAAN,KAAiB,MAAjB,GACEJ,KAAK,CAACK,cAAN,KAAyB,cAAzB,GACA,EAHJ;AAIA,MAAIC,KAAK,GAAGZ,OAAO,CAACC,MAAR,CAAeO,SAAf,EAA0BV,IAA1B,EAAgCF,IAAI,CAACiB,OAAL,CAAaf,IAAb,CAAhC,EAAoDF,IAAI,CAACkB,QAAL,CAAchB,IAAd,CAApD,CAAZ;;AAEA,MAAIU,SAAS,KAAK,WAAd,IAA6BA,SAAS,KAAK,cAA/C,EAA+D;AAC7D;AACA,QAAGI,KAAH,EAAU;AACR,UAAI;AACFlB,QAAAA,EAAE,CAACqB,QAAH,CAAYhB,EAAZ;AACD,OAFD,CAEE,OAAMiB,GAAN,EAAW;AACX,YAAGA,GAAG,CAACC,IAAJ,KAAa,QAAhB,EAA0B;AACxBvB,UAAAA,EAAE,CAACwB,SAAH,CAAanB,EAAb;AACAC,UAAAA,OAAO,CAACmB,KAAR,IAAiBC,OAAO,CAACC,GAAR,CAAY,QAAQtB,EAApB,CAAjB;AACD,SAHD,MAGO;AACL,gBAAMiB,GAAN;AACD;AACF;;AACDM,MAAAA,WAAW,CAACvB,EAAD,EAAKC,OAAL,EAAcM,KAAd,CAAX;AACA,UAAIE,SAAS,IAAI,cAAjB,EACEe,iBAAiB,CAACzB,IAAD,EAAOC,EAAP,EAAWC,OAAX,CAAjB;AACH;AACF,GAjBD,MAiBO,IAAGM,KAAK,CAACI,MAAN,EAAH,EAAmB;AACxB;AACA,QAAGE,KAAH,EAAU;AACR,UAAGZ,OAAO,CAACE,KAAX,EAAkB;AAChBsB,QAAAA,aAAa,CAAC1B,IAAD,EAAOC,EAAP,EAAWC,OAAX,EAAoBM,KAApB,CAAb;AACD,OAFD,MAEO;AACL,YAAI;AACFZ,UAAAA,EAAE,CAACqB,QAAH,CAAYhB,EAAZ;AACD,SAFD,CAEE,OAAMiB,GAAN,EAAW;AACX,cAAGA,GAAG,CAACC,IAAJ,KAAa,QAAhB,EAA0B;AACxBO,YAAAA,aAAa,CAAC1B,IAAD,EAAOC,EAAP,EAAWC,OAAX,EAAoBM,KAApB,CAAb;AACD,WAFD,MAEO;AACL,kBAAMU,GAAN;AACD;AACF;AACF;AACF;AACF,GAjBM,MAiBA;AACL,UAAM,IAAIS,KAAJ,CAAU,oBAAmB3B,IAA7B,CAAN;AACD;AACF;;AAAA;;AAED,SAASyB,iBAAT,CAA2BzB,IAA3B,EAAiCC,EAAjC,EAAqCC,OAArC,EAA8C;AAC5C,MAAI0B,KAAK,GAAGhC,EAAE,CAACiC,WAAH,CAAe7B,IAAf,CAAZ;AACA8B,EAAAA,iBAAiB,CAACF,KAAD,EAAQ5B,IAAR,EAAcC,EAAd,EAAkBC,OAAlB,CAAjB;AACD;;AAED,SAAS4B,iBAAT,CAA2BF,KAA3B,EAAkC5B,IAAlC,EAAwCC,EAAxC,EAA4CC,OAA5C,EAAqD;AACnD,MAAG0B,KAAK,CAACG,MAAN,KAAiB,CAApB,EAAuB,OAAO,IAAP;AACvB,MAAIC,CAAC,GAAGJ,KAAK,CAACK,KAAN,EAAR;AACAlC,EAAAA,WAAW,CAACD,IAAI,CAACoC,IAAL,CAAUlC,IAAV,EAAgBgC,CAAhB,CAAD,EAAqBlC,IAAI,CAACoC,IAAL,CAAUjC,EAAV,EAAc+B,CAAd,CAArB,EAAuC9B,OAAvC,CAAX;AACA4B,EAAAA,iBAAiB,CAACF,KAAD,EAAQ5B,IAAR,EAAcC,EAAd,EAAkBC,OAAlB,CAAjB;AACD;;AAED,SAASwB,aAAT,CAAuB1B,IAAvB,EAA6BC,EAA7B,EAAiCC,OAAjC,EAA0CM,KAA1C,EAAiD;AAC/CZ,EAAAA,EAAE,CAAC8B,aAAH,CAAiBzB,EAAjB,EAAqBL,EAAE,CAACuC,YAAH,CAAgBnC,IAAhB,EAAsB,QAAtB,CAArB,EAAsD,QAAtD;AACAE,EAAAA,OAAO,CAACmB,KAAR,IAAiBC,OAAO,CAACC,GAAR,CAAY,QAAQtB,EAApB,CAAjB;AACAuB,EAAAA,WAAW,CAACvB,EAAD,EAAKC,OAAL,EAAcM,KAAd,CAAX;AACD;;AAED,SAASgB,WAAT,CAAqBQ,CAArB,EAAwB9B,OAAxB,EAAiCM,KAAjC,EAAwC4B,QAAxC,EAAkD;AAChD,MAAGlC,OAAO,CAACE,KAAX,EAAkB;AAChB,QAAIiC,IAAI,GAAGnC,OAAO,CAACmC,IAAR,KAAiB,IAAjB,GAAwB7B,KAAK,CAAC6B,IAA9B,GAAqCnC,OAAO,CAACmC,IAAxD;AACA,QAAIC,MAAM,GAAGpC,OAAO,CAACoC,MAAR,KAAmB,IAAnB,GAA0B;AACrCC,MAAAA,KAAK,EAAE/B,KAAK,CAAC+B,KADwB;AAErCC,MAAAA,KAAK,EAAEhC,KAAK,CAACgC;AAFwB,KAA1B,GAGTtC,OAAO,CAACoC,MAHZ;AAIAD,IAAAA,IAAI,IAAIzC,EAAE,CAAC6C,SAAH,CAAaT,CAAb,EAAgBK,IAAhB,CAAR;AACAC,IAAAA,MAAM,IAAI1C,EAAE,CAAC8C,UAAH,CAAcV,CAAd,EAAiBM,MAAM,CAACC,KAAxB,EAA+BD,MAAM,CAACE,KAAtC,CAAV;AACD;;AACD,SAAO,IAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB7C,WAAjB","sourcesContent":["var fs = require('fs');\nvar path = require('path');\n/*\n  options: {\n    utimes: false,  // Boolean | Object, keep utimes if true\n    mode: false,    // Boolean | Number, keep file mode if true\n    cover: true,    // Boolean, cover if file exists\n    filter: true,   // Boolean | Function, file filter\n  }\n*/\nfunction copydirSync(from, to, options) {\n  if (typeof options === 'function') {\n    options = {\n      filter: options\n    };\n  }\n  if(typeof options === 'undefined') options = {};\n  if(typeof options.cover === 'undefined') {\n    options.cover = true;\n  }\n  options.filter = typeof options.filter === 'function' ? options.filter : function(state, filepath, filename) {\n    return options.filter;\n  };\n  var stats = fs.lstatSync(from);\n  var statsname = stats.isDirectory() ? 'directory' :\n    stats.isFile() ? 'file' :\n      stats.isSymbolicLink() ? 'symbolicLink' :\n      '';\n  var valid = options.filter(statsname, from, path.dirname(from), path.basename(from));\n\n  if (statsname === 'directory' || statsname === 'symbolicLink') {\n    // Directory or SymbolicLink\n    if(valid) {\n      try {\n        fs.statSync(to);\n      } catch(err) {\n        if(err.code === 'ENOENT') {\n          fs.mkdirSync(to);\n          options.debug && console.log('>> ' + to);\n        } else {\n          throw err;\n        }\n      }\n      rewriteSync(to, options, stats);\n      if (statsname != 'symbolicLink')\n        listDirectorySync(from, to, options);\n    }\n  } else if(stats.isFile()) {\n    // File\n    if(valid) {\n      if(options.cover) {\n        writeFileSync(from, to, options, stats);\n      } else {\n        try {\n          fs.statSync(to);\n        } catch(err) {\n          if(err.code === 'ENOENT') {\n            writeFileSync(from, to, options, stats);\n          } else {\n            throw err;\n          }\n        }\n      }\n    }\n  } else {\n    throw new Error('stats invalid: '+ from);\n  }\n};\n\nfunction listDirectorySync(from, to, options) {\n  var files = fs.readdirSync(from);\n  copyFromArraySync(files, from, to, options);\n}\n\nfunction copyFromArraySync(files, from, to, options) {\n  if(files.length === 0) return true;\n  var f = files.shift();\n  copydirSync(path.join(from, f), path.join(to, f), options);\n  copyFromArraySync(files, from, to, options);\n}\n\nfunction writeFileSync(from, to, options, stats) {\n  fs.writeFileSync(to, fs.readFileSync(from, 'binary'), 'binary');\n  options.debug && console.log('>> ' + to);\n  rewriteSync(to, options, stats);\n}\n\nfunction rewriteSync(f, options, stats, callback) {\n  if(options.cover) {\n    var mode = options.mode === true ? stats.mode : options.mode;\n    var utimes = options.utimes === true ? {\n      atime: stats.atime,\n      mtime: stats.mtime\n    } : options.utimes;\n    mode && fs.chmodSync(f, mode);\n    utimes && fs.utimesSync(f, utimes.atime, utimes.mtime);\n  }\n  return true;\n}\n\nmodule.exports = copydirSync;\n"]},"metadata":{},"sourceType":"script"}