{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n\nvar cst = require('../../constants.js'); // XP's system default value for `PATHEXT` system variable, just in case it's not\n// set on Windows.\n\n\nvar XP_DEFAULT_PATHEXT = '.com;.exe;.bat;.cmd;.vbs;.vbe;.js;.jse;.wsf;.wsh'; // For earlier versions of NodeJS that doesn't have a list of constants (< v6)\n\nvar FILE_EXECUTABLE_MODE = 1;\n\nfunction statFollowLinks() {\n  return fs.statSync.apply(fs, arguments);\n}\n\nfunction isWindowsPlatform() {\n  return cst.IS_WINDOWS;\n} // Cross-platform method for splitting environment `PATH` variables\n\n\nfunction splitPath(p) {\n  return p ? p.split(path.delimiter) : [];\n} // Tests are running all cases for this func but it stays uncovered by codecov due to unknown reason\n\n/* istanbul ignore next */\n\n\nfunction isExecutable(pathName) {\n  try {\n    // TODO(node-support): replace with fs.constants.X_OK once remove support for node < v6\n    fs.accessSync(pathName, FILE_EXECUTABLE_MODE);\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction checkPath(pathName) {\n  return fs.existsSync(pathName) && !statFollowLinks(pathName).isDirectory() && (isWindowsPlatform() || isExecutable(pathName));\n} //@\n//@ ### which(command)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var nodeExec = which('node');\n//@ ```\n//@\n//@ Searches for `command` in the system's `PATH`. On Windows, this uses the\n//@ `PATHEXT` variable to append the extension if it's not already executable.\n//@ Returns a [ShellString](#shellstringstr) containing the absolute path to\n//@ `command`.\n\n\nfunction _which(cmd) {\n  if (!cmd) console.error('must specify command');\n  var options = {};\n  var isWindows = isWindowsPlatform();\n  var pathArray = splitPath(process.env.PATH);\n  var queryMatches = []; // No relative/absolute paths provided?\n\n  if (cmd.indexOf('/') === -1) {\n    // Assume that there are no extensions to append to queries (this is the\n    // case for unix)\n    var pathExtArray = [''];\n\n    if (isWindows) {\n      // In case the PATHEXT variable is somehow not set (e.g.\n      // child_process.spawn with an empty environment), use the XP default.\n      var pathExtEnv = process.env.PATHEXT || XP_DEFAULT_PATHEXT;\n      pathExtArray = splitPath(pathExtEnv.toUpperCase());\n    } // Search for command in PATH\n\n\n    for (var k = 0; k < pathArray.length; k++) {\n      // already found it\n      if (queryMatches.length > 0 && !options.all) break;\n      var attempt = path.resolve(pathArray[k], cmd);\n\n      if (isWindows) {\n        attempt = attempt.toUpperCase();\n      }\n\n      var match = attempt.match(/\\.[^<>:\"/|?*.]+$/);\n\n      if (match && pathExtArray.indexOf(match[0]) >= 0) {\n        // this is Windows-only\n        // The user typed a query with the file extension, like\n        // `which('node.exe')`\n        if (checkPath(attempt)) {\n          queryMatches.push(attempt);\n          break;\n        }\n      } else {\n        // All-platforms\n        // Cycle through the PATHEXT array, and check each extension\n        // Note: the array is always [''] on Unix\n        for (var i = 0; i < pathExtArray.length; i++) {\n          var ext = pathExtArray[i];\n          var newAttempt = attempt + ext;\n\n          if (checkPath(newAttempt)) {\n            queryMatches.push(newAttempt);\n            break;\n          }\n        }\n      }\n    }\n  } else if (checkPath(cmd)) {\n    // a valid absolute or relative path\n    queryMatches.push(path.resolve(cmd));\n  }\n\n  if (queryMatches.length > 0) {\n    return options.all ? queryMatches : queryMatches[0];\n  }\n\n  return options.all ? [] : null;\n}\n\nmodule.exports = _which;","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/tools/which.js"],"names":["fs","require","path","cst","XP_DEFAULT_PATHEXT","FILE_EXECUTABLE_MODE","statFollowLinks","statSync","apply","arguments","isWindowsPlatform","IS_WINDOWS","splitPath","p","split","delimiter","isExecutable","pathName","accessSync","err","checkPath","existsSync","isDirectory","_which","cmd","console","error","options","isWindows","pathArray","process","env","PATH","queryMatches","indexOf","pathExtArray","pathExtEnv","PATHEXT","toUpperCase","k","length","all","attempt","resolve","match","push","i","ext","newAttempt","module","exports"],"mappings":"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","sourcesContent":["\nvar fs = require('fs');\nvar path = require('path');\nvar cst = require('../../constants.js')\n\n// XP's system default value for `PATHEXT` system variable, just in case it's not\n// set on Windows.\nvar XP_DEFAULT_PATHEXT = '.com;.exe;.bat;.cmd;.vbs;.vbe;.js;.jse;.wsf;.wsh';\n\n// For earlier versions of NodeJS that doesn't have a list of constants (< v6)\nvar FILE_EXECUTABLE_MODE = 1;\n\nfunction statFollowLinks() {\n  return fs.statSync.apply(fs, arguments);\n}\n\nfunction isWindowsPlatform() {\n  return cst.IS_WINDOWS;\n}\n\n// Cross-platform method for splitting environment `PATH` variables\nfunction splitPath(p) {\n  return p ? p.split(path.delimiter) : [];\n}\n\n// Tests are running all cases for this func but it stays uncovered by codecov due to unknown reason\n/* istanbul ignore next */\nfunction isExecutable(pathName) {\n  try {\n    // TODO(node-support): replace with fs.constants.X_OK once remove support for node < v6\n    fs.accessSync(pathName, FILE_EXECUTABLE_MODE);\n  } catch (err) {\n    return false;\n  }\n  return true;\n}\n\nfunction checkPath(pathName) {\n  return fs.existsSync(pathName) && !statFollowLinks(pathName).isDirectory()\n    && (isWindowsPlatform() || isExecutable(pathName));\n}\n\n//@\n//@ ### which(command)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var nodeExec = which('node');\n//@ ```\n//@\n//@ Searches for `command` in the system's `PATH`. On Windows, this uses the\n//@ `PATHEXT` variable to append the extension if it's not already executable.\n//@ Returns a [ShellString](#shellstringstr) containing the absolute path to\n//@ `command`.\nfunction _which(cmd) {\n  if (!cmd) console.error('must specify command');\n\n  var options = {}\n\n  var isWindows = isWindowsPlatform();\n  var pathArray = splitPath(process.env.PATH);\n\n  var queryMatches = [];\n\n  // No relative/absolute paths provided?\n  if (cmd.indexOf('/') === -1) {\n    // Assume that there are no extensions to append to queries (this is the\n    // case for unix)\n    var pathExtArray = [''];\n    if (isWindows) {\n      // In case the PATHEXT variable is somehow not set (e.g.\n      // child_process.spawn with an empty environment), use the XP default.\n      var pathExtEnv = process.env.PATHEXT || XP_DEFAULT_PATHEXT;\n      pathExtArray = splitPath(pathExtEnv.toUpperCase());\n    }\n\n    // Search for command in PATH\n    for (var k = 0; k < pathArray.length; k++) {\n      // already found it\n      if (queryMatches.length > 0 && !options.all) break;\n\n      var attempt = path.resolve(pathArray[k], cmd);\n\n      if (isWindows) {\n        attempt = attempt.toUpperCase();\n      }\n\n      var match = attempt.match(/\\.[^<>:\"/|?*.]+$/);\n      if (match && pathExtArray.indexOf(match[0]) >= 0) { // this is Windows-only\n        // The user typed a query with the file extension, like\n        // `which('node.exe')`\n        if (checkPath(attempt)) {\n          queryMatches.push(attempt);\n          break;\n        }\n      } else { // All-platforms\n        // Cycle through the PATHEXT array, and check each extension\n        // Note: the array is always [''] on Unix\n        for (var i = 0; i < pathExtArray.length; i++) {\n          var ext = pathExtArray[i];\n          var newAttempt = attempt + ext;\n          if (checkPath(newAttempt)) {\n            queryMatches.push(newAttempt);\n            break;\n          }\n        }\n      }\n    }\n  } else if (checkPath(cmd)) { // a valid absolute or relative path\n    queryMatches.push(path.resolve(cmd));\n  }\n\n  if (queryMatches.length > 0) {\n    return options.all ? queryMatches : queryMatches[0];\n  }\n  return options.all ? [] : null;\n}\n\nmodule.exports = _which;\n"]},"metadata":{},"sourceType":"script"}