{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// virtualbox.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 14. Docker\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\n\nconst exec = require('child_process').exec;\n\nconst util = require('./util');\n\nfunction vboxInfo(callback) {\n  // fallback - if only callback is given\n  let result = [];\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      try {\n        exec(util.getVboxmanage() + ' list vms --long', function (error, stdout) {\n          let parts = (os.EOL + stdout.toString()).split(os.EOL + 'Name:');\n          parts.shift();\n          parts.forEach(part => {\n            const lines = ('Name:' + part).split(os.EOL);\n            const state = util.getValue(lines, 'State');\n            const running = state.startsWith('running');\n            const runningSinceString = running ? state.replace('running (since ', '').replace(')', '').trim() : '';\n            let runningSince = 0;\n\n            try {\n              if (running) {\n                const sinceDateObj = new Date(runningSinceString);\n                const offset = sinceDateObj.getTimezoneOffset();\n                runningSince = Math.round((Date.now() - Date.parse(sinceDateObj)) / 1000) + offset * 60;\n              }\n            } catch (e) {\n              util.noop();\n            }\n\n            const stoppedSinceString = !running ? state.replace('powered off (since', '').replace(')', '').trim() : '';\n            let stoppedSince = 0;\n\n            try {\n              if (!running) {\n                const sinceDateObj = new Date(stoppedSinceString);\n                const offset = sinceDateObj.getTimezoneOffset();\n                stoppedSince = Math.round((Date.now() - Date.parse(sinceDateObj)) / 1000) + offset * 60;\n              }\n            } catch (e) {\n              util.noop();\n            }\n\n            result.push({\n              id: util.getValue(lines, 'UUID'),\n              name: util.getValue(lines, 'Name'),\n              running,\n              started: runningSinceString,\n              runningSince,\n              stopped: stoppedSinceString,\n              stoppedSince,\n              guestOS: util.getValue(lines, 'Guest OS'),\n              hardwareUUID: util.getValue(lines, 'Hardware UUID'),\n              memory: parseInt(util.getValue(lines, 'Memory size', '     '), 10),\n              vram: parseInt(util.getValue(lines, 'VRAM size'), 10),\n              cpus: parseInt(util.getValue(lines, 'Number of CPUs'), 10),\n              cpuExepCap: util.getValue(lines, 'CPU exec cap'),\n              cpuProfile: util.getValue(lines, 'CPUProfile'),\n              chipset: util.getValue(lines, 'Chipset'),\n              firmware: util.getValue(lines, 'Firmware'),\n              pageFusion: util.getValue(lines, 'Page Fusion') === 'enabled',\n              configFile: util.getValue(lines, 'Config file'),\n              snapshotFolder: util.getValue(lines, 'Snapshot folder'),\n              logFolder: util.getValue(lines, 'Log folder'),\n              HPET: util.getValue(lines, 'HPET') === 'enabled',\n              PAE: util.getValue(lines, 'PAE') === 'enabled',\n              longMode: util.getValue(lines, 'Long Mode') === 'enabled',\n              tripleFaultReset: util.getValue(lines, 'Triple Fault Reset') === 'enabled',\n              APIC: util.getValue(lines, 'APIC') === 'enabled',\n              X2APIC: util.getValue(lines, 'X2APIC') === 'enabled',\n              ACPI: util.getValue(lines, 'ACPI') === 'enabled',\n              IOAPIC: util.getValue(lines, 'IOAPIC') === 'enabled',\n              biosAPICmode: util.getValue(lines, 'BIOS APIC mode'),\n              bootMenuMode: util.getValue(lines, 'Boot menu mode'),\n              bootDevice1: util.getValue(lines, 'Boot Device 1'),\n              bootDevice2: util.getValue(lines, 'Boot Device 2'),\n              bootDevice3: util.getValue(lines, 'Boot Device 3'),\n              bootDevice4: util.getValue(lines, 'Boot Device 4'),\n              timeOffset: util.getValue(lines, 'Time offset'),\n              RTC: util.getValue(lines, 'RTC')\n            });\n          });\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      } catch (e) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.vboxInfo = vboxInfo;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/virtualbox.js"],"names":["os","require","exec","util","vboxInfo","callback","result","Promise","resolve","process","nextTick","getVboxmanage","error","stdout","parts","EOL","toString","split","shift","forEach","part","lines","state","getValue","running","startsWith","runningSinceString","replace","trim","runningSince","sinceDateObj","Date","offset","getTimezoneOffset","Math","round","now","parse","e","noop","stoppedSinceString","stoppedSince","push","id","name","started","stopped","guestOS","hardwareUUID","memory","parseInt","vram","cpus","cpuExepCap","cpuProfile","chipset","firmware","pageFusion","configFile","snapshotFolder","logFolder","HPET","PAE","longMode","tripleFaultReset","APIC","X2APIC","ACPI","IOAPIC","biosAPICmode","bootMenuMode","bootDevice1","bootDevice2","bootDevice3","bootDevice4","timeOffset","RTC","exports"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// virtualbox.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 14. Docker\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst exec = require('child_process').exec;\nconst util = require('./util');\n\nfunction vboxInfo(callback) {\n\n  // fallback - if only callback is given\n  let result = [];\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      try {\n        exec(util.getVboxmanage() + ' list vms --long', function (error, stdout) {\n          let parts = (os.EOL + stdout.toString()).split(os.EOL + 'Name:');\n          parts.shift();\n          parts.forEach(part => {\n            const lines = ('Name:' + part).split(os.EOL);\n            const state = util.getValue(lines, 'State');\n            const running = state.startsWith('running');\n            const runningSinceString = running ? state.replace('running (since ', '').replace(')', '').trim() : '';\n            let runningSince = 0;\n            try {\n              if (running) {\n                const sinceDateObj = new Date(runningSinceString);\n                const offset = sinceDateObj.getTimezoneOffset();\n                runningSince = Math.round((Date.now() - Date.parse(sinceDateObj)) / 1000) + offset * 60;\n              }\n            } catch (e) {\n              util.noop();\n            }\n            const stoppedSinceString = !running ? state.replace('powered off (since', '').replace(')', '').trim() : '';\n            let stoppedSince = 0;\n            try {\n              if (!running) {\n                const sinceDateObj = new Date(stoppedSinceString);\n                const offset = sinceDateObj.getTimezoneOffset();\n                stoppedSince = Math.round((Date.now() - Date.parse(sinceDateObj)) / 1000) + offset * 60;\n              }\n            } catch (e) {\n              util.noop();\n            }\n            result.push({\n              id: util.getValue(lines, 'UUID'),\n              name: util.getValue(lines, 'Name'),\n              running,\n              started: runningSinceString,\n              runningSince,\n              stopped: stoppedSinceString,\n              stoppedSince,\n              guestOS: util.getValue(lines, 'Guest OS'),\n              hardwareUUID: util.getValue(lines, 'Hardware UUID'),\n              memory: parseInt(util.getValue(lines, 'Memory size', '     '), 10),\n              vram: parseInt(util.getValue(lines, 'VRAM size'), 10),\n              cpus: parseInt(util.getValue(lines, 'Number of CPUs'), 10),\n              cpuExepCap: util.getValue(lines, 'CPU exec cap'),\n              cpuProfile: util.getValue(lines, 'CPUProfile'),\n              chipset: util.getValue(lines, 'Chipset'),\n              firmware: util.getValue(lines, 'Firmware'),\n              pageFusion: util.getValue(lines, 'Page Fusion') === 'enabled',\n              configFile: util.getValue(lines, 'Config file'),\n              snapshotFolder: util.getValue(lines, 'Snapshot folder'),\n              logFolder: util.getValue(lines, 'Log folder'),\n              HPET: util.getValue(lines, 'HPET') === 'enabled',\n              PAE: util.getValue(lines, 'PAE') === 'enabled',\n              longMode: util.getValue(lines, 'Long Mode') === 'enabled',\n              tripleFaultReset: util.getValue(lines, 'Triple Fault Reset') === 'enabled',\n              APIC: util.getValue(lines, 'APIC') === 'enabled',\n              X2APIC: util.getValue(lines, 'X2APIC') === 'enabled',\n              ACPI: util.getValue(lines, 'ACPI') === 'enabled',\n              IOAPIC: util.getValue(lines, 'IOAPIC') === 'enabled',\n              biosAPICmode: util.getValue(lines, 'BIOS APIC mode'),\n              bootMenuMode: util.getValue(lines, 'Boot menu mode'),\n              bootDevice1: util.getValue(lines, 'Boot Device 1'),\n              bootDevice2: util.getValue(lines, 'Boot Device 2'),\n              bootDevice3: util.getValue(lines, 'Boot Device 3'),\n              bootDevice4: util.getValue(lines, 'Boot Device 4'),\n              timeOffset: util.getValue(lines, 'Time offset'),\n              RTC: util.getValue(lines, 'RTC'),\n            });\n          });\n\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      } catch (e) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.vboxInfo = vboxInfo;\n"]},"metadata":{},"sourceType":"script"}