{"ast":null,"code":"/**\n * Deps.\n */\nvar slice = require('../utils').slice;\n/**\n * Round-robin plugin.\n *\n * Provides a `send` method which will\n * write the `msg` to all connected peers.\n *\n * @param {Object} options\n * @api private\n */\n\n\nmodule.exports = function (options) {\n  options = options || {};\n\n  var fallback = options.fallback || function () {};\n\n  return function (sock) {\n    /**\n     * Bind callback to `sock`.\n     */\n    fallback = fallback.bind(sock);\n    /**\n     * Initialize counter.\n     */\n\n    var n = 0;\n    /**\n     * Sends `msg` to all connected peers round-robin.\n     */\n\n    sock.send = function () {\n      var socks = this.socks;\n      var len = socks.length;\n      var sock = socks[n++ % len];\n      var msg = slice(arguments);\n\n      if (sock && sock.writable) {\n        sock.write(this.pack(msg));\n      } else {\n        fallback(msg);\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/@pm2/agent/node_modules/pm2-axon/lib/plugins/round-robin.js"],"names":["slice","require","module","exports","options","fallback","sock","bind","n","send","socks","len","length","msg","arguments","writable","write","pack"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBD,KAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAiB;AAChCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AACA,MAAIC,QAAQ,GAAGD,OAAO,CAACC,QAAR,IAAoB,YAAU,CAAE,CAA/C;;AAEA,SAAO,UAASC,IAAT,EAAc;AAEnB;AACJ;AACA;AAEID,IAAAA,QAAQ,GAAGA,QAAQ,CAACE,IAAT,CAAcD,IAAd,CAAX;AAEA;AACJ;AACA;;AAEI,QAAIE,CAAC,GAAG,CAAR;AAEA;AACJ;AACA;;AAEIF,IAAAA,IAAI,CAACG,IAAL,GAAY,YAAU;AACpB,UAAIC,KAAK,GAAG,KAAKA,KAAjB;AACA,UAAIC,GAAG,GAAGD,KAAK,CAACE,MAAhB;AACA,UAAIN,IAAI,GAAGI,KAAK,CAACF,CAAC,KAAKG,GAAP,CAAhB;AAEA,UAAIE,GAAG,GAAGb,KAAK,CAACc,SAAD,CAAf;;AAEA,UAAIR,IAAI,IAAIA,IAAI,CAACS,QAAjB,EAA2B;AACzBT,QAAAA,IAAI,CAACU,KAAL,CAAW,KAAKC,IAAL,CAAUJ,GAAV,CAAX;AACD,OAFD,MAEO;AACLR,QAAAA,QAAQ,CAACQ,GAAD,CAAR;AACD;AACF,KAZD;AAcD,GAhCD;AAiCD,CArCD","sourcesContent":["\n/**\n * Deps.\n */\n\nvar slice = require('../utils').slice;\n\n/**\n * Round-robin plugin.\n *\n * Provides a `send` method which will\n * write the `msg` to all connected peers.\n *\n * @param {Object} options\n * @api private\n */\n\nmodule.exports = function(options){\n  options = options || {};\n  var fallback = options.fallback || function(){};\n\n  return function(sock){\n\n    /**\n     * Bind callback to `sock`.\n     */\n\n    fallback = fallback.bind(sock);\n\n    /**\n     * Initialize counter.\n     */\n\n    var n = 0;\n\n    /**\n     * Sends `msg` to all connected peers round-robin.\n     */\n\n    sock.send = function(){\n      var socks = this.socks;\n      var len = socks.length;\n      var sock = socks[n++ % len];\n\n      var msg = slice(arguments);\n\n      if (sock && sock.writable) {\n        sock.write(this.pack(msg));\n      } else {\n        fallback(msg);\n      }\n    };\n\n  };\n};\n"]},"metadata":{},"sourceType":"script"}