{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar slice = require('../utils').slice;\n\nvar debug = require('debug')('axon:rep');\n\nvar Message = require('amp-message');\n\nvar Socket = require('./sock');\n/**\n * Expose `RepSocket`.\n */\n\n\nmodule.exports = RepSocket;\n/**\n * Initialize a new `RepSocket`.\n *\n * @api private\n */\n\nfunction RepSocket() {\n  Socket.call(this);\n}\n/**\n * Inherits from `Socket.prototype`.\n */\n\n\nRepSocket.prototype.__proto__ = Socket.prototype;\n/**\n * Incoming.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, mulitpart)\n * @api private\n */\n\nRepSocket.prototype.onmessage = function (sock) {\n  var self = this;\n  return function (buf) {\n    var msg = new Message(buf);\n    var args = msg.args;\n    var id = args.pop();\n    args.unshift('message');\n    args.push(reply);\n    self.emit.apply(self, args);\n\n    function reply() {\n      var fn = function () {};\n\n      var args = slice(arguments);\n      args[0] = args[0] || null;\n      var hasCallback = 'function' == typeof args[args.length - 1];\n      if (hasCallback) fn = args.pop();\n      args.push(id);\n\n      if (sock.writable) {\n        sock.write(self.pack(args), function () {\n          fn(true);\n        });\n        return true;\n      } else {\n        debug('peer went away');\n        process.nextTick(function () {\n          fn(false);\n        });\n        return false;\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/@pm2/agent/node_modules/pm2-axon/lib/sockets/rep.js"],"names":["slice","require","debug","Message","Socket","module","exports","RepSocket","call","prototype","__proto__","onmessage","sock","self","buf","msg","args","id","pop","unshift","push","reply","emit","apply","fn","arguments","hasCallback","length","writable","write","pack","process","nextTick"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBD,KAAhC;;AACA,IAAIE,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,UAAjB,CAAZ;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAD,CAArB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAAT,GAAqB;AACnBH,EAAAA,MAAM,CAACI,IAAP,CAAY,IAAZ;AACD;AAED;AACA;AACA;;;AAEAD,SAAS,CAACE,SAAV,CAAoBC,SAApB,GAAgCN,MAAM,CAACK,SAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,SAAS,CAACE,SAAV,CAAoBE,SAApB,GAAgC,UAASC,IAAT,EAAc;AAC5C,MAAIC,IAAI,GAAG,IAAX;AAEA,SAAO,UAAUC,GAAV,EAAc;AACnB,QAAIC,GAAG,GAAG,IAAIZ,OAAJ,CAAYW,GAAZ,CAAV;AACA,QAAIE,IAAI,GAAGD,GAAG,CAACC,IAAf;AAEA,QAAIC,EAAE,GAAGD,IAAI,CAACE,GAAL,EAAT;AACAF,IAAAA,IAAI,CAACG,OAAL,CAAa,SAAb;AACAH,IAAAA,IAAI,CAACI,IAAL,CAAUC,KAAV;AACAR,IAAAA,IAAI,CAACS,IAAL,CAAUC,KAAV,CAAgBV,IAAhB,EAAsBG,IAAtB;;AAEA,aAASK,KAAT,GAAiB;AACf,UAAIG,EAAE,GAAG,YAAU,CAAE,CAArB;;AACA,UAAIR,IAAI,GAAGhB,KAAK,CAACyB,SAAD,CAAhB;AACAT,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAJ,IAAW,IAArB;AAEA,UAAIU,WAAW,GAAG,cAAc,OAAOV,IAAI,CAACA,IAAI,CAACW,MAAL,GAAc,CAAf,CAA3C;AACA,UAAID,WAAJ,EAAiBF,EAAE,GAAGR,IAAI,CAACE,GAAL,EAAL;AAEjBF,MAAAA,IAAI,CAACI,IAAL,CAAUH,EAAV;;AAEA,UAAIL,IAAI,CAACgB,QAAT,EAAmB;AACjBhB,QAAAA,IAAI,CAACiB,KAAL,CAAWhB,IAAI,CAACiB,IAAL,CAAUd,IAAV,CAAX,EAA4B,YAAU;AAAEQ,UAAAA,EAAE,CAAC,IAAD,CAAF;AAAU,SAAlD;AACA,eAAO,IAAP;AACD,OAHD,MAGO;AACLtB,QAAAA,KAAK,CAAC,gBAAD,CAAL;AACA6B,QAAAA,OAAO,CAACC,QAAR,CAAiB,YAAU;AAAER,UAAAA,EAAE,CAAC,KAAD,CAAF;AAAW,SAAxC;AACA,eAAO,KAAP;AACD;AACF;AACF,GA5BD;AA6BD,CAhCD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar slice = require('../utils').slice;\nvar debug = require('debug')('axon:rep');\nvar Message = require('amp-message');\nvar Socket = require('./sock');\n\n/**\n * Expose `RepSocket`.\n */\n\nmodule.exports = RepSocket;\n\n/**\n * Initialize a new `RepSocket`.\n *\n * @api private\n */\n\nfunction RepSocket() {\n  Socket.call(this);\n}\n\n/**\n * Inherits from `Socket.prototype`.\n */\n\nRepSocket.prototype.__proto__ = Socket.prototype;\n\n/**\n * Incoming.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, mulitpart)\n * @api private\n */\n\nRepSocket.prototype.onmessage = function(sock){\n  var self = this;\n\n  return function (buf){\n    var msg = new Message(buf);\n    var args = msg.args;\n\n    var id = args.pop();\n    args.unshift('message');\n    args.push(reply);\n    self.emit.apply(self, args);\n\n    function reply() {\n      var fn = function(){};\n      var args = slice(arguments);\n      args[0] = args[0] || null;\n\n      var hasCallback = 'function' == typeof args[args.length - 1];\n      if (hasCallback) fn = args.pop();\n\n      args.push(id);\n\n      if (sock.writable) {\n        sock.write(self.pack(args), function(){ fn(true) });\n        return true;\n      } else {\n        debug('peer went away');\n        process.nextTick(function(){ fn(false) });\n        return false;\n      }\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}