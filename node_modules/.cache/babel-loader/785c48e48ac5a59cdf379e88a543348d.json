{"ast":null,"code":"const fs = require('fs');\n\nconst forEachLimit = require('async/forEachLimit');\n\nvar cst = require('../../../constants.js');\n\nvar Common = require('../../Common.js');\n\nmodule.exports = function (CLI) {\n  /**\n   * Monitor Selectively Processes (auto filter in interaction)\n   * @param String state 'monitor' or 'unmonitor'\n   * @param String target <pm_id|name|all>\n   * @param Function cb callback\n   */\n  CLI.prototype.monitorState = function (state, target, cb) {\n    var that = this;\n\n    if (!target) {\n      Common.printError(cst.PREFIX_MSG_ERR + 'Please specify an <app_name|pm_id>');\n      return cb ? cb(new Error('argument missing')) : that.exitCli(cst.ERROR_EXIT);\n    }\n\n    function monitor(pm_id, cb) {\n      // State can be monitor or unmonitor\n      that.Client.executeRemote(state, pm_id, cb);\n    }\n\n    if (target === 'all') {\n      that.Client.getAllProcessId(function (err, procs) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n        }\n\n        forEachLimit(procs, 1, monitor, function (err, res) {\n          return typeof cb === 'function' ? cb(err, res) : that.speedList();\n        });\n      });\n    } else if (!Number.isInteger(parseInt(target))) {\n      this.Client.getProcessIdByName(target, true, function (err, procs) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n        }\n\n        forEachLimit(procs, 1, monitor, function (err, res) {\n          return typeof cb === 'function' ? cb(err, res) : that.speedList();\n        });\n      });\n    } else {\n      monitor(parseInt(target), function (err, res) {\n        return typeof cb === 'function' ? cb(err, res) : that.speedList();\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/API/pm2-plus/process-selector.js"],"names":["fs","require","forEachLimit","cst","Common","module","exports","CLI","prototype","monitorState","state","target","cb","that","printError","PREFIX_MSG_ERR","Error","exitCli","ERROR_EXIT","monitor","pm_id","Client","executeRemote","getAllProcessId","err","procs","retErr","res","speedList","Number","isInteger","parseInt","getProcessIdByName"],"mappings":"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","sourcesContent":["const fs  = require('fs');\nconst forEachLimit = require('async/forEachLimit');\n\nvar cst = require('../../../constants.js');\nvar Common = require('../../Common.js');\n\nmodule.exports = function(CLI) {\n  /**\n   * Monitor Selectively Processes (auto filter in interaction)\n   * @param String state 'monitor' or 'unmonitor'\n   * @param String target <pm_id|name|all>\n   * @param Function cb callback\n   */\n  CLI.prototype.monitorState = function(state, target, cb) {\n    var that = this;\n\n    if (!target) {\n      Common.printError(cst.PREFIX_MSG_ERR + 'Please specify an <app_name|pm_id>');\n      return cb ? cb(new Error('argument missing')) : that.exitCli(cst.ERROR_EXIT);\n    }\n\n    function monitor (pm_id, cb) {\n      // State can be monitor or unmonitor\n      that.Client.executeRemote(state, pm_id, cb);\n    }\n    if (target === 'all') {\n      that.Client.getAllProcessId(function (err, procs) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n        }\n        forEachLimit(procs, 1, monitor, function (err, res) {\n          return typeof cb === 'function' ? cb(err, res) : that.speedList();\n        });\n      });\n    } else if (!Number.isInteger(parseInt(target))) {\n      this.Client.getProcessIdByName(target, true, function (err, procs) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n        }\n        forEachLimit(procs, 1, monitor, function (err, res) {\n          return typeof cb === 'function' ? cb(err, res) : that.speedList();\n        });\n      });\n    } else {\n      monitor(parseInt(target), function (err, res) {\n        return typeof cb === 'function' ? cb(err, res) : that.speedList();\n      });\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}