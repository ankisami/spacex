{"ast":null,"code":"var exec = require('child_process').exec,\n    path = require('path');\n/**\n * open a file or uri using the default application for the file type.\n *\n * @return {ChildProcess} - the child process object.\n * @param {string} target - the file/uri to open.\n * @param {string} appName - (optional) the application to be used to open the\n *      file (for example, \"chrome\", \"firefox\")\n * @param {function(Error)} callback - called with null on success, or\n *      an error object that contains a property 'code' with the exit\n *      code of the process.\n */\n\n\nmodule.exports = open;\n\nfunction open(target, appName, callback) {\n  var opener;\n\n  if (typeof appName === 'function') {\n    callback = appName;\n    appName = null;\n  }\n\n  switch (process.platform) {\n    case 'darwin':\n      if (appName) {\n        opener = 'open -a \"' + escape(appName) + '\"';\n      } else {\n        opener = 'open';\n      }\n\n      break;\n\n    case 'win32':\n      // if the first parameter to start is quoted, it uses that as the title\n      // so we pass a blank title so we can quote the file we are opening\n      if (appName) {\n        opener = 'start \"\" \"' + escape(appName) + '\"';\n      } else {\n        opener = 'start \"\"';\n      }\n\n      break;\n\n    default:\n      if (appName) {\n        opener = escape(appName);\n      } else {\n        // use Portlands xdg-open everywhere else\n        opener = path.join(__dirname, './xdg-open');\n      }\n\n      break;\n  }\n\n  if (process.env.SUDO_USER) {\n    opener = 'sudo -u ' + process.env.SUDO_USER + ' ' + opener;\n  }\n\n  return exec(opener + ' \"' + escape(target) + '\"', callback);\n}\n\nfunction escape(s) {\n  return s.replace(/\"/g, '\\\\\\\"');\n}","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/tools/open.js"],"names":["exec","require","path","module","exports","open","target","appName","callback","opener","process","platform","escape","join","__dirname","env","SUDO_USER","s","replace"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,IAApC;AAAA,IACIE,IAAI,GAAGD,OAAO,CAAC,MAAD,CADlB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,IAAjB;;AAEA,SAASA,IAAT,CAAcC,MAAd,EAAsBC,OAAtB,EAA+BC,QAA/B,EAAyC;AACvC,MAAIC,MAAJ;;AAEA,MAAI,OAAOF,OAAP,KAAoB,UAAxB,EAAoC;AAClCC,IAAAA,QAAQ,GAAGD,OAAX;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAED,UAAQG,OAAO,CAACC,QAAhB;AACA,SAAK,QAAL;AACE,UAAIJ,OAAJ,EAAa;AACXE,QAAAA,MAAM,GAAG,cAAcG,MAAM,CAACL,OAAD,CAApB,GAAgC,GAAzC;AACD,OAFD,MAEO;AACLE,QAAAA,MAAM,GAAG,MAAT;AACD;;AACD;;AACF,SAAK,OAAL;AACE;AACA;AACA,UAAIF,OAAJ,EAAa;AACXE,QAAAA,MAAM,GAAG,eAAeG,MAAM,CAACL,OAAD,CAArB,GAAiC,GAA1C;AACD,OAFD,MAEO;AACLE,QAAAA,MAAM,GAAG,UAAT;AACD;;AACD;;AACF;AACE,UAAIF,OAAJ,EAAa;AACXE,QAAAA,MAAM,GAAGG,MAAM,CAACL,OAAD,CAAf;AACD,OAFD,MAEO;AACL;AACAE,QAAAA,MAAM,GAAGP,IAAI,CAACW,IAAL,CAAUC,SAAV,EAAqB,YAArB,CAAT;AACD;;AACD;AAxBF;;AA2BA,MAAIJ,OAAO,CAACK,GAAR,CAAYC,SAAhB,EAA2B;AACzBP,IAAAA,MAAM,GAAG,aAAaC,OAAO,CAACK,GAAR,CAAYC,SAAzB,GAAqC,GAArC,GAA2CP,MAApD;AACD;;AACD,SAAOT,IAAI,CAACS,MAAM,GAAG,IAAT,GAAgBG,MAAM,CAACN,MAAD,CAAtB,GAAiC,GAAlC,EAAuCE,QAAvC,CAAX;AACD;;AAED,SAASI,MAAT,CAAgBK,CAAhB,EAAmB;AACjB,SAAOA,CAAC,CAACC,OAAF,CAAU,IAAV,EAAgB,MAAhB,CAAP;AACD","sourcesContent":["var exec = require('child_process').exec\n  , path = require('path')\n  ;\n\n\n/**\n * open a file or uri using the default application for the file type.\n *\n * @return {ChildProcess} - the child process object.\n * @param {string} target - the file/uri to open.\n * @param {string} appName - (optional) the application to be used to open the\n *      file (for example, \"chrome\", \"firefox\")\n * @param {function(Error)} callback - called with null on success, or\n *      an error object that contains a property 'code' with the exit\n *      code of the process.\n */\n\nmodule.exports = open;\n\nfunction open(target, appName, callback) {\n  var opener;\n\n  if (typeof(appName) === 'function') {\n    callback = appName;\n    appName = null;\n  }\n\n  switch (process.platform) {\n  case 'darwin':\n    if (appName) {\n      opener = 'open -a \"' + escape(appName) + '\"';\n    } else {\n      opener = 'open';\n    }\n    break;\n  case 'win32':\n    // if the first parameter to start is quoted, it uses that as the title\n    // so we pass a blank title so we can quote the file we are opening\n    if (appName) {\n      opener = 'start \"\" \"' + escape(appName) + '\"';\n    } else {\n      opener = 'start \"\"';\n    }\n    break;\n  default:\n    if (appName) {\n      opener = escape(appName);\n    } else {\n      // use Portlands xdg-open everywhere else\n      opener = path.join(__dirname, './xdg-open');\n    }\n    break;\n  }\n\n  if (process.env.SUDO_USER) {\n    opener = 'sudo -u ' + process.env.SUDO_USER + ' ' + opener;\n  }\n  return exec(opener + ' \"' + escape(target) + '\"', callback);\n}\n\nfunction escape(s) {\n  return s.replace(/\"/g, '\\\\\\\"');\n}\n"]},"metadata":{},"sourceType":"script"}