{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n\n/******************************\n *    ______ _______ ______\n *   |   __ \\   |   |__    |\n *   |    __/       |    __|\n *   |___|  |__|_|__|______|\n *\n *    Main Daemon side file\n *\n ******************************/\nvar cluster = require('cluster');\n\nvar numCPUs = require('os').cpus() ? require('os').cpus().length : 1;\n\nvar path = require('path');\n\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\nvar fs = require('fs');\n\nvar vizion = require('vizion');\n\nvar debug = require('debug')('pm2:god');\n\nvar Utility = require('./Utility');\n\nvar cst = require('../constants.js');\n\nvar timesLimit = require('async/timesLimit');\n\nvar Configuration = require('./Configuration.js');\n\nvar semver = require('semver');\n/**\n * Override cluster module configuration\n */\n\n\nif (semver.lt(process.version, '10.0.0')) {\n  cluster.setupMaster({\n    windowsHide: true,\n    exec: path.resolve(path.dirname(module.filename), 'ProcessContainerLegacy.js')\n  });\n} else {\n  cluster.setupMaster({\n    windowsHide: true,\n    exec: path.resolve(path.dirname(module.filename), 'ProcessContainer.js')\n  });\n}\n/**\n * Expose God\n */\n\n\nvar God = module.exports = {\n  next_id: 0,\n  clusters_db: {},\n  configuration: {},\n  started_at: Date.now(),\n  system_infos_proc: null,\n  system_infos: null,\n  bus: new EventEmitter2({\n    wildcard: true,\n    delimiter: ':',\n    maxListeners: 1000\n  })\n};\nUtility.overrideConsole(God.bus);\n/**\n * Populate God namespace\n */\n\nrequire('./Event.js')(God);\n\nrequire('./God/Methods.js')(God);\n\nrequire('./God/ForkMode.js')(God);\n\nrequire('./God/ClusterMode.js')(God);\n\nrequire('./God/Reload')(God);\n\nrequire('./God/ActionMethods')(God);\n\nrequire('./Watcher')(God);\n\nGod.init = function () {\n  require('./Worker.js')(this);\n\n  God.system_infos_proc = null;\n  this.configuration = Configuration.getSync('pm2');\n\n  if (this.configuration && this.configuration.sysmonit == 'true') {\n    God.launchSysMonitoring({}, () => {\n      console.log('System monitoring launched');\n    });\n  }\n\n  setTimeout(function () {\n    God.Worker.start();\n  }, 500);\n};\n\nGod.writeExitSeparator = function (pm2_env, code, signal) {\n  try {\n    var exit_sep = `[PM2][${new Date().toISOString()}] app exited`;\n    if (code) exit_sep += `itself with exit code: ${code}`;\n    if (signal) exit_sep += `by an external signal: ${signal}`;\n    exit_sep += '\\n';\n    if (pm2_env.pm_out_log_path) fs.writeFileSync(pm2_env.pm_out_log_path, exit_sep);\n    if (pm2_env.pm_err_log_path) fs.writeFileSync(pm2_env.pm_err_log_path, exit_sep);\n    if (pm2_env.pm_log_path) fs.writeFileSync(pm2_env.pm_log_path, exit_sep);\n  } catch (e) {}\n};\n/**\n * Init new process\n */\n\n\nGod.prepare = function prepare(env, cb) {\n  // generate a new unique id for each processes\n  env.env.unique_id = Utility.generateUUID(); // if the app is standalone, no multiple instance\n\n  if (typeof env.instances === 'undefined') {\n    env.vizion_running = false;\n    if (env.env && env.env.vizion_running) env.env.vizion_running = false;\n\n    if (env.status == cst.STOPPED_STATUS) {\n      env.pm_id = God.getNewId();\n      var clu = {\n        pm2_env: env,\n        process: {}\n      };\n      God.clusters_db[env.pm_id] = clu;\n      return cb(null, [God.clusters_db[env.pm_id]]);\n    }\n\n    return God.executeApp(env, function (err, clu) {\n      if (err) return cb(err);\n      God.notify('start', clu, true);\n      return cb(null, [Utility.clone(clu)]);\n    });\n  } // find how many replicate the user want\n\n\n  env.instances = parseInt(env.instances);\n\n  if (env.instances === 0) {\n    env.instances = numCPUs;\n  } else if (env.instances < 0) {\n    env.instances += numCPUs;\n  }\n\n  if (env.instances <= 0) {\n    env.instances = 1;\n  }\n\n  timesLimit(env.instances, 1, function (n, next) {\n    env.vizion_running = false;\n\n    if (env.env && env.env.vizion_running) {\n      env.env.vizion_running = false;\n    }\n\n    God.injectVariables(env, function inject(err, _env) {\n      if (err) return next(err);\n      return God.executeApp(Utility.clone(_env), function (err, clu) {\n        if (err) return next(err);\n        God.notify('start', clu, true); // here call next wihtout an array because\n        // async.times aggregate the result into an array\n\n        return next(null, Utility.clone(clu));\n      });\n    });\n  }, cb);\n};\n/**\n * Launch the specified script (present in env)\n * @api private\n * @method executeApp\n * @param {Mixed} env\n * @param {Function} cb\n * @return Literal\n */\n\n\nGod.executeApp = function executeApp(env, cb) {\n  var env_copy = Utility.clone(env);\n  Utility.extend(env_copy, env_copy.env);\n  env_copy['status'] = cst.LAUNCHING_STATUS;\n  env_copy['pm_uptime'] = Date.now();\n  env_copy['axm_actions'] = [];\n  env_copy['axm_monitor'] = {};\n  env_copy['axm_options'] = {};\n  env_copy['axm_dynamic'] = {};\n  env_copy['vizion_running'] = env_copy['vizion_running'] !== undefined ? env_copy['vizion_running'] : false;\n  if (!env_copy.created_at) env_copy['created_at'] = Date.now();\n  /**\n   * Enter here when it's the first time that the process is created\n   * 1 - Assign a new id\n   * 2 - Reset restart time and unstable_restarts\n   * 3 - Assign a log file name depending on the id\n   * 4 - If watch option is set, look for changes\n   */\n\n  if (env_copy['pm_id'] === undefined) {\n    env_copy['pm_id'] = God.getNewId();\n    env_copy['restart_time'] = 0;\n    env_copy['unstable_restarts'] = 0; // add -pm_id to pid file\n\n    env_copy.pm_pid_path = env_copy.pm_pid_path.replace(/-[0-9]+\\.pid$|\\.pid$/g, '-' + env_copy['pm_id'] + '.pid'); // If merge option, dont separate the logs\n\n    if (!env_copy['merge_logs']) {\n      ['', '_out', '_err'].forEach(function (k) {\n        var key = 'pm' + k + '_log_path';\n        env_copy[key] && (env_copy[key] = env_copy[key].replace(/-[0-9]+\\.log$|\\.log$/g, '-' + env_copy['pm_id'] + '.log'));\n      });\n    } // Initiate watch file\n\n\n    if (env_copy['watch']) {\n      God.watch.enable(env_copy);\n    }\n  }\n\n  God.registerCron(env_copy);\n  /** Callback when application is launched */\n\n  var readyCb = function ready(proc) {\n    // If vizion enabled run versioning retrieval system\n    if (proc.pm2_env.vizion !== false && proc.pm2_env.vizion !== \"false\") God.finalizeProcedure(proc);else God.notify('online', proc);\n    if (proc.pm2_env.status !== cst.ERRORED_STATUS) proc.pm2_env.status = cst.ONLINE_STATUS;\n    console.log(`App [${proc.pm2_env.name}:${proc.pm2_env.pm_id}] online`);\n    if (cb) cb(null, proc);\n  };\n\n  if (env_copy.exec_mode === 'cluster_mode') {\n    /**\n     * Cluster mode logic (for NodeJS apps)\n     */\n    God.nodeApp(env_copy, function nodeApp(err, clu) {\n      if (cb && err) return cb(err);\n      if (err) return false;\n      var old_env = God.clusters_db[clu.pm2_env.pm_id];\n\n      if (old_env) {\n        old_env = null;\n        God.clusters_db[clu.pm2_env.pm_id] = null;\n      }\n\n      God.clusters_db[clu.pm2_env.pm_id] = clu;\n      clu.once('error', function (err) {\n        console.error(err.stack || err);\n        clu.pm2_env.status = cst.ERRORED_STATUS;\n\n        try {\n          clu.destroy && clu.destroy();\n        } catch (e) {\n          console.error(e.stack || e);\n          God.handleExit(clu, cst.ERROR_EXIT);\n        }\n      });\n      clu.once('disconnect', function () {\n        console.log('App name:%s id:%s disconnected', clu.pm2_env.name, clu.pm2_env.pm_id);\n      });\n      clu.once('exit', function cluExit(code, signal) {\n        //God.writeExitSeparator(clu.pm2_env, code, signal)\n        God.handleExit(clu, code || 0, signal || 'SIGINT');\n      });\n      return clu.once('online', function () {\n        if (!clu.pm2_env.wait_ready) return readyCb(clu); // Timeout if the ready message has not been sent before listen_timeout\n\n        var ready_timeout = setTimeout(function () {\n          God.bus.removeListener('process:msg', listener);\n          return readyCb(clu);\n        }, clu.pm2_env.listen_timeout || cst.GRACEFUL_LISTEN_TIMEOUT);\n\n        var listener = function (packet) {\n          if (packet.raw === 'ready' && packet.process.name === clu.pm2_env.name && packet.process.pm_id === clu.pm2_env.pm_id) {\n            clearTimeout(ready_timeout);\n            God.bus.removeListener('process:msg', listener);\n            return readyCb(clu);\n          }\n        };\n\n        God.bus.on('process:msg', listener);\n      });\n    });\n  } else {\n    /**\n     * Fork mode logic\n     */\n    God.forkMode(env_copy, function forkMode(err, clu) {\n      if (cb && err) return cb(err);\n      if (err) return false;\n      var old_env = God.clusters_db[clu.pm2_env.pm_id];\n      if (old_env) old_env = null;\n      God.clusters_db[env_copy.pm_id] = clu;\n      clu.once('error', function cluError(err) {\n        console.error(err.stack || err);\n        clu.pm2_env.status = cst.ERRORED_STATUS;\n\n        try {\n          clu.kill && clu.kill();\n        } catch (e) {\n          console.error(e.stack || e);\n          God.handleExit(clu, cst.ERROR_EXIT);\n        }\n      });\n      clu.once('exit', function cluClose(code, signal) {\n        //God.writeExitSeparator(clu.pm2_env, code, signal)\n        if (clu.connected === true) clu.disconnect && clu.disconnect();\n        clu._reloadLogs = null;\n        return God.handleExit(clu, code || 0, signal);\n      });\n      if (!clu.pm2_env.wait_ready) return readyCb(clu); // Timeout if the ready message has not been sent before listen_timeout\n\n      var ready_timeout = setTimeout(function () {\n        God.bus.removeListener('process:msg', listener);\n        return readyCb(clu);\n      }, clu.pm2_env.listen_timeout || cst.GRACEFUL_LISTEN_TIMEOUT);\n\n      var listener = function (packet) {\n        if (packet.raw === 'ready' && packet.process.name === clu.pm2_env.name && packet.process.pm_id === clu.pm2_env.pm_id) {\n          clearTimeout(ready_timeout);\n          God.bus.removeListener('process:msg', listener);\n          return readyCb(clu);\n        }\n      };\n\n      God.bus.on('process:msg', listener);\n    });\n  }\n\n  return false;\n};\n/**\n * Handle logic when a process exit (Node or Fork)\n * @method handleExit\n * @param {} clu\n * @param {} exit_code\n * @return\n */\n\n\nGod.handleExit = function handleExit(clu, exit_code, kill_signal) {\n  console.log(`App [${clu.pm2_env.name}:${clu.pm2_env.pm_id}] exited with code [${exit_code}] via signal [${kill_signal || 'SIGINT'}]`);\n  var proc = this.clusters_db[clu.pm2_env.pm_id];\n\n  if (!proc) {\n    console.error('Process undefined ? with process id ', clu.pm2_env.pm_id);\n    return false;\n  }\n\n  var stopping = proc.pm2_env.status == cst.STOPPING_STATUS || proc.pm2_env.status == cst.STOPPED_STATUS || proc.pm2_env.status == cst.ERRORED_STATUS || proc.pm2_env.autorestart === false || proc.pm2_env.autorestart === \"false\";\n  var overlimit = false;\n  if (stopping) proc.process.pid = 0; // Reset probes and actions\n\n  if (proc.pm2_env.axm_actions) proc.pm2_env.axm_actions = [];\n  if (proc.pm2_env.axm_monitor) proc.pm2_env.axm_monitor = {};\n  if (proc.pm2_env.status != cst.ERRORED_STATUS && proc.pm2_env.status != cst.STOPPING_STATUS) proc.pm2_env.status = cst.STOPPED_STATUS;\n\n  if (proc.pm2_env.pm_id.toString().indexOf('_old_') !== 0) {\n    try {\n      fs.unlinkSync(proc.pm2_env.pm_pid_path);\n    } catch (e) {\n      debug('Error when unlinking pid file', e);\n    }\n  }\n  /**\n   * Avoid infinite reloop if an error is present\n   */\n  // If the process has been created less than 15seconds ago\n  // And if the process has an uptime less than a second\n\n\n  var min_uptime = typeof proc.pm2_env.min_uptime !== 'undefined' ? proc.pm2_env.min_uptime : 1000;\n  var max_restarts = typeof proc.pm2_env.max_restarts !== 'undefined' ? proc.pm2_env.max_restarts : 16;\n\n  if (Date.now() - proc.pm2_env.created_at < min_uptime * max_restarts) {\n    if (Date.now() - proc.pm2_env.pm_uptime < min_uptime) {\n      // Increment unstable restart\n      proc.pm2_env.unstable_restarts += 1;\n    }\n  }\n\n  if (proc.pm2_env.unstable_restarts >= max_restarts) {\n    // Too many unstable restart in less than 15 seconds\n    // Set the process as 'ERRORED'\n    // And stop restarting it\n    proc.pm2_env.status = cst.ERRORED_STATUS;\n    proc.process.pid = 0;\n    console.log('Script %s had too many unstable restarts (%d). Stopped. %j', proc.pm2_env.pm_exec_path, proc.pm2_env.unstable_restarts, proc.pm2_env.status);\n    God.notify('restart overlimit', proc);\n    proc.pm2_env.unstable_restarts = 0;\n    proc.pm2_env.created_at = null;\n    overlimit = true;\n  }\n\n  if (typeof exit_code !== 'undefined') proc.pm2_env.exit_code = exit_code;\n  God.notify('exit', proc);\n\n  if (God.pm2_being_killed) {\n    //console.log('[HandleExit] PM2 is being killed, stopping restart procedure...');\n    return false;\n  }\n\n  var restart_delay = 0;\n\n  if (proc.pm2_env.restart_delay !== undefined && !isNaN(parseInt(proc.pm2_env.restart_delay))) {\n    proc.pm2_env.status = cst.WAITING_RESTART;\n    restart_delay = parseInt(proc.pm2_env.restart_delay);\n  }\n\n  if (proc.pm2_env.exp_backoff_restart_delay !== undefined && !isNaN(parseInt(proc.pm2_env.exp_backoff_restart_delay))) {\n    proc.pm2_env.status = cst.WAITING_RESTART;\n\n    if (!proc.pm2_env.prev_restart_delay) {\n      proc.pm2_env.prev_restart_delay = proc.pm2_env.exp_backoff_restart_delay;\n      restart_delay = proc.pm2_env.exp_backoff_restart_delay;\n    } else {\n      proc.pm2_env.prev_restart_delay = Math.floor(Math.min(15000, proc.pm2_env.prev_restart_delay * 1.5));\n      restart_delay = proc.pm2_env.prev_restart_delay;\n    }\n\n    console.log(`App [${clu.pm2_env.name}:${clu.pm2_env.pm_id}] will restart in ${restart_delay}ms`);\n  }\n\n  if (!stopping && !overlimit) {\n    //make this property unenumerable\n    Object.defineProperty(proc.pm2_env, 'restart_task', {\n      configurable: true,\n      writable: true\n    });\n    proc.pm2_env.restart_task = setTimeout(function () {\n      proc.pm2_env.restart_time += 1;\n      God.executeApp(proc.pm2_env);\n    }, restart_delay);\n  }\n\n  return false;\n};\n/**\n * @method finalizeProcedure\n * @param proc {Object}\n * @return\n */\n\n\nGod.finalizeProcedure = function finalizeProcedure(proc) {\n  var last_path = '';\n  var current_path = proc.pm2_env.cwd || path.dirname(proc.pm2_env.pm_exec_path);\n  var proc_id = proc.pm2_env.pm_id;\n  proc.pm2_env.version = Utility.findPackageVersion(proc.pm2_env.pm_exec_path || proc.pm2_env.cwd);\n\n  if (proc.pm2_env.vizion_running === true) {\n    debug('Vizion is already running for proc id: %d, skipping this round', proc_id);\n    return God.notify('online', proc);\n  }\n\n  proc.pm2_env.vizion_running = true;\n  vizion.analyze({\n    folder: current_path\n  }, function recur_path(err, meta) {\n    var proc = God.clusters_db[proc_id];\n    if (err) debug(err.stack || err);\n\n    if (!proc || !proc.pm2_env || proc.pm2_env.status == cst.STOPPED_STATUS || proc.pm2_env.status == cst.STOPPING_STATUS || proc.pm2_env.status == cst.ERRORED_STATUS) {\n      return console.error('Cancelling versioning data parsing');\n    }\n\n    proc.pm2_env.vizion_running = false;\n\n    if (!err) {\n      proc.pm2_env.versioning = meta;\n      proc.pm2_env.versioning.repo_path = current_path;\n      God.notify('online', proc);\n    } else if (err && current_path === last_path) {\n      proc.pm2_env.versioning = null;\n      God.notify('online', proc);\n    } else {\n      last_path = current_path;\n      current_path = path.dirname(current_path);\n      proc.pm2_env.vizion_running = true;\n      vizion.analyze({\n        folder: current_path\n      }, recur_path);\n    }\n\n    return false;\n  });\n};\n/**\n * Inject variables into processes\n * @param {Object} env environnement to be passed to the process\n * @param {Function} cb invoked with <err, env>\n */\n\n\nGod.injectVariables = function injectVariables(env, cb) {\n  // allow to override the key of NODE_APP_INSTANCE if wanted\n  var instanceKey = process.env.PM2_PROCESS_INSTANCE_VAR || env.instance_var; // we need to find the last NODE_APP_INSTANCE used\n\n  var instances = Object.keys(God.clusters_db).map(function (procId) {\n    return God.clusters_db[procId];\n  }).filter(function (proc) {\n    return proc.pm2_env.name === env.name && typeof proc.pm2_env[instanceKey] !== 'undefined';\n  }).map(function (proc) {\n    return proc.pm2_env[instanceKey];\n  }).sort(function (a, b) {\n    return b - a;\n  }); // default to last one + 1\n\n  var instanceNumber = typeof instances[0] === 'undefined' ? 0 : instances[0] + 1; // but try to find a one available\n\n  for (var i = 0; i < instances.length; i++) {\n    if (instances.indexOf(i) === -1) {\n      instanceNumber = i;\n      break;\n    }\n  }\n\n  env[instanceKey] = instanceNumber; // if using increment_var, we need to increment it\n\n  if (env.increment_var) {\n    var lastIncrement = Object.keys(God.clusters_db).map(function (procId) {\n      return God.clusters_db[procId];\n    }).filter(function (proc) {\n      return proc.pm2_env.name === env.name && typeof proc.pm2_env[env.increment_var] !== 'undefined';\n    }).map(function (proc) {\n      return proc.pm2_env[env.increment_var];\n    }).sort(function (a, b) {\n      return b - a;\n    })[0]; // inject a incremental variable\n\n    var defaut = env.env[env.increment_var] || 0;\n    env[env.increment_var] = typeof lastIncrement === 'undefined' ? defaut : lastIncrement + 1;\n    env.env[env.increment_var] = env[env.increment_var];\n  }\n\n  return cb(null, env);\n};\n\nGod.launchSysMonitoring = function (env, cb) {\n  if (God.system_infos_proc !== null) return cb(new Error('Sys Monitoring already launched'));\n\n  try {\n    var sysinfo = require('./Sysinfo/SystemInfo.js');\n\n    God.system_infos_proc = new sysinfo();\n    setInterval(() => {\n      God.system_infos_proc.query((err, data) => {\n        if (err) return;\n        God.system_infos = data;\n      });\n    }, 1000);\n    God.system_infos_proc.fork();\n  } catch (e) {\n    console.log(e);\n    God.system_infos_proc = null;\n  }\n\n  return cb();\n};\n\nGod.init();","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/God.js"],"names":["cluster","require","numCPUs","cpus","length","path","EventEmitter2","fs","vizion","debug","Utility","cst","timesLimit","Configuration","semver","lt","process","version","setupMaster","windowsHide","exec","resolve","dirname","module","filename","God","exports","next_id","clusters_db","configuration","started_at","Date","now","system_infos_proc","system_infos","bus","wildcard","delimiter","maxListeners","overrideConsole","init","getSync","sysmonit","launchSysMonitoring","console","log","setTimeout","Worker","start","writeExitSeparator","pm2_env","code","signal","exit_sep","toISOString","pm_out_log_path","writeFileSync","pm_err_log_path","pm_log_path","e","prepare","env","cb","unique_id","generateUUID","instances","vizion_running","status","STOPPED_STATUS","pm_id","getNewId","clu","executeApp","err","notify","clone","parseInt","n","next","injectVariables","inject","_env","env_copy","extend","LAUNCHING_STATUS","undefined","created_at","pm_pid_path","replace","forEach","k","key","watch","enable","registerCron","readyCb","ready","proc","finalizeProcedure","ERRORED_STATUS","ONLINE_STATUS","name","exec_mode","nodeApp","old_env","once","error","stack","destroy","handleExit","ERROR_EXIT","cluExit","wait_ready","ready_timeout","removeListener","listener","listen_timeout","GRACEFUL_LISTEN_TIMEOUT","packet","raw","clearTimeout","on","forkMode","cluError","kill","cluClose","connected","disconnect","_reloadLogs","exit_code","kill_signal","stopping","STOPPING_STATUS","autorestart","overlimit","pid","axm_actions","axm_monitor","toString","indexOf","unlinkSync","min_uptime","max_restarts","pm_uptime","unstable_restarts","pm_exec_path","pm2_being_killed","restart_delay","isNaN","WAITING_RESTART","exp_backoff_restart_delay","prev_restart_delay","Math","floor","min","Object","defineProperty","configurable","writable","restart_task","restart_time","last_path","current_path","cwd","proc_id","findPackageVersion","analyze","folder","recur_path","meta","versioning","repo_path","instanceKey","PM2_PROCESS_INSTANCE_VAR","instance_var","keys","map","procId","filter","sort","a","b","instanceNumber","i","increment_var","lastIncrement","defaut","Error","sysinfo","setInterval","query","data","fork"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n\n/******************************\n *    ______ _______ ______\n *   |   __ \\   |   |__    |\n *   |    __/       |    __|\n *   |___|  |__|_|__|______|\n *\n *    Main Daemon side file\n *\n ******************************/\n\nvar cluster       = require('cluster');\nvar numCPUs       = require('os').cpus() ? require('os').cpus().length : 1;\nvar path          = require('path');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\nvar fs            = require('fs');\nvar vizion        = require('vizion');\nvar debug         = require('debug')('pm2:god');\nvar Utility       = require('./Utility');\nvar cst           = require('../constants.js');\nvar timesLimit    = require('async/timesLimit');\nvar Configuration = require('./Configuration.js');\nvar semver        = require('semver');\n\n/**\n * Override cluster module configuration\n */\nif (semver.lt(process.version, '10.0.0')) {\n  cluster.setupMaster({\n    windowsHide: true,\n    exec : path.resolve(path.dirname(module.filename), 'ProcessContainerLegacy.js')\n  });\n}\nelse {\n  cluster.setupMaster({\n    windowsHide: true,\n    exec : path.resolve(path.dirname(module.filename), 'ProcessContainer.js')\n  });\n}\n\n/**\n * Expose God\n */\nvar God = module.exports = {\n  next_id : 0,\n  clusters_db : {},\n  configuration: {},\n  started_at : Date.now(),\n  system_infos_proc: null,\n  system_infos: null,\n  bus : new EventEmitter2({\n    wildcard: true,\n    delimiter: ':',\n    maxListeners: 1000\n  })\n};\n\nUtility.overrideConsole(God.bus);\n\n/**\n * Populate God namespace\n */\nrequire('./Event.js')(God);\nrequire('./God/Methods.js')(God);\nrequire('./God/ForkMode.js')(God);\nrequire('./God/ClusterMode.js')(God);\nrequire('./God/Reload')(God);\nrequire('./God/ActionMethods')(God);\nrequire('./Watcher')(God);\n\nGod.init = function() {\n  require('./Worker.js')(this)\n  God.system_infos_proc = null\n\n  this.configuration = Configuration.getSync('pm2')\n\n  if (this.configuration && this.configuration.sysmonit == 'true') {\n    God.launchSysMonitoring({}, () => { console.log('System monitoring launched') })\n  }\n\n  setTimeout(function() {\n    God.Worker.start()\n  }, 500)\n}\n\nGod.writeExitSeparator = function(pm2_env, code, signal) {\n  try {\n    var exit_sep = `[PM2][${new Date().toISOString()}] app exited`\n    if (code)\n      exit_sep += `itself with exit code: ${code}`\n    if (signal)\n      exit_sep += `by an external signal: ${signal}`\n    exit_sep += '\\n'\n\n    if (pm2_env.pm_out_log_path)\n      fs.writeFileSync(pm2_env.pm_out_log_path, exit_sep)\n    if (pm2_env.pm_err_log_path)\n      fs.writeFileSync(pm2_env.pm_err_log_path, exit_sep)\n    if (pm2_env.pm_log_path)\n      fs.writeFileSync(pm2_env.pm_log_path, exit_sep)\n  } catch(e) {\n  }\n}\n\n/**\n * Init new process\n */\nGod.prepare = function prepare (env, cb) {\n  // generate a new unique id for each processes\n  env.env.unique_id = Utility.generateUUID()\n\n  // if the app is standalone, no multiple instance\n  if (typeof env.instances === 'undefined') {\n    env.vizion_running = false;\n    if (env.env && env.env.vizion_running) env.env.vizion_running = false;\n\n    if (env.status == cst.STOPPED_STATUS) {\n      env.pm_id = God.getNewId()\n      var clu = {\n        pm2_env : env,\n        process: {\n        }\n      }\n      God.clusters_db[env.pm_id] = clu\n      return cb(null, [ God.clusters_db[env.pm_id] ])\n    }\n\n    return God.executeApp(env, function (err, clu) {\n      if (err) return cb(err);\n      God.notify('start', clu, true);\n      return cb(null, [ Utility.clone(clu) ]);\n    });\n  }\n\n  // find how many replicate the user want\n  env.instances = parseInt(env.instances);\n  if (env.instances === 0) {\n    env.instances = numCPUs;\n  } else if (env.instances < 0) {\n    env.instances += numCPUs;\n  }\n  if (env.instances <= 0) {\n    env.instances = 1;\n  }\n\n  timesLimit(env.instances, 1, function (n, next) {\n    env.vizion_running = false;\n    if (env.env && env.env.vizion_running) {\n      env.env.vizion_running = false;\n    }\n\n    God.injectVariables(env, function inject (err, _env) {\n      if (err) return next(err);\n      return God.executeApp(Utility.clone(_env), function (err, clu) {\n        if (err) return next(err);\n        God.notify('start', clu, true);\n        // here call next wihtout an array because\n        // async.times aggregate the result into an array\n        return next(null, Utility.clone(clu));\n      });\n    });\n  }, cb);\n};\n\n/**\n * Launch the specified script (present in env)\n * @api private\n * @method executeApp\n * @param {Mixed} env\n * @param {Function} cb\n * @return Literal\n */\nGod.executeApp = function executeApp(env, cb) {\n  var env_copy = Utility.clone(env);\n\n  Utility.extend(env_copy, env_copy.env);\n\n  env_copy['status']         = cst.LAUNCHING_STATUS;\n  env_copy['pm_uptime']      = Date.now();\n  env_copy['axm_actions']    = [];\n  env_copy['axm_monitor']    = {};\n  env_copy['axm_options']    = {};\n  env_copy['axm_dynamic']    = {};\n  env_copy['vizion_running'] =\n    env_copy['vizion_running'] !== undefined ? env_copy['vizion_running'] : false;\n\n  if (!env_copy.created_at)\n    env_copy['created_at'] = Date.now();\n\n  /**\n   * Enter here when it's the first time that the process is created\n   * 1 - Assign a new id\n   * 2 - Reset restart time and unstable_restarts\n   * 3 - Assign a log file name depending on the id\n   * 4 - If watch option is set, look for changes\n   */\n  if (env_copy['pm_id'] === undefined) {\n    env_copy['pm_id']             = God.getNewId();\n    env_copy['restart_time']      = 0;\n    env_copy['unstable_restarts'] = 0;\n\n    // add -pm_id to pid file\n    env_copy.pm_pid_path = env_copy.pm_pid_path.replace(/-[0-9]+\\.pid$|\\.pid$/g, '-' + env_copy['pm_id'] + '.pid');\n\n    // If merge option, dont separate the logs\n    if (!env_copy['merge_logs']) {\n      ['', '_out', '_err'].forEach(function(k){\n        var key = 'pm' + k + '_log_path';\n        env_copy[key] && (env_copy[key] = env_copy[key].replace(/-[0-9]+\\.log$|\\.log$/g, '-' + env_copy['pm_id'] + '.log'));\n      });\n    }\n\n    // Initiate watch file\n    if (env_copy['watch']) {\n      God.watch.enable(env_copy);\n    }\n  }\n\n  God.registerCron(env_copy)\n\n  /** Callback when application is launched */\n  var readyCb = function ready(proc) {\n    // If vizion enabled run versioning retrieval system\n    if (proc.pm2_env.vizion !== false && proc.pm2_env.vizion !== \"false\")\n      God.finalizeProcedure(proc);\n    else\n      God.notify('online', proc);\n\n    if (proc.pm2_env.status !== cst.ERRORED_STATUS)\n      proc.pm2_env.status = cst.ONLINE_STATUS\n\n    console.log(`App [${proc.pm2_env.name}:${proc.pm2_env.pm_id}] online`);\n    if (cb) cb(null, proc);\n  }\n\n  if (env_copy.exec_mode === 'cluster_mode') {\n    /**\n     * Cluster mode logic (for NodeJS apps)\n     */\n    God.nodeApp(env_copy, function nodeApp(err, clu) {\n      if (cb && err) return cb(err);\n      if (err) return false;\n\n      var old_env = God.clusters_db[clu.pm2_env.pm_id];\n\n      if (old_env) {\n        old_env = null;\n        God.clusters_db[clu.pm2_env.pm_id] = null;\n      }\n\n      God.clusters_db[clu.pm2_env.pm_id] = clu;\n\n      clu.once('error', function(err) {\n        console.error(err.stack || err);\n        clu.pm2_env.status = cst.ERRORED_STATUS;\n        try {\n          clu.destroy && clu.destroy();\n        }\n        catch (e) {\n          console.error(e.stack || e);\n          God.handleExit(clu, cst.ERROR_EXIT);\n        }\n      });\n\n      clu.once('disconnect', function() {\n        console.log('App name:%s id:%s disconnected', clu.pm2_env.name, clu.pm2_env.pm_id);\n      });\n\n      clu.once('exit', function cluExit(code, signal) {\n        //God.writeExitSeparator(clu.pm2_env, code, signal)\n        God.handleExit(clu, code || 0, signal || 'SIGINT');\n      });\n\n      return clu.once('online', function () {\n        if (!clu.pm2_env.wait_ready)\n          return readyCb(clu);\n\n        // Timeout if the ready message has not been sent before listen_timeout\n        var ready_timeout = setTimeout(function() {\n          God.bus.removeListener('process:msg', listener)\n          return readyCb(clu)\n        }, clu.pm2_env.listen_timeout || cst.GRACEFUL_LISTEN_TIMEOUT);\n\n        var listener = function (packet) {\n          if (packet.raw === 'ready' &&\n              packet.process.name === clu.pm2_env.name &&\n              packet.process.pm_id === clu.pm2_env.pm_id) {\n            clearTimeout(ready_timeout);\n            God.bus.removeListener('process:msg', listener)\n            return readyCb(clu)\n          }\n        }\n\n        God.bus.on('process:msg', listener);\n      });\n    });\n  }\n  else {\n    /**\n     * Fork mode logic\n     */\n    God.forkMode(env_copy, function forkMode(err, clu) {\n      if (cb && err) return cb(err);\n      if (err) return false;\n\n      var old_env = God.clusters_db[clu.pm2_env.pm_id];\n      if (old_env) old_env = null;\n\n      God.clusters_db[env_copy.pm_id] = clu;\n\n      clu.once('error', function cluError(err) {\n        console.error(err.stack || err);\n        clu.pm2_env.status = cst.ERRORED_STATUS;\n        try {\n          clu.kill && clu.kill();\n        }\n        catch (e) {\n          console.error(e.stack || e);\n          God.handleExit(clu, cst.ERROR_EXIT);\n        }\n      });\n\n      clu.once('exit', function cluClose(code, signal) {\n        //God.writeExitSeparator(clu.pm2_env, code, signal)\n\n        if (clu.connected === true)\n          clu.disconnect && clu.disconnect();\n        clu._reloadLogs = null;\n        return God.handleExit(clu, code || 0, signal);\n      });\n\n      if (!clu.pm2_env.wait_ready)\n        return readyCb(clu);\n\n      // Timeout if the ready message has not been sent before listen_timeout\n      var ready_timeout = setTimeout(function() {\n        God.bus.removeListener('process:msg', listener)\n        return readyCb(clu)\n      }, clu.pm2_env.listen_timeout || cst.GRACEFUL_LISTEN_TIMEOUT);\n\n      var listener = function (packet) {\n        if (packet.raw === 'ready' &&\n            packet.process.name === clu.pm2_env.name &&\n            packet.process.pm_id === clu.pm2_env.pm_id) {\n          clearTimeout(ready_timeout);\n          God.bus.removeListener('process:msg', listener)\n          return readyCb(clu)\n        }\n      }\n      God.bus.on('process:msg', listener);\n    });\n  }\n  return false;\n};\n\n/**\n * Handle logic when a process exit (Node or Fork)\n * @method handleExit\n * @param {} clu\n * @param {} exit_code\n * @return\n */\nGod.handleExit = function handleExit(clu, exit_code, kill_signal) {\n  console.log(`App [${clu.pm2_env.name}:${clu.pm2_env.pm_id}] exited with code [${exit_code}] via signal [${kill_signal || 'SIGINT'}]`)\n\n  var proc = this.clusters_db[clu.pm2_env.pm_id];\n\n  if (!proc) {\n    console.error('Process undefined ? with process id ', clu.pm2_env.pm_id);\n    return false;\n  }\n\n  var stopping = (proc.pm2_env.status == cst.STOPPING_STATUS\n                  || proc.pm2_env.status == cst.STOPPED_STATUS\n                  || proc.pm2_env.status == cst.ERRORED_STATUS)\n      || (proc.pm2_env.autorestart === false || proc.pm2_env.autorestart === \"false\");\n\n  var overlimit   = false;\n\n  if (stopping) proc.process.pid = 0;\n\n  // Reset probes and actions\n  if (proc.pm2_env.axm_actions) proc.pm2_env.axm_actions = [];\n  if (proc.pm2_env.axm_monitor) proc.pm2_env.axm_monitor = {};\n\n  if (proc.pm2_env.status != cst.ERRORED_STATUS &&\n      proc.pm2_env.status != cst.STOPPING_STATUS)\n    proc.pm2_env.status = cst.STOPPED_STATUS;\n\n  if (proc.pm2_env.pm_id.toString().indexOf('_old_') !== 0) {\n    try {\n      fs.unlinkSync(proc.pm2_env.pm_pid_path);\n    } catch (e) {\n      debug('Error when unlinking pid file', e);\n    }\n  }\n\n  /**\n   * Avoid infinite reloop if an error is present\n   */\n  // If the process has been created less than 15seconds ago\n\n  // And if the process has an uptime less than a second\n  var min_uptime = typeof(proc.pm2_env.min_uptime) !== 'undefined' ? proc.pm2_env.min_uptime : 1000;\n  var max_restarts = typeof(proc.pm2_env.max_restarts) !== 'undefined' ? proc.pm2_env.max_restarts : 16;\n\n  if ((Date.now() - proc.pm2_env.created_at) < (min_uptime * max_restarts)) {\n    if ((Date.now() - proc.pm2_env.pm_uptime) < min_uptime) {\n      // Increment unstable restart\n      proc.pm2_env.unstable_restarts += 1;\n    }\n  }\n\n\n  if (proc.pm2_env.unstable_restarts >= max_restarts) {\n    // Too many unstable restart in less than 15 seconds\n    // Set the process as 'ERRORED'\n    // And stop restarting it\n    proc.pm2_env.status = cst.ERRORED_STATUS;\n    proc.process.pid = 0;\n\n    console.log('Script %s had too many unstable restarts (%d). Stopped. %j',\n      proc.pm2_env.pm_exec_path,\n      proc.pm2_env.unstable_restarts,\n      proc.pm2_env.status);\n\n    God.notify('restart overlimit', proc);\n\n    proc.pm2_env.unstable_restarts = 0;\n    proc.pm2_env.created_at = null;\n    overlimit = true;\n  }\n\n  if (typeof(exit_code) !== 'undefined') proc.pm2_env.exit_code = exit_code;\n\n  God.notify('exit', proc);\n\n  if (God.pm2_being_killed) {\n    //console.log('[HandleExit] PM2 is being killed, stopping restart procedure...');\n    return false;\n  }\n\n  var restart_delay = 0;\n\n  if (proc.pm2_env.restart_delay !== undefined &&\n      !isNaN(parseInt(proc.pm2_env.restart_delay))) {\n    proc.pm2_env.status = cst.WAITING_RESTART;\n    restart_delay = parseInt(proc.pm2_env.restart_delay);\n  }\n\n  if (proc.pm2_env.exp_backoff_restart_delay !== undefined &&\n      !isNaN(parseInt(proc.pm2_env.exp_backoff_restart_delay))) {\n    proc.pm2_env.status = cst.WAITING_RESTART;\n    if (!proc.pm2_env.prev_restart_delay) {\n      proc.pm2_env.prev_restart_delay = proc.pm2_env.exp_backoff_restart_delay\n      restart_delay = proc.pm2_env.exp_backoff_restart_delay\n    }\n    else {\n      proc.pm2_env.prev_restart_delay = Math.floor(Math.min(15000, proc.pm2_env.prev_restart_delay * 1.5))\n      restart_delay = proc.pm2_env.prev_restart_delay\n    }\n    console.log(`App [${clu.pm2_env.name}:${clu.pm2_env.pm_id}] will restart in ${restart_delay}ms`)\n  }\n\n  if (!stopping && !overlimit) {\n    //make this property unenumerable\n    Object.defineProperty(proc.pm2_env, 'restart_task', {configurable: true, writable: true});\n    proc.pm2_env.restart_task = setTimeout(function() {\n      proc.pm2_env.restart_time += 1;\n      God.executeApp(proc.pm2_env);\n    }, restart_delay);\n  }\n\n  return false;\n};\n\n/**\n * @method finalizeProcedure\n * @param proc {Object}\n * @return\n */\nGod.finalizeProcedure = function finalizeProcedure(proc) {\n  var last_path    = '';\n  var current_path = proc.pm2_env.cwd || path.dirname(proc.pm2_env.pm_exec_path);\n  var proc_id      = proc.pm2_env.pm_id;\n\n  proc.pm2_env.version = Utility.findPackageVersion(proc.pm2_env.pm_exec_path || proc.pm2_env.cwd);\n\n  if (proc.pm2_env.vizion_running === true) {\n    debug('Vizion is already running for proc id: %d, skipping this round', proc_id);\n    return God.notify('online', proc);\n  }\n  proc.pm2_env.vizion_running = true;\n\n  vizion.analyze({folder : current_path}, function recur_path(err, meta){\n    var proc = God.clusters_db[proc_id];\n\n    if (err)\n      debug(err.stack || err);\n\n    if (!proc ||\n        !proc.pm2_env ||\n        proc.pm2_env.status == cst.STOPPED_STATUS ||\n        proc.pm2_env.status == cst.STOPPING_STATUS ||\n        proc.pm2_env.status == cst.ERRORED_STATUS) {\n      return console.error('Cancelling versioning data parsing');\n    }\n\n    proc.pm2_env.vizion_running = false;\n\n    if (!err) {\n      proc.pm2_env.versioning = meta;\n      proc.pm2_env.versioning.repo_path = current_path;\n      God.notify('online', proc);\n    }\n    else if (err && current_path === last_path) {\n      proc.pm2_env.versioning = null;\n      God.notify('online', proc);\n    }\n    else {\n      last_path = current_path;\n      current_path = path.dirname(current_path);\n      proc.pm2_env.vizion_running = true;\n      vizion.analyze({folder : current_path}, recur_path);\n    }\n    return false;\n  });\n};\n\n/**\n * Inject variables into processes\n * @param {Object} env environnement to be passed to the process\n * @param {Function} cb invoked with <err, env>\n */\nGod.injectVariables = function injectVariables (env, cb) {\n  // allow to override the key of NODE_APP_INSTANCE if wanted\n  var instanceKey = process.env.PM2_PROCESS_INSTANCE_VAR || env.instance_var;\n\n  // we need to find the last NODE_APP_INSTANCE used\n  var instances = Object.keys(God.clusters_db)\n    .map(function (procId) {\n      return God.clusters_db[procId];\n    }).filter(function (proc) {\n      return proc.pm2_env.name === env.name &&\n        typeof proc.pm2_env[instanceKey] !== 'undefined';\n    }).map(function (proc) {\n      return proc.pm2_env[instanceKey];\n    }).sort(function (a, b) {\n      return b - a;\n    });\n  // default to last one + 1\n  var instanceNumber = typeof instances[0] === 'undefined' ? 0 : instances[0] + 1;\n  // but try to find a one available\n  for (var i = 0; i < instances.length; i++) {\n    if (instances.indexOf(i) === -1) {\n      instanceNumber = i;\n      break;\n    }\n  }\n  env[instanceKey] = instanceNumber;\n\n  // if using increment_var, we need to increment it\n  if (env.increment_var) {\n    var lastIncrement = Object.keys(God.clusters_db)\n      .map(function (procId) {\n        return God.clusters_db[procId];\n      }).filter(function (proc) {\n        return proc.pm2_env.name === env.name &&\n          typeof proc.pm2_env[env.increment_var] !== 'undefined';\n      }).map(function (proc) {\n        return proc.pm2_env[env.increment_var];\n      }).sort(function (a, b) {\n        return b - a;\n      })[0];\n    // inject a incremental variable\n    var defaut = env.env[env.increment_var] || 0;\n    env[env.increment_var] = typeof lastIncrement === 'undefined' ? defaut : lastIncrement + 1;\n    env.env[env.increment_var] = env[env.increment_var];\n  }\n\n  return cb(null, env);\n};\n\nGod.launchSysMonitoring = function(env, cb) {\n  if (God.system_infos_proc !== null)\n    return cb(new Error('Sys Monitoring already launched'))\n\n  try {\n    var sysinfo = require('./Sysinfo/SystemInfo.js')\n    God.system_infos_proc = new sysinfo()\n\n    setInterval(() => {\n      God.system_infos_proc.query((err, data) => {\n        if (err) return\n        God.system_infos = data\n      })\n    }, 1000)\n\n    God.system_infos_proc.fork()\n  } catch(e) {\n    console.log(e)\n    God.system_infos_proc = null\n  }\n  return cb()\n}\n\nGod.init()\n"]},"metadata":{},"sourceType":"script"}