{"ast":null,"code":"/***************************\n *\n * Extra methods\n *\n **************************/\nvar cst = require('../../constants.js');\n\nvar Common = require('../Common.js');\n\nvar UX = require('./UX');\n\nvar chalk = require('chalk');\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nvar fmt = require('../tools/fmt.js');\n\nvar dayjs = require('dayjs');\n\nvar pkg = require('../../package.json');\n\nconst semver = require('semver');\n\nconst copyDirSync = require('../tools/copydirSync.js');\n\nmodule.exports = function (CLI) {\n  /**\n   * Get version of the daemonized PM2\n   * @method getVersion\n   * @callback cb\n   */\n  CLI.prototype.getVersion = function (cb) {\n    var that = this;\n    that.Client.executeRemote('getVersion', {}, function (err) {\n      return cb ? cb.apply(null, arguments) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n  /**\n   * Get version of the daemonized PM2\n   * @method getVersion\n   * @callback cb\n   */\n\n\n  CLI.prototype.launchSysMonitoring = function (cb) {\n    var that = this;\n    this.set('pm2:sysmonit', 'true', () => {\n      that.Client.executeRemote('launchSysMonitoring', {}, function (err) {\n        if (err) Common.err(err);else Common.log('System Monitoring launched');\n        return cb ? cb.apply(null, arguments) : that.exitCli(cst.SUCCESS_EXIT);\n      });\n    });\n  };\n  /**\n   * Show application environment\n   * @method env\n   * @callback cb\n   */\n\n\n  CLI.prototype.env = function (app_id, cb) {\n    var procs = [];\n    var printed = 0;\n    this.Client.executeRemote('getMonitorData', {}, (err, list) => {\n      list.forEach(l => {\n        if (app_id == l.pm_id) {\n          printed++;\n          var env = Common.safeExtend({}, l.pm2_env);\n          Object.keys(env).forEach(key => {\n            console.log(`${key}: ${chalk.green(env[key])}`);\n          });\n        }\n      });\n\n      if (printed == 0) {\n        Common.err(`Modules with id ${app_id} not found`);\n        return cb ? cb.apply(null, arguments) : this.exitCli(cst.ERROR_EXIT);\n      }\n\n      return cb ? cb.apply(null, arguments) : this.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n  /**\n   * Get version of the daemonized PM2\n   * @method getVersion\n   * @callback cb\n   */\n\n\n  CLI.prototype.report = function () {\n    var that = this;\n\n    var Log = require('./Log');\n\n    that.Client.executeRemote('getReport', {}, function (err, report) {\n      console.log();\n      console.log();\n      console.log();\n      console.log('```');\n      fmt.title('PM2 report');\n      fmt.field('Date', new Date());\n      fmt.sep();\n      fmt.title(chalk.bold.blue('Daemon'));\n      fmt.field('pm2d version', report.pm2_version);\n      fmt.field('node version', report.node_version);\n      fmt.field('node path', report.node_path);\n      fmt.field('argv', report.argv);\n      fmt.field('argv0', report.argv0);\n      fmt.field('user', report.user);\n      fmt.field('uid', report.uid);\n      fmt.field('gid', report.gid);\n      fmt.field('uptime', dayjs(new Date()).diff(report.started_at, 'minute') + 'min');\n      fmt.sep();\n      fmt.title(chalk.bold.blue('CLI'));\n      fmt.field('local pm2', pkg.version);\n      fmt.field('node version', process.versions.node);\n      fmt.field('node path', process.env['_'] || 'not found');\n      fmt.field('argv', process.argv);\n      fmt.field('argv0', process.argv0);\n      fmt.field('user', process.env.USER || process.env.LNAME || process.env.USERNAME);\n      if (cst.IS_WINDOWS === false && process.geteuid) fmt.field('uid', process.geteuid());\n      if (cst.IS_WINDOWS === false && process.getegid) fmt.field('gid', process.getegid());\n\n      var os = require('os');\n\n      fmt.sep();\n      fmt.title(chalk.bold.blue('System info'));\n      fmt.field('arch', os.arch());\n      fmt.field('platform', os.platform());\n      fmt.field('type', os.type());\n      fmt.field('cpus', os.cpus()[0].model);\n      fmt.field('cpus nb', Object.keys(os.cpus()).length);\n      fmt.field('freemem', os.freemem());\n      fmt.field('totalmem', os.totalmem());\n      fmt.field('home', os.homedir());\n      that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n        fmt.sep();\n        fmt.title(chalk.bold.blue('PM2 list'));\n        UX.list(list, that.gl_interact_infos);\n        fmt.sep();\n        fmt.title(chalk.bold.blue('Daemon logs'));\n        Log.tail([{\n          path: cst.PM2_LOG_FILE_PATH,\n          app_name: 'PM2',\n          type: 'PM2'\n        }], 20, false, function () {\n          console.log('```');\n          console.log();\n          console.log();\n          console.log(chalk.bold.green('Please copy/paste the above report in your issue on https://github.com/Unitech/pm2/issues'));\n          console.log();\n          console.log();\n          that.exitCli(cst.SUCCESS_EXIT);\n        });\n      });\n    });\n  };\n\n  CLI.prototype.getPID = function (app_name, cb) {\n    var that = this;\n\n    if (typeof app_name === 'function') {\n      cb = app_name;\n      app_name = null;\n    }\n\n    this.Client.executeRemote('getMonitorData', {}, function (err, list) {\n      if (err) {\n        Common.printError(cst.PREFIX_MSG_ERR + err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      var pids = [];\n      list.forEach(function (app) {\n        if (!app_name || app_name == app.name) pids.push(app.pid);\n      });\n\n      if (!cb) {\n        Common.printOut(pids.join(\"\\n\"));\n        return that.exitCli(cst.SUCCESS_EXIT);\n      }\n\n      return cb(null, pids);\n    });\n  };\n  /**\n   * Create PM2 memory snapshot\n   * @method getVersion\n   * @callback cb\n   */\n\n\n  CLI.prototype.profile = function (type, time, cb) {\n    var that = this;\n\n    var dayjs = require('dayjs');\n\n    var cmd;\n\n    if (type == 'cpu') {\n      cmd = {\n        ext: '.cpuprofile',\n        action: 'profileCPU'\n      };\n    }\n\n    if (type == 'mem') {\n      cmd = {\n        ext: '.heapprofile',\n        action: 'profileMEM'\n      };\n    }\n\n    var file = path.join(process.cwd(), dayjs().format('dd-HH:mm:ss') + cmd.ext);\n    time = time || 10000;\n    console.log(`Starting ${cmd.action} profiling for ${time}ms...`);\n    that.Client.executeRemote(cmd.action, {\n      pwd: file,\n      timeout: time\n    }, function (err) {\n      if (err) {\n        console.error(err);\n        return that.exitCli(1);\n      }\n\n      console.log(`Profile done in ${file}`);\n      return cb ? cb.apply(null, arguments) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n\n  function basicMDHighlight(lines) {\n    console.log('\\n\\n+-------------------------------------+');\n    console.log(chalk.bold('README.md content:'));\n    lines = lines.split('\\n');\n    var isInner = false;\n    lines.forEach(l => {\n      if (l.startsWith('#')) console.log(chalk.bold.green(l));else if (isInner || l.startsWith('```')) {\n        if (isInner && l.startsWith('```')) isInner = false;else if (isInner == false) isInner = true;\n        console.log(chalk.grey(l));\n      } else if (l.startsWith('`')) console.log(chalk.grey(l));else console.log(l);\n    });\n    console.log('+-------------------------------------+');\n  }\n  /**\n   * pm2 create command\n   * create boilerplate of application for fast try\n   * @method boilerplate\n   */\n\n\n  CLI.prototype.boilerplate = function (cb) {\n    var i = 0;\n    var projects = [];\n\n    var enquirer = require('enquirer');\n\n    fs.readdir(path.join(__dirname, '../templates/sample-apps'), (err, items) => {\n      require('async').forEach(items, (app, next) => {\n        var fp = path.join(__dirname, '../templates/sample-apps', app);\n        fs.readFile(path.join(fp, 'package.json'), (err, dt) => {\n          var meta = JSON.parse(dt);\n          meta.fullpath = fp;\n          meta.folder_name = app;\n          projects.push(meta);\n          next();\n        });\n      }, () => {\n        const prompt = new enquirer.Select({\n          name: 'boilerplate',\n          message: 'Select a boilerplate',\n          choices: projects.map((p, i) => {\n            return {\n              message: `${chalk.bold.blue(p.name)} ${p.description}`,\n              value: `${i}`\n            };\n          })\n        });\n        prompt.run().then(answer => {\n          var p = projects[parseInt(answer)];\n          basicMDHighlight(fs.readFileSync(path.join(p.fullpath, 'README.md')).toString());\n          console.log(chalk.bold(`>> Project copied inside folder ./${p.folder_name}/\\n`));\n          copyDirSync(p.fullpath, path.join(process.cwd(), p.folder_name));\n          this.start(path.join(p.fullpath, 'ecosystem.config.js'), {\n            cwd: p.fullpath\n          }, () => {\n            return cb ? cb.apply(null, arguments) : this.speedList(cst.SUCCESS_EXIT);\n          });\n        }).catch(e => {\n          return cb ? cb.apply(null, arguments) : this.speedList(cst.SUCCESS_EXIT);\n        });\n      });\n    });\n  };\n  /**\n   * Description\n   * @method sendLineToStdin\n   */\n\n\n  CLI.prototype.sendLineToStdin = function (pm_id, line, separator, cb) {\n    var that = this;\n\n    if (!cb && typeof separator == 'function') {\n      cb = separator;\n      separator = null;\n    }\n\n    var packet = {\n      pm_id: pm_id,\n      line: line + (separator || '\\n')\n    };\n    that.Client.executeRemote('sendLineToStdin', packet, function (err, res) {\n      if (err) {\n        Common.printError(cst.PREFIX_MSG_ERR + err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      return cb ? cb(null, res) : that.speedList();\n    });\n  };\n  /**\n   * Description\n   * @method attachToProcess\n   */\n\n\n  CLI.prototype.attach = function (pm_id, separator, cb) {\n    var that = this;\n\n    var readline = require('readline');\n\n    if (isNaN(pm_id)) {\n      Common.printError('pm_id must be a process number (not a process name)');\n      return cb ? cb(Common.retErr('pm_id must be number')) : that.exitCli(cst.ERROR_EXIT);\n    }\n\n    if (typeof separator == 'function') {\n      cb = separator;\n      separator = null;\n    }\n\n    var rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n    rl.on('close', function () {\n      return cb ? cb() : that.exitCli(cst.SUCCESS_EXIT);\n    });\n    that.Client.launchBus(function (err, bus, socket) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      bus.on('log:*', function (type, packet) {\n        if (packet.process.pm_id !== parseInt(pm_id)) return;\n        process.stdout.write(packet.data);\n      });\n    });\n    rl.on('line', function (line) {\n      that.sendLineToStdin(pm_id, line, separator, function () {});\n    });\n  };\n  /**\n   * Description\n   * @method sendDataToProcessId\n   */\n\n\n  CLI.prototype.sendDataToProcessId = function (proc_id, packet, cb) {\n    var that = this;\n\n    if (typeof proc_id === 'object' && typeof packet === 'function') {\n      // the proc_id is packet.\n      cb = packet;\n      packet = proc_id;\n    } else {\n      packet.id = proc_id;\n    }\n\n    that.Client.executeRemote('sendDataToProcessId', packet, function (err, res) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      Common.printOut('successfully sent data to process');\n      return cb ? cb(null, res) : that.speedList();\n    });\n  };\n  /**\n   * Used for custom actions, allows to trigger function inside an app\n   * To expose a function you need to use keymetrics/pmx\n   *\n   * @method msgProcess\n   * @param {Object} opts\n   * @param {String} id           process id\n   * @param {String} action_name  function name to trigger\n   * @param {Object} [opts.opts]  object passed as first arg of the function\n   * @param {String} [uuid]       optional unique identifier when logs are emitted\n   *\n   */\n\n\n  CLI.prototype.msgProcess = function (opts, cb) {\n    var that = this;\n    that.Client.executeRemote('msgProcess', opts, cb);\n  };\n  /**\n   * Trigger a PMX custom action in target application\n   * Custom actions allows to interact with an application\n   *\n   * @method trigger\n   * @param  {String|Number} pm_id       process id or application name\n   * @param  {String}        action_name name of the custom action to trigger\n   * @param  {Mixed}         params      parameter to pass to target action\n   * @param  {Function}      cb          callback\n   */\n\n\n  CLI.prototype.trigger = function (pm_id, action_name, params, cb) {\n    if (typeof params === 'function') {\n      cb = params;\n      params = null;\n    }\n\n    var cmd = {\n      msg: action_name\n    };\n    var counter = 0;\n    var process_wait_count = 0;\n    var that = this;\n    var results = [];\n    if (params) cmd.opts = params;\n    if (isNaN(pm_id)) cmd.name = pm_id;else cmd.id = pm_id;\n    this.launchBus(function (err, bus) {\n      bus.on('axm:reply', function (ret) {\n        if (ret.process.name == pm_id || ret.process.pm_id == pm_id || ret.process.namespace == pm_id || pm_id == 'all') {\n          results.push(ret);\n          Common.printOut('[%s:%s:%s]=%j', ret.process.name, ret.process.pm_id, ret.process.namespace, ret.data.return);\n          if (++counter == process_wait_count) return cb ? cb(null, results) : that.exitCli(cst.SUCCESS_EXIT);\n        }\n      });\n      that.msgProcess(cmd, function (err, data) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n        }\n\n        if (data.process_count == 0) {\n          Common.printError('Not any process has received a command (offline or unexistent)');\n          return cb ? cb(Common.retErr('Unknown process')) : that.exitCli(cst.ERROR_EXIT);\n        }\n\n        process_wait_count = data.process_count;\n        Common.printOut(chalk.bold('%s processes have received command %s'), data.process_count, action_name);\n      });\n    });\n  };\n  /**\n   * Description\n   * @method sendSignalToProcessName\n   * @param {} signal\n   * @param {} process_name\n   * @return\n   */\n\n\n  CLI.prototype.sendSignalToProcessName = function (signal, process_name, cb) {\n    var that = this;\n    that.Client.executeRemote('sendSignalToProcessName', {\n      signal: signal,\n      process_name: process_name\n    }, function (err, list) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      Common.printOut('successfully sent signal %s to process name %s', signal, process_name);\n      return cb ? cb(null, list) : that.speedList();\n    });\n  };\n  /**\n   * Description\n   * @method sendSignalToProcessId\n   * @param {} signal\n   * @param {} process_id\n   * @return\n   */\n\n\n  CLI.prototype.sendSignalToProcessId = function (signal, process_id, cb) {\n    var that = this;\n    that.Client.executeRemote('sendSignalToProcessId', {\n      signal: signal,\n      process_id: process_id\n    }, function (err, list) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      Common.printOut('successfully sent signal %s to process id %s', signal, process_id);\n      return cb ? cb(null, list) : that.speedList();\n    });\n  };\n  /**\n   * API method to launch a process that will serve directory over http\n   */\n\n\n  CLI.prototype.autoinstall = function (cb) {\n    var filepath = path.resolve(path.dirname(module.filename), '../Sysinfo/ServiceDetection/ServiceDetection.js');\n    this.start(filepath, (err, res) => {\n      if (err) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'Error while trying to serve : ' + err.message || err);\n        return cb ? cb(err) : this.speedList(cst.ERROR_EXIT);\n      }\n\n      return cb ? cb(null) : this.speedList();\n    });\n  };\n  /**\n   * API method to launch a process that will serve directory over http\n   *\n   * @param {Object} opts options\n   * @param {String} opts.path path to be served\n   * @param {Number} opts.port port on which http will bind\n   * @param {Boolean} opts.spa single page app served\n   * @param {String} opts.basicAuthUsername basic auth username\n   * @param {String} opts.basicAuthPassword basic auth password\n   * @param {Object} commander commander object\n   * @param {Function} cb optional callback\n   */\n\n\n  CLI.prototype.serve = function (target_path, port, opts, commander, cb) {\n    var that = this;\n    var servePort = process.env.PM2_SERVE_PORT || port || 8080;\n    var servePath = path.resolve(process.env.PM2_SERVE_PATH || target_path || '.');\n    var filepath = path.resolve(path.dirname(module.filename), './Serve.js');\n    if (typeof commander.name === 'string') opts.name = commander.name;else opts.name = 'static-page-server-' + servePort;\n    if (!opts.env) opts.env = {};\n    opts.env.PM2_SERVE_PORT = servePort;\n    opts.env.PM2_SERVE_PATH = servePath;\n    opts.env.PM2_SERVE_SPA = opts.spa;\n\n    if (opts.basicAuthUsername && opts.basicAuthPassword) {\n      opts.env.PM2_SERVE_BASIC_AUTH = 'true';\n      opts.env.PM2_SERVE_BASIC_AUTH_USERNAME = opts.basicAuthUsername;\n      opts.env.PM2_SERVE_BASIC_AUTH_PASSWORD = opts.basicAuthPassword;\n    }\n\n    if (opts.monitor) {\n      opts.env.PM2_SERVE_MONITOR = opts.monitor;\n    }\n\n    opts.cwd = servePath;\n    this.start(filepath, opts, function (err, res) {\n      if (err) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'Error while trying to serve : ' + err.message || err);\n        return cb ? cb(err) : that.speedList(cst.ERROR_EXIT);\n      }\n\n      Common.printOut(cst.PREFIX_MSG + 'Serving ' + servePath + ' on port ' + servePort);\n      return cb ? cb(null, res) : that.speedList();\n    });\n  };\n  /**\n   * Ping daemon - if PM2 daemon not launched, it will launch it\n   * @method ping\n   */\n\n\n  CLI.prototype.ping = function (cb) {\n    var that = this;\n    that.Client.executeRemote('ping', {}, function (err, res) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(new Error(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      Common.printOut(res);\n      return cb ? cb(null, res) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n  /**\n   * Execute remote command\n   */\n\n\n  CLI.prototype.remote = function (command, opts, cb) {\n    var that = this;\n    that[command](opts.name, function (err_cmd, ret) {\n      if (err_cmd) console.error(err_cmd);\n      console.log('Command %s finished', command);\n      return cb(err_cmd, ret);\n    });\n  };\n  /**\n   * This remote method allows to pass multiple arguments\n   * to PM2\n   * It is used for the new scoped PM2 action system\n   */\n\n\n  CLI.prototype.remoteV2 = function (command, opts, cb) {\n    var that = this;\n    if (that[command].length == 1) return that[command](cb);\n    opts.args.push(cb);\n    return that[command].apply(this, opts.args);\n  };\n  /**\n   * Description\n   * @method generateSample\n   * @param {} name\n   * @return\n   */\n\n\n  CLI.prototype.generateSample = function (mode) {\n    var that = this;\n    var templatePath;\n    if (mode == 'simple') templatePath = path.join(cst.TEMPLATE_FOLDER, cst.APP_CONF_TPL_SIMPLE);else templatePath = path.join(cst.TEMPLATE_FOLDER, cst.APP_CONF_TPL);\n    var sample = fs.readFileSync(templatePath);\n    var dt = sample.toString();\n    var f_name = 'ecosystem.config.js';\n    var pwd = process.env.PWD || process.cwd();\n\n    try {\n      fs.writeFileSync(path.join(pwd, f_name), dt);\n    } catch (e) {\n      console.error(e.stack || e);\n      return that.exitCli(cst.ERROR_EXIT);\n    }\n\n    Common.printOut('File %s generated', path.join(pwd, f_name));\n    that.exitCli(cst.SUCCESS_EXIT);\n  };\n  /**\n   * Description\n   * @method dashboard\n   * @return\n   */\n\n\n  CLI.prototype.dashboard = function (cb) {\n    var that = this;\n\n    var Dashboard = require('./Dashboard');\n\n    if (cb) return cb(new Error('Dashboard cant be called programmatically'));\n    Dashboard.init();\n    this.Client.launchBus(function (err, bus) {\n      if (err) {\n        console.error('Error launchBus: ' + err);\n        that.exitCli(cst.ERROR_EXIT);\n      }\n\n      bus.on('log:*', function (type, data) {\n        Dashboard.log(type, data);\n      });\n    });\n    process.on('SIGINT', function () {\n      this.Client.disconnectBus(function () {\n        process.exit(cst.SUCCESS_EXIT);\n      });\n    });\n\n    function refreshDashboard() {\n      that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n        if (err) {\n          console.error('Error retrieving process list: ' + err);\n          that.exitCli(cst.ERROR_EXIT);\n        }\n\n        Dashboard.refresh(list);\n        setTimeout(function () {\n          refreshDashboard();\n        }, 800);\n      });\n    }\n\n    refreshDashboard();\n  };\n\n  CLI.prototype.monit = function (cb) {\n    var that = this;\n\n    var Monit = require('./Monit.js');\n\n    if (cb) return cb(new Error('Monit cant be called programmatically'));\n    Monit.init();\n\n    function launchMonitor() {\n      that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n        if (err) {\n          console.error('Error retrieving process list: ' + err);\n          that.exitCli(conf.ERROR_EXIT);\n        }\n\n        Monit.refresh(list);\n        setTimeout(function () {\n          launchMonitor();\n        }, 400);\n      });\n    }\n\n    launchMonitor();\n  };\n\n  CLI.prototype.inspect = function (app_name, cb) {\n    const that = this;\n\n    if (semver.satisfies(process.versions.node, '>= 8.0.0')) {\n      this.trigger(app_name, 'internal:inspect', function (err, res) {\n        if (res && res[0]) {\n          if (res[0].data.return === '') {\n            Common.printOut(`Inspect disabled on ${app_name}`);\n          } else {\n            Common.printOut(`Inspect enabled on ${app_name} => go to chrome : chrome://inspect !!!`);\n          }\n        } else {\n          Common.printOut(`Unable to activate inspect mode on ${app_name} !!!`);\n        }\n\n        that.exitCli(cst.SUCCESS_EXIT);\n      });\n    } else {\n      Common.printOut('Inspect is available for node version >=8.x !');\n      that.exitCli(cst.SUCCESS_EXIT);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/API/Extra.js"],"names":["cst","require","Common","UX","chalk","path","fs","fmt","dayjs","pkg","semver","copyDirSync","module","exports","CLI","prototype","getVersion","cb","that","Client","executeRemote","err","apply","arguments","exitCli","SUCCESS_EXIT","launchSysMonitoring","set","log","env","app_id","procs","printed","list","forEach","l","pm_id","safeExtend","pm2_env","Object","keys","key","console","green","ERROR_EXIT","report","Log","title","field","Date","sep","bold","blue","pm2_version","node_version","node_path","argv","argv0","user","uid","gid","diff","started_at","version","process","versions","node","USER","LNAME","USERNAME","IS_WINDOWS","geteuid","getegid","os","arch","platform","type","cpus","model","length","freemem","totalmem","homedir","gl_interact_infos","tail","PM2_LOG_FILE_PATH","app_name","getPID","printError","PREFIX_MSG_ERR","retErr","pids","app","name","push","pid","printOut","join","profile","time","cmd","ext","action","file","cwd","format","pwd","timeout","error","basicMDHighlight","lines","split","isInner","startsWith","grey","boilerplate","i","projects","enquirer","readdir","__dirname","items","next","fp","readFile","dt","meta","JSON","parse","fullpath","folder_name","prompt","Select","message","choices","map","p","description","value","run","then","answer","parseInt","readFileSync","toString","start","speedList","catch","e","sendLineToStdin","line","separator","packet","res","attach","readline","isNaN","rl","createInterface","input","stdin","output","stdout","on","launchBus","bus","socket","write","data","sendDataToProcessId","proc_id","id","msgProcess","opts","trigger","action_name","params","msg","counter","process_wait_count","results","ret","namespace","return","process_count","sendSignalToProcessName","signal","process_name","sendSignalToProcessId","process_id","autoinstall","filepath","resolve","dirname","filename","serve","target_path","port","commander","servePort","PM2_SERVE_PORT","servePath","PM2_SERVE_PATH","PM2_SERVE_SPA","spa","basicAuthUsername","basicAuthPassword","PM2_SERVE_BASIC_AUTH","PM2_SERVE_BASIC_AUTH_USERNAME","PM2_SERVE_BASIC_AUTH_PASSWORD","monitor","PM2_SERVE_MONITOR","PREFIX_MSG","ping","Error","remote","command","err_cmd","remoteV2","args","generateSample","mode","templatePath","TEMPLATE_FOLDER","APP_CONF_TPL_SIMPLE","APP_CONF_TPL","sample","f_name","PWD","writeFileSync","stack","dashboard","Dashboard","init","disconnectBus","exit","refreshDashboard","refresh","setTimeout","monit","Monit","launchMonitor","conf","inspect","satisfies"],"mappings":"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","sourcesContent":["\n/***************************\n *\n * Extra methods\n *\n **************************/\n\nvar cst         = require('../../constants.js');\nvar Common      = require('../Common.js');\nvar UX          = require('./UX');\nvar chalk       = require('chalk');\nvar path        = require('path');\nvar fs          = require('fs');\nvar fmt         = require('../tools/fmt.js');\nvar dayjs      = require('dayjs');\nvar pkg         = require('../../package.json');\nconst semver    = require('semver');\nconst copyDirSync = require('../tools/copydirSync.js')\n\nmodule.exports = function(CLI) {\n  /**\n   * Get version of the daemonized PM2\n   * @method getVersion\n   * @callback cb\n   */\n  CLI.prototype.getVersion = function(cb) {\n    var that = this;\n\n    that.Client.executeRemote('getVersion', {}, function(err) {\n      return cb ? cb.apply(null, arguments) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n\n  /**\n   * Get version of the daemonized PM2\n   * @method getVersion\n   * @callback cb\n   */\n  CLI.prototype.launchSysMonitoring = function(cb) {\n    var that = this;\n\n    this.set('pm2:sysmonit', 'true', () => {\n      that.Client.executeRemote('launchSysMonitoring', {}, function(err) {\n        if (err)\n          Common.err(err)\n        else\n          Common.log('System Monitoring launched')\n        return cb ? cb.apply(null, arguments) : that.exitCli(cst.SUCCESS_EXIT);\n      })\n    })\n  };\n\n  /**\n   * Show application environment\n   * @method env\n   * @callback cb\n   */\n  CLI.prototype.env = function(app_id, cb) {\n    var procs = []\n    var printed = 0\n\n    this.Client.executeRemote('getMonitorData', {}, (err, list) => {\n      list.forEach(l => {\n        if (app_id == l.pm_id) {\n          printed++\n          var env = Common.safeExtend({}, l.pm2_env)\n          Object.keys(env).forEach(key => {\n            console.log(`${key}: ${chalk.green(env[key])}`)\n          })\n        }\n      })\n\n      if (printed == 0) {\n        Common.err(`Modules with id ${app_id} not found`)\n        return cb ? cb.apply(null, arguments) : this.exitCli(cst.ERROR_EXIT);\n      }\n      return cb ? cb.apply(null, arguments) : this.exitCli(cst.SUCCESS_EXIT);\n    })\n  };\n\n  /**\n   * Get version of the daemonized PM2\n   * @method getVersion\n   * @callback cb\n   */\n  CLI.prototype.report = function() {\n    var that = this;\n\n    var Log = require('./Log');\n\n    that.Client.executeRemote('getReport', {}, function(err, report) {\n      console.log()\n      console.log()\n      console.log()\n      console.log('```')\n      fmt.title('PM2 report')\n      fmt.field('Date', new Date());\n      fmt.sep();\n      fmt.title(chalk.bold.blue('Daemon'));\n      fmt.field('pm2d version', report.pm2_version);\n      fmt.field('node version', report.node_version);\n      fmt.field('node path', report.node_path);\n      fmt.field('argv', report.argv);\n      fmt.field('argv0', report.argv0);\n      fmt.field('user', report.user);\n      fmt.field('uid', report.uid);\n      fmt.field('gid', report.gid);\n      fmt.field('uptime', dayjs(new Date()).diff(report.started_at, 'minute') + 'min');\n\n      fmt.sep();\n      fmt.title(chalk.bold.blue('CLI'));\n      fmt.field('local pm2', pkg.version);\n      fmt.field('node version', process.versions.node);\n      fmt.field('node path', process.env['_'] || 'not found');\n      fmt.field('argv', process.argv);\n      fmt.field('argv0', process.argv0);\n      fmt.field('user', process.env.USER || process.env.LNAME || process.env.USERNAME);\n      if (cst.IS_WINDOWS === false && process.geteuid)\n        fmt.field('uid', process.geteuid());\n      if (cst.IS_WINDOWS === false && process.getegid)\n        fmt.field('gid', process.getegid());\n\n      var os = require('os');\n\n      fmt.sep();\n      fmt.title(chalk.bold.blue('System info'));\n      fmt.field('arch', os.arch());\n      fmt.field('platform', os.platform());\n      fmt.field('type', os.type());\n      fmt.field('cpus', os.cpus()[0].model);\n      fmt.field('cpus nb', Object.keys(os.cpus()).length);\n      fmt.field('freemem', os.freemem());\n      fmt.field('totalmem', os.totalmem());\n      fmt.field('home', os.homedir());\n\n      that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n\n        fmt.sep();\n        fmt.title(chalk.bold.blue('PM2 list'));\n        UX.list(list, that.gl_interact_infos);\n\n        fmt.sep();\n        fmt.title(chalk.bold.blue('Daemon logs'));\n        Log.tail([{\n          path     : cst.PM2_LOG_FILE_PATH,\n          app_name : 'PM2',\n          type     : 'PM2'\n        }], 20, false, function() {\n          console.log('```')\n          console.log()\n          console.log()\n\n          console.log(chalk.bold.green('Please copy/paste the above report in your issue on https://github.com/Unitech/pm2/issues'));\n\n          console.log()\n          console.log()\n          that.exitCli(cst.SUCCESS_EXIT);\n        });\n      });\n    });\n  };\n\n  CLI.prototype.getPID = function(app_name, cb) {\n    var that = this;\n\n    if (typeof(app_name) === 'function') {\n      cb = app_name;\n      app_name = null;\n    }\n\n    this.Client.executeRemote('getMonitorData', {}, function(err, list) {\n      if (err) {\n        Common.printError(cst.PREFIX_MSG_ERR + err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      var pids = [];\n\n      list.forEach(function(app) {\n        if (!app_name || app_name == app.name)\n          pids.push(app.pid);\n      })\n\n      if (!cb) {\n        Common.printOut(pids.join(\"\\n\"))\n        return that.exitCli(cst.SUCCESS_EXIT);\n      }\n      return cb(null, pids);\n    })\n  }\n\n  /**\n   * Create PM2 memory snapshot\n   * @method getVersion\n   * @callback cb\n   */\n  CLI.prototype.profile = function(type, time, cb) {\n    var that = this;\n    var dayjs = require('dayjs');\n    var cmd\n\n    if (type == 'cpu') {\n      cmd = {\n        ext: '.cpuprofile',\n        action: 'profileCPU'\n      }\n    }\n    if (type == 'mem') {\n      cmd = {\n        ext: '.heapprofile',\n        action: 'profileMEM'\n      }\n    }\n\n    var file = path.join(process.cwd(), dayjs().format('dd-HH:mm:ss') + cmd.ext);\n    time = time || 10000\n\n    console.log(`Starting ${cmd.action} profiling for ${time}ms...`)\n    that.Client.executeRemote(cmd.action, {\n      pwd : file,\n      timeout: time\n    }, function(err) {\n      if (err) {\n        console.error(err);\n        return that.exitCli(1);\n      }\n      console.log(`Profile done in ${file}`)\n      return cb ? cb.apply(null, arguments) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n\n\n  function basicMDHighlight(lines) {\n    console.log('\\n\\n+-------------------------------------+')\n    console.log(chalk.bold('README.md content:'))\n    lines = lines.split('\\n')\n    var isInner = false\n    lines.forEach(l => {\n      if (l.startsWith('#'))\n        console.log(chalk.bold.green(l))\n      else if (isInner || l.startsWith('```')) {\n        if (isInner && l.startsWith('```'))\n          isInner = false\n        else if (isInner == false)\n          isInner = true\n        console.log(chalk.grey(l))\n      }\n      else if (l.startsWith('`'))\n        console.log(chalk.grey(l))\n      else\n        console.log(l)\n    })\n    console.log('+-------------------------------------+')\n  }\n  /**\n   * pm2 create command\n   * create boilerplate of application for fast try\n   * @method boilerplate\n   */\n  CLI.prototype.boilerplate = function(cb) {\n    var i = 0\n    var projects = []\n    var enquirer = require('enquirer')\n\n    fs.readdir(path.join(__dirname, '../templates/sample-apps'), (err, items) => {\n      require('async').forEach(items, (app, next) => {\n        var fp = path.join(__dirname, '../templates/sample-apps', app)\n        fs.readFile(path.join(fp, 'package.json'), (err, dt) => {\n          var meta = JSON.parse(dt)\n          meta.fullpath = fp\n          meta.folder_name = app\n          projects.push(meta)\n          next()\n        })\n      }, () => {\n        const prompt = new enquirer.Select({\n          name: 'boilerplate',\n          message: 'Select a boilerplate',\n          choices: projects.map((p, i) => {\n            return {\n              message: `${chalk.bold.blue(p.name)} ${p.description}`,\n              value: `${i}`\n            }\n          })\n        });\n\n        prompt.run()\n          .then(answer => {\n            var p = projects[parseInt(answer)]\n            basicMDHighlight(fs.readFileSync(path.join(p.fullpath, 'README.md')).toString())\n            console.log(chalk.bold(`>> Project copied inside folder ./${p.folder_name}/\\n`))\n            copyDirSync(p.fullpath, path.join(process.cwd(), p.folder_name));\n            this.start(path.join(p.fullpath, 'ecosystem.config.js'), {\n              cwd: p.fullpath\n            }, () => {\n              return cb ? cb.apply(null, arguments) : this.speedList(cst.SUCCESS_EXIT);\n            })\n          })\n          .catch(e => {\n            return cb ? cb.apply(null, arguments) : this.speedList(cst.SUCCESS_EXIT);\n          });\n\n      })\n    })\n  }\n\n  /**\n   * Description\n   * @method sendLineToStdin\n   */\n  CLI.prototype.sendLineToStdin = function(pm_id, line, separator, cb) {\n    var that = this;\n\n    if (!cb && typeof(separator) == 'function') {\n      cb = separator;\n      separator = null;\n    }\n\n    var packet = {\n      pm_id : pm_id,\n      line : line + (separator || '\\n')\n    };\n\n    that.Client.executeRemote('sendLineToStdin', packet, function(err, res) {\n      if (err) {\n        Common.printError(cst.PREFIX_MSG_ERR + err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n      return cb ? cb(null, res) : that.speedList();\n    });\n  };\n\n  /**\n   * Description\n   * @method attachToProcess\n   */\n  CLI.prototype.attach = function(pm_id, separator, cb) {\n    var that = this;\n    var readline = require('readline');\n\n    if (isNaN(pm_id)) {\n      Common.printError('pm_id must be a process number (not a process name)');\n      return cb ? cb(Common.retErr('pm_id must be number')) : that.exitCli(cst.ERROR_EXIT);\n    }\n\n    if (typeof(separator) == 'function') {\n      cb = separator;\n      separator = null;\n    }\n\n    var rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n\n    rl.on('close', function() {\n      return cb ? cb() : that.exitCli(cst.SUCCESS_EXIT);\n    });\n\n    that.Client.launchBus(function(err, bus, socket) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      bus.on('log:*', function(type, packet) {\n        if (packet.process.pm_id !== parseInt(pm_id))\n          return;\n        process.stdout.write(packet.data);\n      });\n    });\n\n    rl.on('line', function(line) {\n      that.sendLineToStdin(pm_id, line, separator, function() {});\n    });\n  };\n\n  /**\n   * Description\n   * @method sendDataToProcessId\n   */\n  CLI.prototype.sendDataToProcessId = function(proc_id, packet, cb) {\n    var that = this;\n\n    if (typeof proc_id === 'object' && typeof packet === 'function') {\n      // the proc_id is packet.\n      cb = packet;\n      packet = proc_id;\n    } else {\n      packet.id = proc_id;\n    }\n\n    that.Client.executeRemote('sendDataToProcessId', packet, function(err, res) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n      Common.printOut('successfully sent data to process');\n      return cb ? cb(null, res) : that.speedList();\n    });\n  };\n\n  /**\n   * Used for custom actions, allows to trigger function inside an app\n   * To expose a function you need to use keymetrics/pmx\n   *\n   * @method msgProcess\n   * @param {Object} opts\n   * @param {String} id           process id\n   * @param {String} action_name  function name to trigger\n   * @param {Object} [opts.opts]  object passed as first arg of the function\n   * @param {String} [uuid]       optional unique identifier when logs are emitted\n   *\n   */\n  CLI.prototype.msgProcess = function(opts, cb) {\n    var that = this;\n\n    that.Client.executeRemote('msgProcess', opts, cb);\n  };\n\n  /**\n   * Trigger a PMX custom action in target application\n   * Custom actions allows to interact with an application\n   *\n   * @method trigger\n   * @param  {String|Number} pm_id       process id or application name\n   * @param  {String}        action_name name of the custom action to trigger\n   * @param  {Mixed}         params      parameter to pass to target action\n   * @param  {Function}      cb          callback\n   */\n  CLI.prototype.trigger = function(pm_id, action_name, params, cb) {\n    if (typeof(params) === 'function') {\n      cb = params;\n      params = null;\n    }\n    var cmd = {\n      msg : action_name\n    };\n    var counter = 0;\n    var process_wait_count = 0;\n    var that = this;\n    var results = [];\n\n    if (params)\n      cmd.opts = params;\n    if (isNaN(pm_id))\n      cmd.name = pm_id;\n    else\n      cmd.id = pm_id;\n\n    this.launchBus(function(err, bus) {\n      bus.on('axm:reply', function(ret) {\n        if (ret.process.name == pm_id || ret.process.pm_id == pm_id || ret.process.namespace == pm_id || pm_id == 'all') {\n          results.push(ret);\n          Common.printOut('[%s:%s:%s]=%j', ret.process.name, ret.process.pm_id, ret.process.namespace, ret.data.return);\n          if (++counter == process_wait_count)\n            return cb ? cb(null, results) : that.exitCli(cst.SUCCESS_EXIT);\n        }\n      });\n\n      that.msgProcess(cmd, function(err, data) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n        }\n\n        if (data.process_count == 0) {\n          Common.printError('Not any process has received a command (offline or unexistent)');\n          return cb ? cb(Common.retErr('Unknown process')) : that.exitCli(cst.ERROR_EXIT);\n        }\n\n        process_wait_count = data.process_count;\n        Common.printOut(chalk.bold('%s processes have received command %s'),\n                        data.process_count, action_name);\n      });\n    });\n  };\n\n  /**\n   * Description\n   * @method sendSignalToProcessName\n   * @param {} signal\n   * @param {} process_name\n   * @return\n   */\n  CLI.prototype.sendSignalToProcessName = function(signal, process_name, cb) {\n    var that = this;\n\n    that.Client.executeRemote('sendSignalToProcessName', {\n      signal : signal,\n      process_name : process_name\n    }, function(err, list) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n      Common.printOut('successfully sent signal %s to process name %s', signal, process_name);\n      return cb ? cb(null, list) : that.speedList();\n    });\n  };\n\n  /**\n   * Description\n   * @method sendSignalToProcessId\n   * @param {} signal\n   * @param {} process_id\n   * @return\n   */\n  CLI.prototype.sendSignalToProcessId = function(signal, process_id, cb) {\n    var that = this;\n\n    that.Client.executeRemote('sendSignalToProcessId', {\n      signal : signal,\n      process_id : process_id\n    }, function(err, list) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n      Common.printOut('successfully sent signal %s to process id %s', signal, process_id);\n      return cb ? cb(null, list) : that.speedList();\n    });\n  };\n\n  /**\n   * API method to launch a process that will serve directory over http\n   */\n  CLI.prototype.autoinstall = function (cb) {\n    var filepath = path.resolve(path.dirname(module.filename), '../Sysinfo/ServiceDetection/ServiceDetection.js');\n\n    this.start(filepath, (err, res) => {\n      if (err) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'Error while trying to serve : ' + err.message || err);\n        return cb ? cb(err) : this.speedList(cst.ERROR_EXIT);\n      }\n      return cb ? cb(null) : this.speedList();\n    });\n  }\n\n  /**\n   * API method to launch a process that will serve directory over http\n   *\n   * @param {Object} opts options\n   * @param {String} opts.path path to be served\n   * @param {Number} opts.port port on which http will bind\n   * @param {Boolean} opts.spa single page app served\n   * @param {String} opts.basicAuthUsername basic auth username\n   * @param {String} opts.basicAuthPassword basic auth password\n   * @param {Object} commander commander object\n   * @param {Function} cb optional callback\n   */\n  CLI.prototype.serve = function (target_path, port, opts, commander, cb) {\n    var that = this;\n    var servePort = process.env.PM2_SERVE_PORT || port || 8080;\n    var servePath = path.resolve(process.env.PM2_SERVE_PATH || target_path || '.');\n\n    var filepath = path.resolve(path.dirname(module.filename), './Serve.js');\n\n    if (typeof commander.name === 'string')\n      opts.name = commander.name\n    else\n      opts.name = 'static-page-server-' + servePort\n    if (!opts.env)\n      opts.env = {};\n    opts.env.PM2_SERVE_PORT = servePort;\n    opts.env.PM2_SERVE_PATH = servePath;\n    opts.env.PM2_SERVE_SPA = opts.spa;\n    if (opts.basicAuthUsername && opts.basicAuthPassword) {\n      opts.env.PM2_SERVE_BASIC_AUTH = 'true';\n      opts.env.PM2_SERVE_BASIC_AUTH_USERNAME = opts.basicAuthUsername;\n      opts.env.PM2_SERVE_BASIC_AUTH_PASSWORD = opts.basicAuthPassword;\n    }\n    if (opts.monitor) {\n      opts.env.PM2_SERVE_MONITOR = opts.monitor\n    }\n    opts.cwd = servePath;\n\n    this.start(filepath, opts,  function (err, res) {\n      if (err) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'Error while trying to serve : ' + err.message || err);\n        return cb ? cb(err) : that.speedList(cst.ERROR_EXIT);\n      }\n      Common.printOut(cst.PREFIX_MSG + 'Serving ' + servePath + ' on port ' + servePort);\n      return cb ? cb(null, res) : that.speedList();\n    });\n  }\n\n  /**\n   * Ping daemon - if PM2 daemon not launched, it will launch it\n   * @method ping\n   */\n  CLI.prototype.ping = function(cb) {\n    var that = this;\n\n    that.Client.executeRemote('ping', {}, function(err, res) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(new Error(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n      Common.printOut(res);\n      return cb ? cb(null, res) : that.exitCli(cst.SUCCESS_EXIT);\n    });\n  };\n\n\n  /**\n   * Execute remote command\n   */\n  CLI.prototype.remote = function(command, opts, cb) {\n    var that = this;\n\n    that[command](opts.name, function(err_cmd, ret) {\n      if (err_cmd)\n        console.error(err_cmd);\n      console.log('Command %s finished', command);\n      return cb(err_cmd, ret);\n    });\n  };\n\n  /**\n   * This remote method allows to pass multiple arguments\n   * to PM2\n   * It is used for the new scoped PM2 action system\n   */\n  CLI.prototype.remoteV2 = function(command, opts, cb) {\n    var that = this;\n\n    if (that[command].length == 1)\n      return that[command](cb);\n\n    opts.args.push(cb);\n    return that[command].apply(this, opts.args);\n  };\n\n\n  /**\n   * Description\n   * @method generateSample\n   * @param {} name\n   * @return\n   */\n  CLI.prototype.generateSample = function(mode) {\n    var that = this;\n    var templatePath;\n\n    if (mode == 'simple')\n      templatePath = path.join(cst.TEMPLATE_FOLDER, cst.APP_CONF_TPL_SIMPLE);\n    else\n      templatePath = path.join(cst.TEMPLATE_FOLDER, cst.APP_CONF_TPL);\n\n    var sample = fs.readFileSync(templatePath);\n    var dt     = sample.toString();\n    var f_name = 'ecosystem.config.js';\n\t\tvar pwd = process.env.PWD || process.cwd();\n\n    try {\n      fs.writeFileSync(path.join(pwd, f_name), dt);\n    } catch (e) {\n      console.error(e.stack || e);\n      return that.exitCli(cst.ERROR_EXIT);\n    }\n    Common.printOut('File %s generated', path.join(pwd, f_name));\n    that.exitCli(cst.SUCCESS_EXIT);\n  };\n\n  /**\n   * Description\n   * @method dashboard\n   * @return\n   */\n  CLI.prototype.dashboard = function(cb) {\n    var that = this;\n\n    var Dashboard = require('./Dashboard');\n\n    if (cb)\n      return cb(new Error('Dashboard cant be called programmatically'));\n\n    Dashboard.init();\n\n    this.Client.launchBus(function (err, bus) {\n      if (err) {\n        console.error('Error launchBus: ' + err);\n        that.exitCli(cst.ERROR_EXIT);\n      }\n      bus.on('log:*', function(type, data) {\n        Dashboard.log(type, data)\n      })\n    });\n\n    process.on('SIGINT', function() {\n      this.Client.disconnectBus(function() {\n        process.exit(cst.SUCCESS_EXIT);\n      });\n    });\n\n    function refreshDashboard() {\n      that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n        if (err) {\n          console.error('Error retrieving process list: ' + err);\n          that.exitCli(cst.ERROR_EXIT);\n        }\n\n        Dashboard.refresh(list);\n\n        setTimeout(function() {\n          refreshDashboard();\n        }, 800);\n      });\n    }\n\n    refreshDashboard();\n  };\n\n  CLI.prototype.monit = function(cb) {\n    var that = this;\n\n    var Monit = require('./Monit.js');\n\n    if (cb) return cb(new Error('Monit cant be called programmatically'));\n\n    Monit.init();\n\n    function launchMonitor() {\n      that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n        if (err) {\n          console.error('Error retrieving process list: ' + err);\n          that.exitCli(conf.ERROR_EXIT);\n        }\n\n        Monit.refresh(list);\n\n        setTimeout(function() {\n          launchMonitor();\n        }, 400);\n      });\n    }\n\n    launchMonitor();\n  };\n\n  CLI.prototype.inspect = function(app_name, cb) {\n    const that = this;\n    if(semver.satisfies(process.versions.node, '>= 8.0.0')) {\n      this.trigger(app_name, 'internal:inspect', function (err, res) {\n\n        if(res && res[0]) {\n          if (res[0].data.return === '') {\n            Common.printOut(`Inspect disabled on ${app_name}`);\n          } else {\n            Common.printOut(`Inspect enabled on ${app_name} => go to chrome : chrome://inspect !!!`);\n          }\n        } else {\n          Common.printOut(`Unable to activate inspect mode on ${app_name} !!!`);\n        }\n\n        that.exitCli(cst.SUCCESS_EXIT);\n      });\n    } else {\n      Common.printOut('Inspect is available for node version >=8.x !');\n      that.exitCli(cst.SUCCESS_EXIT);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}