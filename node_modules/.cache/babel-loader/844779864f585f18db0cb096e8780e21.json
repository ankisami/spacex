{"ast":null,"code":"'use strict'; // From https://raw.githubusercontent.com/pkrumins/node-tree-kill/master/index.js\n\nvar childProcess = require('child_process');\n\nvar spawn = childProcess.spawn;\nvar exec = childProcess.exec;\n\nmodule.exports = function (pid, signal, callback) {\n  var tree = {};\n  var pidsToProcess = {};\n  tree[pid] = [];\n  pidsToProcess[pid] = 1;\n\n  switch (process.platform) {\n    case 'win32':\n      exec('taskkill /pid ' + pid + ' /T /F', {\n        windowsHide: true\n      }, callback);\n      break;\n\n    case 'darwin':\n      buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n        return spawn('pgrep', ['-P', parentPid]);\n      }, function () {\n        killAll(tree, signal, callback);\n      });\n      break;\n    // case 'sunos':\n    //     buildProcessTreeSunOS(pid, tree, pidsToProcess, function () {\n    //         killAll(tree, signal, callback);\n    //     });\n    //     break;\n\n    default:\n      // Linux\n      buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n        return spawn('ps', ['-o', 'pid', '--no-headers', '--ppid', parentPid]);\n      }, function () {\n        killAll(tree, signal, callback);\n      });\n      break;\n  }\n};\n\nfunction killAll(tree, signal, callback) {\n  var killed = {};\n\n  try {\n    Object.keys(tree).forEach(function (pid) {\n      tree[pid].forEach(function (pidpid) {\n        if (!killed[pidpid]) {\n          killPid(pidpid, signal);\n          killed[pidpid] = 1;\n        }\n      });\n\n      if (!killed[pid]) {\n        killPid(pid, signal);\n        killed[pid] = 1;\n      }\n    });\n  } catch (err) {\n    if (callback) {\n      return callback(err);\n    } else {\n      console.error(err);\n    }\n  }\n\n  if (callback) {\n    return callback();\n  }\n}\n\nfunction killPid(pid, signal) {\n  try {\n    process.kill(parseInt(pid, 10), signal);\n  } catch (err) {\n    if (err.code !== 'ESRCH') console.error(err);\n  }\n}\n\nfunction buildProcessTree(parentPid, tree, pidsToProcess, spawnChildProcessesList, cb) {\n  var ps = spawnChildProcessesList(parentPid);\n  var allData = '';\n  ps.on('error', function (err) {\n    console.error(err);\n  });\n\n  if (ps.stdout) {\n    ps.stdout.on('data', function (data) {\n      data = data.toString('ascii');\n      allData += data;\n    });\n  }\n\n  var onClose = function (code) {\n    delete pidsToProcess[parentPid];\n\n    if (code !== 0) {\n      // no more parent processes\n      if (Object.keys(pidsToProcess).length == 0) {\n        cb();\n      }\n\n      return;\n    }\n\n    var pids = allData.match(/\\d+/g) || [];\n    if (pids.length === 0) return cb();\n    pids.forEach(function (pid) {\n      pid = parseInt(pid, 10);\n      tree[parentPid].push(pid);\n      tree[pid] = [];\n      pidsToProcess[pid] = 1;\n      buildProcessTree(pid, tree, pidsToProcess, spawnChildProcessesList, cb);\n    });\n  };\n\n  ps.on('close', onClose);\n}","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/TreeKill.js"],"names":["childProcess","require","spawn","exec","module","exports","pid","signal","callback","tree","pidsToProcess","process","platform","windowsHide","buildProcessTree","parentPid","killAll","killed","Object","keys","forEach","pidpid","killPid","err","console","error","kill","parseInt","code","spawnChildProcessesList","cb","ps","allData","on","stdout","data","toString","onClose","length","pids","match","push"],"mappings":"AAAA,a,CAEA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,KAAK,GAAGF,YAAY,CAACE,KAAzB;AACA,IAAIC,IAAI,GAAGH,YAAY,CAACG,IAAxB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAeC,MAAf,EAAuBC,QAAvB,EAAiC;AAChD,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,aAAa,GAAG,EAApB;AACAD,EAAAA,IAAI,CAACH,GAAD,CAAJ,GAAY,EAAZ;AACAI,EAAAA,aAAa,CAACJ,GAAD,CAAb,GAAqB,CAArB;;AAEA,UAAQK,OAAO,CAACC,QAAhB;AACA,SAAK,OAAL;AACET,MAAAA,IAAI,CAAC,mBAAmBG,GAAnB,GAAyB,QAA1B,EAAoC;AAAEO,QAAAA,WAAW,EAAE;AAAf,OAApC,EAA2DL,QAA3D,CAAJ;AACA;;AACF,SAAK,QAAL;AACEM,MAAAA,gBAAgB,CAACR,GAAD,EAAMG,IAAN,EAAYC,aAAZ,EAA2B,UAAUK,SAAV,EAAqB;AAC9D,eAAOb,KAAK,CAAC,OAAD,EAAU,CAAC,IAAD,EAAOa,SAAP,CAAV,CAAZ;AACD,OAFe,EAEb,YAAY;AACbC,QAAAA,OAAO,CAACP,IAAD,EAAOF,MAAP,EAAeC,QAAf,CAAP;AACD,OAJe,CAAhB;AAKA;AACA;AACA;AACA;AACA;AACA;;AACF;AAAS;AACPM,MAAAA,gBAAgB,CAACR,GAAD,EAAMG,IAAN,EAAYC,aAAZ,EAA2B,UAAUK,SAAV,EAAqB;AAC9D,eAAOb,KAAK,CAAC,IAAD,EAAO,CAAC,IAAD,EAAO,KAAP,EAAc,cAAd,EAA8B,QAA9B,EAAwCa,SAAxC,CAAP,CAAZ;AACD,OAFe,EAEb,YAAY;AACbC,QAAAA,OAAO,CAACP,IAAD,EAAOF,MAAP,EAAeC,QAAf,CAAP;AACD,OAJe,CAAhB;AAKA;AAtBF;AAwBD,CA9BD;;AAgCA,SAASQ,OAAT,CAAkBP,IAAlB,EAAwBF,MAAxB,EAAgCC,QAAhC,EAA0C;AACxC,MAAIS,MAAM,GAAG,EAAb;;AACA,MAAI;AACFC,IAAAA,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBW,OAAlB,CAA0B,UAAUd,GAAV,EAAe;AACvCG,MAAAA,IAAI,CAACH,GAAD,CAAJ,CAAUc,OAAV,CAAkB,UAAUC,MAAV,EAAkB;AAClC,YAAI,CAACJ,MAAM,CAACI,MAAD,CAAX,EAAqB;AACnBC,UAAAA,OAAO,CAACD,MAAD,EAASd,MAAT,CAAP;AACAU,UAAAA,MAAM,CAACI,MAAD,CAAN,GAAiB,CAAjB;AACD;AACF,OALD;;AAMA,UAAI,CAACJ,MAAM,CAACX,GAAD,CAAX,EAAkB;AAChBgB,QAAAA,OAAO,CAAChB,GAAD,EAAMC,MAAN,CAAP;AACAU,QAAAA,MAAM,CAACX,GAAD,CAAN,GAAc,CAAd;AACD;AACF,KAXD;AAYD,GAbD,CAaE,OAAOiB,GAAP,EAAY;AACZ,QAAIf,QAAJ,EAAc;AACZ,aAAOA,QAAQ,CAACe,GAAD,CAAf;AACD,KAFD,MAEO;AACLC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF;;AACD,MAAIf,QAAJ,EAAc;AACZ,WAAOA,QAAQ,EAAf;AACD;AACF;;AAED,SAASc,OAAT,CAAiBhB,GAAjB,EAAsBC,MAAtB,EAA8B;AAC5B,MAAI;AACFI,IAAAA,OAAO,CAACe,IAAR,CAAaC,QAAQ,CAACrB,GAAD,EAAM,EAAN,CAArB,EAAgCC,MAAhC;AACD,GAFD,CAGA,OAAOgB,GAAP,EAAY;AACV,QAAIA,GAAG,CAACK,IAAJ,KAAa,OAAjB,EACEJ,OAAO,CAACC,KAAR,CAAcF,GAAd;AACH;AACF;;AAED,SAAST,gBAAT,CAA2BC,SAA3B,EAAsCN,IAAtC,EAA4CC,aAA5C,EAA2DmB,uBAA3D,EAAoFC,EAApF,EAAwF;AACtF,MAAIC,EAAE,GAAGF,uBAAuB,CAACd,SAAD,CAAhC;AACA,MAAIiB,OAAO,GAAG,EAAd;AAEAD,EAAAA,EAAE,CAACE,EAAH,CAAM,OAAN,EAAe,UAASV,GAAT,EAAc;AAC3BC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,GAFD;;AAIA,MAAIQ,EAAE,CAACG,MAAP,EAAe;AACbH,IAAAA,EAAE,CAACG,MAAH,CAAUD,EAAV,CAAa,MAAb,EAAqB,UAAUE,IAAV,EAAgB;AACnCA,MAAAA,IAAI,GAAGA,IAAI,CAACC,QAAL,CAAc,OAAd,CAAP;AACAJ,MAAAA,OAAO,IAAIG,IAAX;AACD,KAHD;AAID;;AAED,MAAIE,OAAO,GAAG,UAAUT,IAAV,EAAgB;AAC5B,WAAOlB,aAAa,CAACK,SAAD,CAApB;;AAEA,QAAIa,IAAI,KAAK,CAAb,EAAgB;AACd;AACA,UAAIV,MAAM,CAACC,IAAP,CAAYT,aAAZ,EAA2B4B,MAA3B,IAAqC,CAAzC,EAA4C;AAC1CR,QAAAA,EAAE;AACH;;AACD;AACD;;AACD,QAAIS,IAAI,GAAGP,OAAO,CAACQ,KAAR,CAAc,MAAd,KAAyB,EAApC;AACA,QAAID,IAAI,CAACD,MAAL,KAAgB,CAApB,EACE,OAAOR,EAAE,EAAT;AAEFS,IAAAA,IAAI,CAACnB,OAAL,CAAa,UAAUd,GAAV,EAAe;AAC1BA,MAAAA,GAAG,GAAGqB,QAAQ,CAACrB,GAAD,EAAM,EAAN,CAAd;AACAG,MAAAA,IAAI,CAACM,SAAD,CAAJ,CAAgB0B,IAAhB,CAAqBnC,GAArB;AACAG,MAAAA,IAAI,CAACH,GAAD,CAAJ,GAAY,EAAZ;AACAI,MAAAA,aAAa,CAACJ,GAAD,CAAb,GAAqB,CAArB;AACAQ,MAAAA,gBAAgB,CAACR,GAAD,EAAMG,IAAN,EAAYC,aAAZ,EAA2BmB,uBAA3B,EAAoDC,EAApD,CAAhB;AACD,KAND;AAOD,GArBD;;AAuBAC,EAAAA,EAAE,CAACE,EAAH,CAAM,OAAN,EAAeI,OAAf;AACD","sourcesContent":["'use strict';\n\n// From https://raw.githubusercontent.com/pkrumins/node-tree-kill/master/index.js\n\nvar childProcess = require('child_process');\nvar spawn = childProcess.spawn;\nvar exec = childProcess.exec;\n\nmodule.exports = function (pid, signal, callback) {\n  var tree = {};\n  var pidsToProcess = {};\n  tree[pid] = [];\n  pidsToProcess[pid] = 1;\n\n  switch (process.platform) {\n  case 'win32':\n    exec('taskkill /pid ' + pid + ' /T /F', { windowsHide: true }, callback);\n    break;\n  case 'darwin':\n    buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n      return spawn('pgrep', ['-P', parentPid]);\n    }, function () {\n      killAll(tree, signal, callback);\n    });\n    break;\n    // case 'sunos':\n    //     buildProcessTreeSunOS(pid, tree, pidsToProcess, function () {\n    //         killAll(tree, signal, callback);\n    //     });\n    //     break;\n  default: // Linux\n    buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n      return spawn('ps', ['-o', 'pid', '--no-headers', '--ppid', parentPid]);\n    }, function () {\n      killAll(tree, signal, callback);\n    });\n    break;\n  }\n};\n\nfunction killAll (tree, signal, callback) {\n  var killed = {};\n  try {\n    Object.keys(tree).forEach(function (pid) {\n      tree[pid].forEach(function (pidpid) {\n        if (!killed[pidpid]) {\n          killPid(pidpid, signal);\n          killed[pidpid] = 1;\n        }\n      });\n      if (!killed[pid]) {\n        killPid(pid, signal);\n        killed[pid] = 1;\n      }\n    });\n  } catch (err) {\n    if (callback) {\n      return callback(err);\n    } else {\n      console.error(err);\n    }\n  }\n  if (callback) {\n    return callback();\n  }\n}\n\nfunction killPid(pid, signal) {\n  try {\n    process.kill(parseInt(pid, 10), signal);\n  }\n  catch (err) {\n    if (err.code !== 'ESRCH')\n      console.error(err);\n  }\n}\n\nfunction buildProcessTree (parentPid, tree, pidsToProcess, spawnChildProcessesList, cb) {\n  var ps = spawnChildProcessesList(parentPid);\n  var allData = '';\n\n  ps.on('error', function(err) {\n    console.error(err);\n  });\n\n  if (ps.stdout) {\n    ps.stdout.on('data', function (data) {\n      data = data.toString('ascii');\n      allData += data;\n    });\n  }\n\n  var onClose = function (code) {\n    delete pidsToProcess[parentPid];\n\n    if (code !== 0) {\n      // no more parent processes\n      if (Object.keys(pidsToProcess).length == 0) {\n        cb();\n      }\n      return;\n    }\n    var pids = allData.match(/\\d+/g) || [];\n    if (pids.length === 0)\n      return cb();\n\n    pids.forEach(function (pid) {\n      pid = parseInt(pid, 10);\n      tree[parentPid].push(pid);\n      tree[pid] = [];\n      pidsToProcess[pid] = 1;\n      buildProcessTree(pid, tree, pidsToProcess, spawnChildProcessesList, cb);\n    });\n  };\n\n  ps.on('close', onClose);\n}\n"]},"metadata":{},"sourceType":"script"}