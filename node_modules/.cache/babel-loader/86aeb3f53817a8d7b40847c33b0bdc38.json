{"ast":null,"code":"/**\n * colors.js - color-related functions for blessed.\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\nexports.match = function (r1, g1, b1) {\n  if (typeof r1 === 'string') {\n    var hex = r1;\n\n    if (hex[0] !== '#') {\n      return -1;\n    }\n\n    hex = exports.hexToRGB(hex);\n    r1 = hex[0], g1 = hex[1], b1 = hex[2];\n  } else if (Array.isArray(r1)) {\n    b1 = r1[2], g1 = r1[1], r1 = r1[0];\n  }\n\n  var hash = r1 << 16 | g1 << 8 | b1;\n\n  if (exports._cache[hash] != null) {\n    return exports._cache[hash];\n  }\n\n  var ldiff = Infinity,\n      li = -1,\n      i = 0,\n      c,\n      r2,\n      g2,\n      b2,\n      diff;\n\n  for (; i < exports.vcolors.length; i++) {\n    c = exports.vcolors[i];\n    r2 = c[0];\n    g2 = c[1];\n    b2 = c[2];\n    diff = colorDistance(r1, g1, b1, r2, g2, b2);\n\n    if (diff === 0) {\n      li = i;\n      break;\n    }\n\n    if (diff < ldiff) {\n      ldiff = diff;\n      li = i;\n    }\n  }\n\n  return exports._cache[hash] = li;\n};\n\nexports.RGBToHex = function (r, g, b) {\n  if (Array.isArray(r)) {\n    b = r[2], g = r[1], r = r[0];\n  }\n\n  function hex(n) {\n    n = n.toString(16);\n    if (n.length < 2) n = '0' + n;\n    return n;\n  }\n\n  return '#' + hex(r) + hex(g) + hex(b);\n};\n\nexports.hexToRGB = function (hex) {\n  if (hex.length === 4) {\n    hex = hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];\n  }\n\n  var col = parseInt(hex.substring(1), 16),\n      r = col >> 16 & 0xff,\n      g = col >> 8 & 0xff,\n      b = col & 0xff;\n  return [r, g, b];\n}; // As it happens, comparing how similar two colors are is really hard. Here is\n// one of the simplest solutions, which doesn't require conversion to another\n// color space, posted on stackoverflow[1]. Maybe someone better at math can\n// propose a superior solution.\n// [1] http://stackoverflow.com/questions/1633828\n\n\nfunction colorDistance(r1, g1, b1, r2, g2, b2) {\n  return Math.pow(30 * (r1 - r2), 2) + Math.pow(59 * (g1 - g2), 2) + Math.pow(11 * (b1 - b2), 2);\n} // This might work well enough for a terminal's colors: treat RGB as XYZ in a\n// 3-dimensional space and go midway between the two points.\n\n\nexports.mixColors = function (c1, c2, alpha) {\n  // if (c1 === 0x1ff) return c1;\n  // if (c2 === 0x1ff) return c1;\n  if (c1 === 0x1ff) c1 = 0;\n  if (c2 === 0x1ff) c2 = 0;\n  if (alpha == null) alpha = 0.5;\n  c1 = exports.vcolors[c1];\n  var r1 = c1[0];\n  var g1 = c1[1];\n  var b1 = c1[2];\n  c2 = exports.vcolors[c2];\n  var r2 = c2[0];\n  var g2 = c2[1];\n  var b2 = c2[2];\n  r1 += (r2 - r1) * alpha | 0;\n  g1 += (g2 - g1) * alpha | 0;\n  b1 += (b2 - b1) * alpha | 0;\n  return exports.match([r1, g1, b1]);\n};\n\nexports.blend = function blend(attr, attr2, alpha) {\n  var name, i, c, nc;\n  var bg = attr & 0x1ff;\n\n  if (attr2 != null) {\n    var bg2 = attr2 & 0x1ff;\n    if (bg === 0x1ff) bg = 0;\n    if (bg2 === 0x1ff) bg2 = 0;\n    bg = exports.mixColors(bg, bg2, alpha);\n  } else {\n    if (blend._cache[bg] != null) {\n      bg = blend._cache[bg]; // } else if (bg < 8) {\n      //   bg += 8;\n    } else if (bg >= 8 && bg <= 15) {\n      bg -= 8;\n    } else {\n      name = exports.ncolors[bg];\n\n      if (name) {\n        for (i = 0; i < exports.ncolors.length; i++) {\n          if (name === exports.ncolors[i] && i !== bg) {\n            c = exports.vcolors[bg];\n            nc = exports.vcolors[i];\n\n            if (nc[0] + nc[1] + nc[2] < c[0] + c[1] + c[2]) {\n              blend._cache[bg] = i;\n              bg = i;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  attr &= ~0x1ff;\n  attr |= bg;\n  var fg = attr >> 9 & 0x1ff;\n\n  if (attr2 != null) {\n    var fg2 = attr2 >> 9 & 0x1ff; // 0, 7, 188, 231, 251\n\n    if (fg === 0x1ff) {\n      // XXX workaround\n      fg = 248;\n    } else {\n      if (fg === 0x1ff) fg = 7;\n      if (fg2 === 0x1ff) fg2 = 7;\n      fg = exports.mixColors(fg, fg2, alpha);\n    }\n  } else {\n    if (blend._cache[fg] != null) {\n      fg = blend._cache[fg]; // } else if (fg < 8) {\n      //   fg += 8;\n    } else if (fg >= 8 && fg <= 15) {\n      fg -= 8;\n    } else {\n      name = exports.ncolors[fg];\n\n      if (name) {\n        for (i = 0; i < exports.ncolors.length; i++) {\n          if (name === exports.ncolors[i] && i !== fg) {\n            c = exports.vcolors[fg];\n            nc = exports.vcolors[i];\n\n            if (nc[0] + nc[1] + nc[2] < c[0] + c[1] + c[2]) {\n              blend._cache[fg] = i;\n              fg = i;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  attr &= ~(0x1ff << 9);\n  attr |= fg << 9;\n  return attr;\n};\n\nexports.blend._cache = {};\nexports._cache = {};\n\nexports.reduce = function (color, total) {\n  if (color >= 16 && total <= 16) {\n    color = exports.ccolors[color];\n  } else if (color >= 8 && total <= 8) {\n    color -= 8;\n  } else if (color >= 2 && total <= 2) {\n    color %= 2;\n  }\n\n  return color;\n}; // XTerm Colors\n// These were actually tough to track down. The xterm source only uses color\n// keywords. The X11 source needed to be examined to find the actual values.\n// They then had to be mapped to rgb values and then converted to hex values.\n\n\nexports.xterm = ['#000000', // black\n'#cd0000', // red3\n'#00cd00', // green3\n'#cdcd00', // yellow3\n'#0000ee', // blue2\n'#cd00cd', // magenta3\n'#00cdcd', // cyan3\n'#e5e5e5', // gray90\n'#7f7f7f', // gray50\n'#ff0000', // red\n'#00ff00', // green\n'#ffff00', // yellow\n'#5c5cff', // rgb:5c/5c/ff\n'#ff00ff', // magenta\n'#00ffff', // cyan\n'#ffffff' // white\n]; // Seed all 256 colors. Assume xterm defaults.\n// Ported from the xterm color generation script.\n\nexports.colors = function () {\n  var cols = exports.colors = [],\n      _cols = exports.vcolors = [],\n      r,\n      g,\n      b,\n      i,\n      l;\n\n  function hex(n) {\n    n = n.toString(16);\n    if (n.length < 2) n = '0' + n;\n    return n;\n  }\n\n  function push(i, r, g, b) {\n    cols[i] = '#' + hex(r) + hex(g) + hex(b);\n    _cols[i] = [r, g, b];\n  } // 0 - 15\n\n\n  exports.xterm.forEach(function (c, i) {\n    c = parseInt(c.substring(1), 16);\n    push(i, c >> 16 & 0xff, c >> 8 & 0xff, c & 0xff);\n  }); // 16 - 231\n\n  for (r = 0; r < 6; r++) {\n    for (g = 0; g < 6; g++) {\n      for (b = 0; b < 6; b++) {\n        i = 16 + r * 36 + g * 6 + b;\n        push(i, r ? r * 40 + 55 : 0, g ? g * 40 + 55 : 0, b ? b * 40 + 55 : 0);\n      }\n    }\n  } // 232 - 255 are grey.\n\n\n  for (g = 0; g < 24; g++) {\n    l = g * 10 + 8;\n    i = 232 + g;\n    push(i, l, l, l);\n  }\n\n  return cols;\n}(); // Map higher colors to the first 8 colors.\n// This allows translation of high colors to low colors on 8-color terminals.\n\n\nexports.ccolors = function () {\n  var _cols = exports.vcolors.slice(),\n      cols = exports.colors.slice(),\n      out;\n\n  exports.vcolors = exports.vcolors.slice(0, 8);\n  exports.colors = exports.colors.slice(0, 8);\n  out = cols.map(exports.match);\n  exports.colors = cols;\n  exports.vcolors = _cols;\n  exports.ccolors = out;\n  return out;\n}();\n\nvar colorNames = exports.colorNames = {\n  // special\n  default: -1,\n  normal: -1,\n  bg: -1,\n  fg: -1,\n  // normal\n  black: 0,\n  red: 1,\n  green: 2,\n  yellow: 3,\n  blue: 4,\n  magenta: 5,\n  cyan: 6,\n  white: 7,\n  // light\n  lightblack: 8,\n  lightred: 9,\n  lightgreen: 10,\n  lightyellow: 11,\n  lightblue: 12,\n  lightmagenta: 13,\n  lightcyan: 14,\n  lightwhite: 15,\n  // bright\n  brightblack: 8,\n  brightred: 9,\n  brightgreen: 10,\n  brightyellow: 11,\n  brightblue: 12,\n  brightmagenta: 13,\n  brightcyan: 14,\n  brightwhite: 15,\n  // alternate spellings\n  grey: 8,\n  gray: 8,\n  lightgrey: 7,\n  lightgray: 7,\n  brightgrey: 7,\n  brightgray: 7\n};\n\nexports.convert = function (color) {\n  if (typeof color === 'number') {\n    ;\n  } else if (typeof color === 'string') {\n    color = color.replace(/[\\- ]/g, '');\n\n    if (colorNames[color] != null) {\n      color = colorNames[color];\n    } else {\n      color = exports.match(color);\n    }\n  } else if (Array.isArray(color)) {\n    color = exports.match(color);\n  } else {\n    color = -1;\n  }\n\n  return color !== -1 ? color : 0x1ff;\n}; // Map higher colors to the first 8 colors.\n// This allows translation of high colors to low colors on 8-color terminals.\n// Why the hell did I do this by hand?\n\n\nexports.ccolors = {\n  blue: [4, 12, [17, 21], [24, 27], [31, 33], [38, 39], 45, [54, 57], [60, 63], [67, 69], [74, 75], 81, [91, 93], [97, 99], [103, 105], [110, 111], 117, [128, 129], [134, 135], [140, 141], [146, 147], 153, 165, 171, 177, 183, 189],\n  green: [2, 10, 22, [28, 29], [34, 36], [40, 43], [46, 50], [64, 65], [70, 72], [76, 79], [82, 86], [106, 108], [112, 115], [118, 122], [148, 151], [154, 158], [190, 194]],\n  cyan: [6, 14, 23, 30, 37, 44, 51, 66, 73, 80, 87, 109, 116, 123, 152, 159, 195],\n  red: [1, 9, 52, [88, 89], [94, 95], [124, 126], [130, 132], [136, 138], [160, 163], [166, 169], [172, 175], [178, 181], [196, 200], [202, 206], [208, 212], [214, 218], [220, 224]],\n  magenta: [5, 13, 53, 90, 96, 127, 133, 139, 164, 170, 176, 182, 201, 207, 213, 219, 225],\n  yellow: [3, 11, 58, [100, 101], [142, 144], [184, 187], [226, 230]],\n  black: [0, 8, 16, 59, 102, [232, 243]],\n  white: [7, 15, 145, 188, 231, [244, 255]]\n};\nexports.ncolors = [];\nObject.keys(exports.ccolors).forEach(function (name) {\n  exports.ccolors[name].forEach(function (offset) {\n    if (typeof offset === 'number') {\n      exports.ncolors[offset] = name;\n      exports.ccolors[offset] = exports.colorNames[name];\n      return;\n    }\n\n    for (var i = offset[0], l = offset[1]; i <= l; i++) {\n      exports.ncolors[i] = name;\n      exports.ccolors[i] = exports.colorNames[name];\n    }\n  });\n  delete exports.ccolors[name];\n});","map":{"version":3,"sources":["/Users/samianki/node_modules/blessed/lib/colors.js"],"names":["exports","match","r1","g1","b1","hex","hexToRGB","Array","isArray","hash","_cache","ldiff","Infinity","li","i","c","r2","g2","b2","diff","vcolors","length","colorDistance","RGBToHex","r","g","b","n","toString","col","parseInt","substring","Math","pow","mixColors","c1","c2","alpha","blend","attr","attr2","name","nc","bg","bg2","ncolors","fg","fg2","reduce","color","total","ccolors","xterm","colors","cols","_cols","l","push","forEach","slice","out","map","colorNames","default","normal","black","red","green","yellow","blue","magenta","cyan","white","lightblack","lightred","lightgreen","lightyellow","lightblue","lightmagenta","lightcyan","lightwhite","brightblack","brightred","brightgreen","brightyellow","brightblue","brightmagenta","brightcyan","brightwhite","grey","gray","lightgrey","lightgray","brightgrey","brightgray","convert","replace","Object","keys","offset"],"mappings":"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","sourcesContent":["/**\n * colors.js - color-related functions for blessed.\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\nexports.match = function(r1, g1, b1) {\n  if (typeof r1 === 'string') {\n    var hex = r1;\n    if (hex[0] !== '#') {\n      return -1;\n    }\n    hex = exports.hexToRGB(hex);\n    r1 = hex[0], g1 = hex[1], b1 = hex[2];\n  } else if (Array.isArray(r1)) {\n    b1 = r1[2], g1 = r1[1], r1 = r1[0];\n  }\n\n  var hash = (r1 << 16) | (g1 << 8) | b1;\n\n  if (exports._cache[hash] != null) {\n    return exports._cache[hash];\n  }\n\n  var ldiff = Infinity\n    , li = -1\n    , i = 0\n    , c\n    , r2\n    , g2\n    , b2\n    , diff;\n\n  for (; i < exports.vcolors.length; i++) {\n    c = exports.vcolors[i];\n    r2 = c[0];\n    g2 = c[1];\n    b2 = c[2];\n\n    diff = colorDistance(r1, g1, b1, r2, g2, b2);\n\n    if (diff === 0) {\n      li = i;\n      break;\n    }\n\n    if (diff < ldiff) {\n      ldiff = diff;\n      li = i;\n    }\n  }\n\n  return exports._cache[hash] = li;\n};\n\nexports.RGBToHex = function(r, g, b) {\n  if (Array.isArray(r)) {\n    b = r[2], g = r[1], r = r[0];\n  }\n\n  function hex(n) {\n    n = n.toString(16);\n    if (n.length < 2) n = '0' + n;\n    return n;\n  }\n\n  return '#' + hex(r) + hex(g) + hex(b);\n};\n\nexports.hexToRGB = function(hex) {\n  if (hex.length === 4) {\n    hex = hex[0]\n      + hex[1] + hex[1]\n      + hex[2] + hex[2]\n      + hex[3] + hex[3];\n  }\n\n  var col = parseInt(hex.substring(1), 16)\n    , r = (col >> 16) & 0xff\n    , g = (col >> 8) & 0xff\n    , b = col & 0xff;\n\n  return [r, g, b];\n};\n\n// As it happens, comparing how similar two colors are is really hard. Here is\n// one of the simplest solutions, which doesn't require conversion to another\n// color space, posted on stackoverflow[1]. Maybe someone better at math can\n// propose a superior solution.\n// [1] http://stackoverflow.com/questions/1633828\n\nfunction colorDistance(r1, g1, b1, r2, g2, b2) {\n  return Math.pow(30 * (r1 - r2), 2)\n    + Math.pow(59 * (g1 - g2), 2)\n    + Math.pow(11 * (b1 - b2), 2);\n}\n\n// This might work well enough for a terminal's colors: treat RGB as XYZ in a\n// 3-dimensional space and go midway between the two points.\nexports.mixColors = function(c1, c2, alpha) {\n  // if (c1 === 0x1ff) return c1;\n  // if (c2 === 0x1ff) return c1;\n  if (c1 === 0x1ff) c1 = 0;\n  if (c2 === 0x1ff) c2 = 0;\n  if (alpha == null) alpha = 0.5;\n\n  c1 = exports.vcolors[c1];\n  var r1 = c1[0];\n  var g1 = c1[1];\n  var b1 = c1[2];\n\n  c2 = exports.vcolors[c2];\n  var r2 = c2[0];\n  var g2 = c2[1];\n  var b2 = c2[2];\n\n  r1 += (r2 - r1) * alpha | 0;\n  g1 += (g2 - g1) * alpha | 0;\n  b1 += (b2 - b1) * alpha | 0;\n\n  return exports.match([r1, g1, b1]);\n};\n\nexports.blend = function blend(attr, attr2, alpha) {\n  var name, i, c, nc;\n\n  var bg = attr & 0x1ff;\n  if (attr2 != null) {\n    var bg2 = attr2 & 0x1ff;\n    if (bg === 0x1ff) bg = 0;\n    if (bg2 === 0x1ff) bg2 = 0;\n    bg = exports.mixColors(bg, bg2, alpha);\n  } else {\n    if (blend._cache[bg] != null) {\n      bg = blend._cache[bg];\n    // } else if (bg < 8) {\n    //   bg += 8;\n    } else if (bg >= 8 && bg <= 15) {\n      bg -= 8;\n    } else {\n      name = exports.ncolors[bg];\n      if (name) {\n        for (i = 0; i < exports.ncolors.length; i++) {\n          if (name === exports.ncolors[i] && i !== bg) {\n            c = exports.vcolors[bg];\n            nc = exports.vcolors[i];\n            if (nc[0] + nc[1] + nc[2] < c[0] + c[1] + c[2]) {\n              blend._cache[bg] = i;\n              bg = i;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  attr &= ~0x1ff;\n  attr |= bg;\n\n  var fg = (attr >> 9) & 0x1ff;\n  if (attr2 != null) {\n    var fg2 = (attr2 >> 9) & 0x1ff;\n    // 0, 7, 188, 231, 251\n    if (fg === 0x1ff) {\n      // XXX workaround\n      fg = 248;\n    } else {\n      if (fg === 0x1ff) fg = 7;\n      if (fg2 === 0x1ff) fg2 = 7;\n      fg = exports.mixColors(fg, fg2, alpha);\n    }\n  } else {\n    if (blend._cache[fg] != null) {\n      fg = blend._cache[fg];\n    // } else if (fg < 8) {\n    //   fg += 8;\n    } else if (fg >= 8 && fg <= 15) {\n      fg -= 8;\n    } else {\n      name = exports.ncolors[fg];\n      if (name) {\n        for (i = 0; i < exports.ncolors.length; i++) {\n          if (name === exports.ncolors[i] && i !== fg) {\n            c = exports.vcolors[fg];\n            nc = exports.vcolors[i];\n            if (nc[0] + nc[1] + nc[2] < c[0] + c[1] + c[2]) {\n              blend._cache[fg] = i;\n              fg = i;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  attr &= ~(0x1ff << 9);\n  attr |= fg << 9;\n\n  return attr;\n};\n\nexports.blend._cache = {};\n\nexports._cache = {};\n\nexports.reduce = function(color, total) {\n  if (color >= 16 && total <= 16) {\n    color = exports.ccolors[color];\n  } else if (color >= 8 && total <= 8) {\n    color -= 8;\n  } else if (color >= 2 && total <= 2) {\n    color %= 2;\n  }\n  return color;\n};\n\n// XTerm Colors\n// These were actually tough to track down. The xterm source only uses color\n// keywords. The X11 source needed to be examined to find the actual values.\n// They then had to be mapped to rgb values and then converted to hex values.\nexports.xterm = [\n  '#000000', // black\n  '#cd0000', // red3\n  '#00cd00', // green3\n  '#cdcd00', // yellow3\n  '#0000ee', // blue2\n  '#cd00cd', // magenta3\n  '#00cdcd', // cyan3\n  '#e5e5e5', // gray90\n  '#7f7f7f', // gray50\n  '#ff0000', // red\n  '#00ff00', // green\n  '#ffff00', // yellow\n  '#5c5cff', // rgb:5c/5c/ff\n  '#ff00ff', // magenta\n  '#00ffff', // cyan\n  '#ffffff'  // white\n];\n\n// Seed all 256 colors. Assume xterm defaults.\n// Ported from the xterm color generation script.\nexports.colors = (function() {\n  var cols = exports.colors = []\n    , _cols = exports.vcolors = []\n    , r\n    , g\n    , b\n    , i\n    , l;\n\n  function hex(n) {\n    n = n.toString(16);\n    if (n.length < 2) n = '0' + n;\n    return n;\n  }\n\n  function push(i, r, g, b) {\n    cols[i] = '#' + hex(r) + hex(g) + hex(b);\n    _cols[i] = [r, g, b];\n  }\n\n  // 0 - 15\n  exports.xterm.forEach(function(c, i) {\n    c = parseInt(c.substring(1), 16);\n    push(i, (c >> 16) & 0xff, (c >> 8) & 0xff, c & 0xff);\n  });\n\n  // 16 - 231\n  for (r = 0; r < 6; r++) {\n    for (g = 0; g < 6; g++) {\n      for (b = 0; b < 6; b++) {\n        i = 16 + (r * 36) + (g * 6) + b;\n        push(i,\n          r ? (r * 40 + 55) : 0,\n          g ? (g * 40 + 55) : 0,\n          b ? (b * 40 + 55) : 0);\n      }\n    }\n  }\n\n  // 232 - 255 are grey.\n  for (g = 0; g < 24; g++) {\n    l = (g * 10) + 8;\n    i = 232 + g;\n    push(i, l, l, l);\n  }\n\n  return cols;\n})();\n\n// Map higher colors to the first 8 colors.\n// This allows translation of high colors to low colors on 8-color terminals.\nexports.ccolors = (function() {\n  var _cols = exports.vcolors.slice()\n    , cols = exports.colors.slice()\n    , out;\n\n  exports.vcolors = exports.vcolors.slice(0, 8);\n  exports.colors = exports.colors.slice(0, 8);\n\n  out = cols.map(exports.match);\n\n  exports.colors = cols;\n  exports.vcolors = _cols;\n  exports.ccolors = out;\n\n  return out;\n})();\n\nvar colorNames = exports.colorNames = {\n  // special\n  default: -1,\n  normal: -1,\n  bg: -1,\n  fg: -1,\n  // normal\n  black: 0,\n  red: 1,\n  green: 2,\n  yellow: 3,\n  blue: 4,\n  magenta: 5,\n  cyan: 6,\n  white: 7,\n  // light\n  lightblack: 8,\n  lightred: 9,\n  lightgreen: 10,\n  lightyellow: 11,\n  lightblue: 12,\n  lightmagenta: 13,\n  lightcyan: 14,\n  lightwhite: 15,\n  // bright\n  brightblack: 8,\n  brightred: 9,\n  brightgreen: 10,\n  brightyellow: 11,\n  brightblue: 12,\n  brightmagenta: 13,\n  brightcyan: 14,\n  brightwhite: 15,\n  // alternate spellings\n  grey: 8,\n  gray: 8,\n  lightgrey: 7,\n  lightgray: 7,\n  brightgrey: 7,\n  brightgray: 7\n};\n\nexports.convert = function(color) {\n  if (typeof color === 'number') {\n    ;\n  } else if (typeof color === 'string') {\n    color = color.replace(/[\\- ]/g, '');\n    if (colorNames[color] != null) {\n      color = colorNames[color];\n    } else {\n      color = exports.match(color);\n    }\n  } else if (Array.isArray(color)) {\n    color = exports.match(color);\n  } else {\n    color = -1;\n  }\n  return color !== -1 ? color : 0x1ff;\n};\n\n// Map higher colors to the first 8 colors.\n// This allows translation of high colors to low colors on 8-color terminals.\n// Why the hell did I do this by hand?\nexports.ccolors = {\n  blue: [\n    4,\n    12,\n    [17, 21],\n    [24, 27],\n    [31, 33],\n    [38, 39],\n    45,\n    [54, 57],\n    [60, 63],\n    [67, 69],\n    [74, 75],\n    81,\n    [91, 93],\n    [97, 99],\n    [103, 105],\n    [110, 111],\n    117,\n    [128, 129],\n    [134, 135],\n    [140, 141],\n    [146, 147],\n    153,\n    165,\n    171,\n    177,\n    183,\n    189\n  ],\n\n  green: [\n    2,\n    10,\n    22,\n    [28, 29],\n    [34, 36],\n    [40, 43],\n    [46, 50],\n    [64, 65],\n    [70, 72],\n    [76, 79],\n    [82, 86],\n    [106, 108],\n    [112, 115],\n    [118, 122],\n    [148, 151],\n    [154, 158],\n    [190, 194]\n  ],\n\n  cyan: [\n    6,\n    14,\n    23,\n    30,\n    37,\n    44,\n    51,\n    66,\n    73,\n    80,\n    87,\n    109,\n    116,\n    123,\n    152,\n    159,\n    195\n  ],\n\n  red: [\n    1,\n    9,\n    52,\n    [88, 89],\n    [94, 95],\n    [124, 126],\n    [130, 132],\n    [136, 138],\n    [160, 163],\n    [166, 169],\n    [172, 175],\n    [178, 181],\n    [196, 200],\n    [202, 206],\n    [208, 212],\n    [214, 218],\n    [220, 224]\n  ],\n\n  magenta: [\n    5,\n    13,\n    53,\n    90,\n    96,\n    127,\n    133,\n    139,\n    164,\n    170,\n    176,\n    182,\n    201,\n    207,\n    213,\n    219,\n    225\n  ],\n\n  yellow: [\n    3,\n    11,\n    58,\n    [100, 101],\n    [142, 144],\n    [184, 187],\n    [226, 230]\n  ],\n\n  black: [\n    0,\n    8,\n    16,\n    59,\n    102,\n    [232, 243]\n  ],\n\n  white: [\n    7,\n    15,\n    145,\n    188,\n    231,\n    [244, 255]\n  ]\n};\n\nexports.ncolors = [];\n\nObject.keys(exports.ccolors).forEach(function(name) {\n  exports.ccolors[name].forEach(function(offset) {\n    if (typeof offset === 'number') {\n      exports.ncolors[offset] = name;\n      exports.ccolors[offset] = exports.colorNames[name];\n      return;\n    }\n    for (var i = offset[0], l = offset[1]; i <= l; i++) {\n      exports.ncolors[i] = name;\n      exports.ccolors[i] = exports.colorNames[name];\n    }\n  });\n  delete exports.ccolors[name];\n});\n"]},"metadata":{},"sourceType":"script"}