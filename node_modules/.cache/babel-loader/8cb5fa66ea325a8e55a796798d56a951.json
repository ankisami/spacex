{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar debug = require('debug')('axon:sub');\n\nvar escape = require('escape-string-regexp');\n\nvar Message = require('amp-message');\n\nvar Socket = require('./sock');\n/**\n * Expose `SubSocket`.\n */\n\n\nmodule.exports = SubSocket;\n/**\n * Initialize a new `SubSocket`.\n *\n * @api private\n */\n\nfunction SubSocket() {\n  Socket.call(this);\n  this.subscriptions = [];\n}\n/**\n * Inherits from `Socket.prototype`.\n */\n\n\nSubSocket.prototype.__proto__ = Socket.prototype;\n/**\n * Check if this socket has subscriptions.\n *\n * @return {Boolean}\n * @api public\n */\n\nSubSocket.prototype.hasSubscriptions = function () {\n  return !!this.subscriptions.length;\n};\n/**\n * Check if any subscriptions match `topic`.\n *\n * @param {String} topic\n * @return {Boolean}\n * @api public\n */\n\n\nSubSocket.prototype.matches = function (topic) {\n  for (var i = 0; i < this.subscriptions.length; ++i) {\n    if (this.subscriptions[i].test(topic)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Message handler.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, mulitpart)\n * @api private\n */\n\n\nSubSocket.prototype.onmessage = function (sock) {\n  var subs = this.hasSubscriptions();\n  var self = this;\n  return function (buf) {\n    var msg = new Message(buf);\n\n    if (subs) {\n      var topic = msg.args[0];\n      if (!self.matches(topic)) return debug('not subscribed to \"%s\"', topic);\n    }\n\n    self.emit.apply(self, ['message'].concat(msg.args).concat(sock));\n  };\n};\n/**\n * Subscribe with the given `re`.\n *\n * @param {RegExp|String} re\n * @return {RegExp}\n * @api public\n */\n\n\nSubSocket.prototype.subscribe = function (re) {\n  debug('subscribe to \"%s\"', re);\n  this.subscriptions.push(re = toRegExp(re));\n  return re;\n};\n/**\n * Unsubscribe with the given `re`.\n *\n * @param {RegExp|String} re\n * @api public\n */\n\n\nSubSocket.prototype.unsubscribe = function (re) {\n  debug('unsubscribe from \"%s\"', re);\n  re = toRegExp(re);\n\n  for (var i = 0; i < this.subscriptions.length; ++i) {\n    if (this.subscriptions[i].toString() === re.toString()) {\n      this.subscriptions.splice(i--, 1);\n    }\n  }\n};\n/**\n * Clear current subscriptions.\n *\n * @api public\n */\n\n\nSubSocket.prototype.clearSubscriptions = function () {\n  this.subscriptions = [];\n};\n/**\n * Subscribers should not send messages.\n */\n\n\nSubSocket.prototype.send = function () {\n  throw new Error('subscribers cannot send messages');\n};\n/**\n * Convert `str` to a `RegExp`.\n *\n * @param {String} str\n * @return {RegExp}\n * @api private\n */\n\n\nfunction toRegExp(str) {\n  if (str instanceof RegExp) return str;\n  str = escape(str);\n  str = str.replace(/\\\\\\*/g, '(.+)');\n  return new RegExp('^' + str + '$');\n}","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2-axon/lib/sockets/sub.js"],"names":["debug","require","escape","Message","Socket","module","exports","SubSocket","call","subscriptions","prototype","__proto__","hasSubscriptions","length","matches","topic","i","test","onmessage","sock","subs","self","buf","msg","args","emit","apply","concat","subscribe","re","push","toRegExp","unsubscribe","toString","splice","clearSubscriptions","send","Error","str","RegExp","replace"],"mappings":"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","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('axon:sub');\nvar escape = require('escape-string-regexp');\nvar Message = require('amp-message');\nvar Socket = require('./sock');\n\n/**\n * Expose `SubSocket`.\n */\n\nmodule.exports = SubSocket;\n\n/**\n * Initialize a new `SubSocket`.\n *\n * @api private\n */\n\nfunction SubSocket() {\n  Socket.call(this);\n  this.subscriptions = [];\n}\n\n/**\n * Inherits from `Socket.prototype`.\n */\n\nSubSocket.prototype.__proto__ = Socket.prototype;\n\n/**\n * Check if this socket has subscriptions.\n *\n * @return {Boolean}\n * @api public\n */\n\nSubSocket.prototype.hasSubscriptions = function(){\n  return !! this.subscriptions.length;\n};\n\n/**\n * Check if any subscriptions match `topic`.\n *\n * @param {String} topic\n * @return {Boolean}\n * @api public\n */\n\nSubSocket.prototype.matches = function(topic){\n  for (var i = 0; i < this.subscriptions.length; ++i) {\n    if (this.subscriptions[i].test(topic)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Message handler.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, mulitpart)\n * @api private\n */\n\nSubSocket.prototype.onmessage = function(sock){\n  var subs = this.hasSubscriptions();\n  var self = this;\n\n  return function(buf){\n    var msg = new Message(buf);\n\n    if (subs) {\n      var topic = msg.args[0];\n      if (!self.matches(topic)) return debug('not subscribed to \"%s\"', topic);\n    }\n\n    self.emit.apply(self, ['message'].concat(msg.args).concat(sock));\n  };\n};\n\n/**\n * Subscribe with the given `re`.\n *\n * @param {RegExp|String} re\n * @return {RegExp}\n * @api public\n */\n\nSubSocket.prototype.subscribe = function(re){\n  debug('subscribe to \"%s\"', re);\n  this.subscriptions.push(re = toRegExp(re));\n  return re;\n};\n\n/**\n * Unsubscribe with the given `re`.\n *\n * @param {RegExp|String} re\n * @api public\n */\n\nSubSocket.prototype.unsubscribe = function(re){\n  debug('unsubscribe from \"%s\"', re);\n  re = toRegExp(re);\n  for (var i = 0; i < this.subscriptions.length; ++i) {\n    if (this.subscriptions[i].toString() === re.toString()) {\n      this.subscriptions.splice(i--, 1);\n    }\n  }\n};\n\n/**\n * Clear current subscriptions.\n *\n * @api public\n */\n\nSubSocket.prototype.clearSubscriptions = function(){\n  this.subscriptions = [];\n};\n\n/**\n * Subscribers should not send messages.\n */\n\nSubSocket.prototype.send = function(){\n  throw new Error('subscribers cannot send messages');\n};\n\n/**\n * Convert `str` to a `RegExp`.\n *\n * @param {String} str\n * @return {RegExp}\n * @api private\n */\n\nfunction toRegExp(str) {\n  if (str instanceof RegExp) return str;\n  str = escape(str);\n  str = str.replace(/\\\\\\*/g, '(.+)');\n  return new RegExp('^' + str + '$');\n}\n"]},"metadata":{},"sourceType":"script"}