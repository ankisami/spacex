{"ast":null,"code":"'use strict';\n\nvar os = require('os');\n\nvar bin = require('./bin');\n\nvar history = require('./history');\n\nfunction parseDate(datestr) {\n  var year = datestr.substring(0, 4);\n  var month = datestr.substring(4, 6);\n  var day = datestr.substring(6, 8);\n  var hour = datestr.substring(8, 10);\n  var minutes = datestr.substring(10, 12);\n  var seconds = datestr.substring(12, 14);\n  var useconds = datestr.substring(15, 21);\n  var sign = datestr.substring(21, 22);\n  var tmz = parseInt(datestr.substring(22, 25), 10);\n  var tmzh = Math.floor(tmz / 60);\n  var tmzm = tmz % 60;\n  return new Date(year + '-' + month + '-' + day + 'T' + hour + ':' + minutes + ':' + seconds + '.' + useconds + sign + (tmzh > 9 ? tmzh : '0' + tmzh) + '' + (tmzm > 9 ? tmzm : '0' + tmzm));\n}\n/**\n  * Get pid informations through wmic command.\n  * @param  {Number[]} pids\n  * @param  {Object} options\n  * @param  {Function} done(err, stat)\n  */\n\n\nfunction wmic(pids, options, done) {\n  var whereClause = 'ProcessId=' + pids[0];\n\n  for (var i = 1; i < pids.length; i++) {\n    whereClause += ' or ' + 'ProcessId=' + pids[i];\n  }\n\n  var args = ['PROCESS', 'where', '\"' + whereClause + '\"', 'get', 'CreationDate,KernelModeTime,ParentProcessId,ProcessId,UserModeTime,WorkingSetSize'];\n  bin('wmic', args, {\n    windowsHide: true,\n    windowsVerbatimArguments: true\n  }, function (err, stdout, code) {\n    if (err) {\n      if (err.message.indexOf('No Instance(s) Available.') !== -1) {\n        const error = new Error('No matching pid found');\n        error.code = 'ENOENT';\n        return done(error);\n      }\n\n      return done(err);\n    }\n\n    if (code !== 0) {\n      return done(new Error('pidusage wmic command exited with code ' + code));\n    }\n\n    var date = Date.now(); // Note: On Windows the returned value includes fractions of a second.\n    // Use Math.floor() to get whole seconds.\n\n    var uptime = Math.floor(os.uptime()); // Example of stdout on Windows 10\n    // CreationDate: is in the format yyyymmddHHMMSS.mmmmmmsUUU\n    // KernelModeTime: is in units of 100 ns\n    // UserModeTime: is in units of 100 ns\n    // WorkingSetSize: is in bytes\n    //\n    // Refs: https://superuser.com/a/937401/470946\n    // Refs: https://msdn.microsoft.com/en-us/library/aa394372(v=vs.85).aspx\n    // NB: The columns are returned in lexicographical order\n    //\n    // CreationDate               KernelModeTime  ParentProcessId  ProcessId  UserModeTime  WorkingSetSize\n    // 20150329221650.080654+060  153750000       0                777        8556250000    110821376\n\n    stdout = stdout.split(os.EOL);\n    var again = false;\n    var statistics = {};\n\n    for (var i = 1; i < stdout.length; i++) {\n      var line = stdout[i].trim().split(/\\s+/);\n\n      if (!line || line.length !== 6) {\n        continue;\n      }\n\n      var creation = parseDate(line[0]);\n      var ppid = parseInt(line[2], 10);\n      var pid = parseInt(line[3], 10);\n      var kerneltime = Math.round(parseInt(line[1], 10) / 10000);\n      var usertime = Math.round(parseInt(line[4], 10) / 10000);\n      var memory = parseInt(line[5], 10);\n      var hst = history.get(pid, options.maxage);\n\n      if (hst === undefined) {\n        again = true;\n        hst = {\n          ctime: kerneltime + usertime,\n          uptime: uptime\n        };\n      } // process usage since last call\n\n\n      var total = (kerneltime + usertime - hst.ctime) / 1000; // time elapsed between calls in seconds\n\n      var seconds = uptime - hst.uptime;\n      var cpu = seconds > 0 ? total / seconds * 100 : 0;\n      history.set(pid, {\n        ctime: usertime + kerneltime,\n        uptime: uptime\n      }, options.maxage);\n      statistics[pid] = {\n        cpu: cpu,\n        memory: memory,\n        ppid: ppid,\n        pid: pid,\n        ctime: usertime + kerneltime,\n        elapsed: date - creation.getTime(),\n        timestamp: date\n      };\n    }\n\n    if (again) {\n      return wmic(pids, options, function (err, stats) {\n        if (err) return done(err);\n        done(null, Object.assign(statistics, stats));\n      });\n    }\n\n    done(null, statistics);\n  });\n}\n\nmodule.exports = wmic;","map":{"version":3,"sources":["/Users/samianki/node_modules/pidusage/lib/wmic.js"],"names":["os","require","bin","history","parseDate","datestr","year","substring","month","day","hour","minutes","seconds","useconds","sign","tmz","parseInt","tmzh","Math","floor","tmzm","Date","wmic","pids","options","done","whereClause","i","length","args","windowsHide","windowsVerbatimArguments","err","stdout","code","message","indexOf","error","Error","date","now","uptime","split","EOL","again","statistics","line","trim","creation","ppid","pid","kerneltime","round","usertime","memory","hst","get","maxage","undefined","ctime","total","cpu","set","elapsed","getTime","timestamp","stats","Object","assign","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar os = require('os')\nvar bin = require('./bin')\nvar history = require('./history')\n\nfunction parseDate (datestr) {\n  var year = datestr.substring(0, 4)\n  var month = datestr.substring(4, 6)\n  var day = datestr.substring(6, 8)\n  var hour = datestr.substring(8, 10)\n  var minutes = datestr.substring(10, 12)\n  var seconds = datestr.substring(12, 14)\n  var useconds = datestr.substring(15, 21)\n  var sign = datestr.substring(21, 22)\n  var tmz = parseInt(datestr.substring(22, 25), 10)\n  var tmzh = Math.floor(tmz / 60)\n  var tmzm = tmz % 60\n\n  return new Date(\n    year + '-' + month + '-' + day + 'T' + hour +\n    ':' + minutes + ':' + seconds +\n    '.' + useconds +\n    sign + (tmzh > 9 ? tmzh : '0' + tmzh) + '' + (tmzm > 9 ? tmzm : '0' + tmzm)\n  )\n}\n\n/**\n  * Get pid informations through wmic command.\n  * @param  {Number[]} pids\n  * @param  {Object} options\n  * @param  {Function} done(err, stat)\n  */\nfunction wmic (pids, options, done) {\n  var whereClause = 'ProcessId=' + pids[0]\n  for (var i = 1; i < pids.length; i++) {\n    whereClause += ' or ' + 'ProcessId=' + pids[i]\n  }\n\n  var args = [\n    'PROCESS',\n    'where',\n    '\"' + whereClause + '\"',\n    'get',\n    'CreationDate,KernelModeTime,ParentProcessId,ProcessId,UserModeTime,WorkingSetSize'\n  ]\n\n  bin('wmic', args, { windowsHide: true, windowsVerbatimArguments: true }, function (err, stdout, code) {\n    if (err) {\n      if (err.message.indexOf('No Instance(s) Available.') !== -1) {\n        const error = new Error('No matching pid found')\n        error.code = 'ENOENT'\n        return done(error)\n      }\n      return done(err)\n    }\n    if (code !== 0) {\n      return done(new Error('pidusage wmic command exited with code ' + code))\n    }\n    var date = Date.now()\n\n    // Note: On Windows the returned value includes fractions of a second.\n    // Use Math.floor() to get whole seconds.\n    var uptime = Math.floor(os.uptime())\n\n    // Example of stdout on Windows 10\n    // CreationDate: is in the format yyyymmddHHMMSS.mmmmmmsUUU\n    // KernelModeTime: is in units of 100 ns\n    // UserModeTime: is in units of 100 ns\n    // WorkingSetSize: is in bytes\n    //\n    // Refs: https://superuser.com/a/937401/470946\n    // Refs: https://msdn.microsoft.com/en-us/library/aa394372(v=vs.85).aspx\n    // NB: The columns are returned in lexicographical order\n    //\n    // CreationDate               KernelModeTime  ParentProcessId  ProcessId  UserModeTime  WorkingSetSize\n    // 20150329221650.080654+060  153750000       0                777        8556250000    110821376\n\n    stdout = stdout.split(os.EOL)\n\n    var again = false\n    var statistics = {}\n    for (var i = 1; i < stdout.length; i++) {\n      var line = stdout[i].trim().split(/\\s+/)\n\n      if (!line || line.length !== 6) {\n        continue\n      }\n\n      var creation = parseDate(line[0])\n      var ppid = parseInt(line[2], 10)\n      var pid = parseInt(line[3], 10)\n      var kerneltime = Math.round(parseInt(line[1], 10) / 10000)\n      var usertime = Math.round(parseInt(line[4], 10) / 10000)\n      var memory = parseInt(line[5], 10)\n\n      var hst = history.get(pid, options.maxage)\n      if (hst === undefined) {\n        again = true\n        hst = { ctime: kerneltime + usertime, uptime: uptime }\n      }\n\n      // process usage since last call\n      var total = (kerneltime + usertime - hst.ctime) / 1000\n      // time elapsed between calls in seconds\n      var seconds = uptime - hst.uptime\n      var cpu = seconds > 0 ? (total / seconds) * 100 : 0\n\n      history.set(pid, { ctime: usertime + kerneltime, uptime: uptime }, options.maxage)\n\n      statistics[pid] = {\n        cpu: cpu,\n        memory: memory,\n        ppid: ppid,\n        pid: pid,\n        ctime: usertime + kerneltime,\n        elapsed: date - creation.getTime(),\n        timestamp: date\n      }\n    }\n\n    if (again) {\n      return wmic(pids, options, function (err, stats) {\n        if (err) return done(err)\n        done(null, Object.assign(statistics, stats))\n      })\n    }\n    done(null, statistics)\n  })\n}\n\nmodule.exports = wmic\n"]},"metadata":{},"sourceType":"script"}