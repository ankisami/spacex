{"ast":null,"code":"/**\n * checkbox.js - checkbox element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\nvar Node = require('./node');\n\nvar Input = require('./input');\n/**\n * Checkbox\n */\n\n\nfunction Checkbox(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new Checkbox(options);\n  }\n\n  options = options || {};\n  Input.call(this, options);\n  this.text = options.content || options.text || '';\n  this.checked = this.value = options.checked || false;\n  this.on('keypress', function (ch, key) {\n    if (key.name === 'enter' || key.name === 'space') {\n      self.toggle();\n      self.screen.render();\n    }\n  });\n\n  if (options.mouse) {\n    this.on('click', function () {\n      self.toggle();\n      self.screen.render();\n    });\n  }\n\n  this.on('focus', function () {\n    var lpos = self.lpos;\n    if (!lpos) return;\n    self.screen.program.lsaveCursor('checkbox');\n    self.screen.program.cup(lpos.yi, lpos.xi + 1);\n    self.screen.program.showCursor();\n  });\n  this.on('blur', function () {\n    self.screen.program.lrestoreCursor('checkbox', true);\n  });\n}\n\nCheckbox.prototype.__proto__ = Input.prototype;\nCheckbox.prototype.type = 'checkbox';\n\nCheckbox.prototype.render = function () {\n  this.clearPos(true);\n  this.setContent('[' + (this.checked ? 'x' : ' ') + '] ' + this.text, true);\n  return this._render();\n};\n\nCheckbox.prototype.check = function () {\n  if (this.checked) return;\n  this.checked = this.value = true;\n  this.emit('check');\n};\n\nCheckbox.prototype.uncheck = function () {\n  if (!this.checked) return;\n  this.checked = this.value = false;\n  this.emit('uncheck');\n};\n\nCheckbox.prototype.toggle = function () {\n  return this.checked ? this.uncheck() : this.check();\n};\n/**\n * Expose\n */\n\n\nmodule.exports = Checkbox;","map":{"version":3,"sources":["/Users/samianki/node_modules/blessed/lib/widgets/checkbox.js"],"names":["Node","require","Input","Checkbox","options","self","call","text","content","checked","value","on","ch","key","name","toggle","screen","render","mouse","lpos","program","lsaveCursor","cup","yi","xi","showCursor","lrestoreCursor","prototype","__proto__","type","clearPos","setContent","_render","check","emit","uncheck","module","exports"],"mappings":"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","sourcesContent":["/**\n * checkbox.js - checkbox element for blessed\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n/**\n * Modules\n */\n\nvar Node = require('./node');\nvar Input = require('./input');\n\n/**\n * Checkbox\n */\n\nfunction Checkbox(options) {\n  var self = this;\n\n  if (!(this instanceof Node)) {\n    return new Checkbox(options);\n  }\n\n  options = options || {};\n\n  Input.call(this, options);\n\n  this.text = options.content || options.text || '';\n  this.checked = this.value = options.checked || false;\n\n  this.on('keypress', function(ch, key) {\n    if (key.name === 'enter' || key.name === 'space') {\n      self.toggle();\n      self.screen.render();\n    }\n  });\n\n  if (options.mouse) {\n    this.on('click', function() {\n      self.toggle();\n      self.screen.render();\n    });\n  }\n\n  this.on('focus', function() {\n    var lpos = self.lpos;\n    if (!lpos) return;\n    self.screen.program.lsaveCursor('checkbox');\n    self.screen.program.cup(lpos.yi, lpos.xi + 1);\n    self.screen.program.showCursor();\n  });\n\n  this.on('blur', function() {\n    self.screen.program.lrestoreCursor('checkbox', true);\n  });\n}\n\nCheckbox.prototype.__proto__ = Input.prototype;\n\nCheckbox.prototype.type = 'checkbox';\n\nCheckbox.prototype.render = function() {\n  this.clearPos(true);\n  this.setContent('[' + (this.checked ? 'x' : ' ') + '] ' + this.text, true);\n  return this._render();\n};\n\nCheckbox.prototype.check = function() {\n  if (this.checked) return;\n  this.checked = this.value = true;\n  this.emit('check');\n};\n\nCheckbox.prototype.uncheck = function() {\n  if (!this.checked) return;\n  this.checked = this.value = false;\n  this.emit('uncheck');\n};\n\nCheckbox.prototype.toggle = function() {\n  return this.checked\n    ? this.uncheck()\n    : this.check();\n};\n\n/**\n * Expose\n */\n\nmodule.exports = Checkbox;\n"]},"metadata":{},"sourceType":"script"}