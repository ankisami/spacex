{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\nvar Configuration = module.exports = {};\n\nvar fs = require('fs');\n\nvar Common = require('./Common');\n\nvar eachSeries = require('async/eachSeries');\n\nvar cst = require('../constants.js');\n\nfunction splitKey(key) {\n  var values = [key];\n  if (key.indexOf('.') > -1) values = key.match(/(?:[^.\"]+|\"[^\"]*\")+/g).map(function (dt) {\n    return dt.replace(/\"/g, '');\n  });else if (key.indexOf(':') > -1) values = key.match(/(?:[^:\"]+|\"[^\"]*\")+/g).map(function (dt) {\n    return dt.replace(/\"/g, '');\n  });\n  return values;\n}\n\nfunction serializeConfiguration(json_conf) {\n  return JSON.stringify(json_conf, null, 4);\n}\n\nConfiguration.set = function (key, value, cb) {\n  fs.readFile(cst.PM2_MODULE_CONF_FILE, function (err, data) {\n    if (err) return cb(err);\n    var json_conf = JSON.parse(data);\n    var values = splitKey(key);\n\n    if (values.length > 0) {\n      var levels = values;\n      var tmp = json_conf;\n      levels.forEach(function (key, index) {\n        if (index == levels.length - 1) tmp[key] = value;else if (!tmp[key]) {\n          tmp[key] = {};\n          tmp = tmp[key];\n        } else {\n          if (typeof tmp[key] != 'object') tmp[key] = {};\n          tmp = tmp[key];\n        }\n      });\n    } else {\n      if (json_conf[key] && typeof json_conf[key] === 'string') Common.printOut(cst.PREFIX_MSG + 'Replacing current value key %s by %s', key, value);\n      json_conf[key] = value;\n    }\n\n    fs.writeFile(cst.PM2_MODULE_CONF_FILE, serializeConfiguration(json_conf), function (err, data) {\n      if (err) return cb(err);\n      return cb(null, json_conf);\n    });\n    return false;\n  });\n};\n\nConfiguration.unset = function (key, cb) {\n  fs.readFile(cst.PM2_MODULE_CONF_FILE, function (err, data) {\n    if (err) return cb(err);\n    var json_conf = JSON.parse(data);\n    var values = splitKey(key);\n\n    if (values.length > 0) {\n      var levels = values;\n      var tmp = json_conf;\n      levels.forEach(function (key, index) {\n        if (index == levels.length - 1) delete tmp[key];else if (!tmp[key]) {\n          tmp[key] = {};\n          tmp = tmp[key];\n        } else {\n          if (typeof tmp[key] != 'object') tmp[key] = {};\n          tmp = tmp[key];\n        }\n      });\n    } else delete json_conf[key];\n\n    if (err) return cb(err);\n    if (key === 'all') json_conf = {};\n    fs.writeFile(cst.PM2_MODULE_CONF_FILE, serializeConfiguration(json_conf), function (err, data) {\n      if (err) return cb(err);\n      return cb(null, json_conf);\n    });\n    return false;\n  });\n};\n\nConfiguration.setSyncIfNotExist = function (key, value) {\n  try {\n    var conf = JSON.parse(fs.readFileSync(cst.PM2_MODULE_CONF_FILE));\n  } catch (e) {\n    return null;\n  }\n\n  var values = splitKey(key);\n  var exists = false;\n\n  if (values.length > 1 && conf && conf[values[0]]) {\n    exists = Object.keys(conf[values[0]]).some(function (key) {\n      if (key == values[1]) return true;\n      return false;\n    });\n  }\n\n  if (exists === false) return Configuration.setSync(key, value);\n  return null;\n};\n\nConfiguration.setSync = function (key, value) {\n  try {\n    var data = fs.readFileSync(cst.PM2_MODULE_CONF_FILE);\n  } catch (e) {\n    return null;\n  }\n\n  var json_conf = JSON.parse(data);\n  var values = splitKey(key);\n\n  if (values.length > 0) {\n    var levels = values;\n    var tmp = json_conf;\n    levels.forEach(function (key, index) {\n      if (index == levels.length - 1) tmp[key] = value;else if (!tmp[key]) {\n        tmp[key] = {};\n        tmp = tmp[key];\n      } else {\n        if (typeof tmp[key] != 'object') tmp[key] = {};\n        tmp = tmp[key];\n      }\n    });\n  } else {\n    if (json_conf[key] && typeof json_conf[key] === 'string') Common.printOut(cst.PREFIX_MSG + 'Replacing current value key %s by %s', key, value);\n    json_conf[key] = value;\n  }\n\n  if (key === 'all') json_conf = {};\n\n  try {\n    fs.writeFileSync(cst.PM2_MODULE_CONF_FILE, serializeConfiguration(json_conf));\n    return json_conf;\n  } catch (e) {\n    console.error(e.message);\n    return null;\n  }\n};\n\nConfiguration.unsetSync = function (key) {\n  try {\n    var data = fs.readFileSync(cst.PM2_MODULE_CONF_FILE);\n  } catch (e) {\n    return null;\n  }\n\n  var json_conf = JSON.parse(data);\n  var values = splitKey(key);\n\n  if (values.length > 0) {\n    var levels = values;\n    var tmp = json_conf;\n    levels.forEach(function (key, index) {\n      if (index == levels.length - 1) delete tmp[key];else if (!tmp[key]) {\n        tmp[key] = {};\n        tmp = tmp[key];\n      } else {\n        if (typeof tmp[key] != 'object') tmp[key] = {};\n        tmp = tmp[key];\n      }\n    });\n  } else delete json_conf[key];\n\n  if (key === 'all') json_conf = {};\n\n  try {\n    fs.writeFileSync(cst.PM2_MODULE_CONF_FILE, serializeConfiguration(json_conf));\n  } catch (e) {\n    console.error(e.message);\n    return null;\n  }\n};\n\nConfiguration.multiset = function (serial, cb) {\n  var arrays = [];\n  serial = serial.match(/(?:[^ \"]+|\"[^\"]*\")+/g);\n\n  while (serial.length > 0) arrays.push(serial.splice(0, 2));\n\n  eachSeries(arrays, function (el, next) {\n    Configuration.set(el[0], el[1], next);\n  }, cb);\n};\n\nConfiguration.get = function (key, cb) {\n  Configuration.getAll(function (err, data) {\n    var climb = splitKey(key);\n    climb.some(function (val) {\n      if (!data[val]) {\n        data = null;\n        return true;\n      }\n\n      data = data[val];\n      return false;\n    });\n    if (!data) return cb({\n      err: 'Unknown key'\n    }, null);\n    return cb(null, data);\n  });\n};\n\nConfiguration.getSync = function (key) {\n  try {\n    var data = Configuration.getAllSync();\n  } catch (e) {\n    return null;\n  }\n\n  var climb = splitKey(key);\n  climb.some(function (val) {\n    if (!data[val]) {\n      data = null;\n      return true;\n    }\n\n    data = data[val];\n    return false;\n  });\n  if (!data) return null;\n  return data;\n};\n\nConfiguration.getAll = function (cb) {\n  fs.readFile(cst.PM2_MODULE_CONF_FILE, function (err, data) {\n    if (err) return cb(err);\n    return cb(null, JSON.parse(data));\n  });\n};\n\nConfiguration.getAllSync = function () {\n  try {\n    return JSON.parse(fs.readFileSync(cst.PM2_MODULE_CONF_FILE));\n  } catch (e) {\n    console.error(e.stack || e);\n    return {};\n  }\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/Configuration.js"],"names":["Configuration","module","exports","fs","require","Common","eachSeries","cst","splitKey","key","values","indexOf","match","map","dt","replace","serializeConfiguration","json_conf","JSON","stringify","set","value","cb","readFile","PM2_MODULE_CONF_FILE","err","data","parse","length","levels","tmp","forEach","index","printOut","PREFIX_MSG","writeFile","unset","setSyncIfNotExist","conf","readFileSync","e","exists","Object","keys","some","setSync","writeFileSync","console","error","message","unsetSync","multiset","serial","arrays","push","splice","el","next","get","getAll","climb","val","getSync","getAllSync","stack"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n\nvar Configuration = module.exports = {};\n\nvar fs            = require('fs');\n\nvar Common        = require('./Common');\nvar eachSeries    = require('async/eachSeries');\nvar cst           = require('../constants.js');\n\nfunction splitKey(key) {\n  var values = [key];\n\n  if (key.indexOf('.') > -1)\n    values = key.match(/(?:[^.\"]+|\"[^\"]*\")+/g).map(function(dt) { return dt.replace(/\"/g, '') });\n  else if (key.indexOf(':') > -1)\n    values = key.match(/(?:[^:\"]+|\"[^\"]*\")+/g).map(function(dt) { return dt.replace(/\"/g, '') });\n\n  return values;\n}\n\nfunction serializeConfiguration(json_conf) {\n  return JSON.stringify(json_conf, null, 4)\n}\n\nConfiguration.set = function(key, value, cb) {\n  fs.readFile(cst.PM2_MODULE_CONF_FILE, function(err, data) {\n    if (err) return cb(err);\n\n    var json_conf = JSON.parse(data);\n\n    var values = splitKey(key);\n\n    if (values.length > 0) {\n      var levels = values;\n\n      var tmp = json_conf;\n\n      levels.forEach(function(key, index) {\n        if (index == levels.length -1)\n          tmp[key] = value;\n        else if (!tmp[key]) {\n          tmp[key] = {};\n          tmp = tmp[key];\n        }\n        else {\n          if (typeof(tmp[key]) != 'object')\n            tmp[key] = {};\n          tmp = tmp[key];\n        }\n      });\n\n    }\n    else {\n      if (json_conf[key] && typeof(json_conf[key]) === 'string')\n        Common.printOut(cst.PREFIX_MSG + 'Replacing current value key %s by %s', key, value);\n\n      json_conf[key] = value;\n    }\n\n    fs.writeFile(cst.PM2_MODULE_CONF_FILE, serializeConfiguration(json_conf), function(err, data) {\n      if (err) return cb(err);\n\n      return cb(null, json_conf);\n    });\n    return false;\n  });\n};\n\nConfiguration.unset = function(key, cb) {\n  fs.readFile(cst.PM2_MODULE_CONF_FILE, function(err, data) {\n    if (err) return cb(err);\n\n    var json_conf = JSON.parse(data);\n\n    var values = splitKey(key);\n\n    if (values.length > 0) {\n      var levels = values;\n\n      var tmp = json_conf;\n\n      levels.forEach(function(key, index) {\n        if (index == levels.length -1)\n          delete tmp[key];\n        else if (!tmp[key]) {\n          tmp[key] = {};\n          tmp = tmp[key];\n        }\n        else {\n          if (typeof(tmp[key]) != 'object')\n            tmp[key] = {};\n          tmp = tmp[key];\n        }\n      });\n\n    }\n    else\n      delete json_conf[key];\n\n    if (err) return cb(err);\n\n    if (key === 'all')\n      json_conf = {};\n\n    fs.writeFile(cst.PM2_MODULE_CONF_FILE, serializeConfiguration(json_conf), function(err, data) {\n      if (err) return cb(err);\n\n      return cb(null, json_conf);\n    });\n    return false;\n  });\n}\n\nConfiguration.setSyncIfNotExist = function(key, value) {\n  try {\n    var conf = JSON.parse(fs.readFileSync(cst.PM2_MODULE_CONF_FILE));\n  } catch(e) {\n    return null;\n  }\n\n  var values = splitKey(key);\n  var exists = false;\n\n  if (values.length > 1 && conf && conf[values[0]]) {\n    exists = Object.keys(conf[values[0]]).some(function(key) {\n      if (key == values[1])\n        return true;\n      return false;\n    });\n  }\n\n  if (exists === false)\n    return Configuration.setSync(key, value);\n\n  return null;\n};\n\nConfiguration.setSync = function(key, value) {\n  try {\n    var data = fs.readFileSync(cst.PM2_MODULE_CONF_FILE);\n  } catch(e) {\n    return null;\n  }\n\n  var json_conf = JSON.parse(data);\n\n  var values = splitKey(key);\n\n  if (values.length > 0) {\n    var levels = values;\n\n    var tmp = json_conf;\n\n    levels.forEach(function(key, index) {\n      if (index == levels.length -1)\n        tmp[key] = value;\n      else if (!tmp[key]) {\n        tmp[key] = {};\n        tmp = tmp[key];\n      }\n      else {\n        if (typeof(tmp[key]) != 'object')\n          tmp[key] = {};\n        tmp = tmp[key];\n      }\n    });\n\n  }\n  else {\n    if (json_conf[key] && typeof(json_conf[key]) === 'string')\n      Common.printOut(cst.PREFIX_MSG + 'Replacing current value key %s by %s', key, value);\n\n    json_conf[key] = value;\n  }\n\n  if (key === 'all')\n    json_conf = {};\n\n  try {\n    fs.writeFileSync(cst.PM2_MODULE_CONF_FILE, serializeConfiguration(json_conf));\n    return json_conf;\n  } catch(e) {\n    console.error(e.message);\n    return null;\n  }\n};\n\nConfiguration.unsetSync = function(key) {\n  try {\n    var data = fs.readFileSync(cst.PM2_MODULE_CONF_FILE);\n  } catch(e) {\n    return null;\n  }\n\n  var json_conf = JSON.parse(data);\n\n  var values = splitKey(key);\n\n  if (values.length > 0) {\n    var levels = values;\n\n    var tmp = json_conf;\n\n    levels.forEach(function(key, index) {\n      if (index == levels.length -1)\n        delete tmp[key];\n      else if (!tmp[key]) {\n        tmp[key] = {};\n        tmp = tmp[key];\n      }\n      else {\n        if (typeof(tmp[key]) != 'object')\n          tmp[key] = {};\n        tmp = tmp[key];\n      }\n    });\n\n  }\n  else\n    delete json_conf[key];\n\n  if (key === 'all')\n    json_conf = {};\n\n  try {\n    fs.writeFileSync(cst.PM2_MODULE_CONF_FILE, serializeConfiguration(json_conf));\n  } catch(e) {\n    console.error(e.message);\n    return null;\n  }\n};\n\nConfiguration.multiset = function(serial, cb) {\n  var arrays = [];\n  serial = serial.match(/(?:[^ \"]+|\"[^\"]*\")+/g);\n\n  while (serial.length > 0)\n    arrays.push(serial.splice(0, 2));\n\n  eachSeries(arrays, function(el, next) {\n    Configuration.set(el[0], el[1], next);\n  }, cb);\n};\n\nConfiguration.get = function(key, cb) {\n  Configuration.getAll(function(err, data) {\n    var climb = splitKey(key);\n\n    climb.some(function(val) {\n      if (!data[val]) {\n        data = null;\n        return true;\n      }\n      data = data[val];\n      return false;\n    });\n\n    if (!data) return cb({err : 'Unknown key'}, null);\n    return cb(null, data);\n  });\n};\n\nConfiguration.getSync = function(key) {\n  try {\n    var data = Configuration.getAllSync();\n  } catch(e) {\n    return null;\n  }\n\n  var climb = splitKey(key);\n\n  climb.some(function(val) {\n    if (!data[val]) {\n      data = null;\n      return true;\n    }\n    data = data[val];\n    return false;\n  });\n\n  if (!data) return null;\n  return data;\n};\n\nConfiguration.getAll = function(cb) {\n  fs.readFile(cst.PM2_MODULE_CONF_FILE, function(err, data) {\n    if (err) return cb(err);\n    return cb(null, JSON.parse(data));\n  });\n};\n\nConfiguration.getAllSync = function() {\n  try {\n    return JSON.parse(fs.readFileSync(cst.PM2_MODULE_CONF_FILE));\n  } catch(e) {\n    console.error(e.stack || e);\n    return {};\n  }\n};\n"]},"metadata":{},"sourceType":"script"}