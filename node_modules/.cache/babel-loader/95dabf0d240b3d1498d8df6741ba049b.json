{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// network.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 9. Network\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\n\nconst exec = require('child_process').exec;\n\nconst execSync = require('child_process').execSync;\n\nconst fs = require('fs');\n\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = _platform === 'linux';\n\nconst _darwin = _platform === 'darwin';\n\nconst _windows = _platform === 'win32';\n\nconst _freebsd = _platform === 'freebsd';\n\nconst _openbsd = _platform === 'openbsd';\n\nconst _netbsd = _platform === 'netbsd';\n\nconst _sunos = _platform === 'sunos';\n\nlet _network = {};\nlet _default_iface = '';\nlet _ifaces = {};\nlet _dhcpNics = [];\nlet _networkInterfaces = [];\nlet _mac = {};\nlet pathToIp;\n\nfunction getDefaultNetworkInterface() {\n  let ifaces = os.networkInterfaces();\n  let ifacename = '';\n  let ifacenameFirst = '';\n  let scopeid = 9999; // fallback - \"first\" external interface (sorted by scopeid)\n\n  for (let dev in ifaces) {\n    if ({}.hasOwnProperty.call(ifaces, dev)) {\n      ifaces[dev].forEach(function (details) {\n        if (details && details.internal === false) {\n          ifacenameFirst = ifacenameFirst || dev; // fallback if no scopeid\n\n          if (details.scopeid && details.scopeid < scopeid) {\n            ifacename = dev;\n            scopeid = details.scopeid;\n          }\n        }\n      });\n    }\n  }\n\n  ifacename = ifacename || ifacenameFirst || '';\n\n  try {\n    if (_windows) {\n      // https://www.inetdaemon.com/tutorials/internet/ip/routing/default_route.shtml\n      let defaultIp = '';\n      const cmd = 'netstat -r';\n      const result = execSync(cmd);\n      const lines = result.toString().split(os.EOL);\n      lines.forEach(line => {\n        line = line.replace(/\\s+/g, ' ').trim();\n\n        if (line.indexOf('0.0.0.0 0.0.0.0') > -1 && !/[a-zA-Z]/.test(line)) {\n          const parts = line.split(' ');\n\n          if (parts.length >= 5) {\n            defaultIp = parts[parts.length - 2];\n          }\n        }\n      });\n\n      if (defaultIp) {\n        for (let dev in ifaces) {\n          if ({}.hasOwnProperty.call(ifaces, dev)) {\n            ifaces[dev].forEach(function (details) {\n              if (details && details.address && details.address === defaultIp) {\n                ifacename = dev;\n              }\n            });\n          }\n        }\n      }\n    }\n\n    if (_linux) {\n      let cmd = 'ip route 2> /dev/null | grep default';\n      let result = execSync(cmd);\n      let parts = result.toString().split('\\n')[0].split(/\\s+/);\n\n      if (parts[0] === 'none' && parts[5]) {\n        ifacename = parts[5];\n      } else if (parts[4]) {\n        ifacename = parts[4];\n      }\n\n      if (ifacename.indexOf(':') > -1) {\n        ifacename = ifacename.split(':')[1].trim();\n      }\n    }\n\n    if (_darwin || _freebsd || _openbsd || _netbsd || _sunos) {\n      let cmd = '';\n      if (_linux) cmd = 'ip route 2> /dev/null | grep default | awk \\'{print $5}\\'';\n      if (_darwin) cmd = 'route -n get default 2>/dev/null | grep interface: | awk \\'{print $2}\\'';\n      if (_freebsd || _openbsd || _netbsd || _sunos) cmd = 'route get 0.0.0.0 | grep interface:';\n      let result = execSync(cmd);\n      ifacename = result.toString().split('\\n')[0];\n\n      if (ifacename.indexOf(':') > -1) {\n        ifacename = ifacename.split(':')[1].trim();\n      }\n    }\n  } catch (e) {\n    util.noop();\n  }\n\n  if (ifacename) _default_iface = ifacename;\n  return _default_iface;\n}\n\nexports.getDefaultNetworkInterface = getDefaultNetworkInterface;\n\nfunction getMacAddresses() {\n  let iface = '';\n  let mac = '';\n  let result = {};\n\n  if (_linux || _freebsd || _openbsd || _netbsd) {\n    if (typeof pathToIp === 'undefined') {\n      try {\n        const lines = execSync('which ip').toString().split('\\n');\n\n        if (lines.length && lines[0].indexOf(':') === -1 && lines[0].indexOf('/') === 0) {\n          pathToIp = lines[0];\n        } else {\n          pathToIp = '';\n        }\n      } catch (e) {\n        pathToIp = '';\n      }\n    }\n\n    try {\n      const cmd = 'export LC_ALL=C; ' + (pathToIp ? pathToIp + ' link show up' : '/sbin/ifconfig') + '; unset LC_ALL';\n      let res = execSync(cmd);\n      const lines = res.toString().split('\\n');\n\n      for (let i = 0; i < lines.length; i++) {\n        if (lines[i] && lines[i][0] !== ' ') {\n          if (pathToIp) {\n            let nextline = lines[i + 1].trim().split(' ');\n\n            if (nextline[0] === 'link/ether') {\n              iface = lines[i].split(' ')[1];\n              iface = iface.slice(0, iface.length - 1);\n              mac = nextline[1];\n            }\n          } else {\n            iface = lines[i].split(' ')[0];\n            mac = lines[i].split('HWaddr ')[1];\n          }\n\n          if (iface && mac) {\n            result[iface] = mac.trim();\n            iface = '';\n            mac = '';\n          }\n        }\n      }\n    } catch (e) {\n      util.noop();\n    }\n  }\n\n  if (_darwin) {\n    try {\n      const cmd = '/sbin/ifconfig';\n      let res = execSync(cmd);\n      const lines = res.toString().split('\\n');\n\n      for (let i = 0; i < lines.length; i++) {\n        if (lines[i] && lines[i][0] !== '\\t' && lines[i].indexOf(':') > 0) {\n          iface = lines[i].split(':')[0];\n        } else if (lines[i].indexOf('\\tether ') === 0) {\n          mac = lines[i].split('\\tether ')[1];\n\n          if (iface && mac) {\n            result[iface] = mac.trim();\n            iface = '';\n            mac = '';\n          }\n        }\n      }\n    } catch (e) {\n      util.noop();\n    }\n  }\n\n  return result;\n}\n\nfunction networkInterfaceDefault(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = getDefaultNetworkInterface();\n\n      if (callback) {\n        callback(result);\n      }\n\n      resolve(result);\n    });\n  });\n}\n\nexports.networkInterfaceDefault = networkInterfaceDefault; // --------------------------\n// NET - interfaces\n\nfunction parseLinesWindowsNics(sections, nconfigsections) {\n  let nics = [];\n\n  for (let i in sections) {\n    if ({}.hasOwnProperty.call(sections, i)) {\n      if (sections[i].trim() !== '') {\n        let lines = sections[i].trim().split('\\r\\n');\n        let linesNicConfig = nconfigsections[i].trim().split('\\r\\n');\n        let netEnabled = util.getValue(lines, 'NetEnabled', '=');\n\n        if (netEnabled !== '') {\n          const speed = parseInt(util.getValue(lines, 'speed', '=').trim(), 10) / 1000000;\n          nics.push({\n            mac: util.getValue(lines, 'MACAddress', '=').toLowerCase(),\n            dhcp: util.getValue(linesNicConfig, 'dhcpEnabled', '=').toLowerCase(),\n            name: util.getValue(lines, 'Name', '=').replace(/\\]/g, ')').replace(/\\[/g, '('),\n            netEnabled: netEnabled === 'TRUE',\n            speed: isNaN(speed) ? -1 : speed,\n            operstate: util.getValue(lines, 'NetConnectionStatus', '=') === '2' ? 'up' : 'down',\n            type: util.getValue(lines, 'AdapterTypeID', '=') === '9' ? 'wireless' : 'wired'\n          });\n        }\n      }\n    }\n  }\n\n  return nics;\n}\n\nfunction getWindowsNics() {\n  const cmd = util.getWmic() + ' nic get MACAddress, name, NetEnabled, Speed, NetConnectionStatus, AdapterTypeId /value';\n  const cmdnicconfig = util.getWmic() + ' nicconfig get dhcpEnabled /value';\n\n  try {\n    const nsections = execSync(cmd, util.execOptsWin).split(/\\n\\s*\\n/);\n    const nconfigsections = execSync(cmdnicconfig, util.execOptsWin).split(/\\n\\s*\\n/);\n    return parseLinesWindowsNics(nsections, nconfigsections);\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction getWindowsDNSsuffixes() {\n  let iface = {};\n  let dnsSuffixes = {\n    primaryDNS: '',\n    exitCode: 0,\n    ifaces: []\n  };\n\n  try {\n    const ipconfig = execSync('ipconfig /all', util.execOptsWin);\n    const ipconfigArray = ipconfig.split('\\r\\n\\r\\n');\n    ipconfigArray.forEach((element, index) => {\n      if (index == 1) {\n        const longPrimaryDNS = element.split('\\r\\n').filter(element => {\n          return element.toUpperCase().includes('DNS');\n        });\n        const primaryDNS = longPrimaryDNS[0].substring(longPrimaryDNS[0].lastIndexOf(':') + 1);\n        dnsSuffixes.primaryDNS = primaryDNS.trim();\n        if (!dnsSuffixes.primaryDNS) dnsSuffixes.primaryDNS = 'Not defined';\n      }\n\n      if (index > 1) {\n        if (index % 2 == 0) {\n          const name = element.substring(element.lastIndexOf(' ') + 1).replace(':', '');\n          iface.name = name;\n        } else {\n          const connectionSpecificDNS = element.split('\\r\\n').filter(element => {\n            return element.toUpperCase().includes('DNS');\n          });\n          const dnsSuffix = connectionSpecificDNS[0].substring(connectionSpecificDNS[0].lastIndexOf(':') + 1);\n          iface.dnsSuffix = dnsSuffix.trim();\n          dnsSuffixes.ifaces.push(iface);\n          iface = {};\n        }\n      }\n    });\n    return dnsSuffixes;\n  } catch (error) {\n    // console.log('An error occurred trying to bring the Connection-specific DNS suffix', error.message);\n    return {\n      primaryDNS: '',\n      exitCode: 0,\n      ifaces: []\n    };\n  }\n}\n\nfunction getWindowsIfaceDNSsuffix(ifaces, ifacename) {\n  let dnsSuffix = ''; // Adding (.) to ensure ifacename compatibility when duplicated iface-names\n\n  const interfaceName = ifacename + '.';\n\n  try {\n    const connectionDnsSuffix = ifaces.filter(iface => {\n      return interfaceName.includes(iface.name + '.');\n    }).map(iface => iface.dnsSuffix);\n\n    if (connectionDnsSuffix[0]) {\n      dnsSuffix = connectionDnsSuffix[0];\n    }\n\n    if (!dnsSuffix) dnsSuffix = '';\n    return dnsSuffix;\n  } catch (error) {\n    // console.log('Error getting Connection-specific DNS suffix: ', error.message);\n    return 'Unknown';\n  }\n}\n\nfunction getWindowsWiredProfilesInformation() {\n  try {\n    const result = execSync('netsh lan show profiles', util.execOptsWin);\n    const profileList = result.split('\\r\\nProfile on interface');\n    return profileList;\n  } catch (error) {\n    if (error.status === 1 && error.stdout.includes('AutoConfig')) {\n      return 'Disabled';\n    }\n\n    return [];\n  }\n}\n\nfunction getWindowsWirelessIfaceSSID(interfaceName) {\n  try {\n    const result = execSync(`netsh wlan show  interface name=\"${interfaceName}\" | findstr \"SSID\"`, util.execOptsWin);\n    const SSID = result.split('\\r\\n').shift();\n    const parseSSID = SSID.split(':').pop();\n    return parseSSID;\n  } catch (error) {\n    return 'Unknown';\n  }\n}\n\nfunction getWindowsIEEE8021x(connectionType, iface, ifaces) {\n  let i8021x = {\n    state: 'Unknown',\n    protocol: 'Unknown'\n  };\n\n  if (ifaces === 'Disabled') {\n    i8021x.state = 'Disabled';\n    i8021x.protocol = 'Not defined';\n    return i8021x;\n  }\n\n  if (connectionType == 'wired' && ifaces.length > 0) {\n    try {\n      // Get 802.1x information by interface name\n      const iface8021xInfo = ifaces.find(element => {\n        return element.includes(iface + '\\r\\n');\n      });\n      const arrayIface8021xInfo = iface8021xInfo.split('\\r\\n');\n      const state8021x = arrayIface8021xInfo.find(element => {\n        return element.includes('802.1x');\n      });\n\n      if (state8021x.includes('Disabled')) {\n        i8021x.state = 'Disabled';\n        i8021x.protocol = 'Not defined';\n      } else if (state8021x.includes('Enabled')) {\n        const protocol8021x = arrayIface8021xInfo.find(element => {\n          return element.includes('EAP');\n        });\n        i8021x.protocol = protocol8021x.split(':').pop();\n        i8021x.state = 'Enabled';\n      }\n    } catch (error) {\n      // console.log('Error getting wired information:', error);\n      return i8021x;\n    }\n  } else if (connectionType == 'wireless') {\n    let i8021xState = '';\n    let i8021xProtocol = '';\n\n    try {\n      const SSID = getWindowsWirelessIfaceSSID(iface);\n\n      if (SSID !== 'Unknown') {\n        i8021xState = execSync(`netsh wlan show profiles \"${SSID}\" | findstr \"802.1X\"`, util.execOptsWin);\n        i8021xProtocol = execSync(`netsh wlan show profiles \"${SSID}\" | findstr \"EAP\"`, util.execOptsWin);\n      }\n\n      if (i8021xState.includes(':') && i8021xProtocol.includes(':')) {\n        i8021x.state = i8021xState.split(':').pop();\n        i8021x.protocol = i8021xProtocol.split(':').pop();\n      }\n    } catch (error) {\n      // console.log('Error getting wireless information:', error);\n      if (error.status === 1 && error.stdout.includes('AutoConfig')) {\n        i8021x.state = 'Disabled';\n        i8021x.protocol = 'Not defined';\n      }\n\n      return i8021x;\n    }\n  }\n\n  return i8021x;\n}\n\nfunction splitSectionsNics(lines) {\n  const result = [];\n  let section = [];\n  lines.forEach(function (line) {\n    if (!line.startsWith('\\t') && !line.startsWith(' ')) {\n      if (section.length) {\n        result.push(section);\n        section = [];\n      }\n    }\n\n    section.push(line);\n  });\n\n  if (section.length) {\n    result.push(section);\n  }\n\n  return result;\n}\n\nfunction parseLinesDarwinNics(sections) {\n  let nics = [];\n  sections.forEach(section => {\n    let nic = {\n      iface: '',\n      mtu: -1,\n      mac: '',\n      ip6: '',\n      ip4: '',\n      speed: -1,\n      type: '',\n      operstate: '',\n      duplex: '',\n      internal: false\n    };\n    const first = section[0];\n    nic.iface = first.split(':')[0].trim();\n    let parts = first.split('> mtu');\n    nic.mtu = parts.length > 1 ? parseInt(parts[1], 10) : -1;\n\n    if (isNaN(nic.mtu)) {\n      nic.mtu = -1;\n    }\n\n    nic.internal = parts[0].toLowerCase().indexOf('loopback') > -1;\n    section.forEach(line => {\n      if (line.trim().startsWith('ether ')) {\n        nic.mac = line.split('ether ')[1].toLowerCase().trim();\n      }\n\n      if (line.trim().startsWith('inet6 ') && !nic.ip6) {\n        nic.ip6 = line.split('inet6 ')[1].toLowerCase().split('%')[0].split(' ')[0];\n      }\n\n      if (line.trim().startsWith('inet ') && !nic.ip4) {\n        nic.ip4 = line.split('inet ')[1].toLowerCase().split(' ')[0];\n      }\n    });\n    let speed = util.getValue(section, 'link rate');\n    nic.speed = speed ? parseFloat(speed) : -1;\n\n    if (nic.speed === -1) {\n      speed = util.getValue(section, 'uplink rate');\n      nic.speed = speed ? parseFloat(speed) : -1;\n\n      if (nic.speed > -1 && speed.toLowerCase().indexOf('gbps') >= 0) {\n        nic.speed = nic.speed * 1000;\n      }\n    } else {\n      if (speed.toLowerCase().indexOf('gbps') >= 0) {\n        nic.speed = nic.speed * 1000;\n      }\n    }\n\n    nic.type = util.getValue(section, 'type').toLowerCase().indexOf('wi-fi') > -1 ? 'wireless' : 'wired';\n    nic.operstate = util.getValue(section, 'status').toLowerCase().indexOf('active') > -1 ? 'up' : 'down';\n    nic.duplex = util.getValue(section, 'media').toLowerCase().indexOf('half-duplex') > -1 ? 'half' : 'full';\n\n    if (nic.ip6 || nic.ip4 || nic.mac) {\n      nics.push(nic);\n    }\n  });\n  return nics;\n}\n\nfunction getDarwinNics() {\n  const cmd = '/sbin/ifconfig -v';\n\n  try {\n    const lines = execSync(cmd, {\n      maxBuffer: 1024 * 20000\n    }).toString().split('\\n');\n    const nsections = splitSectionsNics(lines);\n    return parseLinesDarwinNics(nsections);\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction getLinuxIfaceConnectionName(interfaceName) {\n  const cmd = `nmcli device status 2>/dev/null | grep ${interfaceName}`;\n\n  try {\n    const result = execSync(cmd).toString();\n    const resultFormat = result.replace(/\\s+/g, ' ').trim();\n    const connectionNameLines = resultFormat.split(' ').slice(3);\n    const connectionName = connectionNameLines.join(' ');\n    return connectionName != '--' ? connectionName : '';\n  } catch (e) {\n    return '';\n  }\n}\n\nfunction checkLinuxDCHPInterfaces(file) {\n  let result = [];\n\n  try {\n    let cmd = `cat ${file} 2> /dev/null | grep 'iface\\\\|source'`;\n    const lines = execSync(cmd, {\n      maxBuffer: 1024 * 20000\n    }).toString().split('\\n');\n    lines.forEach(line => {\n      const parts = line.replace(/\\s+/g, ' ').trim().split(' ');\n\n      if (parts.length >= 4) {\n        if (line.toLowerCase().indexOf(' inet ') >= 0 && line.toLowerCase().indexOf('dhcp') >= 0) {\n          result.push(parts[1]);\n        }\n      }\n\n      if (line.toLowerCase().includes('source')) {\n        let file = line.split(' ')[1];\n        result = result.concat(checkLinuxDCHPInterfaces(file));\n      }\n    });\n  } catch (e) {\n    util.noop();\n  }\n\n  return result;\n}\n\nfunction getLinuxDHCPNics() {\n  // alternate methods getting interfaces using DHCP\n  let cmd = 'ip a 2> /dev/null';\n  let result = [];\n\n  try {\n    const lines = execSync(cmd, {\n      maxBuffer: 1024 * 20000\n    }).toString().split('\\n');\n    const nsections = splitSectionsNics(lines);\n    result = parseLinuxDHCPNics(nsections);\n  } catch (e) {\n    util.noop();\n  }\n\n  try {\n    result = checkLinuxDCHPInterfaces('/etc/network/interfaces');\n  } catch (e) {\n    util.noop();\n  }\n\n  return result;\n}\n\nfunction parseLinuxDHCPNics(sections) {\n  const result = [];\n\n  if (sections && sections.length) {\n    sections.forEach(lines => {\n      if (lines && lines.length) {\n        const parts = lines[0].split(':');\n\n        if (parts.length > 2) {\n          for (let line of lines) {\n            if (line.indexOf(' inet ') >= 0 && line.indexOf(' dynamic ') >= 0) {\n              const parts2 = line.split(' ');\n              const nic = parts2[parts2.length - 1].trim();\n              result.push(nic);\n              break;\n            }\n          }\n        }\n      }\n    });\n  }\n\n  return result;\n}\n\nfunction getLinuxIfaceDHCPstatus(iface, connectionName, DHCPNics) {\n  let result = false;\n\n  if (connectionName) {\n    const cmd = `nmcli connection show \"${connectionName}\" 2>/dev/null \\| grep ipv4.method;`;\n\n    try {\n      const lines = execSync(cmd).toString();\n      const resultFormat = lines.replace(/\\s+/g, ' ').trim();\n      let dhcStatus = resultFormat.split(' ').slice(1).toString();\n\n      switch (dhcStatus) {\n        case 'auto':\n          result = true;\n          break;\n\n        default:\n          result = false;\n          break;\n      }\n\n      return result;\n    } catch (e) {\n      return DHCPNics.indexOf(iface) >= 0;\n    }\n  } else {\n    return DHCPNics.indexOf(iface) >= 0;\n  }\n}\n\nfunction getDarwinIfaceDHCPstatus(iface) {\n  let result = false;\n  const cmd = `ipconfig getpacket \"${iface}\" 2>/dev/null \\| grep lease_time;`;\n\n  try {\n    const lines = execSync(cmd).toString().split('\\n');\n\n    if (lines.length && lines[0].startsWith('lease_time')) {\n      result = true;\n    }\n  } catch (e) {\n    util.noop();\n  }\n\n  return result;\n}\n\nfunction getLinuxIfaceDNSsuffix(connectionName) {\n  if (connectionName) {\n    const cmd = `nmcli connection show \"${connectionName}\" 2>/dev/null \\| grep ipv4.dns-search;`;\n\n    try {\n      const result = execSync(cmd).toString();\n      const resultFormat = result.replace(/\\s+/g, ' ').trim();\n      const dnsSuffix = resultFormat.split(' ').slice(1).toString();\n      return dnsSuffix == '--' ? 'Not defined' : dnsSuffix;\n    } catch (e) {\n      return 'Unknown';\n    }\n  } else {\n    return 'Unknown';\n  }\n}\n\nfunction getLinuxIfaceIEEE8021xAuth(connectionName) {\n  if (connectionName) {\n    const cmd = `nmcli connection show \"${connectionName}\" 2>/dev/null \\| grep 802-1x.eap;`;\n\n    try {\n      const result = execSync(cmd).toString();\n      const resultFormat = result.replace(/\\s+/g, ' ').trim();\n      const authenticationProtocol = resultFormat.split(' ').slice(1).toString();\n      return authenticationProtocol == '--' ? '' : authenticationProtocol;\n    } catch (e) {\n      return 'Not defined';\n    }\n  } else {\n    return 'Not defined';\n  }\n}\n\nfunction getLinuxIfaceIEEE8021xState(authenticationProtocol) {\n  if (authenticationProtocol) {\n    if (authenticationProtocol == 'Not defined') {\n      return 'Disabled';\n    }\n\n    return 'Enabled';\n  } else {\n    return 'Unknown';\n  }\n}\n\nfunction testVirtualNic(iface, ifaceName, mac) {\n  const virtualMacs = ['00:00:00:00:00:00', '00:03:FF', '00:05:69', '00:0C:29', '00:0F:4B', '00:0F:4B', '00:13:07', '00:13:BE', '00:15:5d', '00:16:3E', '00:1C:42', '00:21:F6', '00:21:F6', '00:24:0B', '00:24:0B', '00:50:56', '00:A0:B1', '00:E0:C8', '08:00:27', '0A:00:27', '18:92:2C', '16:DF:49', '3C:F3:92', '54:52:00', 'FC:15:97'];\n\n  if (mac) {\n    return virtualMacs.filter(item => {\n      return mac.toUpperCase().toUpperCase().startsWith(item.substr(0, mac.length));\n    }).length > 0 || iface.toLowerCase().indexOf(' virtual ') > -1 || ifaceName.toLowerCase().indexOf(' virtual ') > -1 || iface.toLowerCase().indexOf('vethernet ') > -1 || ifaceName.toLowerCase().indexOf('vethernet ') > -1 || iface.toLowerCase().startsWith('veth') || ifaceName.toLowerCase().startsWith('veth') || iface.toLowerCase().startsWith('vboxnet') || ifaceName.toLowerCase().startsWith('vboxnet');\n  } else return false;\n}\n\nfunction networkInterfaces(callback, rescan = true) {\n  if (typeof callback === 'boolean') {\n    rescan = callback;\n    callback = null;\n  }\n\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let ifaces = os.networkInterfaces();\n      let result = [];\n      let nics = [];\n      let dnsSuffixes = [];\n      let nics8021xInfo = []; // seperate handling in OSX\n\n      if (_darwin || _freebsd || _openbsd || _netbsd) {\n        nics = getDarwinNics();\n        nics.forEach(nic => {\n          if ({}.hasOwnProperty.call(ifaces, nic.iface)) {\n            ifaces[nic.iface].forEach(function (details) {\n              if (details.family === 'IPv4') {\n                nic.ip4subnet = details.netmask;\n              }\n\n              if (details.family === 'IPv6') {\n                nic.ip6subnet = details.netmask;\n              }\n            });\n          }\n\n          result.push({\n            iface: nic.iface,\n            ifaceName: nic.iface,\n            ip4: nic.ip4,\n            ip4subnet: nic.ip4subnet || '',\n            ip6: nic.ip6,\n            ip6subnet: nic.ip6subnet || '',\n            mac: nic.mac,\n            internal: nic.internal,\n            virtual: nic.internal ? false : testVirtualNic(nic.iface, nic.iface, nic.mac),\n            operstate: nic.operstate,\n            type: nic.type,\n            duplex: nic.duplex,\n            mtu: nic.mtu,\n            speed: nic.speed,\n            dhcp: getDarwinIfaceDHCPstatus(nic.iface),\n            dnsSuffix: '',\n            ieee8021xAuth: '',\n            ieee8021xState: '',\n            carrierChanges: 0\n          });\n        });\n        _networkInterfaces = result;\n\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      } else {\n        if (JSON.stringify(ifaces) === JSON.stringify(_ifaces) && !rescan) {\n          // no changes - just return object\n          result = _networkInterfaces;\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        } else {\n          _ifaces = Object.assign({}, ifaces);\n\n          if (_windows) {\n            nics = getWindowsNics();\n            nics.forEach(nic => {\n              let found = false;\n              Object.keys(ifaces).forEach(key => {\n                if (!found) {\n                  ifaces[key].forEach(value => {\n                    if (Object.keys(value).indexOf('mac') >= 0) {\n                      found = value['mac'] === nic.mac;\n                    }\n                  });\n                }\n              });\n\n              if (!found) {\n                ifaces[nic.name] = [{\n                  mac: nic.mac\n                }];\n              }\n            });\n            nics8021xInfo = getWindowsWiredProfilesInformation();\n            dnsSuffixes = getWindowsDNSsuffixes();\n          }\n\n          if (_linux) {\n            _dhcpNics = getLinuxDHCPNics();\n          }\n\n          for (let dev in ifaces) {\n            let ip4 = '';\n            let ip4subnet = '';\n            let ip6 = '';\n            let ip6subnet = '';\n            let mac = '';\n            let duplex = '';\n            let mtu = '';\n            let speed = -1;\n            let carrierChanges = 0;\n            let operstate = 'down';\n            let dhcp = false;\n            let dnsSuffix = '';\n            let ieee8021xAuth = '';\n            let ieee8021xState = '';\n            let type = '';\n\n            if ({}.hasOwnProperty.call(ifaces, dev)) {\n              let ifaceName = dev;\n              ifaces[dev].forEach(function (details) {\n                if (details.family === 'IPv4') {\n                  ip4 = details.address;\n                  ip4subnet = details.netmask;\n                }\n\n                if (details.family === 'IPv6') {\n                  if (!ip6 || ip6.match(/^fe80::/i)) {\n                    ip6 = details.address;\n                    ip6subnet = details.netmask;\n                  }\n                }\n\n                mac = details.mac; // fallback due to https://github.com/nodejs/node/issues/13581 (node 8.1 - node 8.2)\n\n                if (mac.indexOf('00:00:0') > -1 && (_linux || _darwin) && parseInt(process.versions.node.split('.'), 10) === 8) {\n                  if (Object.keys(_mac).length === 0) {\n                    _mac = getMacAddresses();\n                  }\n\n                  mac = _mac[dev] || '';\n                }\n              });\n\n              if (_linux) {\n                let iface = dev.split(':')[0].trim().toLowerCase();\n                const cmd = `echo -n \"addr_assign_type: \"; cat /sys/class/net/${iface}/addr_assign_type 2>/dev/null; echo;\n            echo -n \"address: \"; cat /sys/class/net/${iface}/address 2>/dev/null; echo;\n            echo -n \"addr_len: \"; cat /sys/class/net/${iface}/addr_len 2>/dev/null; echo;\n            echo -n \"broadcast: \"; cat /sys/class/net/${iface}/broadcast 2>/dev/null; echo;\n            echo -n \"carrier: \"; cat /sys/class/net/${iface}/carrier 2>/dev/null; echo;\n            echo -n \"carrier_changes: \"; cat /sys/class/net/${iface}/carrier_changes 2>/dev/null; echo;\n            echo -n \"dev_id: \"; cat /sys/class/net/${iface}/dev_id 2>/dev/null; echo;\n            echo -n \"dev_port: \"; cat /sys/class/net/${iface}/dev_port 2>/dev/null; echo;\n            echo -n \"dormant: \"; cat /sys/class/net/${iface}/dormant 2>/dev/null; echo;\n            echo -n \"duplex: \"; cat /sys/class/net/${iface}/duplex 2>/dev/null; echo;\n            echo -n \"flags: \"; cat /sys/class/net/${iface}/flags 2>/dev/null; echo;\n            echo -n \"gro_flush_timeout: \"; cat /sys/class/net/${iface}/gro_flush_timeout 2>/dev/null; echo;\n            echo -n \"ifalias: \"; cat /sys/class/net/${iface}/ifalias 2>/dev/null; echo;\n            echo -n \"ifindex: \"; cat /sys/class/net/${iface}/ifindex 2>/dev/null; echo;\n            echo -n \"iflink: \"; cat /sys/class/net/${iface}/iflink 2>/dev/null; echo;\n            echo -n \"link_mode: \"; cat /sys/class/net/${iface}/link_mode 2>/dev/null; echo;\n            echo -n \"mtu: \"; cat /sys/class/net/${iface}/mtu 2>/dev/null; echo;\n            echo -n \"netdev_group: \"; cat /sys/class/net/${iface}/netdev_group 2>/dev/null; echo;\n            echo -n \"operstate: \"; cat /sys/class/net/${iface}/operstate 2>/dev/null; echo;\n            echo -n \"proto_down: \"; cat /sys/class/net/${iface}/proto_down 2>/dev/null; echo;\n            echo -n \"speed: \"; cat /sys/class/net/${iface}/speed 2>/dev/null; echo;\n            echo -n \"tx_queue_len: \"; cat /sys/class/net/${iface}/tx_queue_len 2>/dev/null; echo;\n            echo -n \"type: \"; cat /sys/class/net/${iface}/type 2>/dev/null; echo;\n            echo -n \"wireless: \"; cat /proc/net/wireless 2>/dev/null \\| grep ${iface}; echo;\n            echo -n \"wirelessspeed: \"; iw dev ${iface} link 2>&1 \\| grep bitrate; echo;`;\n                let lines = [];\n\n                try {\n                  lines = execSync(cmd).toString().split('\\n');\n                  const connectionName = getLinuxIfaceConnectionName(iface);\n                  dhcp = getLinuxIfaceDHCPstatus(iface, connectionName, _dhcpNics);\n                  dnsSuffix = getLinuxIfaceDNSsuffix(connectionName);\n                  ieee8021xAuth = getLinuxIfaceIEEE8021xAuth(connectionName);\n                  ieee8021xState = getLinuxIfaceIEEE8021xState(ieee8021xAuth);\n                } catch (e) {\n                  util.noop();\n                }\n\n                duplex = util.getValue(lines, 'duplex');\n                duplex = duplex.startsWith('cat') ? '' : duplex;\n                mtu = parseInt(util.getValue(lines, 'mtu'), 10);\n                let myspeed = parseInt(util.getValue(lines, 'speed'), 10);\n                speed = isNaN(myspeed) ? -1 : myspeed;\n                let wirelessspeed = util.getValue(lines, 'wirelessspeed').split('tx bitrate: ');\n\n                if (speed === -1 && wirelessspeed.length === 2) {\n                  myspeed = parseFloat(wirelessspeed[1]);\n                  speed = isNaN(myspeed) ? -1 : myspeed;\n                }\n\n                carrierChanges = parseInt(util.getValue(lines, 'carrier_changes'), 10);\n                operstate = util.getValue(lines, 'operstate');\n                type = operstate === 'up' ? util.getValue(lines, 'wireless').trim() ? 'wireless' : 'wired' : 'unknown';\n\n                if (iface === 'lo' || iface.startsWith('bond')) {\n                  type = 'virtual';\n                }\n              }\n\n              if (_windows) {\n                dnsSuffix = getWindowsIfaceDNSsuffix(dnsSuffixes.ifaces, dev);\n                nics.forEach(detail => {\n                  if (detail.mac === mac) {\n                    ifaceName = detail.name;\n                    dhcp = detail.dhcp;\n                    operstate = detail.operstate;\n                    speed = detail.speed;\n                    type = detail.type;\n                  }\n                });\n\n                if (dev.toLowerCase().indexOf('wlan') >= 0 || ifaceName.toLowerCase().indexOf('wlan') >= 0 || ifaceName.toLowerCase().indexOf('802.11n') >= 0 || ifaceName.toLowerCase().indexOf('wireless') >= 0 || ifaceName.toLowerCase().indexOf('wi-fi') >= 0 || ifaceName.toLowerCase().indexOf('wifi') >= 0) {\n                  type = 'wireless';\n                }\n\n                const IEEE8021x = getWindowsIEEE8021x(type, dev, nics8021xInfo);\n                ieee8021xAuth = IEEE8021x.protocol;\n                ieee8021xState = IEEE8021x.state;\n              }\n\n              let internal = ifaces[dev] && ifaces[dev][0] ? ifaces[dev][0].internal : false;\n\n              if (dev.toLowerCase().indexOf('loopback') > -1 || ifaceName.toLowerCase().indexOf('loopback') > -1) {\n                internal = true;\n              }\n\n              const virtual = internal ? false : testVirtualNic(dev, ifaceName, mac);\n              result.push({\n                iface: dev,\n                ifaceName,\n                ip4,\n                ip4subnet,\n                ip6,\n                ip6subnet,\n                mac,\n                internal,\n                virtual,\n                operstate,\n                type,\n                duplex,\n                mtu,\n                speed,\n                dhcp,\n                dnsSuffix,\n                ieee8021xAuth,\n                ieee8021xState,\n                carrierChanges\n              });\n            }\n          }\n\n          _networkInterfaces = result;\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.networkInterfaces = networkInterfaces; // --------------------------\n// NET - Speed\n\nfunction calcNetworkSpeed(iface, rx_bytes, tx_bytes, operstate, rx_dropped, rx_errors, tx_dropped, tx_errors) {\n  let result = {\n    iface,\n    operstate,\n    rx_bytes,\n    rx_dropped,\n    rx_errors,\n    tx_bytes,\n    tx_dropped,\n    tx_errors,\n    rx_sec: -1,\n    tx_sec: -1,\n    ms: 0\n  };\n\n  if (_network[iface] && _network[iface].ms) {\n    result.ms = Date.now() - _network[iface].ms;\n    result.rx_sec = rx_bytes - _network[iface].rx_bytes >= 0 ? (rx_bytes - _network[iface].rx_bytes) / (result.ms / 1000) : 0;\n    result.tx_sec = tx_bytes - _network[iface].tx_bytes >= 0 ? (tx_bytes - _network[iface].tx_bytes) / (result.ms / 1000) : 0;\n    _network[iface].rx_bytes = rx_bytes;\n    _network[iface].tx_bytes = tx_bytes;\n    _network[iface].rx_sec = result.rx_sec;\n    _network[iface].tx_sec = result.tx_sec;\n    _network[iface].ms = Date.now();\n    _network[iface].last_ms = result.ms;\n    _network[iface].operstate = operstate;\n  } else {\n    if (!_network[iface]) _network[iface] = {};\n    _network[iface].rx_bytes = rx_bytes;\n    _network[iface].tx_bytes = tx_bytes;\n    _network[iface].rx_sec = -1;\n    _network[iface].tx_sec = -1;\n    _network[iface].ms = Date.now();\n    _network[iface].last_ms = 0;\n    _network[iface].operstate = operstate;\n  }\n\n  return result;\n}\n\nfunction networkStats(ifaces, callback) {\n  let ifacesArray = []; // fallback - if only callback is given\n\n  if (util.isFunction(ifaces) && !callback) {\n    callback = ifaces;\n    ifacesArray = [getDefaultNetworkInterface()];\n  } else {\n    ifaces = ifaces || getDefaultNetworkInterface();\n    ifaces = ifaces.trim().toLowerCase().replace(/,+/g, '|');\n    ifacesArray = ifaces.split('|');\n  }\n\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      const result = [];\n      const workload = [];\n\n      if (ifacesArray.length && ifacesArray[0].trim() === '*') {\n        ifacesArray = [];\n        networkInterfaces(false).then(allIFaces => {\n          for (let iface of allIFaces) {\n            ifacesArray.push(iface.iface);\n          }\n\n          networkStats(ifacesArray.join(',')).then(result => {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        });\n      } else {\n        for (let iface of ifacesArray) {\n          workload.push(networkStatsSingle(iface.trim()));\n        }\n\n        if (workload.length) {\n          Promise.all(workload).then(data => {\n            if (callback) {\n              callback(data);\n            }\n\n            resolve(data);\n          });\n        } else {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nfunction networkStatsSingle(iface) {\n  function parseLinesWindowsPerfData(sections) {\n    let perfData = [];\n\n    for (let i in sections) {\n      if ({}.hasOwnProperty.call(sections, i)) {\n        if (sections[i].trim() !== '') {\n          let lines = sections[i].trim().split('\\r\\n');\n          perfData.push({\n            name: util.getValue(lines, 'Name', '=').replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase(),\n            rx_bytes: parseInt(util.getValue(lines, 'BytesReceivedPersec', '='), 10),\n            rx_errors: parseInt(util.getValue(lines, 'PacketsReceivedErrors', '='), 10),\n            rx_dropped: parseInt(util.getValue(lines, 'PacketsReceivedDiscarded', '='), 10),\n            tx_bytes: parseInt(util.getValue(lines, 'BytesSentPersec', '='), 10),\n            tx_errors: parseInt(util.getValue(lines, 'PacketsOutboundErrors', '='), 10),\n            tx_dropped: parseInt(util.getValue(lines, 'PacketsOutboundDiscarded', '='), 10)\n          });\n        }\n      }\n    }\n\n    return perfData;\n  }\n\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      const ifaceSanitized = util.sanitizeShellString(iface);\n      let result = {\n        iface: ifaceSanitized,\n        operstate: 'unknown',\n        rx_bytes: 0,\n        rx_dropped: 0,\n        rx_errors: 0,\n        tx_bytes: 0,\n        tx_dropped: 0,\n        tx_errors: 0,\n        rx_sec: -1,\n        tx_sec: -1,\n        ms: 0\n      };\n      let operstate = 'unknown';\n      let rx_bytes = 0;\n      let tx_bytes = 0;\n      let rx_dropped = 0;\n      let rx_errors = 0;\n      let tx_dropped = 0;\n      let tx_errors = 0;\n      let cmd, lines, stats;\n\n      if (!_network[ifaceSanitized] || _network[ifaceSanitized] && !_network[ifaceSanitized].ms || _network[ifaceSanitized] && _network[ifaceSanitized].ms && Date.now() - _network[ifaceSanitized].ms >= 500) {\n        if (_linux) {\n          if (fs.existsSync('/sys/class/net/' + ifaceSanitized)) {\n            cmd = 'cat /sys/class/net/' + ifaceSanitized + '/operstate; ' + 'cat /sys/class/net/' + ifaceSanitized + '/statistics/rx_bytes; ' + 'cat /sys/class/net/' + ifaceSanitized + '/statistics/tx_bytes; ' + 'cat /sys/class/net/' + ifaceSanitized + '/statistics/rx_dropped; ' + 'cat /sys/class/net/' + ifaceSanitized + '/statistics/rx_errors; ' + 'cat /sys/class/net/' + ifaceSanitized + '/statistics/tx_dropped; ' + 'cat /sys/class/net/' + ifaceSanitized + '/statistics/tx_errors; ';\n            exec(cmd, function (error, stdout) {\n              if (!error) {\n                lines = stdout.toString().split('\\n');\n                operstate = lines[0].trim();\n                rx_bytes = parseInt(lines[1], 10);\n                tx_bytes = parseInt(lines[2], 10);\n                rx_dropped = parseInt(lines[3], 10);\n                rx_errors = parseInt(lines[4], 10);\n                tx_dropped = parseInt(lines[5], 10);\n                tx_errors = parseInt(lines[6], 10);\n                result = calcNetworkSpeed(ifaceSanitized, rx_bytes, tx_bytes, operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n              }\n\n              resolve(result);\n            });\n          } else {\n            resolve(result);\n          }\n        }\n\n        if (_freebsd || _openbsd || _netbsd) {\n          cmd = 'netstat -ibndI ' + ifaceSanitized;\n          exec(cmd, function (error, stdout) {\n            if (!error) {\n              lines = stdout.toString().split('\\n');\n\n              for (let i = 1; i < lines.length; i++) {\n                const line = lines[i].replace(/ +/g, ' ').split(' ');\n\n                if (line && line[0] && line[7] && line[10]) {\n                  rx_bytes = rx_bytes + parseInt(line[7]);\n\n                  if (line[6].trim() !== '-') {\n                    rx_dropped = rx_dropped + parseInt(line[6]);\n                  }\n\n                  if (line[5].trim() !== '-') {\n                    rx_errors = rx_errors + parseInt(line[5]);\n                  }\n\n                  tx_bytes = tx_bytes + parseInt(line[10]);\n\n                  if (line[12].trim() !== '-') {\n                    tx_dropped = tx_dropped + parseInt(line[12]);\n                  }\n\n                  if (line[9].trim() !== '-') {\n                    tx_errors = tx_errors + parseInt(line[9]);\n                  }\n\n                  operstate = 'up';\n                }\n              }\n\n              result = calcNetworkSpeed(ifaceSanitized, rx_bytes, tx_bytes, operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n            }\n\n            resolve(result);\n          });\n        }\n\n        if (_darwin) {\n          cmd = 'ifconfig ' + ifaceSanitized + ' | grep \"status\"';\n          exec(cmd, function (error, stdout) {\n            result.operstate = (stdout.toString().split(':')[1] || '').trim();\n            result.operstate = (result.operstate || '').toLowerCase();\n            result.operstate = result.operstate === 'active' ? 'up' : result.operstate === 'inactive' ? 'down' : 'unknown';\n            cmd = 'netstat -bdI ' + ifaceSanitized;\n            exec(cmd, function (error, stdout) {\n              if (!error) {\n                lines = stdout.toString().split('\\n'); // if there is less than 2 lines, no information for this interface was found\n\n                if (lines.length > 1 && lines[1].trim() !== '') {\n                  // skip header line\n                  // use the second line because it is tied to the NIC instead of the ipv4 or ipv6 address\n                  stats = lines[1].replace(/ +/g, ' ').split(' ');\n                  rx_bytes = parseInt(stats[6]);\n                  rx_dropped = parseInt(stats[11]);\n                  rx_errors = parseInt(stats[5]);\n                  tx_bytes = parseInt(stats[9]);\n                  tx_dropped = parseInt(stats[11]);\n                  tx_errors = parseInt(stats[8]);\n                  result = calcNetworkSpeed(ifaceSanitized, rx_bytes, tx_bytes, result.operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n                }\n              }\n\n              resolve(result);\n            });\n          });\n        }\n\n        if (_windows) {\n          let perfData = [];\n          let ifaceName = ifaceSanitized; // Performance Data\n\n          util.wmic('path Win32_PerfRawData_Tcpip_NetworkInterface Get name,BytesReceivedPersec,BytesSentPersec,BytesTotalPersec,PacketsOutboundDiscarded,PacketsOutboundErrors,PacketsReceivedDiscarded,PacketsReceivedErrors /value').then((stdout, error) => {\n            if (!error) {\n              const psections = stdout.toString().split(/\\n\\s*\\n/);\n              perfData = parseLinesWindowsPerfData(psections);\n            } // Network Interfaces\n\n\n            networkInterfaces(false).then(interfaces => {\n              // get bytes sent, received from perfData by name\n              rx_bytes = 0;\n              tx_bytes = 0;\n              perfData.forEach(detail => {\n                interfaces.forEach(det => {\n                  if ((det.iface.toLowerCase() === ifaceSanitized.toLowerCase() || det.mac.toLowerCase() === ifaceSanitized.toLowerCase() || det.ip4.toLowerCase() === ifaceSanitized.toLowerCase() || det.ip6.toLowerCase() === ifaceSanitized.toLowerCase() || det.ifaceName.replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase() === ifaceSanitized.replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase()) && det.ifaceName.replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase() === detail.name) {\n                    ifaceName = det.iface;\n                    rx_bytes = detail.rx_bytes;\n                    rx_dropped = detail.rx_dropped;\n                    rx_errors = detail.rx_errors;\n                    tx_bytes = detail.tx_bytes;\n                    tx_dropped = detail.tx_dropped;\n                    tx_errors = detail.tx_errors;\n                    operstate = det.operstate;\n                  }\n                });\n              });\n\n              if (rx_bytes && tx_bytes) {\n                result = calcNetworkSpeed(ifaceName, parseInt(rx_bytes), parseInt(tx_bytes), operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n              }\n\n              resolve(result);\n            });\n          });\n        }\n      } else {\n        result.rx_bytes = _network[ifaceSanitized].rx_bytes;\n        result.tx_bytes = _network[ifaceSanitized].tx_bytes;\n        result.rx_sec = _network[ifaceSanitized].rx_sec;\n        result.tx_sec = _network[ifaceSanitized].tx_sec;\n        result.ms = _network[ifaceSanitized].last_ms;\n        result.operstate = _network[ifaceSanitized].operstate;\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.networkStats = networkStats; // --------------------------\n// NET - connections (sockets)\n\nfunction networkConnections(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = [];\n\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        let cmd = 'export LC_ALL=C; netstat -tunap | grep \"ESTABLISHED\\\\|SYN_SENT\\\\|SYN_RECV\\\\|FIN_WAIT1\\\\|FIN_WAIT2\\\\|TIME_WAIT\\\\|CLOSE\\\\|CLOSE_WAIT\\\\|LAST_ACK\\\\|LISTEN\\\\|CLOSING\\\\|UNKNOWN\"; unset LC_ALL';\n        if (_freebsd || _openbsd || _netbsd) cmd = 'export LC_ALL=C; netstat -na | grep \"ESTABLISHED\\\\|SYN_SENT\\\\|SYN_RECV\\\\|FIN_WAIT1\\\\|FIN_WAIT2\\\\|TIME_WAIT\\\\|CLOSE\\\\|CLOSE_WAIT\\\\|LAST_ACK\\\\|LISTEN\\\\|CLOSING\\\\|UNKNOWN\"; unset LC_ALL';\n        exec(cmd, {\n          maxBuffer: 1024 * 20000\n        }, function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n\n          if (!error && (lines.length > 1 || lines[0] != '')) {\n            lines.forEach(function (line) {\n              line = line.replace(/ +/g, ' ').split(' ');\n\n              if (line.length >= 7) {\n                let localip = line[3];\n                let localport = '';\n                let localaddress = line[3].split(':');\n\n                if (localaddress.length > 1) {\n                  localport = localaddress[localaddress.length - 1];\n                  localaddress.pop();\n                  localip = localaddress.join(':');\n                }\n\n                let peerip = line[4];\n                let peerport = '';\n                let peeraddress = line[4].split(':');\n\n                if (peeraddress.length > 1) {\n                  peerport = peeraddress[peeraddress.length - 1];\n                  peeraddress.pop();\n                  peerip = peeraddress.join(':');\n                }\n\n                let connstate = line[5]; // if (connstate === 'VERBUNDEN') connstate = 'ESTABLISHED';\n\n                let proc = line[6].split('/');\n\n                if (connstate) {\n                  result.push({\n                    protocol: line[0],\n                    localaddress: localip,\n                    localport: localport,\n                    peeraddress: peerip,\n                    peerport: peerport,\n                    state: connstate,\n                    pid: proc[0] && proc[0] !== '-' ? parseInt(proc[0], 10) : -1,\n                    process: proc[1] ? proc[1].split(' ')[0] : ''\n                  });\n                }\n              }\n            });\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          } else {\n            cmd = 'ss -tunap | grep \"ESTAB\\\\|SYN-SENT\\\\|SYN-RECV\\\\|FIN-WAIT1\\\\|FIN-WAIT2\\\\|TIME-WAIT\\\\|CLOSE\\\\|CLOSE-WAIT\\\\|LAST-ACK\\\\|LISTEN\\\\|CLOSING\"';\n            exec(cmd, {\n              maxBuffer: 1024 * 20000\n            }, function (error, stdout) {\n              if (!error) {\n                let lines = stdout.toString().split('\\n');\n                lines.forEach(function (line) {\n                  line = line.replace(/ +/g, ' ').split(' ');\n\n                  if (line.length >= 6) {\n                    let localip = line[4];\n                    let localport = '';\n                    let localaddress = line[4].split(':');\n\n                    if (localaddress.length > 1) {\n                      localport = localaddress[localaddress.length - 1];\n                      localaddress.pop();\n                      localip = localaddress.join(':');\n                    }\n\n                    let peerip = line[5];\n                    let peerport = '';\n                    let peeraddress = line[5].split(':');\n\n                    if (peeraddress.length > 1) {\n                      peerport = peeraddress[peeraddress.length - 1];\n                      peeraddress.pop();\n                      peerip = peeraddress.join(':');\n                    }\n\n                    let connstate = line[1];\n                    if (connstate === 'ESTAB') connstate = 'ESTABLISHED';\n                    if (connstate === 'TIME-WAIT') connstate = 'TIME_WAIT';\n                    let pid = -1;\n                    let process = '';\n\n                    if (line.length >= 7 && line[6].indexOf('users:') > -1) {\n                      let proc = line[6].replace('users:((\"', '').replace(/\"/g, '').split(',');\n\n                      if (proc.length > 2) {\n                        process = proc[0].split(' ')[0];\n                        pid = parseInt(proc[1], 10);\n                      }\n                    }\n\n                    if (connstate) {\n                      result.push({\n                        protocol: line[0],\n                        localaddress: localip,\n                        localport: localport,\n                        peeraddress: peerip,\n                        peerport: peerport,\n                        state: connstate,\n                        pid,\n                        process\n                      });\n                    }\n                  }\n                });\n              }\n\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            });\n          }\n        });\n      }\n\n      if (_darwin) {\n        let cmd = 'netstat -natv | grep \"ESTABLISHED\\\\|SYN_SENT\\\\|SYN_RECV\\\\|FIN_WAIT1\\\\|FIN_WAIT2\\\\|TIME_WAIT\\\\|CLOSE\\\\|CLOSE_WAIT\\\\|LAST_ACK\\\\|LISTEN\\\\|CLOSING\\\\|UNKNOWN\"';\n        exec(cmd, {\n          maxBuffer: 1024 * 20000\n        }, function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            lines.forEach(function (line) {\n              line = line.replace(/ +/g, ' ').split(' ');\n\n              if (line.length >= 8) {\n                let localip = line[3];\n                let localport = '';\n                let localaddress = line[3].split('.');\n\n                if (localaddress.length > 1) {\n                  localport = localaddress[localaddress.length - 1];\n                  localaddress.pop();\n                  localip = localaddress.join('.');\n                }\n\n                let peerip = line[4];\n                let peerport = '';\n                let peeraddress = line[4].split('.');\n\n                if (peeraddress.length > 1) {\n                  peerport = peeraddress[peeraddress.length - 1];\n                  peeraddress.pop();\n                  peerip = peeraddress.join('.');\n                }\n\n                let connstate = line[5];\n                let pid = parseInt(line[8], 10);\n\n                if (connstate) {\n                  result.push({\n                    protocol: line[0],\n                    localaddress: localip,\n                    localport: localport,\n                    peeraddress: peerip,\n                    peerport: peerport,\n                    state: connstate,\n                    pid: pid,\n                    process: ''\n                  });\n                }\n              }\n            });\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        });\n      }\n\n      if (_windows) {\n        let cmd = 'netstat -nao';\n\n        try {\n          exec(cmd, util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\r\\n');\n              lines.forEach(function (line) {\n                line = line.trim().replace(/ +/g, ' ').split(' ');\n\n                if (line.length >= 4) {\n                  let localip = line[1];\n                  let localport = '';\n                  let localaddress = line[1].split(':');\n\n                  if (localaddress.length > 1) {\n                    localport = localaddress[localaddress.length - 1];\n                    localaddress.pop();\n                    localip = localaddress.join(':');\n                  }\n\n                  let peerip = line[2];\n                  let peerport = '';\n                  let peeraddress = line[2].split(':');\n\n                  if (peeraddress.length > 1) {\n                    peerport = peeraddress[peeraddress.length - 1];\n                    peeraddress.pop();\n                    peerip = peeraddress.join(':');\n                  }\n\n                  let pid = line[4];\n                  let connstate = line[3];\n                  if (connstate === 'HERGESTELLT') connstate = 'ESTABLISHED';\n                  if (connstate.startsWith('ABH')) connstate = 'LISTEN';\n                  if (connstate === 'SCHLIESSEN_WARTEN') connstate = 'CLOSE_WAIT';\n                  if (connstate === 'WARTEND') connstate = 'TIME_WAIT';\n                  if (connstate === 'SYN_GESENDET') connstate = 'SYN_SENT';\n                  if (connstate === 'LISTENING') connstate = 'LISTEN';\n                  if (connstate === 'SYN_RECEIVED') connstate = 'SYN_RECV';\n                  if (connstate === 'FIN_WAIT_1') connstate = 'FIN_WAIT1';\n                  if (connstate === 'FIN_WAIT_2') connstate = 'FIN_WAIT2';\n\n                  if (connstate) {\n                    result.push({\n                      protocol: line[0].toLowerCase(),\n                      localaddress: localip,\n                      localport: localport,\n                      peeraddress: peerip,\n                      peerport: peerport,\n                      state: connstate,\n                      pid,\n                      process: ''\n                    });\n                  }\n                }\n              });\n\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.networkConnections = networkConnections;\n\nfunction networkGatewayDefault(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = '';\n\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        let cmd = 'ip route get 1';\n\n        try {\n          exec(cmd, {\n            maxBuffer: 1024 * 20000\n          }, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              const line = lines && lines[0] ? lines[0] : '';\n              let parts = line.split(' via ');\n\n              if (parts && parts[1]) {\n                parts = parts[1].split(' ');\n                result = parts[0];\n              }\n\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            } else {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n\n      if (_darwin) {\n        let cmd = 'route -n get default';\n\n        try {\n          exec(cmd, {\n            maxBuffer: 1024 * 20000\n          }, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n').map(line => line.trim());\n              result = util.getValue(lines, 'gateway');\n\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            } else {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n\n      if (_windows) {\n        try {\n          exec('netstat -r', util.execOptsWin, function (error, stdout) {\n            const lines = stdout.toString().split(os.EOL);\n            lines.forEach(line => {\n              line = line.replace(/\\s+/g, ' ').trim();\n\n              if (line.indexOf('0.0.0.0 0.0.0.0') > -1 && !/[a-zA-Z]/.test(line)) {\n                const parts = line.split(' ');\n\n                if (parts.length >= 5 && parts[parts.length - 3].indexOf('.') > -1) {\n                  result = parts[parts.length - 3];\n                }\n              }\n            });\n\n            if (!result) {\n              util.powerShell('Get-CimInstance -ClassName Win32_IP4RouteTable | Where-Object { $_.Destination -eq \\'0.0.0.0\\' -and $_.Mask -eq \\'0.0.0.0\\' }').then(data => {\n                let lines = data.toString().split('\\r\\n');\n\n                if (lines.length > 1 && !result) {\n                  result = util.getValue(lines, 'NextHop');\n\n                  if (callback) {\n                    callback(result);\n                  }\n\n                  resolve(result); // } else {\n                  //   exec('ipconfig', util.execOptsWin, function (error, stdout) {\n                  //     let lines = stdout.toString().split('\\r\\n');\n                  //     lines.forEach(function (line) {\n                  //       line = line.trim().replace(/\\. /g, '');\n                  //       line = line.trim().replace(/ +/g, '');\n                  //       const parts = line.split(':');\n                  //       if ((parts[0].toLowerCase().startsWith('standardgate') || parts[0].toLowerCase().indexOf('gateway') > -1 || parts[0].toLowerCase().indexOf('enlace') > -1) && parts[1]) {\n                  //         result = parts[1];\n                  //       }\n                  //     });\n                  //     if (callback) { callback(result); }\n                  //     resolve(result);\n                  //   });\n                }\n              });\n            } else {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.networkGatewayDefault = networkGatewayDefault;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/network.js"],"names":["os","require","exec","execSync","fs","util","_platform","process","platform","_linux","_darwin","_windows","_freebsd","_openbsd","_netbsd","_sunos","_network","_default_iface","_ifaces","_dhcpNics","_networkInterfaces","_mac","pathToIp","getDefaultNetworkInterface","ifaces","networkInterfaces","ifacename","ifacenameFirst","scopeid","dev","hasOwnProperty","call","forEach","details","internal","defaultIp","cmd","result","lines","toString","split","EOL","line","replace","trim","indexOf","test","parts","length","address","e","noop","exports","getMacAddresses","iface","mac","res","i","nextline","slice","networkInterfaceDefault","callback","Promise","resolve","nextTick","parseLinesWindowsNics","sections","nconfigsections","nics","linesNicConfig","netEnabled","getValue","speed","parseInt","push","toLowerCase","dhcp","name","isNaN","operstate","type","getWindowsNics","getWmic","cmdnicconfig","nsections","execOptsWin","getWindowsDNSsuffixes","dnsSuffixes","primaryDNS","exitCode","ipconfig","ipconfigArray","element","index","longPrimaryDNS","filter","toUpperCase","includes","substring","lastIndexOf","connectionSpecificDNS","dnsSuffix","error","getWindowsIfaceDNSsuffix","interfaceName","connectionDnsSuffix","map","getWindowsWiredProfilesInformation","profileList","status","stdout","getWindowsWirelessIfaceSSID","SSID","shift","parseSSID","pop","getWindowsIEEE8021x","connectionType","i8021x","state","protocol","iface8021xInfo","find","arrayIface8021xInfo","state8021x","protocol8021x","i8021xState","i8021xProtocol","splitSectionsNics","section","startsWith","parseLinesDarwinNics","nic","mtu","ip6","ip4","duplex","first","parseFloat","getDarwinNics","maxBuffer","getLinuxIfaceConnectionName","resultFormat","connectionNameLines","connectionName","join","checkLinuxDCHPInterfaces","file","concat","getLinuxDHCPNics","parseLinuxDHCPNics","parts2","getLinuxIfaceDHCPstatus","DHCPNics","dhcStatus","getDarwinIfaceDHCPstatus","getLinuxIfaceDNSsuffix","getLinuxIfaceIEEE8021xAuth","authenticationProtocol","getLinuxIfaceIEEE8021xState","testVirtualNic","ifaceName","virtualMacs","item","substr","rescan","nics8021xInfo","family","ip4subnet","netmask","ip6subnet","virtual","ieee8021xAuth","ieee8021xState","carrierChanges","JSON","stringify","Object","assign","found","keys","key","value","match","versions","node","myspeed","wirelessspeed","detail","IEEE8021x","calcNetworkSpeed","rx_bytes","tx_bytes","rx_dropped","rx_errors","tx_dropped","tx_errors","rx_sec","tx_sec","ms","Date","now","last_ms","networkStats","ifacesArray","isFunction","workload","then","allIFaces","networkStatsSingle","all","data","parseLinesWindowsPerfData","perfData","ifaceSanitized","sanitizeShellString","stats","existsSync","wmic","psections","interfaces","det","networkConnections","localip","localport","localaddress","peerip","peerport","peeraddress","connstate","proc","pid","networkGatewayDefault","powerShell"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// network.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 9. Network\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst exec = require('child_process').exec;\nconst execSync = require('child_process').execSync;\nconst fs = require('fs');\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nlet _network = {};\nlet _default_iface = '';\nlet _ifaces = {};\nlet _dhcpNics = [];\nlet _networkInterfaces = [];\nlet _mac = {};\nlet pathToIp;\n\nfunction getDefaultNetworkInterface() {\n\n  let ifaces = os.networkInterfaces();\n  let ifacename = '';\n  let ifacenameFirst = '';\n\n  let scopeid = 9999;\n\n  // fallback - \"first\" external interface (sorted by scopeid)\n  for (let dev in ifaces) {\n    if ({}.hasOwnProperty.call(ifaces, dev)) {\n      ifaces[dev].forEach(function (details) {\n        if (details && details.internal === false) {\n          ifacenameFirst = ifacenameFirst || dev; // fallback if no scopeid\n          if (details.scopeid && details.scopeid < scopeid) {\n            ifacename = dev;\n            scopeid = details.scopeid;\n          }\n        }\n      });\n    }\n  }\n  ifacename = ifacename || ifacenameFirst || '';\n\n  try {\n    if (_windows) {\n      // https://www.inetdaemon.com/tutorials/internet/ip/routing/default_route.shtml\n      let defaultIp = '';\n      const cmd = 'netstat -r';\n      const result = execSync(cmd);\n      const lines = result.toString().split(os.EOL);\n      lines.forEach(line => {\n        line = line.replace(/\\s+/g, ' ').trim();\n        if (line.indexOf('0.0.0.0 0.0.0.0') > -1 && !(/[a-zA-Z]/.test(line))) {\n          const parts = line.split(' ');\n          if (parts.length >= 5) {\n            defaultIp = parts[parts.length - 2];\n          }\n        }\n      });\n      if (defaultIp) {\n        for (let dev in ifaces) {\n          if ({}.hasOwnProperty.call(ifaces, dev)) {\n            ifaces[dev].forEach(function (details) {\n              if (details && details.address && details.address === defaultIp) {\n                ifacename = dev;\n              }\n            });\n          }\n        }\n      }\n    }\n    if (_linux) {\n      let cmd = 'ip route 2> /dev/null | grep default';\n      let result = execSync(cmd);\n      let parts = result.toString().split('\\n')[0].split(/\\s+/);\n      if (parts[0] === 'none' && parts[5]) {\n        ifacename = parts[5];\n      } else if (parts[4]) {\n        ifacename = parts[4];\n      }\n\n      if (ifacename.indexOf(':') > -1) {\n        ifacename = ifacename.split(':')[1].trim();\n      }\n    }\n    if (_darwin || _freebsd || _openbsd || _netbsd || _sunos) {\n      let cmd = '';\n      if (_linux) cmd = 'ip route 2> /dev/null | grep default | awk \\'{print $5}\\'';\n      if (_darwin) cmd = 'route -n get default 2>/dev/null | grep interface: | awk \\'{print $2}\\'';\n      if (_freebsd || _openbsd || _netbsd || _sunos) cmd = 'route get 0.0.0.0 | grep interface:';\n      let result = execSync(cmd);\n      ifacename = result.toString().split('\\n')[0];\n      if (ifacename.indexOf(':') > -1) {\n        ifacename = ifacename.split(':')[1].trim();\n      }\n    }\n  } catch (e) {\n    util.noop();\n  }\n  if (ifacename) _default_iface = ifacename;\n  return _default_iface;\n}\n\nexports.getDefaultNetworkInterface = getDefaultNetworkInterface;\n\nfunction getMacAddresses() {\n  let iface = '';\n  let mac = '';\n  let result = {};\n  if (_linux || _freebsd || _openbsd || _netbsd) {\n    if (typeof pathToIp === 'undefined') {\n      try {\n        const lines = execSync('which ip').toString().split('\\n');\n        if (lines.length && lines[0].indexOf(':') === -1 && lines[0].indexOf('/') === 0) {\n          pathToIp = lines[0];\n        } else {\n          pathToIp = '';\n        }\n      } catch (e) {\n        pathToIp = '';\n      }\n    }\n    try {\n      const cmd = 'export LC_ALL=C; ' + ((pathToIp) ? pathToIp + ' link show up' : '/sbin/ifconfig') + '; unset LC_ALL';\n      let res = execSync(cmd);\n      const lines = res.toString().split('\\n');\n      for (let i = 0; i < lines.length; i++) {\n        if (lines[i] && lines[i][0] !== ' ') {\n          if (pathToIp) {\n            let nextline = lines[i + 1].trim().split(' ');\n            if (nextline[0] === 'link/ether') {\n              iface = lines[i].split(' ')[1];\n              iface = iface.slice(0, iface.length - 1);\n              mac = nextline[1];\n            }\n          } else {\n            iface = lines[i].split(' ')[0];\n            mac = lines[i].split('HWaddr ')[1];\n          }\n\n          if (iface && mac) {\n            result[iface] = mac.trim();\n            iface = '';\n            mac = '';\n          }\n        }\n      }\n    } catch (e) {\n      util.noop();\n    }\n  }\n  if (_darwin) {\n    try {\n      const cmd = '/sbin/ifconfig';\n      let res = execSync(cmd);\n      const lines = res.toString().split('\\n');\n      for (let i = 0; i < lines.length; i++) {\n        if (lines[i] && lines[i][0] !== '\\t' && lines[i].indexOf(':') > 0) {\n          iface = lines[i].split(':')[0];\n        } else if (lines[i].indexOf('\\tether ') === 0) {\n          mac = lines[i].split('\\tether ')[1];\n          if (iface && mac) {\n            result[iface] = mac.trim();\n            iface = '';\n            mac = '';\n          }\n        }\n      }\n    } catch (e) {\n      util.noop();\n    }\n  }\n  return result;\n}\n\nfunction networkInterfaceDefault(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = getDefaultNetworkInterface();\n      if (callback) { callback(result); }\n      resolve(result);\n    });\n  });\n}\n\nexports.networkInterfaceDefault = networkInterfaceDefault;\n\n// --------------------------\n// NET - interfaces\n\nfunction parseLinesWindowsNics(sections, nconfigsections) {\n  let nics = [];\n  for (let i in sections) {\n    if ({}.hasOwnProperty.call(sections, i)) {\n\n      if (sections[i].trim() !== '') {\n\n        let lines = sections[i].trim().split('\\r\\n');\n        let linesNicConfig = nconfigsections[i].trim().split('\\r\\n');\n        let netEnabled = util.getValue(lines, 'NetEnabled', '=');\n\n        if (netEnabled !== '') {\n          const speed = parseInt(util.getValue(lines, 'speed', '=').trim(), 10) / 1000000;\n          nics.push({\n            mac: util.getValue(lines, 'MACAddress', '=').toLowerCase(),\n            dhcp: util.getValue(linesNicConfig, 'dhcpEnabled', '=').toLowerCase(),\n            name: util.getValue(lines, 'Name', '=').replace(/\\]/g, ')').replace(/\\[/g, '('),\n            netEnabled: netEnabled === 'TRUE',\n            speed: isNaN(speed) ? -1 : speed,\n            operstate: util.getValue(lines, 'NetConnectionStatus', '=') === '2' ? 'up' : 'down',\n            type: util.getValue(lines, 'AdapterTypeID', '=') === '9' ? 'wireless' : 'wired'\n          });\n        }\n      }\n    }\n  }\n  return nics;\n}\n\nfunction getWindowsNics() {\n  const cmd = util.getWmic() + ' nic get MACAddress, name, NetEnabled, Speed, NetConnectionStatus, AdapterTypeId /value';\n  const cmdnicconfig = util.getWmic() + ' nicconfig get dhcpEnabled /value';\n  try {\n    const nsections = execSync(cmd, util.execOptsWin).split(/\\n\\s*\\n/);\n    const nconfigsections = execSync(cmdnicconfig, util.execOptsWin).split(/\\n\\s*\\n/);\n    return (parseLinesWindowsNics(nsections, nconfigsections));\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction getWindowsDNSsuffixes() {\n\n  let iface = {};\n\n  let dnsSuffixes = {\n    primaryDNS: '',\n    exitCode: 0,\n    ifaces: [],\n  };\n\n  try {\n    const ipconfig = execSync('ipconfig /all', util.execOptsWin);\n    const ipconfigArray = ipconfig.split('\\r\\n\\r\\n');\n\n    ipconfigArray.forEach((element, index) => {\n\n      if (index == 1) {\n        const longPrimaryDNS = element.split('\\r\\n').filter((element) => {\n          return element.toUpperCase().includes('DNS');\n        });\n        const primaryDNS = longPrimaryDNS[0].substring(longPrimaryDNS[0].lastIndexOf(':') + 1);\n        dnsSuffixes.primaryDNS = primaryDNS.trim();\n        if (!dnsSuffixes.primaryDNS) dnsSuffixes.primaryDNS = 'Not defined';\n      }\n      if (index > 1) {\n        if (index % 2 == 0) {\n          const name = element.substring(element.lastIndexOf(' ') + 1).replace(':', '');\n          iface.name = name;\n        } else {\n          const connectionSpecificDNS = element.split('\\r\\n').filter((element) => {\n            return element.toUpperCase().includes('DNS');\n          });\n          const dnsSuffix = connectionSpecificDNS[0].substring(connectionSpecificDNS[0].lastIndexOf(':') + 1);\n          iface.dnsSuffix = dnsSuffix.trim();\n          dnsSuffixes.ifaces.push(iface);\n          iface = {};\n        }\n      }\n    });\n\n    return dnsSuffixes;\n  } catch (error) {\n    // console.log('An error occurred trying to bring the Connection-specific DNS suffix', error.message);\n    return {\n      primaryDNS: '',\n      exitCode: 0,\n      ifaces: [],\n    };\n  }\n}\n\nfunction getWindowsIfaceDNSsuffix(ifaces, ifacename) {\n  let dnsSuffix = '';\n  // Adding (.) to ensure ifacename compatibility when duplicated iface-names\n  const interfaceName = ifacename + '.';\n  try {\n    const connectionDnsSuffix = ifaces.filter((iface) => {\n      return interfaceName.includes(iface.name + '.');\n    }).map((iface) => iface.dnsSuffix);\n    if (connectionDnsSuffix[0]) {\n      dnsSuffix = connectionDnsSuffix[0];\n    }\n    if (!dnsSuffix) dnsSuffix = '';\n    return dnsSuffix;\n  } catch (error) {\n    // console.log('Error getting Connection-specific DNS suffix: ', error.message);\n    return 'Unknown';\n  }\n}\n\nfunction getWindowsWiredProfilesInformation() {\n  try {\n    const result = execSync('netsh lan show profiles', util.execOptsWin);\n    const profileList = result.split('\\r\\nProfile on interface');\n    return profileList;\n  } catch (error) {\n    if (error.status === 1 && error.stdout.includes('AutoConfig')) {\n      return 'Disabled';\n    }\n    return [];\n  }\n}\n\nfunction getWindowsWirelessIfaceSSID(interfaceName) {\n  try {\n    const result = execSync(`netsh wlan show  interface name=\"${interfaceName}\" | findstr \"SSID\"`, util.execOptsWin);\n    const SSID = result.split('\\r\\n').shift();\n    const parseSSID = SSID.split(':').pop();\n    return parseSSID;\n  } catch (error) {\n    return 'Unknown';\n  }\n}\nfunction getWindowsIEEE8021x(connectionType, iface, ifaces) {\n  let i8021x = {\n    state: 'Unknown',\n    protocol: 'Unknown',\n  };\n\n  if (ifaces === 'Disabled') {\n    i8021x.state = 'Disabled';\n    i8021x.protocol = 'Not defined';\n    return i8021x;\n  }\n\n  if (connectionType == 'wired' && ifaces.length > 0) {\n    try {\n      // Get 802.1x information by interface name\n      const iface8021xInfo = ifaces.find((element) => {\n        return element.includes(iface + '\\r\\n');\n      });\n      const arrayIface8021xInfo = iface8021xInfo.split('\\r\\n');\n      const state8021x = arrayIface8021xInfo.find((element) => {\n        return element.includes('802.1x');\n      });\n\n      if (state8021x.includes('Disabled')) {\n        i8021x.state = 'Disabled';\n        i8021x.protocol = 'Not defined';\n      } else if (state8021x.includes('Enabled')) {\n        const protocol8021x = arrayIface8021xInfo.find((element) => {\n          return element.includes('EAP');\n        });\n        i8021x.protocol = protocol8021x.split(':').pop();\n        i8021x.state = 'Enabled';\n      }\n    } catch (error) {\n      // console.log('Error getting wired information:', error);\n      return i8021x;\n    }\n  } else if (connectionType == 'wireless') {\n\n    let i8021xState = '';\n    let i8021xProtocol = '';\n\n\n\n    try {\n      const SSID = getWindowsWirelessIfaceSSID(iface);\n      if (SSID !== 'Unknown') {\n        i8021xState = execSync(`netsh wlan show profiles \"${SSID}\" | findstr \"802.1X\"`, util.execOptsWin);\n        i8021xProtocol = execSync(`netsh wlan show profiles \"${SSID}\" | findstr \"EAP\"`, util.execOptsWin);\n      }\n\n      if (i8021xState.includes(':') && i8021xProtocol.includes(':')) {\n        i8021x.state = i8021xState.split(':').pop();\n        i8021x.protocol = i8021xProtocol.split(':').pop();\n      }\n    } catch (error) {\n      // console.log('Error getting wireless information:', error);\n      if (error.status === 1 && error.stdout.includes('AutoConfig')) {\n        i8021x.state = 'Disabled';\n        i8021x.protocol = 'Not defined';\n      }\n      return i8021x;\n    }\n  }\n\n  return i8021x;\n}\n\nfunction splitSectionsNics(lines) {\n  const result = [];\n  let section = [];\n  lines.forEach(function (line) {\n    if (!line.startsWith('\\t') && !line.startsWith(' ')) {\n      if (section.length) {\n        result.push(section);\n        section = [];\n      }\n    }\n    section.push(line);\n  });\n  if (section.length) {\n    result.push(section);\n  }\n  return result;\n}\n\nfunction parseLinesDarwinNics(sections) {\n  let nics = [];\n  sections.forEach(section => {\n    let nic = {\n      iface: '',\n      mtu: -1,\n      mac: '',\n      ip6: '',\n      ip4: '',\n      speed: -1,\n      type: '',\n      operstate: '',\n      duplex: '',\n      internal: false\n    };\n    const first = section[0];\n    nic.iface = first.split(':')[0].trim();\n    let parts = first.split('> mtu');\n    nic.mtu = parts.length > 1 ? parseInt(parts[1], 10) : -1;\n    if (isNaN(nic.mtu)) {\n      nic.mtu = -1;\n    }\n    nic.internal = parts[0].toLowerCase().indexOf('loopback') > -1;\n    section.forEach(line => {\n      if (line.trim().startsWith('ether ')) {\n        nic.mac = line.split('ether ')[1].toLowerCase().trim();\n      }\n      if (line.trim().startsWith('inet6 ') && !nic.ip6) {\n        nic.ip6 = line.split('inet6 ')[1].toLowerCase().split('%')[0].split(' ')[0];\n      }\n      if (line.trim().startsWith('inet ') && !nic.ip4) {\n        nic.ip4 = line.split('inet ')[1].toLowerCase().split(' ')[0];\n      }\n    });\n    let speed = util.getValue(section, 'link rate');\n    nic.speed = speed ? parseFloat(speed) : -1;\n    if (nic.speed === -1) {\n      speed = util.getValue(section, 'uplink rate');\n      nic.speed = speed ? parseFloat(speed) : -1;\n      if (nic.speed > -1 && speed.toLowerCase().indexOf('gbps') >= 0) {\n        nic.speed = nic.speed * 1000;\n      }\n    } else {\n      if (speed.toLowerCase().indexOf('gbps') >= 0) {\n        nic.speed = nic.speed * 1000;\n      }\n    }\n    nic.type = util.getValue(section, 'type').toLowerCase().indexOf('wi-fi') > -1 ? 'wireless' : 'wired';\n    nic.operstate = util.getValue(section, 'status').toLowerCase().indexOf('active') > -1 ? 'up' : 'down';\n    nic.duplex = util.getValue(section, 'media').toLowerCase().indexOf('half-duplex') > -1 ? 'half' : 'full';\n    if (nic.ip6 || nic.ip4 || nic.mac) {\n      nics.push(nic);\n    }\n  });\n  return nics;\n}\n\nfunction getDarwinNics() {\n  const cmd = '/sbin/ifconfig -v';\n  try {\n    const lines = execSync(cmd, { maxBuffer: 1024 * 20000 }).toString().split('\\n');\n    const nsections = splitSectionsNics(lines);\n    return (parseLinesDarwinNics(nsections));\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction getLinuxIfaceConnectionName(interfaceName) {\n  const cmd = `nmcli device status 2>/dev/null | grep ${interfaceName}`;\n\n  try {\n    const result = execSync(cmd).toString();\n    const resultFormat = result.replace(/\\s+/g, ' ').trim();\n    const connectionNameLines = resultFormat.split(' ').slice(3);\n    const connectionName = connectionNameLines.join(' ');\n    return connectionName != '--' ? connectionName : '';\n  } catch (e) {\n    return '';\n  }\n}\n\nfunction checkLinuxDCHPInterfaces(file) {\n  let result = [];\n  try {\n    let cmd = `cat ${file} 2> /dev/null | grep 'iface\\\\|source'`;\n    const lines = execSync(cmd, { maxBuffer: 1024 * 20000 }).toString().split('\\n');\n\n    lines.forEach(line => {\n      const parts = line.replace(/\\s+/g, ' ').trim().split(' ');\n      if (parts.length >= 4) {\n        if (line.toLowerCase().indexOf(' inet ') >= 0 && line.toLowerCase().indexOf('dhcp') >= 0) {\n          result.push(parts[1]);\n        }\n      }\n      if (line.toLowerCase().includes('source')) {\n        let file = line.split(' ')[1];\n        result = result.concat(checkLinuxDCHPInterfaces(file));\n      }\n    });\n  } catch (e) {\n    util.noop();\n  }\n  return result;\n}\n\nfunction getLinuxDHCPNics() {\n  // alternate methods getting interfaces using DHCP\n  let cmd = 'ip a 2> /dev/null';\n  let result = [];\n  try {\n    const lines = execSync(cmd, { maxBuffer: 1024 * 20000 }).toString().split('\\n');\n    const nsections = splitSectionsNics(lines);\n    result = (parseLinuxDHCPNics(nsections));\n  } catch (e) {\n    util.noop();\n  }\n  try {\n    result = checkLinuxDCHPInterfaces('/etc/network/interfaces');\n  } catch (e) {\n    util.noop();\n  }\n  return result;\n}\n\nfunction parseLinuxDHCPNics(sections) {\n  const result = [];\n  if (sections && sections.length) {\n    sections.forEach(lines => {\n      if (lines && lines.length) {\n        const parts = lines[0].split(':');\n        if (parts.length > 2) {\n          for (let line of lines) {\n            if (line.indexOf(' inet ') >= 0 && line.indexOf(' dynamic ') >= 0) {\n              const parts2 = line.split(' ');\n              const nic = parts2[parts2.length - 1].trim();\n              result.push(nic);\n              break;\n            }\n          }\n        }\n      }\n    });\n  }\n  return result;\n}\n\nfunction getLinuxIfaceDHCPstatus(iface, connectionName, DHCPNics) {\n  let result = false;\n  if (connectionName) {\n    const cmd = `nmcli connection show \"${connectionName}\" 2>/dev/null \\| grep ipv4.method;`;\n    try {\n      const lines = execSync(cmd).toString();\n      const resultFormat = lines.replace(/\\s+/g, ' ').trim();\n\n      let dhcStatus = resultFormat.split(' ').slice(1).toString();\n      switch (dhcStatus) {\n        case 'auto':\n          result = true;\n          break;\n\n        default:\n          result = false;\n          break;\n      }\n      return result;\n    } catch (e) {\n      return (DHCPNics.indexOf(iface) >= 0);\n    }\n  } else {\n    return (DHCPNics.indexOf(iface) >= 0);\n  }\n}\n\nfunction getDarwinIfaceDHCPstatus(iface) {\n  let result = false;\n  const cmd = `ipconfig getpacket \"${iface}\" 2>/dev/null \\| grep lease_time;`;\n  try {\n    const lines = execSync(cmd).toString().split('\\n');\n    if (lines.length && lines[0].startsWith('lease_time')) {\n      result = true;\n    }\n  } catch (e) {\n    util.noop();\n  }\n  return result;\n}\n\nfunction getLinuxIfaceDNSsuffix(connectionName) {\n  if (connectionName) {\n    const cmd = `nmcli connection show \"${connectionName}\" 2>/dev/null \\| grep ipv4.dns-search;`;\n    try {\n      const result = execSync(cmd).toString();\n      const resultFormat = result.replace(/\\s+/g, ' ').trim();\n      const dnsSuffix = resultFormat.split(' ').slice(1).toString();\n      return dnsSuffix == '--' ? 'Not defined' : dnsSuffix;\n    } catch (e) {\n      return 'Unknown';\n    }\n  } else {\n    return 'Unknown';\n  }\n}\n\nfunction getLinuxIfaceIEEE8021xAuth(connectionName) {\n  if (connectionName) {\n    const cmd = `nmcli connection show \"${connectionName}\" 2>/dev/null \\| grep 802-1x.eap;`;\n    try {\n      const result = execSync(cmd).toString();\n      const resultFormat = result.replace(/\\s+/g, ' ').trim();\n      const authenticationProtocol = resultFormat.split(' ').slice(1).toString();\n\n\n      return authenticationProtocol == '--' ? '' : authenticationProtocol;\n    } catch (e) {\n      return 'Not defined';\n    }\n  } else {\n    return 'Not defined';\n  }\n}\n\nfunction getLinuxIfaceIEEE8021xState(authenticationProtocol) {\n  if (authenticationProtocol) {\n    if (authenticationProtocol == 'Not defined') {\n      return 'Disabled';\n    }\n    return 'Enabled';\n  } else {\n    return 'Unknown';\n  }\n}\n\nfunction testVirtualNic(iface, ifaceName, mac) {\n  const virtualMacs = ['00:00:00:00:00:00', '00:03:FF', '00:05:69', '00:0C:29', '00:0F:4B', '00:0F:4B', '00:13:07', '00:13:BE', '00:15:5d', '00:16:3E', '00:1C:42', '00:21:F6', '00:21:F6', '00:24:0B', '00:24:0B', '00:50:56', '00:A0:B1', '00:E0:C8', '08:00:27', '0A:00:27', '18:92:2C', '16:DF:49', '3C:F3:92', '54:52:00', 'FC:15:97'];\n  if (mac) {\n    return virtualMacs.filter(item => { return mac.toUpperCase().toUpperCase().startsWith(item.substr(0, mac.length)); }).length > 0 ||\n      iface.toLowerCase().indexOf(' virtual ') > -1 ||\n      ifaceName.toLowerCase().indexOf(' virtual ') > -1 ||\n      iface.toLowerCase().indexOf('vethernet ') > -1 ||\n      ifaceName.toLowerCase().indexOf('vethernet ') > -1 ||\n      iface.toLowerCase().startsWith('veth') ||\n      ifaceName.toLowerCase().startsWith('veth') ||\n      iface.toLowerCase().startsWith('vboxnet') ||\n      ifaceName.toLowerCase().startsWith('vboxnet');\n  } else return false;\n}\n\nfunction networkInterfaces(callback, rescan = true) {\n\n  if (typeof callback === 'boolean') {\n    rescan = callback;\n    callback = null;\n  }\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let ifaces = os.networkInterfaces();\n\n      let result = [];\n      let nics = [];\n      let dnsSuffixes = [];\n      let nics8021xInfo = [];\n      // seperate handling in OSX\n      if (_darwin || _freebsd || _openbsd || _netbsd) {\n        nics = getDarwinNics();\n\n\n        nics.forEach(nic => {\n\n          if ({}.hasOwnProperty.call(ifaces, nic.iface)) {\n            ifaces[nic.iface].forEach(function (details) {\n              if (details.family === 'IPv4') {\n                nic.ip4subnet = details.netmask;\n              }\n              if (details.family === 'IPv6') {\n                nic.ip6subnet = details.netmask;\n              }\n            });\n          }\n\n          result.push({\n            iface: nic.iface,\n            ifaceName: nic.iface,\n            ip4: nic.ip4,\n            ip4subnet: nic.ip4subnet || '',\n            ip6: nic.ip6,\n            ip6subnet: nic.ip6subnet || '',\n            mac: nic.mac,\n            internal: nic.internal,\n            virtual: nic.internal ? false : testVirtualNic(nic.iface, nic.iface, nic.mac),\n            operstate: nic.operstate,\n            type: nic.type,\n            duplex: nic.duplex,\n            mtu: nic.mtu,\n            speed: nic.speed,\n            dhcp: getDarwinIfaceDHCPstatus(nic.iface),\n            dnsSuffix: '',\n            ieee8021xAuth: '',\n            ieee8021xState: '',\n            carrierChanges: 0\n          });\n        });\n        _networkInterfaces = result;\n        if (callback) { callback(result); }\n        resolve(result);\n      } else {\n        if ((JSON.stringify(ifaces) === JSON.stringify(_ifaces)) && !rescan) {\n          // no changes - just return object\n          result = _networkInterfaces;\n\n          if (callback) { callback(result); }\n          resolve(result);\n        } else {\n          _ifaces = Object.assign({}, ifaces);\n\n          if (_windows) {\n            nics = getWindowsNics();\n            nics.forEach(nic => {\n              let found = false;\n              Object.keys(ifaces).forEach(key => {\n                if (!found) {\n                  ifaces[key].forEach(value => {\n                    if (Object.keys(value).indexOf('mac') >= 0) {\n                      found = value['mac'] === nic.mac;\n                    }\n                  });\n                }\n              });\n\n              if (!found) {\n                ifaces[nic.name] = [{ mac: nic.mac }];\n              }\n            });\n\n            nics8021xInfo = getWindowsWiredProfilesInformation();\n            dnsSuffixes = getWindowsDNSsuffixes();\n          }\n          if (_linux) {\n            _dhcpNics = getLinuxDHCPNics();\n          }\n          for (let dev in ifaces) {\n            let ip4 = '';\n            let ip4subnet = '';\n            let ip6 = '';\n            let ip6subnet = '';\n            let mac = '';\n            let duplex = '';\n            let mtu = '';\n            let speed = -1;\n            let carrierChanges = 0;\n            let operstate = 'down';\n            let dhcp = false;\n            let dnsSuffix = '';\n            let ieee8021xAuth = '';\n            let ieee8021xState = '';\n            let type = '';\n\n            if ({}.hasOwnProperty.call(ifaces, dev)) {\n              let ifaceName = dev;\n              ifaces[dev].forEach(function (details) {\n                if (details.family === 'IPv4') {\n                  ip4 = details.address;\n                  ip4subnet = details.netmask;\n                }\n                if (details.family === 'IPv6') {\n                  if (!ip6 || ip6.match(/^fe80::/i)) {\n                    ip6 = details.address;\n                    ip6subnet = details.netmask;\n                  }\n                }\n                mac = details.mac;\n                // fallback due to https://github.com/nodejs/node/issues/13581 (node 8.1 - node 8.2)\n                if (mac.indexOf('00:00:0') > -1 && (_linux || _darwin) && parseInt(process.versions.node.split('.'), 10) === 8) {\n                  if (Object.keys(_mac).length === 0) {\n                    _mac = getMacAddresses();\n                  }\n                  mac = _mac[dev] || '';\n                }\n              });\n              if (_linux) {\n                let iface = dev.split(':')[0].trim().toLowerCase();\n                const cmd = `echo -n \"addr_assign_type: \"; cat /sys/class/net/${iface}/addr_assign_type 2>/dev/null; echo;\n            echo -n \"address: \"; cat /sys/class/net/${iface}/address 2>/dev/null; echo;\n            echo -n \"addr_len: \"; cat /sys/class/net/${iface}/addr_len 2>/dev/null; echo;\n            echo -n \"broadcast: \"; cat /sys/class/net/${iface}/broadcast 2>/dev/null; echo;\n            echo -n \"carrier: \"; cat /sys/class/net/${iface}/carrier 2>/dev/null; echo;\n            echo -n \"carrier_changes: \"; cat /sys/class/net/${iface}/carrier_changes 2>/dev/null; echo;\n            echo -n \"dev_id: \"; cat /sys/class/net/${iface}/dev_id 2>/dev/null; echo;\n            echo -n \"dev_port: \"; cat /sys/class/net/${iface}/dev_port 2>/dev/null; echo;\n            echo -n \"dormant: \"; cat /sys/class/net/${iface}/dormant 2>/dev/null; echo;\n            echo -n \"duplex: \"; cat /sys/class/net/${iface}/duplex 2>/dev/null; echo;\n            echo -n \"flags: \"; cat /sys/class/net/${iface}/flags 2>/dev/null; echo;\n            echo -n \"gro_flush_timeout: \"; cat /sys/class/net/${iface}/gro_flush_timeout 2>/dev/null; echo;\n            echo -n \"ifalias: \"; cat /sys/class/net/${iface}/ifalias 2>/dev/null; echo;\n            echo -n \"ifindex: \"; cat /sys/class/net/${iface}/ifindex 2>/dev/null; echo;\n            echo -n \"iflink: \"; cat /sys/class/net/${iface}/iflink 2>/dev/null; echo;\n            echo -n \"link_mode: \"; cat /sys/class/net/${iface}/link_mode 2>/dev/null; echo;\n            echo -n \"mtu: \"; cat /sys/class/net/${iface}/mtu 2>/dev/null; echo;\n            echo -n \"netdev_group: \"; cat /sys/class/net/${iface}/netdev_group 2>/dev/null; echo;\n            echo -n \"operstate: \"; cat /sys/class/net/${iface}/operstate 2>/dev/null; echo;\n            echo -n \"proto_down: \"; cat /sys/class/net/${iface}/proto_down 2>/dev/null; echo;\n            echo -n \"speed: \"; cat /sys/class/net/${iface}/speed 2>/dev/null; echo;\n            echo -n \"tx_queue_len: \"; cat /sys/class/net/${iface}/tx_queue_len 2>/dev/null; echo;\n            echo -n \"type: \"; cat /sys/class/net/${iface}/type 2>/dev/null; echo;\n            echo -n \"wireless: \"; cat /proc/net/wireless 2>/dev/null \\| grep ${iface}; echo;\n            echo -n \"wirelessspeed: \"; iw dev ${iface} link 2>&1 \\| grep bitrate; echo;`;\n\n                let lines = [];\n                try {\n                  lines = execSync(cmd).toString().split('\\n');\n                  const connectionName = getLinuxIfaceConnectionName(iface);\n                  dhcp = getLinuxIfaceDHCPstatus(iface, connectionName, _dhcpNics);\n                  dnsSuffix = getLinuxIfaceDNSsuffix(connectionName);\n                  ieee8021xAuth = getLinuxIfaceIEEE8021xAuth(connectionName);\n                  ieee8021xState = getLinuxIfaceIEEE8021xState(ieee8021xAuth);\n                } catch (e) {\n                  util.noop();\n                }\n                duplex = util.getValue(lines, 'duplex');\n                duplex = duplex.startsWith('cat') ? '' : duplex;\n                mtu = parseInt(util.getValue(lines, 'mtu'), 10);\n                let myspeed = parseInt(util.getValue(lines, 'speed'), 10);\n                speed = isNaN(myspeed) ? -1 : myspeed;\n                let wirelessspeed = util.getValue(lines, 'wirelessspeed').split('tx bitrate: ');\n                if (speed === -1 && wirelessspeed.length === 2) {\n                  myspeed = parseFloat(wirelessspeed[1]);\n                  speed = isNaN(myspeed) ? -1 : myspeed;\n                }\n                carrierChanges = parseInt(util.getValue(lines, 'carrier_changes'), 10);\n                operstate = util.getValue(lines, 'operstate');\n                type = operstate === 'up' ? (util.getValue(lines, 'wireless').trim() ? 'wireless' : 'wired') : 'unknown';\n                if (iface === 'lo' || iface.startsWith('bond')) { type = 'virtual'; }\n              }\n              if (_windows) {\n\n\n                dnsSuffix = getWindowsIfaceDNSsuffix(dnsSuffixes.ifaces, dev);\n                nics.forEach(detail => {\n                  if (detail.mac === mac) {\n                    ifaceName = detail.name;\n                    dhcp = detail.dhcp;\n                    operstate = detail.operstate;\n                    speed = detail.speed;\n                    type = detail.type;\n                  }\n                });\n\n                if (dev.toLowerCase().indexOf('wlan') >= 0 || ifaceName.toLowerCase().indexOf('wlan') >= 0 || ifaceName.toLowerCase().indexOf('802.11n') >= 0 || ifaceName.toLowerCase().indexOf('wireless') >= 0 || ifaceName.toLowerCase().indexOf('wi-fi') >= 0 || ifaceName.toLowerCase().indexOf('wifi') >= 0) {\n                  type = 'wireless';\n                }\n\n                const IEEE8021x = getWindowsIEEE8021x(type, dev, nics8021xInfo);\n                ieee8021xAuth = IEEE8021x.protocol;\n                ieee8021xState = IEEE8021x.state;\n              }\n              let internal = (ifaces[dev] && ifaces[dev][0]) ? ifaces[dev][0].internal : false;\n              if (dev.toLowerCase().indexOf('loopback') > -1 || ifaceName.toLowerCase().indexOf('loopback') > -1) {\n                internal = true;\n              }\n              const virtual = internal ? false : testVirtualNic(dev, ifaceName, mac);\n              result.push({\n                iface: dev,\n                ifaceName,\n                ip4,\n                ip4subnet,\n                ip6,\n                ip6subnet,\n                mac,\n                internal,\n                virtual,\n                operstate,\n                type,\n                duplex,\n                mtu,\n                speed,\n                dhcp,\n                dnsSuffix,\n                ieee8021xAuth,\n                ieee8021xState,\n                carrierChanges,\n              });\n            }\n          }\n          _networkInterfaces = result;\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.networkInterfaces = networkInterfaces;\n\n// --------------------------\n// NET - Speed\n\nfunction calcNetworkSpeed(iface, rx_bytes, tx_bytes, operstate, rx_dropped, rx_errors, tx_dropped, tx_errors) {\n  let result = {\n    iface,\n    operstate,\n    rx_bytes,\n    rx_dropped,\n    rx_errors,\n    tx_bytes,\n    tx_dropped,\n    tx_errors,\n    rx_sec: -1,\n    tx_sec: -1,\n    ms: 0\n  };\n\n  if (_network[iface] && _network[iface].ms) {\n    result.ms = Date.now() - _network[iface].ms;\n    result.rx_sec = (rx_bytes - _network[iface].rx_bytes) >= 0 ? (rx_bytes - _network[iface].rx_bytes) / (result.ms / 1000) : 0;\n    result.tx_sec = (tx_bytes - _network[iface].tx_bytes) >= 0 ? (tx_bytes - _network[iface].tx_bytes) / (result.ms / 1000) : 0;\n    _network[iface].rx_bytes = rx_bytes;\n    _network[iface].tx_bytes = tx_bytes;\n    _network[iface].rx_sec = result.rx_sec;\n    _network[iface].tx_sec = result.tx_sec;\n    _network[iface].ms = Date.now();\n    _network[iface].last_ms = result.ms;\n    _network[iface].operstate = operstate;\n  } else {\n    if (!_network[iface]) _network[iface] = {};\n    _network[iface].rx_bytes = rx_bytes;\n    _network[iface].tx_bytes = tx_bytes;\n    _network[iface].rx_sec = -1;\n    _network[iface].tx_sec = -1;\n    _network[iface].ms = Date.now();\n    _network[iface].last_ms = 0;\n    _network[iface].operstate = operstate;\n  }\n  return result;\n}\n\nfunction networkStats(ifaces, callback) {\n\n  let ifacesArray = [];\n  // fallback - if only callback is given\n  if (util.isFunction(ifaces) && !callback) {\n    callback = ifaces;\n    ifacesArray = [getDefaultNetworkInterface()];\n  } else {\n    ifaces = ifaces || getDefaultNetworkInterface();\n    ifaces = ifaces.trim().toLowerCase().replace(/,+/g, '|');\n    ifacesArray = ifaces.split('|');\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      const result = [];\n\n      const workload = [];\n      if (ifacesArray.length && ifacesArray[0].trim() === '*') {\n        ifacesArray = [];\n        networkInterfaces(false).then(allIFaces => {\n          for (let iface of allIFaces) {\n            ifacesArray.push(iface.iface);\n          }\n          networkStats(ifacesArray.join(',')).then(result => {\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        });\n      } else {\n        for (let iface of ifacesArray) {\n          workload.push(networkStatsSingle(iface.trim()));\n        }\n        if (workload.length) {\n          Promise.all(\n            workload\n          ).then(data => {\n            if (callback) { callback(data); }\n            resolve(data);\n          });\n        } else {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nfunction networkStatsSingle(iface) {\n\n  function parseLinesWindowsPerfData(sections) {\n    let perfData = [];\n    for (let i in sections) {\n      if ({}.hasOwnProperty.call(sections, i)) {\n        if (sections[i].trim() !== '') {\n          let lines = sections[i].trim().split('\\r\\n');\n          perfData.push({\n            name: util.getValue(lines, 'Name', '=').replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase(),\n            rx_bytes: parseInt(util.getValue(lines, 'BytesReceivedPersec', '='), 10),\n            rx_errors: parseInt(util.getValue(lines, 'PacketsReceivedErrors', '='), 10),\n            rx_dropped: parseInt(util.getValue(lines, 'PacketsReceivedDiscarded', '='), 10),\n            tx_bytes: parseInt(util.getValue(lines, 'BytesSentPersec', '='), 10),\n            tx_errors: parseInt(util.getValue(lines, 'PacketsOutboundErrors', '='), 10),\n            tx_dropped: parseInt(util.getValue(lines, 'PacketsOutboundDiscarded', '='), 10)\n          });\n        }\n      }\n    }\n    return perfData;\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      const ifaceSanitized = util.sanitizeShellString(iface);\n\n      let result = {\n        iface: ifaceSanitized,\n        operstate: 'unknown',\n        rx_bytes: 0,\n        rx_dropped: 0,\n        rx_errors: 0,\n        tx_bytes: 0,\n        tx_dropped: 0,\n        tx_errors: 0,\n        rx_sec: -1,\n        tx_sec: -1,\n        ms: 0\n      };\n\n      let operstate = 'unknown';\n      let rx_bytes = 0;\n      let tx_bytes = 0;\n      let rx_dropped = 0;\n      let rx_errors = 0;\n      let tx_dropped = 0;\n      let tx_errors = 0;\n\n      let cmd, lines, stats;\n      if (!_network[ifaceSanitized] || (_network[ifaceSanitized] && !_network[ifaceSanitized].ms) || (_network[ifaceSanitized] && _network[ifaceSanitized].ms && Date.now() - _network[ifaceSanitized].ms >= 500)) {\n        if (_linux) {\n          if (fs.existsSync('/sys/class/net/' + ifaceSanitized)) {\n            cmd =\n              'cat /sys/class/net/' + ifaceSanitized + '/operstate; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/rx_bytes; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/tx_bytes; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/rx_dropped; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/rx_errors; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/tx_dropped; ' +\n              'cat /sys/class/net/' + ifaceSanitized + '/statistics/tx_errors; ';\n            exec(cmd, function (error, stdout) {\n              if (!error) {\n                lines = stdout.toString().split('\\n');\n                operstate = lines[0].trim();\n                rx_bytes = parseInt(lines[1], 10);\n                tx_bytes = parseInt(lines[2], 10);\n                rx_dropped = parseInt(lines[3], 10);\n                rx_errors = parseInt(lines[4], 10);\n                tx_dropped = parseInt(lines[5], 10);\n                tx_errors = parseInt(lines[6], 10);\n\n                result = calcNetworkSpeed(ifaceSanitized, rx_bytes, tx_bytes, operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n\n              }\n              resolve(result);\n            });\n          } else {\n            resolve(result);\n          }\n        }\n        if (_freebsd || _openbsd || _netbsd) {\n          cmd = 'netstat -ibndI ' + ifaceSanitized;\n          exec(cmd, function (error, stdout) {\n            if (!error) {\n              lines = stdout.toString().split('\\n');\n              for (let i = 1; i < lines.length; i++) {\n                const line = lines[i].replace(/ +/g, ' ').split(' ');\n                if (line && line[0] && line[7] && line[10]) {\n                  rx_bytes = rx_bytes + parseInt(line[7]);\n                  if (line[6].trim() !== '-') { rx_dropped = rx_dropped + parseInt(line[6]); }\n                  if (line[5].trim() !== '-') { rx_errors = rx_errors + parseInt(line[5]); }\n                  tx_bytes = tx_bytes + parseInt(line[10]);\n                  if (line[12].trim() !== '-') { tx_dropped = tx_dropped + parseInt(line[12]); }\n                  if (line[9].trim() !== '-') { tx_errors = tx_errors + parseInt(line[9]); }\n                  operstate = 'up';\n                }\n              }\n              result = calcNetworkSpeed(ifaceSanitized, rx_bytes, tx_bytes, operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n            }\n            resolve(result);\n          });\n        }\n        if (_darwin) {\n          cmd = 'ifconfig ' + ifaceSanitized + ' | grep \"status\"';\n          exec(cmd, function (error, stdout) {\n            result.operstate = (stdout.toString().split(':')[1] || '').trim();\n            result.operstate = (result.operstate || '').toLowerCase();\n            result.operstate = (result.operstate === 'active' ? 'up' : (result.operstate === 'inactive' ? 'down' : 'unknown'));\n            cmd = 'netstat -bdI ' + ifaceSanitized;\n            exec(cmd, function (error, stdout) {\n              if (!error) {\n                lines = stdout.toString().split('\\n');\n                // if there is less than 2 lines, no information for this interface was found\n                if (lines.length > 1 && lines[1].trim() !== '') {\n                  // skip header line\n                  // use the second line because it is tied to the NIC instead of the ipv4 or ipv6 address\n                  stats = lines[1].replace(/ +/g, ' ').split(' ');\n                  rx_bytes = parseInt(stats[6]);\n                  rx_dropped = parseInt(stats[11]);\n                  rx_errors = parseInt(stats[5]);\n                  tx_bytes = parseInt(stats[9]);\n                  tx_dropped = parseInt(stats[11]);\n                  tx_errors = parseInt(stats[8]);\n\n                  result = calcNetworkSpeed(ifaceSanitized, rx_bytes, tx_bytes, result.operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n                }\n              }\n              resolve(result);\n            });\n          });\n        }\n        if (_windows) {\n          let perfData = [];\n          let ifaceName = ifaceSanitized;\n\n          // Performance Data\n          util.wmic('path Win32_PerfRawData_Tcpip_NetworkInterface Get name,BytesReceivedPersec,BytesSentPersec,BytesTotalPersec,PacketsOutboundDiscarded,PacketsOutboundErrors,PacketsReceivedDiscarded,PacketsReceivedErrors /value').then((stdout, error) => {\n            if (!error) {\n              const psections = stdout.toString().split(/\\n\\s*\\n/);\n              perfData = parseLinesWindowsPerfData(psections);\n            }\n\n            // Network Interfaces\n            networkInterfaces(false).then(interfaces => {\n              // get bytes sent, received from perfData by name\n              rx_bytes = 0;\n              tx_bytes = 0;\n              perfData.forEach(detail => {\n                interfaces.forEach(det => {\n                  if ((det.iface.toLowerCase() === ifaceSanitized.toLowerCase() ||\n                    det.mac.toLowerCase() === ifaceSanitized.toLowerCase() ||\n                    det.ip4.toLowerCase() === ifaceSanitized.toLowerCase() ||\n                    det.ip6.toLowerCase() === ifaceSanitized.toLowerCase() ||\n                    det.ifaceName.replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase() === ifaceSanitized.replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase()) &&\n                    (det.ifaceName.replace(/[()\\[\\] ]+/g, '').replace('#', '_').toLowerCase() === detail.name)) {\n                    ifaceName = det.iface;\n                    rx_bytes = detail.rx_bytes;\n                    rx_dropped = detail.rx_dropped;\n                    rx_errors = detail.rx_errors;\n                    tx_bytes = detail.tx_bytes;\n                    tx_dropped = detail.tx_dropped;\n                    tx_errors = detail.tx_errors;\n                    operstate = det.operstate;\n                  }\n                });\n              });\n              if (rx_bytes && tx_bytes) {\n                result = calcNetworkSpeed(ifaceName, parseInt(rx_bytes), parseInt(tx_bytes), operstate, rx_dropped, rx_errors, tx_dropped, tx_errors);\n              }\n              resolve(result);\n            });\n          });\n        }\n      } else {\n        result.rx_bytes = _network[ifaceSanitized].rx_bytes;\n        result.tx_bytes = _network[ifaceSanitized].tx_bytes;\n        result.rx_sec = _network[ifaceSanitized].rx_sec;\n        result.tx_sec = _network[ifaceSanitized].tx_sec;\n        result.ms = _network[ifaceSanitized].last_ms;\n        result.operstate = _network[ifaceSanitized].operstate;\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.networkStats = networkStats;\n\n// --------------------------\n// NET - connections (sockets)\n\nfunction networkConnections(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = [];\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        let cmd = 'export LC_ALL=C; netstat -tunap | grep \"ESTABLISHED\\\\|SYN_SENT\\\\|SYN_RECV\\\\|FIN_WAIT1\\\\|FIN_WAIT2\\\\|TIME_WAIT\\\\|CLOSE\\\\|CLOSE_WAIT\\\\|LAST_ACK\\\\|LISTEN\\\\|CLOSING\\\\|UNKNOWN\"; unset LC_ALL';\n        if (_freebsd || _openbsd || _netbsd) cmd = 'export LC_ALL=C; netstat -na | grep \"ESTABLISHED\\\\|SYN_SENT\\\\|SYN_RECV\\\\|FIN_WAIT1\\\\|FIN_WAIT2\\\\|TIME_WAIT\\\\|CLOSE\\\\|CLOSE_WAIT\\\\|LAST_ACK\\\\|LISTEN\\\\|CLOSING\\\\|UNKNOWN\"; unset LC_ALL';\n        exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          if (!error && (lines.length > 1 || lines[0] != '')) {\n            lines.forEach(function (line) {\n              line = line.replace(/ +/g, ' ').split(' ');\n              if (line.length >= 7) {\n                let localip = line[3];\n                let localport = '';\n                let localaddress = line[3].split(':');\n                if (localaddress.length > 1) {\n                  localport = localaddress[localaddress.length - 1];\n                  localaddress.pop();\n                  localip = localaddress.join(':');\n                }\n                let peerip = line[4];\n                let peerport = '';\n                let peeraddress = line[4].split(':');\n                if (peeraddress.length > 1) {\n                  peerport = peeraddress[peeraddress.length - 1];\n                  peeraddress.pop();\n                  peerip = peeraddress.join(':');\n                }\n                let connstate = line[5];\n                // if (connstate === 'VERBUNDEN') connstate = 'ESTABLISHED';\n                let proc = line[6].split('/');\n\n                if (connstate) {\n                  result.push({\n                    protocol: line[0],\n                    localaddress: localip,\n                    localport: localport,\n                    peeraddress: peerip,\n                    peerport: peerport,\n                    state: connstate,\n                    pid: proc[0] && proc[0] !== '-' ? parseInt(proc[0], 10) : -1,\n                    process: proc[1] ? proc[1].split(' ')[0] : ''\n                  });\n                }\n              }\n            });\n            if (callback) {\n              callback(result);\n            }\n            resolve(result);\n          } else {\n            cmd = 'ss -tunap | grep \"ESTAB\\\\|SYN-SENT\\\\|SYN-RECV\\\\|FIN-WAIT1\\\\|FIN-WAIT2\\\\|TIME-WAIT\\\\|CLOSE\\\\|CLOSE-WAIT\\\\|LAST-ACK\\\\|LISTEN\\\\|CLOSING\"';\n            exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n\n              if (!error) {\n                let lines = stdout.toString().split('\\n');\n                lines.forEach(function (line) {\n                  line = line.replace(/ +/g, ' ').split(' ');\n                  if (line.length >= 6) {\n                    let localip = line[4];\n                    let localport = '';\n                    let localaddress = line[4].split(':');\n                    if (localaddress.length > 1) {\n                      localport = localaddress[localaddress.length - 1];\n                      localaddress.pop();\n                      localip = localaddress.join(':');\n                    }\n                    let peerip = line[5];\n                    let peerport = '';\n                    let peeraddress = line[5].split(':');\n                    if (peeraddress.length > 1) {\n                      peerport = peeraddress[peeraddress.length - 1];\n                      peeraddress.pop();\n                      peerip = peeraddress.join(':');\n                    }\n                    let connstate = line[1];\n                    if (connstate === 'ESTAB') connstate = 'ESTABLISHED';\n                    if (connstate === 'TIME-WAIT') connstate = 'TIME_WAIT';\n                    let pid = -1;\n                    let process = '';\n                    if (line.length >= 7 && line[6].indexOf('users:') > -1) {\n                      let proc = line[6].replace('users:((\"', '').replace(/\"/g, '').split(',');\n                      if (proc.length > 2) {\n                        process = proc[0].split(' ')[0];\n                        pid = parseInt(proc[1], 10);\n                      }\n                    }\n                    if (connstate) {\n                      result.push({\n                        protocol: line[0],\n                        localaddress: localip,\n                        localport: localport,\n                        peeraddress: peerip,\n                        peerport: peerport,\n                        state: connstate,\n                        pid,\n                        process\n                      });\n                    }\n                  }\n                });\n              }\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            });\n          }\n        });\n      }\n      if (_darwin) {\n        let cmd = 'netstat -natv | grep \"ESTABLISHED\\\\|SYN_SENT\\\\|SYN_RECV\\\\|FIN_WAIT1\\\\|FIN_WAIT2\\\\|TIME_WAIT\\\\|CLOSE\\\\|CLOSE_WAIT\\\\|LAST_ACK\\\\|LISTEN\\\\|CLOSING\\\\|UNKNOWN\"';\n        exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n          if (!error) {\n\n            let lines = stdout.toString().split('\\n');\n\n            lines.forEach(function (line) {\n              line = line.replace(/ +/g, ' ').split(' ');\n              if (line.length >= 8) {\n                let localip = line[3];\n                let localport = '';\n                let localaddress = line[3].split('.');\n                if (localaddress.length > 1) {\n                  localport = localaddress[localaddress.length - 1];\n                  localaddress.pop();\n                  localip = localaddress.join('.');\n                }\n                let peerip = line[4];\n                let peerport = '';\n                let peeraddress = line[4].split('.');\n                if (peeraddress.length > 1) {\n                  peerport = peeraddress[peeraddress.length - 1];\n                  peeraddress.pop();\n                  peerip = peeraddress.join('.');\n                }\n                let connstate = line[5];\n                let pid = parseInt(line[8], 10);\n                if (connstate) {\n                  result.push({\n                    protocol: line[0],\n                    localaddress: localip,\n                    localport: localport,\n                    peeraddress: peerip,\n                    peerport: peerport,\n                    state: connstate,\n                    pid: pid,\n                    process: ''\n                  });\n                }\n              }\n            });\n            if (callback) {\n              callback(result);\n            }\n            resolve(result);\n          }\n        });\n      }\n      if (_windows) {\n        let cmd = 'netstat -nao';\n        try {\n          exec(cmd, util.execOptsWin, function (error, stdout) {\n            if (!error) {\n\n              let lines = stdout.toString().split('\\r\\n');\n\n              lines.forEach(function (line) {\n                line = line.trim().replace(/ +/g, ' ').split(' ');\n                if (line.length >= 4) {\n                  let localip = line[1];\n                  let localport = '';\n                  let localaddress = line[1].split(':');\n                  if (localaddress.length > 1) {\n                    localport = localaddress[localaddress.length - 1];\n                    localaddress.pop();\n                    localip = localaddress.join(':');\n                  }\n                  let peerip = line[2];\n                  let peerport = '';\n                  let peeraddress = line[2].split(':');\n                  if (peeraddress.length > 1) {\n                    peerport = peeraddress[peeraddress.length - 1];\n                    peeraddress.pop();\n                    peerip = peeraddress.join(':');\n                  }\n                  let pid = line[4];\n                  let connstate = line[3];\n                  if (connstate === 'HERGESTELLT') connstate = 'ESTABLISHED';\n                  if (connstate.startsWith('ABH')) connstate = 'LISTEN';\n                  if (connstate === 'SCHLIESSEN_WARTEN') connstate = 'CLOSE_WAIT';\n                  if (connstate === 'WARTEND') connstate = 'TIME_WAIT';\n                  if (connstate === 'SYN_GESENDET') connstate = 'SYN_SENT';\n\n                  if (connstate === 'LISTENING') connstate = 'LISTEN';\n                  if (connstate === 'SYN_RECEIVED') connstate = 'SYN_RECV';\n                  if (connstate === 'FIN_WAIT_1') connstate = 'FIN_WAIT1';\n                  if (connstate === 'FIN_WAIT_2') connstate = 'FIN_WAIT2';\n                  if (connstate) {\n                    result.push({\n                      protocol: line[0].toLowerCase(),\n                      localaddress: localip,\n                      localport: localport,\n                      peeraddress: peerip,\n                      peerport: peerport,\n                      state: connstate,\n                      pid,\n                      process: ''\n                    });\n                  }\n                }\n              });\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.networkConnections = networkConnections;\n\nfunction networkGatewayDefault(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = '';\n      if (_linux || _freebsd || _openbsd || _netbsd) {\n        let cmd = 'ip route get 1';\n        try {\n          exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              const line = lines && lines[0] ? lines[0] : '';\n              let parts = line.split(' via ');\n              if (parts && parts[1]) {\n                parts = parts[1].split(' ');\n                result = parts[0];\n              }\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            } else {\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n      if (_darwin) {\n        let cmd = 'route -n get default';\n        try {\n          exec(cmd, { maxBuffer: 1024 * 20000 }, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n').map(line => line.trim());\n              result = util.getValue(lines, 'gateway');\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            } else {\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n      if (_windows) {\n        try {\n          exec('netstat -r', util.execOptsWin, function (error, stdout) {\n            const lines = stdout.toString().split(os.EOL);\n            lines.forEach(line => {\n              line = line.replace(/\\s+/g, ' ').trim();\n              if (line.indexOf('0.0.0.0 0.0.0.0') > -1 && !(/[a-zA-Z]/.test(line))) {\n                const parts = line.split(' ');\n                if (parts.length >= 5 && (parts[parts.length - 3]).indexOf('.') > -1) {\n                  result = parts[parts.length - 3];\n                }\n              }\n            });\n            if (!result) {\n              util.powerShell('Get-CimInstance -ClassName Win32_IP4RouteTable | Where-Object { $_.Destination -eq \\'0.0.0.0\\' -and $_.Mask -eq \\'0.0.0.0\\' }')\n                .then(data => {\n                  let lines = data.toString().split('\\r\\n');\n                  if (lines.length > 1 && !result) {\n                    result = util.getValue(lines, 'NextHop');\n                    if (callback) {\n                      callback(result);\n                    }\n                    resolve(result);\n                    // } else {\n                    //   exec('ipconfig', util.execOptsWin, function (error, stdout) {\n                    //     let lines = stdout.toString().split('\\r\\n');\n                    //     lines.forEach(function (line) {\n                    //       line = line.trim().replace(/\\. /g, '');\n                    //       line = line.trim().replace(/ +/g, '');\n                    //       const parts = line.split(':');\n                    //       if ((parts[0].toLowerCase().startsWith('standardgate') || parts[0].toLowerCase().indexOf('gateway') > -1 || parts[0].toLowerCase().indexOf('enlace') > -1) && parts[1]) {\n                    //         result = parts[1];\n                    //       }\n                    //     });\n                    //     if (callback) { callback(result); }\n                    //     resolve(result);\n                    //   });\n                  }\n                });\n            } else {\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.networkGatewayDefault = networkGatewayDefault;\n"]},"metadata":{},"sourceType":"script"}