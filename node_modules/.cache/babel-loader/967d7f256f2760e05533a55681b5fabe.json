{"ast":null,"code":"var ALL = {};\nvar vizion = {};\nALL.hg = require('./hg.js');\nALL.git = require('./git.js');\nALL.svn = require('./svn.js'); // Add more revision control tools here\n\nvar identify = require('./identify.js');\n\nvizion.analyze = function (argv, cb) {\n  var _folder = argv.folder != undefined ? argv.folder : '.';\n\n  if (process.platform === 'win32' || process.platform === 'win64') return cb('vizion is not yet compatible with Windows.');\n  identify(_folder, function (type, folder) {\n    if (ALL[type]) return ALL[type].parse(folder, cb);else return cb('Error vizion::analyze() for given folder: ' + folder);\n  });\n};\n\nvizion.isUpToDate = function (argv, cb) {\n  var _folder = argv.folder != undefined ? argv.folder : '.';\n\n  identify(_folder, function (type, folder) {\n    if (ALL[type]) return ALL[type].isUpdated(folder, cb);else return cb('Error vizion::isUpToDate() for given folder: ' + folder);\n  });\n};\n\nvizion.update = function (argv, cb) {\n  var _folder = argv.folder != undefined ? argv.folder : '.';\n\n  identify(_folder, function (type, folder) {\n    if (ALL[type]) return ALL[type].update(folder, cb);else return cb('Error vizion::update() for given folder: ' + folder);\n  });\n};\n\nvizion.revertTo = function (argv, cb) {\n  var revision = argv.revision ? argv.revision : false;\n\n  var _folder = argv.folder != undefined ? argv.folder : '.';\n\n  if (!revision) return cb({\n    msg: 'Cannot revert to an invalid commit revision',\n    path: _folder\n  });\n  identify(_folder, function (type, folder) {\n    if (ALL[type]) return ALL[type].revert({\n      folder: folder,\n      revision: revision\n    }, cb);else return cb('Error vizion::analyze() for given folder: ' + folder);\n  });\n};\n\nvizion.prev = function (argv, cb) {\n  var _folder = argv.folder != undefined ? argv.folder : '.';\n\n  identify(_folder, function (type, folder) {\n    if (ALL[type]) return ALL[type].prev(folder, cb);else return cb('Error vizion::prev() for given folder: ' + folder);\n  });\n};\n\nvizion.next = function (argv, cb) {\n  var _folder = argv.folder != undefined ? argv.folder : '.';\n\n  identify(_folder, function (type, folder) {\n    if (ALL[type]) return ALL[type].next(folder, cb);else return cb('Error vizion::next() for given folder: ' + folder);\n  });\n};\n\nmodule.exports = vizion;","map":{"version":3,"sources":["/Users/samianki/node_modules/vizion/lib/vizion.js"],"names":["ALL","vizion","hg","require","git","svn","identify","analyze","argv","cb","_folder","folder","undefined","process","platform","type","parse","isUpToDate","isUpdated","update","revertTo","revision","msg","path","revert","prev","next","module","exports"],"mappings":"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","sourcesContent":["var ALL = {};\nvar vizion = {};\n\nALL.hg = require('./hg.js');\nALL.git = require('./git.js');\nALL.svn = require('./svn.js');\n// Add more revision control tools here\nvar identify = require('./identify.js');\n\n\nvizion.analyze = function(argv, cb) {\n  var _folder = (argv.folder != undefined) ? argv.folder : '.';\n\n  if (process.platform === 'win32' || process.platform === 'win64')\n    return cb('vizion is not yet compatible with Windows.');\n\n  identify(_folder, function(type, folder) {\n    if (ALL[type])\n      return ALL[type].parse(folder, cb);\n    else\n      return cb('Error vizion::analyze() for given folder: '+folder);\n  });\n};\n\nvizion.isUpToDate = function(argv, cb) {\n  var _folder = (argv.folder != undefined) ? argv.folder : '.';\n\n  identify(_folder, function(type, folder) {\n    if (ALL[type])\n      return ALL[type].isUpdated(folder, cb);\n    else\n      return cb('Error vizion::isUpToDate() for given folder: '+folder);\n  });\n};\n\nvizion.update = function(argv, cb) {\n  var _folder = (argv.folder != undefined) ? argv.folder : '.';\n\n  identify(_folder, function(type, folder) {\n    if (ALL[type])\n      return ALL[type].update(folder, cb);\n    else\n      return cb('Error vizion::update() for given folder: '+folder);\n  });\n};\n\nvizion.revertTo = function(argv, cb) {\n  var revision = (argv.revision) ? argv.revision : false;\n  var _folder = (argv.folder != undefined) ? argv.folder : '.';\n\n  if (!revision)\n    return cb({msg: 'Cannot revert to an invalid commit revision', path: _folder});\n\n  identify(_folder, function(type, folder) {\n    if (ALL[type])\n      return ALL[type].revert({folder: folder, revision: revision}, cb);\n    else\n      return cb('Error vizion::analyze() for given folder: '+folder);\n  });\n};\n\nvizion.prev = function(argv, cb) {\n  var _folder = (argv.folder != undefined) ? argv.folder : '.';\n\n  identify(_folder, function(type, folder) {\n    if (ALL[type])\n      return ALL[type].prev(folder, cb);\n    else\n      return cb('Error vizion::prev() for given folder: '+folder);\n  });\n};\n\nvizion.next = function(argv, cb) {\n  var _folder = (argv.folder != undefined) ? argv.folder : '.';\n\n  identify(_folder, function(type, folder) {\n    if (ALL[type])\n      return ALL[type].next(folder, cb);\n    else\n      return cb('Error vizion::next() for given folder: '+folder);\n  });\n};\n\n\nmodule.exports = vizion;\n"]},"metadata":{},"sourceType":"script"}