{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Socket = require('./sock');\n\nvar slice = require('../utils').slice;\n/**\n * Expose `PubSocket`.\n */\n\n\nmodule.exports = PubSocket;\n/**\n * Initialize a new `PubSocket`.\n *\n * @api private\n */\n\nfunction PubSocket() {\n  Socket.call(this);\n}\n/**\n * Inherits from `Socket.prototype`.\n */\n\n\nPubSocket.prototype.__proto__ = Socket.prototype;\n/**\n * Send `msg` to all established peers.\n *\n * @param {Mixed} msg\n * @api public\n */\n\nPubSocket.prototype.send = function (msg) {\n  var socks = this.socks;\n  var len = socks.length;\n  var sock;\n  var buf = this.pack(arguments);\n\n  for (var i = 0; i < len; i++) {\n    sock = socks[i];\n    if (sock.writable) sock.write(buf);\n  }\n\n  return this;\n};\n\nPubSocket.prototype.sendv2 = function (data, cb) {\n  var socks = this.socks;\n  var len = socks.length;\n  var sock;\n  if (len == 0) return process.nextTick(cb);\n  var buf = this.pack([data]);\n  var i = 0;\n  socks.forEach(function (sock) {\n    if (sock.writable) sock.write(buf, function () {\n      i++;\n      if (i == len) process.nextTick(cb);\n    });else {\n      i++;\n      if (i == len) process.nextTick(cb);\n    }\n  });\n  return this;\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/@pm2/agent/node_modules/pm2-axon/lib/sockets/pub.js"],"names":["Socket","require","slice","module","exports","PubSocket","call","prototype","__proto__","send","msg","socks","len","length","sock","buf","pack","arguments","i","writable","write","sendv2","data","cb","process","nextTick","forEach"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,KAAhC;AAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAAT,GAAqB;AACnBL,EAAAA,MAAM,CAACM,IAAP,CAAY,IAAZ;AACD;AAED;AACA;AACA;;;AAEAD,SAAS,CAACE,SAAV,CAAoBC,SAApB,GAAgCR,MAAM,CAACO,SAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAF,SAAS,CAACE,SAAV,CAAoBE,IAApB,GAA2B,UAASC,GAAT,EAAa;AACtC,MAAIC,KAAK,GAAG,KAAKA,KAAjB;AACA,MAAIC,GAAG,GAAGD,KAAK,CAACE,MAAhB;AACA,MAAIC,IAAJ;AAEA,MAAIC,GAAG,GAAG,KAAKC,IAAL,CAAUC,SAAV,CAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAApB,EAAyBM,CAAC,EAA1B,EAA8B;AAC5BJ,IAAAA,IAAI,GAAGH,KAAK,CAACO,CAAD,CAAZ;AACA,QAAIJ,IAAI,CAACK,QAAT,EAAmBL,IAAI,CAACM,KAAL,CAAWL,GAAX;AACpB;;AAED,SAAO,IAAP;AACD,CAbD;;AAeAV,SAAS,CAACE,SAAV,CAAoBc,MAApB,GAA6B,UAASC,IAAT,EAAeC,EAAf,EAAkB;AAC7C,MAAIZ,KAAK,GAAG,KAAKA,KAAjB;AACA,MAAIC,GAAG,GAAGD,KAAK,CAACE,MAAhB;AACA,MAAIC,IAAJ;AAEA,MAAIF,GAAG,IAAI,CAAX,EACE,OAAOY,OAAO,CAACC,QAAR,CAAiBF,EAAjB,CAAP;AAEF,MAAIR,GAAG,GAAG,KAAKC,IAAL,CAAU,CAACM,IAAD,CAAV,CAAV;AAEA,MAAIJ,CAAC,GAAG,CAAR;AAEAP,EAAAA,KAAK,CAACe,OAAN,CAAc,UAASZ,IAAT,EAAe;AAC3B,QAAIA,IAAI,CAACK,QAAT,EACEL,IAAI,CAACM,KAAL,CAAWL,GAAX,EAAgB,YAAW;AACzBG,MAAAA,CAAC;AACD,UAAIA,CAAC,IAAIN,GAAT,EACEY,OAAO,CAACC,QAAR,CAAiBF,EAAjB;AACH,KAJD,EADF,KAMK;AACHL,MAAAA,CAAC;AACD,UAAIA,CAAC,IAAIN,GAAT,EACEY,OAAO,CAACC,QAAR,CAAiBF,EAAjB;AACH;AACF,GAZD;AAcA,SAAO,IAAP;AACD,CA3BD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar Socket = require('./sock');\nvar slice = require('../utils').slice;\n\n/**\n * Expose `PubSocket`.\n */\n\nmodule.exports = PubSocket;\n\n/**\n * Initialize a new `PubSocket`.\n *\n * @api private\n */\n\nfunction PubSocket() {\n  Socket.call(this);\n}\n\n/**\n * Inherits from `Socket.prototype`.\n */\n\nPubSocket.prototype.__proto__ = Socket.prototype;\n\n/**\n * Send `msg` to all established peers.\n *\n * @param {Mixed} msg\n * @api public\n */\n\nPubSocket.prototype.send = function(msg){\n  var socks = this.socks;\n  var len = socks.length;\n  var sock;\n\n  var buf = this.pack(arguments);\n\n  for (var i = 0; i < len; i++) {\n    sock = socks[i];\n    if (sock.writable) sock.write(buf);\n  }\n\n  return this;\n};\n\nPubSocket.prototype.sendv2 = function(data, cb){\n  var socks = this.socks;\n  var len = socks.length;\n  var sock;\n\n  if (len == 0)\n    return process.nextTick(cb);\n\n  var buf = this.pack([data]);\n\n  var i = 0;\n\n  socks.forEach(function(sock) {\n    if (sock.writable)\n      sock.write(buf, function() {\n        i++;\n        if (i == len)\n          process.nextTick(cb);\n      });\n    else {\n      i++;\n      if (i == len)\n        process.nextTick(cb);\n    }\n  });\n\n  return this;\n};\n"]},"metadata":{},"sourceType":"script"}