{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// osinfo.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 3. Operating System\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\n\nconst exec = require('child_process').exec;\n\nconst util = require('./util');\n\nconst fs = require('fs');\n\nlet _platform = process.platform;\n\nconst _linux = _platform === 'linux';\n\nconst _darwin = _platform === 'darwin';\n\nconst _windows = _platform === 'win32';\n\nconst _freebsd = _platform === 'freebsd';\n\nconst _openbsd = _platform === 'openbsd';\n\nconst _netbsd = _platform === 'netbsd';\n\nconst _sunos = _platform === 'sunos';\n\nconst NOT_SUPPORTED = 'not supported'; // --------------------------\n// Get current time and OS uptime\n\nfunction time() {\n  let t = new Date().toString().split(' ');\n  return {\n    current: Date.now(),\n    uptime: os.uptime(),\n    timezone: t.length >= 7 ? t[5] : '',\n    timezoneName: t.length >= 7 ? t.slice(6).join(' ').replace(/\\(/g, '').replace(/\\)/g, '') : ''\n  };\n}\n\nexports.time = time; // --------------------------\n// Get logo filename of OS distribution\n\nfunction getLogoFile(distro) {\n  distro = distro || '';\n  distro = distro.toLowerCase();\n  let result = _platform;\n\n  if (_windows) {\n    result = 'windows';\n  } else if (distro.indexOf('mac os') !== -1) {\n    result = 'apple';\n  } else if (distro.indexOf('arch') !== -1) {\n    result = 'arch';\n  } else if (distro.indexOf('centos') !== -1) {\n    result = 'centos';\n  } else if (distro.indexOf('coreos') !== -1) {\n    result = 'coreos';\n  } else if (distro.indexOf('debian') !== -1) {\n    result = 'debian';\n  } else if (distro.indexOf('deepin') !== -1) {\n    result = 'deepin';\n  } else if (distro.indexOf('elementary') !== -1) {\n    result = 'elementary';\n  } else if (distro.indexOf('fedora') !== -1) {\n    result = 'fedora';\n  } else if (distro.indexOf('gentoo') !== -1) {\n    result = 'gentoo';\n  } else if (distro.indexOf('mageia') !== -1) {\n    result = 'mageia';\n  } else if (distro.indexOf('mandriva') !== -1) {\n    result = 'mandriva';\n  } else if (distro.indexOf('manjaro') !== -1) {\n    result = 'manjaro';\n  } else if (distro.indexOf('mint') !== -1) {\n    result = 'mint';\n  } else if (distro.indexOf('mx') !== -1) {\n    result = 'mx';\n  } else if (distro.indexOf('openbsd') !== -1) {\n    result = 'openbsd';\n  } else if (distro.indexOf('freebsd') !== -1) {\n    result = 'freebsd';\n  } else if (distro.indexOf('opensuse') !== -1) {\n    result = 'opensuse';\n  } else if (distro.indexOf('pclinuxos') !== -1) {\n    result = 'pclinuxos';\n  } else if (distro.indexOf('puppy') !== -1) {\n    result = 'puppy';\n  } else if (distro.indexOf('raspbian') !== -1) {\n    result = 'raspbian';\n  } else if (distro.indexOf('reactos') !== -1) {\n    result = 'reactos';\n  } else if (distro.indexOf('redhat') !== -1) {\n    result = 'redhat';\n  } else if (distro.indexOf('slackware') !== -1) {\n    result = 'slackware';\n  } else if (distro.indexOf('sugar') !== -1) {\n    result = 'sugar';\n  } else if (distro.indexOf('steam') !== -1) {\n    result = 'steam';\n  } else if (distro.indexOf('suse') !== -1) {\n    result = 'suse';\n  } else if (distro.indexOf('mate') !== -1) {\n    result = 'ubuntu-mate';\n  } else if (distro.indexOf('lubuntu') !== -1) {\n    result = 'lubuntu';\n  } else if (distro.indexOf('xubuntu') !== -1) {\n    result = 'xubuntu';\n  } else if (distro.indexOf('ubuntu') !== -1) {\n    result = 'ubuntu';\n  } else if (distro.indexOf('solaris') !== -1) {\n    result = 'solaris';\n  } else if (distro.indexOf('tails') !== -1) {\n    result = 'tails';\n  } else if (distro.indexOf('robolinux') !== -1) {\n    result = 'robolinux';\n  } else if (_linux && distro) {\n    result = distro.toLowerCase().trim().replace(/\\s+/g, '-');\n  }\n\n  return result;\n} // --------------------------\n// OS Information\n\n\nfunction osInfo(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = {\n        platform: _platform === 'Windows_NT' ? 'Windows' : _platform,\n        distro: 'unknown',\n        release: 'unknown',\n        codename: '',\n        kernel: os.release(),\n        arch: os.arch(),\n        hostname: os.hostname(),\n        codepage: '',\n        logofile: '',\n        serial: '',\n        build: '',\n        servicepack: '',\n        uefi: false\n      };\n\n      if (_linux) {\n        exec('cat /etc/*-release; cat /usr/lib/os-release; cat /etc/openwrt_release', function (error, stdout) {\n          //if (!error) {\n\n          /**\n           * @namespace\n           * @property {string}  DISTRIB_ID\n           * @property {string}  NAME\n           * @property {string}  DISTRIB_RELEASE\n           * @property {string}  VERSION_ID\n           * @property {string}  DISTRIB_CODENAME\n           */\n          let release = {};\n          let lines = stdout.toString().split('\\n');\n          lines.forEach(function (line) {\n            if (line.indexOf('=') !== -1) {\n              release[line.split('=')[0].trim().toUpperCase()] = line.split('=')[1].trim();\n            }\n          });\n          let releaseVersion = (release.VERSION || '').replace(/\"/g, '');\n          let codename = (release.DISTRIB_CODENAME || release.VERSION_CODENAME || '').replace(/\"/g, '');\n\n          if (releaseVersion.indexOf('(') >= 0) {\n            codename = releaseVersion.split('(')[1].replace(/[()]/g, '').trim();\n            releaseVersion = releaseVersion.split('(')[0].trim();\n          }\n\n          result.distro = (release.DISTRIB_ID || release.NAME || 'unknown').replace(/\"/g, '');\n          result.logofile = getLogoFile(result.distro);\n          result.release = (releaseVersion || release.DISTRIB_RELEASE || release.VERSION_ID || 'unknown').replace(/\"/g, '');\n          result.codename = codename;\n          result.codepage = util.getCodepage();\n          result.build = (release.BUILD_ID || '').replace(/\"/g, '').trim();\n          isUefiLinux().then(uefi => {\n            result.uefi = uefi;\n            uuid().then(data => {\n              result.serial = data.os;\n\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            });\n          }); //}\n        });\n      }\n\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('sysctl kern.ostype kern.osrelease kern.osrevision kern.hostuuid machdep.bootmethod', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            result.distro = util.getValue(lines, 'kern.ostype');\n            result.logofile = getLogoFile(result.distro);\n            result.release = util.getValue(lines, 'kern.osrelease').split('-')[0];\n            result.serial = util.getValue(lines, 'kern.uuid');\n            result.codename = '';\n            result.codepage = util.getCodepage();\n            result.uefi = util.getValue(lines, 'machdep.bootmethod').toLowerCase().indexOf('uefi') >= 0;\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('sw_vers; sysctl kern.ostype kern.osrelease kern.osrevision kern.uuid', function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          result.serial = util.getValue(lines, 'kern.uuid');\n          result.distro = util.getValue(lines, 'ProductName');\n          result.release = util.getValue(lines, 'ProductVersion');\n          result.build = util.getValue(lines, 'BuildVersion');\n          result.logofile = getLogoFile(result.distro);\n          result.codename = 'macOS';\n          result.codename = result.release.indexOf('10.4') > -1 ? 'Mac OS X Tiger' : result.codename;\n          result.codename = result.release.indexOf('10.4') > -1 ? 'Mac OS X Tiger' : result.codename;\n          result.codename = result.release.indexOf('10.4') > -1 ? 'Mac OS X Tiger' : result.codename;\n          result.codename = result.release.indexOf('10.5') > -1 ? 'Mac OS X Leopard' : result.codename;\n          result.codename = result.release.indexOf('10.6') > -1 ? 'Mac OS X Snow Leopard' : result.codename;\n          result.codename = result.release.indexOf('10.7') > -1 ? 'Mac OS X Lion' : result.codename;\n          result.codename = result.release.indexOf('10.8') > -1 ? 'OS X Mountain Lion' : result.codename;\n          result.codename = result.release.indexOf('10.9') > -1 ? 'OS X Mavericks' : result.codename;\n          result.codename = result.release.indexOf('10.10') > -1 ? 'OS X Yosemite' : result.codename;\n          result.codename = result.release.indexOf('10.11') > -1 ? 'OS X El Capitan' : result.codename;\n          result.codename = result.release.indexOf('10.12') > -1 ? 'macOS Sierra' : result.codename;\n          result.codename = result.release.indexOf('10.13') > -1 ? 'macOS High Sierra' : result.codename;\n          result.codename = result.release.indexOf('10.14') > -1 ? 'macOS Mojave' : result.codename;\n          result.codename = result.release.indexOf('10.15') > -1 ? 'macOS Catalina' : result.codename;\n          result.uefi = true;\n          result.codepage = util.getCodepage();\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        result.release = result.kernel;\n        exec('uname -o', function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          result.distro = lines[0];\n          result.logofile = getLogoFile(result.distro);\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_windows) {\n        result.logofile = getLogoFile();\n        result.release = result.kernel;\n\n        try {\n          util.wmic('os get /value').then(stdout => {\n            let lines = stdout.toString().split('\\r\\n');\n            result.distro = util.getValue(lines, 'Caption', '=').trim();\n            result.serial = util.getValue(lines, 'SerialNumber', '=').trim();\n            result.build = util.getValue(lines, 'BuildNumber', '=').trim();\n            result.servicepack = util.getValue(lines, 'ServicePackMajorVersion', '=').trim() + '.' + util.getValue(lines, 'ServicePackMinorVersion', '=').trim();\n            result.codepage = util.getCodepage();\n            isUefiWindows().then(uefi => {\n              result.uefi = uefi;\n\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            });\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.osInfo = osInfo;\n\nfunction isUefiLinux() {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      fs.stat('/sys/firmware/efi', function (err) {\n        if (!err) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  });\n}\n\nfunction isUefiWindows() {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      try {\n        exec('findstr /C:\"Detected boot environment\" \"%windir%\\\\Panther\\\\setupact.log\"', util.execOptsWin, function (error, stdout) {\n          if (!error) {\n            const line = stdout.toString().split('\\n\\r')[0];\n            resolve(line.toLowerCase().indexOf('uefi') >= 0);\n            return;\n          }\n\n          resolve(false);\n        });\n      } catch (e) {\n        resolve(false);\n      }\n    });\n  });\n}\n\nfunction versions(apps, callback) {\n  let versionObject = {\n    kernel: os.release(),\n    openssl: '',\n    systemOpenssl: '',\n    systemOpensslLib: '',\n    node: process.versions.node,\n    v8: process.versions.v8,\n    npm: '',\n    yarn: '',\n    pm2: '',\n    gulp: '',\n    grunt: '',\n    git: '',\n    tsc: '',\n    mysql: '',\n    redis: '',\n    mongodb: '',\n    apache: '',\n    nginx: '',\n    php: '',\n    docker: '',\n    postfix: '',\n    postgresql: '',\n    perl: '',\n    python: '',\n    python3: '',\n    pip: '',\n    pip3: '',\n    java: '',\n    gcc: '',\n    virtualbox: '',\n    dotnet: ''\n  };\n\n  function checkVersionParam(apps) {\n    if (apps === '*') {\n      return {\n        versions: versionObject,\n        counter: 26\n      };\n    }\n\n    if (!Array.isArray(apps)) {\n      apps = apps.trim().toLowerCase().replace(/,+/g, '|').replace(/ /g, '|');\n      apps = apps.split('|');\n      const result = {\n        versions: {},\n        counter: 0\n      };\n      apps.forEach(el => {\n        if (el) {\n          for (let key in versionObject) {\n            if ({}.hasOwnProperty.call(versionObject, key)) {\n              if (key.toLowerCase() === el.toLowerCase() && !{}.hasOwnProperty.call(result.versions, key)) {\n                result.versions[key] = versionObject[key];\n\n                if (key === 'openssl') {\n                  result.versions.systemOpenssl = '';\n                  result.versions.systemOpensslLib = '';\n                }\n\n                if (!result.versions[key]) {\n                  result.counter++;\n                }\n              }\n            }\n          }\n        }\n      });\n      return result;\n    }\n  }\n\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      if (util.isFunction(apps) && !callback) {\n        callback = apps;\n        apps = '*';\n      } else {\n        apps = apps || '*';\n      }\n\n      const appsObj = checkVersionParam(apps);\n      let totalFunctions = appsObj.counter;\n\n      let functionProcessed = function () {\n        return function () {\n          if (--totalFunctions === 0) {\n            if (callback) {\n              callback(appsObj.versions);\n            }\n\n            resolve(appsObj.versions);\n          }\n        };\n      }();\n\n      let cmd = '';\n\n      try {\n        if ({}.hasOwnProperty.call(appsObj.versions, 'openssl')) {\n          appsObj.versions.openssl = process.versions.openssl;\n          exec('openssl version', function (error, stdout) {\n            if (!error) {\n              let openssl_string = stdout.toString().split('\\n')[0].trim();\n              let openssl = openssl_string.split(' ');\n              appsObj.versions.systemOpenssl = openssl.length > 0 ? openssl[1] : openssl[0];\n              appsObj.versions.systemOpensslLib = openssl.length > 0 ? openssl[0] : 'openssl';\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'npm')) {\n          exec('npm -v', function (error, stdout) {\n            if (!error) {\n              appsObj.versions.npm = stdout.toString().split('\\n')[0];\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'pm2')) {\n          cmd = 'pm2';\n\n          if (_windows) {\n            cmd += '.cmd';\n          }\n\n          exec(`${cmd} -v`, function (error, stdout) {\n            if (!error) {\n              let pm2 = stdout.toString().split('\\n')[0].trim();\n\n              if (!pm2.startsWith('[PM2]')) {\n                appsObj.versions.pm2 = pm2;\n              }\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'yarn')) {\n          exec('yarn --version', function (error, stdout) {\n            if (!error) {\n              appsObj.versions.yarn = stdout.toString().split('\\n')[0];\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'gulp')) {\n          cmd = 'gulp';\n\n          if (_windows) {\n            cmd += '.cmd';\n          }\n\n          exec(`${cmd} --version`, function (error, stdout) {\n            if (!error) {\n              const gulp = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.gulp = (gulp.toLowerCase().split('version')[1] || '').trim();\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'tsc')) {\n          cmd = 'tsc';\n\n          if (_windows) {\n            cmd += '.cmd';\n          }\n\n          exec(`${cmd} --version`, function (error, stdout) {\n            if (!error) {\n              const tsc = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.tsc = (tsc.toLowerCase().split('version')[1] || '').trim();\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'grunt')) {\n          cmd = 'grunt';\n\n          if (_windows) {\n            cmd += '.cmd';\n          }\n\n          exec(`${cmd} --version`, function (error, stdout) {\n            if (!error) {\n              const grunt = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.grunt = (grunt.toLowerCase().split('cli v')[1] || '').trim();\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'git')) {\n          if (_darwin) {\n            const gitHomebrewExists = fs.existsSync('/usr/local/Cellar/git');\n\n            if (util.darwinXcodeExists() || gitHomebrewExists) {\n              exec('git --version', function (error, stdout) {\n                if (!error) {\n                  let git = stdout.toString().split('\\n')[0] || '';\n                  git = (git.toLowerCase().split('version')[1] || '').trim();\n                  appsObj.versions.git = (git.split(' ')[0] || '').trim();\n                }\n\n                functionProcessed();\n              });\n            } else {\n              functionProcessed();\n            }\n          } else {\n            exec('git --version', function (error, stdout) {\n              if (!error) {\n                let git = stdout.toString().split('\\n')[0] || '';\n                git = (git.toLowerCase().split('version')[1] || '').trim();\n                appsObj.versions.git = (git.split(' ')[0] || '').trim();\n              }\n\n              functionProcessed();\n            });\n          }\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'apache')) {\n          exec('apachectl -v 2>&1', function (error, stdout) {\n            if (!error) {\n              const apache = (stdout.toString().split('\\n')[0] || '').split(':');\n              appsObj.versions.apache = apache.length > 1 ? apache[1].replace('Apache', '').replace('/', '').trim() : '';\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'nginx')) {\n          exec('nginx -v 2>&1', function (error, stdout) {\n            if (!error) {\n              const nginx = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.nginx = (nginx.toLowerCase().split('/')[1] || '').trim();\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'mysql')) {\n          exec('mysql -V', function (error, stdout) {\n            if (!error) {\n              let mysql = stdout.toString().split('\\n')[0] || '';\n              mysql = mysql.toLowerCase();\n\n              if (mysql.indexOf(',') > -1) {\n                mysql = (mysql.split(',')[0] || '').trim();\n                const parts = mysql.split(' ');\n                appsObj.versions.mysql = (parts[parts.length - 1] || '').trim();\n              } else {\n                if (mysql.indexOf(' ver ') > -1) {\n                  mysql = mysql.split(' ver ')[1];\n                  appsObj.versions.mysql = mysql.split(' ')[0];\n                }\n              }\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'php')) {\n          exec('php -v', function (error, stdout) {\n            if (!error) {\n              const php = stdout.toString().split('\\n')[0] || '';\n              let parts = php.split('(');\n\n              if (parts[0].indexOf('-')) {\n                parts = parts[0].split('-');\n              }\n\n              appsObj.versions.php = parts[0].replace(/[^0-9.]/g, '');\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'redis')) {\n          exec('redis-server --version', function (error, stdout) {\n            if (!error) {\n              const redis = stdout.toString().split('\\n')[0] || '';\n              const parts = redis.split(' ');\n              appsObj.versions.redis = util.getValue(parts, 'v', '=', true);\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'docker')) {\n          exec('docker --version', function (error, stdout) {\n            if (!error) {\n              const docker = stdout.toString().split('\\n')[0] || '';\n              const parts = docker.split(' ');\n              appsObj.versions.docker = parts.length > 2 && parts[2].endsWith(',') ? parts[2].slice(0, -1) : '';\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'postfix')) {\n          exec('postconf -d | grep mail_version', function (error, stdout) {\n            if (!error) {\n              const postfix = stdout.toString().split('\\n') || [];\n              appsObj.versions.postfix = util.getValue(postfix, 'mail_version', '=', true);\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'mongodb')) {\n          exec('mongod --version', function (error, stdout) {\n            if (!error) {\n              const mongodb = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.mongodb = (mongodb.toLowerCase().split(',')[0] || '').replace(/[^0-9.]/g, '');\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'postgresql')) {\n          if (_linux) {\n            exec('locate bin/postgres', function (error, stdout) {\n              if (!error) {\n                const postgresqlBin = stdout.toString().split('\\n').sort();\n\n                if (postgresqlBin.length) {\n                  exec(postgresqlBin[postgresqlBin.length - 1] + ' -V', function (error, stdout) {\n                    if (!error) {\n                      const postgresql = stdout.toString().split('\\n')[0].split(' ') || [];\n                      appsObj.versions.postgresql = postgresql.length ? postgresql[postgresql.length - 1] : '';\n                    }\n\n                    functionProcessed();\n                  });\n                } else {\n                  functionProcessed();\n                }\n              } else {\n                exec('psql -V', function (error, stdout) {\n                  if (!error) {\n                    const postgresql = stdout.toString().split('\\n')[0].split(' ') || [];\n                    appsObj.versions.postgresql = postgresql.length ? postgresql[postgresql.length - 1] : '';\n                    appsObj.versions.postgresql = appsObj.versions.postgresql.split('-')[0];\n                  }\n\n                  functionProcessed();\n                });\n                functionProcessed();\n              }\n            });\n          } else {\n            if (_windows) {\n              util.wmic('service get /value').then(stdout => {\n                let serviceSections = stdout.split(/\\n\\s*\\n/);\n\n                for (let i = 0; i < serviceSections.length; i++) {\n                  if (serviceSections[i].trim() !== '') {\n                    let lines = serviceSections[i].trim().split('\\r\\n');\n                    let srvCaption = util.getValue(lines, 'caption', '=', true).toLowerCase();\n\n                    if (srvCaption.indexOf('postgresql') > -1) {\n                      const parts = srvCaption.split(' server ');\n\n                      if (parts.length > 1) {\n                        appsObj.versions.postgresql = parts[1];\n                      }\n                    }\n                  }\n                }\n\n                functionProcessed();\n              });\n            } else {\n              exec('postgres -V', function (error, stdout) {\n                if (!error) {\n                  const postgresql = stdout.toString().split('\\n')[0].split(' ') || [];\n                  appsObj.versions.postgresql = postgresql.length ? postgresql[postgresql.length - 1] : '';\n                }\n\n                functionProcessed();\n              });\n            }\n          }\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'perl')) {\n          exec('perl -v', function (error, stdout) {\n            if (!error) {\n              const perl = stdout.toString().split('\\n') || '';\n\n              while (perl.length > 0 && perl[0].trim() === '') {\n                perl.shift();\n              }\n\n              if (perl.length > 0) {\n                appsObj.versions.perl = perl[0].split('(').pop().split(')')[0].replace('v', '');\n              }\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'python')) {\n          exec('python -V 2>&1', function (error, stdout) {\n            if (!error) {\n              const python = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.python = python.toLowerCase().replace('python', '').trim();\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'python3')) {\n          exec('python3 -V 2>&1', function (error, stdout) {\n            if (!error) {\n              const python = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.python3 = python.toLowerCase().replace('python', '').trim();\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'pip')) {\n          exec('pip -V 2>&1', function (error, stdout) {\n            if (!error) {\n              const pip = stdout.toString().split('\\n')[0] || '';\n              const parts = pip.split(' ');\n              appsObj.versions.pip = parts.length >= 2 ? parts[1] : '';\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'pip3')) {\n          exec('pip3 -V 2>&1', function (error, stdout) {\n            if (!error) {\n              const pip = stdout.toString().split('\\n')[0] || '';\n              const parts = pip.split(' ');\n              appsObj.versions.pip3 = parts.length >= 2 ? parts[1] : '';\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'java')) {\n          if (_darwin) {\n            // check if any JVM is installed but avoid dialog box that Java needs to be installed\n            exec('/usr/libexec/java_home -V 2>&1', function (error, stdout) {\n              if (!error && stdout.toString().toLowerCase().indexOf('no java runtime') === -1) {\n                // now this can be done savely\n                exec('java -version 2>&1', function (error, stdout) {\n                  if (!error) {\n                    const java = stdout.toString().split('\\n')[0] || '';\n                    const parts = java.split('\"');\n                    appsObj.versions.java = parts.length === 3 ? parts[1].trim() : '';\n                  }\n\n                  functionProcessed();\n                });\n              } else {\n                functionProcessed();\n              }\n            });\n          } else {\n            exec('java -version 2>&1', function (error, stdout) {\n              if (!error) {\n                const java = stdout.toString().split('\\n')[0] || '';\n                const parts = java.split('\"');\n                appsObj.versions.java = parts.length === 3 ? parts[1].trim() : '';\n              }\n\n              functionProcessed();\n            });\n          }\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'gcc')) {\n          if (_darwin && util.darwinXcodeExists() || !_darwin) {\n            exec('gcc -dumpversion', function (error, stdout) {\n              if (!error) {\n                appsObj.versions.gcc = stdout.toString().split('\\n')[0].trim() || '';\n              }\n\n              if (appsObj.versions.gcc.indexOf('.') > -1) {\n                functionProcessed();\n              } else {\n                exec('gcc --version', function (error, stdout) {\n                  if (!error) {\n                    const gcc = stdout.toString().split('\\n')[0].trim();\n\n                    if (gcc.indexOf('gcc') > -1 && gcc.indexOf(')') > -1) {\n                      const parts = gcc.split(')');\n                      appsObj.versions.gcc = parts[1].trim() || appsObj.versions.gcc;\n                    }\n                  }\n\n                  functionProcessed();\n                });\n              }\n            });\n          } else {\n            functionProcessed();\n          }\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'virtualbox')) {\n          exec(util.getVboxmanage() + ' -v 2>&1', function (error, stdout) {\n            if (!error) {\n              const vbox = stdout.toString().split('\\n')[0] || '';\n              const parts = vbox.split('r');\n              appsObj.versions.virtualbox = parts[0];\n            }\n\n            functionProcessed();\n          });\n        }\n\n        if ({}.hasOwnProperty.call(appsObj.versions, 'dotnet')) {\n          exec('dotnet --version 2>&1', function (error, stdout) {\n            if (!error) {\n              const dotnet = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.dotnet = dotnet.trim();\n            }\n\n            functionProcessed();\n          });\n        }\n      } catch (e) {\n        if (callback) {\n          callback(appsObj.versions);\n        }\n\n        resolve(appsObj.versions);\n      }\n    });\n  });\n}\n\nexports.versions = versions;\n\nfunction shell(callback) {\n  return new Promise((resolve, reject) => {\n    process.nextTick(() => {\n      if (_windows) {\n        let error = new Error(NOT_SUPPORTED);\n\n        if (callback) {\n          callback(NOT_SUPPORTED);\n        }\n\n        reject(error);\n      }\n\n      let result = '';\n      exec('echo $SHELL', function (error, stdout) {\n        if (!error) {\n          result = stdout.toString().split('\\n')[0];\n        }\n\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      });\n    });\n  });\n}\n\nexports.shell = shell;\n\nfunction uuid(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = {\n        os: ''\n      };\n      let parts;\n\n      if (_darwin) {\n        exec('ioreg -rd1 -c IOPlatformExpertDevice | grep IOPlatformUUID', function (error, stdout) {\n          if (!error) {\n            parts = stdout.toString().split('\\n')[0].replace(/\"/g, '').split('=');\n            result.os = parts.length > 1 ? parts[1].trim().toLowerCase() : '';\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_linux) {\n        exec('( cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null || hostname ) | head -n 1 || :', function (error, stdout) {\n          if (!error) {\n            result.os = stdout.toString().split('\\n')[0].trim().toLowerCase();\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('kenv -q smbios.system.uuid', function (error, stdout) {\n          if (!error) {\n            result.os = stdout.toString().split('\\n')[0].trim().toLowerCase();\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_windows) {\n        exec('%windir%\\\\System32\\\\reg query \"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography\" /v MachineGuid', util.execOptsWin, function (error, stdout) {\n          if (!error) {\n            parts = stdout.toString().split('\\n\\r')[0].split('REG_SZ');\n            result.os = parts.length > 1 ? parts[1].replace(/\\r+|\\n+|\\s+/ig, '').toLowerCase() : '';\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n    });\n  });\n}\n\nexports.uuid = uuid;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/osinfo.js"],"names":["os","require","exec","util","fs","_platform","process","platform","_linux","_darwin","_windows","_freebsd","_openbsd","_netbsd","_sunos","NOT_SUPPORTED","time","t","Date","toString","split","current","now","uptime","timezone","length","timezoneName","slice","join","replace","exports","getLogoFile","distro","toLowerCase","result","indexOf","trim","osInfo","callback","Promise","resolve","nextTick","release","codename","kernel","arch","hostname","codepage","logofile","serial","build","servicepack","uefi","error","stdout","lines","forEach","line","toUpperCase","releaseVersion","VERSION","DISTRIB_CODENAME","VERSION_CODENAME","DISTRIB_ID","NAME","DISTRIB_RELEASE","VERSION_ID","getCodepage","BUILD_ID","isUefiLinux","then","uuid","data","getValue","wmic","isUefiWindows","e","stat","err","execOptsWin","versions","apps","versionObject","openssl","systemOpenssl","systemOpensslLib","node","v8","npm","yarn","pm2","gulp","grunt","git","tsc","mysql","redis","mongodb","apache","nginx","php","docker","postfix","postgresql","perl","python","python3","pip","pip3","java","gcc","virtualbox","dotnet","checkVersionParam","counter","Array","isArray","el","key","hasOwnProperty","call","isFunction","appsObj","totalFunctions","functionProcessed","cmd","openssl_string","startsWith","gitHomebrewExists","existsSync","darwinXcodeExists","parts","endsWith","postgresqlBin","sort","serviceSections","i","srvCaption","shift","pop","getVboxmanage","vbox","shell","reject","Error"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBC,IAAtC;;AACA,MAAMC,IAAI,GAAGF,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMG,EAAE,GAAGH,OAAO,CAAC,IAAD,CAAlB;;AAEA,IAAII,SAAS,GAAGC,OAAO,CAACC,QAAxB;;AAEA,MAAMC,MAAM,GAAIH,SAAS,KAAK,OAA9B;;AACA,MAAMI,OAAO,GAAIJ,SAAS,KAAK,QAA/B;;AACA,MAAMK,QAAQ,GAAIL,SAAS,KAAK,OAAhC;;AACA,MAAMM,QAAQ,GAAIN,SAAS,KAAK,SAAhC;;AACA,MAAMO,QAAQ,GAAIP,SAAS,KAAK,SAAhC;;AACA,MAAMQ,OAAO,GAAIR,SAAS,KAAK,QAA/B;;AACA,MAAMS,MAAM,GAAIT,SAAS,KAAK,OAA9B;;AAEA,MAAMU,aAAa,GAAG,eAAtB,C,CAEA;AACA;;AAEA,SAASC,IAAT,GAAgB;AACd,MAAIC,CAAC,GAAG,IAAIC,IAAJ,GAAWC,QAAX,GAAsBC,KAAtB,CAA4B,GAA5B,CAAR;AAEA,SAAO;AACLC,IAAAA,OAAO,EAAEH,IAAI,CAACI,GAAL,EADJ;AAELC,IAAAA,MAAM,EAAEvB,EAAE,CAACuB,MAAH,EAFH;AAGLC,IAAAA,QAAQ,EAAGP,CAAC,CAACQ,MAAF,IAAY,CAAb,GAAkBR,CAAC,CAAC,CAAD,CAAnB,GAAyB,EAH9B;AAILS,IAAAA,YAAY,EAAGT,CAAC,CAACQ,MAAF,IAAY,CAAb,GAAkBR,CAAC,CAACU,KAAF,CAAQ,CAAR,EAAWC,IAAX,CAAgB,GAAhB,EAAqBC,OAArB,CAA6B,KAA7B,EAAoC,EAApC,EAAwCA,OAAxC,CAAgD,KAAhD,EAAuD,EAAvD,CAAlB,GAA+E;AAJxF,GAAP;AAMD;;AAEDC,OAAO,CAACd,IAAR,GAAeA,IAAf,C,CAEA;AACA;;AAEA,SAASe,WAAT,CAAqBC,MAArB,EAA6B;AAC3BA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACAA,EAAAA,MAAM,GAAGA,MAAM,CAACC,WAAP,EAAT;AACA,MAAIC,MAAM,GAAG7B,SAAb;;AACA,MAAIK,QAAJ,EAAc;AACZwB,IAAAA,MAAM,GAAG,SAAT;AACD,GAFD,MAGK,IAAIF,MAAM,CAACG,OAAP,CAAe,QAAf,MAA6B,CAAC,CAAlC,EAAqC;AACxCD,IAAAA,MAAM,GAAG,OAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,MAAf,MAA2B,CAAC,CAAhC,EAAmC;AACtCD,IAAAA,MAAM,GAAG,MAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,QAAf,MAA6B,CAAC,CAAlC,EAAqC;AACxCD,IAAAA,MAAM,GAAG,QAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,QAAf,MAA6B,CAAC,CAAlC,EAAqC;AACxCD,IAAAA,MAAM,GAAG,QAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,QAAf,MAA6B,CAAC,CAAlC,EAAqC;AACxCD,IAAAA,MAAM,GAAG,QAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,QAAf,MAA6B,CAAC,CAAlC,EAAqC;AACxCD,IAAAA,MAAM,GAAG,QAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,YAAf,MAAiC,CAAC,CAAtC,EAAyC;AAC5CD,IAAAA,MAAM,GAAG,YAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,QAAf,MAA6B,CAAC,CAAlC,EAAqC;AACxCD,IAAAA,MAAM,GAAG,QAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,QAAf,MAA6B,CAAC,CAAlC,EAAqC;AACxCD,IAAAA,MAAM,GAAG,QAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,QAAf,MAA6B,CAAC,CAAlC,EAAqC;AACxCD,IAAAA,MAAM,GAAG,QAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,UAAf,MAA+B,CAAC,CAApC,EAAuC;AAC1CD,IAAAA,MAAM,GAAG,UAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,SAAf,MAA8B,CAAC,CAAnC,EAAsC;AACzCD,IAAAA,MAAM,GAAG,SAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,MAAf,MAA2B,CAAC,CAAhC,EAAmC;AACtCD,IAAAA,MAAM,GAAG,MAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,IAAf,MAAyB,CAAC,CAA9B,EAAiC;AACpCD,IAAAA,MAAM,GAAG,IAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,SAAf,MAA8B,CAAC,CAAnC,EAAsC;AACzCD,IAAAA,MAAM,GAAG,SAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,SAAf,MAA8B,CAAC,CAAnC,EAAsC;AACzCD,IAAAA,MAAM,GAAG,SAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,UAAf,MAA+B,CAAC,CAApC,EAAuC;AAC1CD,IAAAA,MAAM,GAAG,UAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,WAAf,MAAgC,CAAC,CAArC,EAAwC;AAC3CD,IAAAA,MAAM,GAAG,WAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,OAAf,MAA4B,CAAC,CAAjC,EAAoC;AACvCD,IAAAA,MAAM,GAAG,OAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,UAAf,MAA+B,CAAC,CAApC,EAAuC;AAC1CD,IAAAA,MAAM,GAAG,UAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,SAAf,MAA8B,CAAC,CAAnC,EAAsC;AACzCD,IAAAA,MAAM,GAAG,SAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,QAAf,MAA6B,CAAC,CAAlC,EAAqC;AACxCD,IAAAA,MAAM,GAAG,QAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,WAAf,MAAgC,CAAC,CAArC,EAAwC;AAC3CD,IAAAA,MAAM,GAAG,WAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,OAAf,MAA4B,CAAC,CAAjC,EAAoC;AACvCD,IAAAA,MAAM,GAAG,OAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,OAAf,MAA4B,CAAC,CAAjC,EAAoC;AACvCD,IAAAA,MAAM,GAAG,OAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,MAAf,MAA2B,CAAC,CAAhC,EAAmC;AACtCD,IAAAA,MAAM,GAAG,MAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,MAAf,MAA2B,CAAC,CAAhC,EAAmC;AACtCD,IAAAA,MAAM,GAAG,aAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,SAAf,MAA8B,CAAC,CAAnC,EAAsC;AACzCD,IAAAA,MAAM,GAAG,SAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,SAAf,MAA8B,CAAC,CAAnC,EAAsC;AACzCD,IAAAA,MAAM,GAAG,SAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,QAAf,MAA6B,CAAC,CAAlC,EAAqC;AACxCD,IAAAA,MAAM,GAAG,QAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,SAAf,MAA8B,CAAC,CAAnC,EAAsC;AACzCD,IAAAA,MAAM,GAAG,SAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,OAAf,MAA4B,CAAC,CAAjC,EAAoC;AACvCD,IAAAA,MAAM,GAAG,OAAT;AACD,GAFI,MAGA,IAAIF,MAAM,CAACG,OAAP,CAAe,WAAf,MAAgC,CAAC,CAArC,EAAwC;AAC3CD,IAAAA,MAAM,GAAG,WAAT;AACD,GAFI,MAEE,IAAI1B,MAAM,IAAIwB,MAAd,EAAsB;AAC3BE,IAAAA,MAAM,GAAGF,MAAM,CAACC,WAAP,GAAqBG,IAArB,GAA4BP,OAA5B,CAAoC,MAApC,EAA4C,GAA5C,CAAT;AACD;;AACD,SAAOK,MAAP;AACD,C,CAED;AACA;;;AAEA,SAASG,MAAT,CAAgBC,QAAhB,EAA0B;AAExB,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9BlC,IAAAA,OAAO,CAACmC,QAAR,CAAiB,MAAM;AACrB,UAAIP,MAAM,GAAG;AAEX3B,QAAAA,QAAQ,EAAGF,SAAS,KAAK,YAAd,GAA6B,SAA7B,GAAyCA,SAFzC;AAGX2B,QAAAA,MAAM,EAAE,SAHG;AAIXU,QAAAA,OAAO,EAAE,SAJE;AAKXC,QAAAA,QAAQ,EAAE,EALC;AAMXC,QAAAA,MAAM,EAAE5C,EAAE,CAAC0C,OAAH,EANG;AAOXG,QAAAA,IAAI,EAAE7C,EAAE,CAAC6C,IAAH,EAPK;AAQXC,QAAAA,QAAQ,EAAE9C,EAAE,CAAC8C,QAAH,EARC;AASXC,QAAAA,QAAQ,EAAE,EATC;AAUXC,QAAAA,QAAQ,EAAE,EAVC;AAWXC,QAAAA,MAAM,EAAE,EAXG;AAYXC,QAAAA,KAAK,EAAE,EAZI;AAaXC,QAAAA,WAAW,EAAE,EAbF;AAcXC,QAAAA,IAAI,EAAE;AAdK,OAAb;;AAiBA,UAAI5C,MAAJ,EAAY;AAEVN,QAAAA,IAAI,CAAC,uEAAD,EAA0E,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AACrG;;AACA;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACU,cAAIZ,OAAO,GAAG,EAAd;AACA,cAAIa,KAAK,GAAGD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,CAAZ;AACAmC,UAAAA,KAAK,CAACC,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC5B,gBAAIA,IAAI,CAACtB,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AAC5BO,cAAAA,OAAO,CAACe,IAAI,CAACrC,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmBgB,IAAnB,GAA0BsB,WAA1B,EAAD,CAAP,GAAmDD,IAAI,CAACrC,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmBgB,IAAnB,EAAnD;AACD;AACF,WAJD;AAKA,cAAIuB,cAAc,GAAG,CAACjB,OAAO,CAACkB,OAAR,IAAmB,EAApB,EAAwB/B,OAAxB,CAAgC,IAAhC,EAAsC,EAAtC,CAArB;AACA,cAAIc,QAAQ,GAAG,CAACD,OAAO,CAACmB,gBAAR,IAA4BnB,OAAO,CAACoB,gBAApC,IAAwD,EAAzD,EAA6DjC,OAA7D,CAAqE,IAArE,EAA2E,EAA3E,CAAf;;AACA,cAAI8B,cAAc,CAACxB,OAAf,CAAuB,GAAvB,KAA+B,CAAnC,EAAsC;AACpCQ,YAAAA,QAAQ,GAAGgB,cAAc,CAACvC,KAAf,CAAqB,GAArB,EAA0B,CAA1B,EAA6BS,OAA7B,CAAqC,OAArC,EAA8C,EAA9C,EAAkDO,IAAlD,EAAX;AACAuB,YAAAA,cAAc,GAAGA,cAAc,CAACvC,KAAf,CAAqB,GAArB,EAA0B,CAA1B,EAA6BgB,IAA7B,EAAjB;AACD;;AACDF,UAAAA,MAAM,CAACF,MAAP,GAAgB,CAACU,OAAO,CAACqB,UAAR,IAAsBrB,OAAO,CAACsB,IAA9B,IAAsC,SAAvC,EAAkDnC,OAAlD,CAA0D,IAA1D,EAAgE,EAAhE,CAAhB;AACAK,UAAAA,MAAM,CAACc,QAAP,GAAkBjB,WAAW,CAACG,MAAM,CAACF,MAAR,CAA7B;AACAE,UAAAA,MAAM,CAACQ,OAAP,GAAiB,CAACiB,cAAc,IAAIjB,OAAO,CAACuB,eAA1B,IAA6CvB,OAAO,CAACwB,UAArD,IAAmE,SAApE,EAA+ErC,OAA/E,CAAuF,IAAvF,EAA6F,EAA7F,CAAjB;AACAK,UAAAA,MAAM,CAACS,QAAP,GAAkBA,QAAlB;AACAT,UAAAA,MAAM,CAACa,QAAP,GAAkB5C,IAAI,CAACgE,WAAL,EAAlB;AACAjC,UAAAA,MAAM,CAACgB,KAAP,GAAe,CAACR,OAAO,CAAC0B,QAAR,IAAoB,EAArB,EAAyBvC,OAAzB,CAAiC,IAAjC,EAAuC,EAAvC,EAA2CO,IAA3C,EAAf;AACAiC,UAAAA,WAAW,GAAGC,IAAd,CAAmBlB,IAAI,IAAI;AACzBlB,YAAAA,MAAM,CAACkB,IAAP,GAAcA,IAAd;AACAmB,YAAAA,IAAI,GAAGD,IAAP,CAAYE,IAAI,IAAI;AAClBtC,cAAAA,MAAM,CAACe,MAAP,GAAgBuB,IAAI,CAACxE,EAArB;;AACA,kBAAIsC,QAAJ,EAAc;AACZA,gBAAAA,QAAQ,CAACJ,MAAD,CAAR;AACD;;AACDM,cAAAA,OAAO,CAACN,MAAD,CAAP;AACD,aAND;AAOD,WATD,EA7BqG,CAuCrG;AACD,SAxCG,CAAJ;AAyCD;;AACD,UAAIvB,QAAQ,IAAIC,QAAZ,IAAwBC,OAA5B,EAAqC;AAEnCX,QAAAA,IAAI,CAAC,oFAAD,EAAuF,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAClH,cAAI,CAACD,KAAL,EAAY;AACV,gBAAIE,KAAK,GAAGD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,CAAZ;AACAc,YAAAA,MAAM,CAACF,MAAP,GAAgB7B,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,aAArB,CAAhB;AACArB,YAAAA,MAAM,CAACc,QAAP,GAAkBjB,WAAW,CAACG,MAAM,CAACF,MAAR,CAA7B;AACAE,YAAAA,MAAM,CAACQ,OAAP,GAAiBvC,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,gBAArB,EAAuCnC,KAAvC,CAA6C,GAA7C,EAAkD,CAAlD,CAAjB;AACAc,YAAAA,MAAM,CAACe,MAAP,GAAgB9C,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,WAArB,CAAhB;AACArB,YAAAA,MAAM,CAACS,QAAP,GAAkB,EAAlB;AACAT,YAAAA,MAAM,CAACa,QAAP,GAAkB5C,IAAI,CAACgE,WAAL,EAAlB;AACAjC,YAAAA,MAAM,CAACkB,IAAP,GAAcjD,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,oBAArB,EAA2CtB,WAA3C,GAAyDE,OAAzD,CAAiE,MAAjE,KAA4E,CAA1F;AACD;;AACD,cAAIG,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CAACJ,MAAD,CAAR;AACD;;AACDM,UAAAA,OAAO,CAACN,MAAD,CAAP;AACD,SAfG,CAAJ;AAgBD;;AACD,UAAIzB,OAAJ,EAAa;AACXP,QAAAA,IAAI,CAAC,sEAAD,EAAyE,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AACpG,cAAIC,KAAK,GAAGD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,CAAZ;AACAc,UAAAA,MAAM,CAACe,MAAP,GAAgB9C,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,WAArB,CAAhB;AACArB,UAAAA,MAAM,CAACF,MAAP,GAAgB7B,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,aAArB,CAAhB;AACArB,UAAAA,MAAM,CAACQ,OAAP,GAAiBvC,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,gBAArB,CAAjB;AACArB,UAAAA,MAAM,CAACgB,KAAP,GAAe/C,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,cAArB,CAAf;AACArB,UAAAA,MAAM,CAACc,QAAP,GAAkBjB,WAAW,CAACG,MAAM,CAACF,MAAR,CAA7B;AACAE,UAAAA,MAAM,CAACS,QAAP,GAAkB,OAAlB;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,MAAvB,IAAiC,CAAC,CAAlC,GAAsC,gBAAtC,GAAyDD,MAAM,CAACS,QAAnF;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,MAAvB,IAAiC,CAAC,CAAlC,GAAsC,gBAAtC,GAAyDD,MAAM,CAACS,QAAnF;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,MAAvB,IAAiC,CAAC,CAAlC,GAAsC,gBAAtC,GAAyDD,MAAM,CAACS,QAAnF;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,MAAvB,IAAiC,CAAC,CAAlC,GAAsC,kBAAtC,GAA2DD,MAAM,CAACS,QAArF;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,MAAvB,IAAiC,CAAC,CAAlC,GAAsC,uBAAtC,GAAgED,MAAM,CAACS,QAA1F;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,MAAvB,IAAiC,CAAC,CAAlC,GAAsC,eAAtC,GAAwDD,MAAM,CAACS,QAAlF;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,MAAvB,IAAiC,CAAC,CAAlC,GAAsC,oBAAtC,GAA6DD,MAAM,CAACS,QAAvF;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,MAAvB,IAAiC,CAAC,CAAlC,GAAsC,gBAAtC,GAAyDD,MAAM,CAACS,QAAnF;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,OAAvB,IAAkC,CAAC,CAAnC,GAAuC,eAAvC,GAAyDD,MAAM,CAACS,QAAnF;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,OAAvB,IAAkC,CAAC,CAAnC,GAAuC,iBAAvC,GAA2DD,MAAM,CAACS,QAArF;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,OAAvB,IAAkC,CAAC,CAAnC,GAAuC,cAAvC,GAAwDD,MAAM,CAACS,QAAlF;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,OAAvB,IAAkC,CAAC,CAAnC,GAAuC,mBAAvC,GAA6DD,MAAM,CAACS,QAAvF;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,OAAvB,IAAkC,CAAC,CAAnC,GAAuC,cAAvC,GAAwDD,MAAM,CAACS,QAAlF;AACAT,UAAAA,MAAM,CAACS,QAAP,GAAmBT,MAAM,CAACQ,OAAP,CAAeP,OAAf,CAAuB,OAAvB,IAAkC,CAAC,CAAnC,GAAuC,gBAAvC,GAA0DD,MAAM,CAACS,QAApF;AACAT,UAAAA,MAAM,CAACkB,IAAP,GAAc,IAAd;AACAlB,UAAAA,MAAM,CAACa,QAAP,GAAkB5C,IAAI,CAACgE,WAAL,EAAlB;;AACA,cAAI7B,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CAACJ,MAAD,CAAR;AACD;;AACDM,UAAAA,OAAO,CAACN,MAAD,CAAP;AACD,SA5BG,CAAJ;AA6BD;;AACD,UAAIpB,MAAJ,EAAY;AACVoB,QAAAA,MAAM,CAACQ,OAAP,GAAiBR,MAAM,CAACU,MAAxB;AACA1C,QAAAA,IAAI,CAAC,UAAD,EAAa,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AACxC,cAAIC,KAAK,GAAGD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,CAAZ;AACAc,UAAAA,MAAM,CAACF,MAAP,GAAgBuB,KAAK,CAAC,CAAD,CAArB;AACArB,UAAAA,MAAM,CAACc,QAAP,GAAkBjB,WAAW,CAACG,MAAM,CAACF,MAAR,CAA7B;;AACA,cAAIM,QAAJ,EAAc;AAAEA,YAAAA,QAAQ,CAACJ,MAAD,CAAR;AAAmB;;AACnCM,UAAAA,OAAO,CAACN,MAAD,CAAP;AACD,SANG,CAAJ;AAOD;;AACD,UAAIxB,QAAJ,EAAc;AACZwB,QAAAA,MAAM,CAACc,QAAP,GAAkBjB,WAAW,EAA7B;AACAG,QAAAA,MAAM,CAACQ,OAAP,GAAiBR,MAAM,CAACU,MAAxB;;AACA,YAAI;AACFzC,UAAAA,IAAI,CAACuE,IAAL,CAAU,eAAV,EAA2BJ,IAA3B,CAAiChB,MAAD,IAAY;AAC1C,gBAAIC,KAAK,GAAGD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,MAAxB,CAAZ;AACAc,YAAAA,MAAM,CAACF,MAAP,GAAgB7B,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,SAArB,EAAgC,GAAhC,EAAqCnB,IAArC,EAAhB;AACAF,YAAAA,MAAM,CAACe,MAAP,GAAgB9C,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,cAArB,EAAqC,GAArC,EAA0CnB,IAA1C,EAAhB;AACAF,YAAAA,MAAM,CAACgB,KAAP,GAAe/C,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,aAArB,EAAoC,GAApC,EAAyCnB,IAAzC,EAAf;AACAF,YAAAA,MAAM,CAACiB,WAAP,GAAqBhD,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,yBAArB,EAAgD,GAAhD,EAAqDnB,IAArD,KAA8D,GAA9D,GAAoEjC,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,yBAArB,EAAgD,GAAhD,EAAqDnB,IAArD,EAAzF;AACAF,YAAAA,MAAM,CAACa,QAAP,GAAkB5C,IAAI,CAACgE,WAAL,EAAlB;AACAQ,YAAAA,aAAa,GAAGL,IAAhB,CAAqBlB,IAAI,IAAI;AAC3BlB,cAAAA,MAAM,CAACkB,IAAP,GAAcA,IAAd;;AACA,kBAAId,QAAJ,EAAc;AACZA,gBAAAA,QAAQ,CAACJ,MAAD,CAAR;AACD;;AACDM,cAAAA,OAAO,CAACN,MAAD,CAAP;AACD,aAND;AAOD,WAdD;AAeD,SAhBD,CAgBE,OAAO0C,CAAP,EAAU;AACV,cAAItC,QAAJ,EAAc;AAAEA,YAAAA,QAAQ,CAACJ,MAAD,CAAR;AAAmB;;AACnCM,UAAAA,OAAO,CAACN,MAAD,CAAP;AACD;AACF;AACF,KAlJD;AAmJD,GApJM,CAAP;AAqJD;;AAEDJ,OAAO,CAACO,MAAR,GAAiBA,MAAjB;;AAEA,SAASgC,WAAT,GAAuB;AACrB,SAAO,IAAI9B,OAAJ,CAAaC,OAAD,IAAa;AAC9BlC,IAAAA,OAAO,CAACmC,QAAR,CAAiB,MAAM;AACrBrC,MAAAA,EAAE,CAACyE,IAAH,CAAQ,mBAAR,EAA6B,UAAUC,GAAV,EAAe;AAC1C,YAAI,CAACA,GAAL,EAAU;AACRtC,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAFD,MAEO;AACLA,UAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,OAND;AAOD,KARD;AASD,GAVM,CAAP;AAWD;;AAED,SAASmC,aAAT,GAAyB;AACvB,SAAO,IAAIpC,OAAJ,CAAaC,OAAD,IAAa;AAC9BlC,IAAAA,OAAO,CAACmC,QAAR,CAAiB,MAAM;AACrB,UAAI;AACFvC,QAAAA,IAAI,CAAC,0EAAD,EAA6EC,IAAI,CAAC4E,WAAlF,EAA+F,UAAU1B,KAAV,EAAiBC,MAAjB,EAAyB;AAC1H,cAAI,CAACD,KAAL,EAAY;AACV,kBAAMI,IAAI,GAAGH,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,MAAxB,EAAgC,CAAhC,CAAb;AACAoB,YAAAA,OAAO,CAACiB,IAAI,CAACxB,WAAL,GAAmBE,OAAnB,CAA2B,MAA3B,KAAsC,CAAvC,CAAP;AACA;AACD;;AACDK,UAAAA,OAAO,CAAC,KAAD,CAAP;AACD,SAPG,CAAJ;AAQD,OATD,CASE,OAAOoC,CAAP,EAAU;AACVpC,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,KAbD;AAcD,GAfM,CAAP;AAgBD;;AAED,SAASwC,QAAT,CAAkBC,IAAlB,EAAwB3C,QAAxB,EAAkC;AAChC,MAAI4C,aAAa,GAAG;AAClBtC,IAAAA,MAAM,EAAE5C,EAAE,CAAC0C,OAAH,EADU;AAElByC,IAAAA,OAAO,EAAE,EAFS;AAGlBC,IAAAA,aAAa,EAAE,EAHG;AAIlBC,IAAAA,gBAAgB,EAAE,EAJA;AAKlBC,IAAAA,IAAI,EAAEhF,OAAO,CAAC0E,QAAR,CAAiBM,IALL;AAMlBC,IAAAA,EAAE,EAAEjF,OAAO,CAAC0E,QAAR,CAAiBO,EANH;AAOlBC,IAAAA,GAAG,EAAE,EAPa;AAQlBC,IAAAA,IAAI,EAAE,EARY;AASlBC,IAAAA,GAAG,EAAE,EATa;AAUlBC,IAAAA,IAAI,EAAE,EAVY;AAWlBC,IAAAA,KAAK,EAAE,EAXW;AAYlBC,IAAAA,GAAG,EAAE,EAZa;AAalBC,IAAAA,GAAG,EAAE,EAba;AAclBC,IAAAA,KAAK,EAAE,EAdW;AAelBC,IAAAA,KAAK,EAAE,EAfW;AAgBlBC,IAAAA,OAAO,EAAE,EAhBS;AAiBlBC,IAAAA,MAAM,EAAE,EAjBU;AAkBlBC,IAAAA,KAAK,EAAE,EAlBW;AAmBlBC,IAAAA,GAAG,EAAE,EAnBa;AAoBlBC,IAAAA,MAAM,EAAE,EApBU;AAqBlBC,IAAAA,OAAO,EAAE,EArBS;AAsBlBC,IAAAA,UAAU,EAAE,EAtBM;AAuBlBC,IAAAA,IAAI,EAAE,EAvBY;AAwBlBC,IAAAA,MAAM,EAAE,EAxBU;AAyBlBC,IAAAA,OAAO,EAAE,EAzBS;AA0BlBC,IAAAA,GAAG,EAAE,EA1Ba;AA2BlBC,IAAAA,IAAI,EAAE,EA3BY;AA4BlBC,IAAAA,IAAI,EAAE,EA5BY;AA6BlBC,IAAAA,GAAG,EAAE,EA7Ba;AA8BlBC,IAAAA,UAAU,EAAE,EA9BM;AA+BlBC,IAAAA,MAAM,EAAE;AA/BU,GAApB;;AAkCA,WAASC,iBAAT,CAA2BhC,IAA3B,EAAiC;AAC/B,QAAIA,IAAI,KAAK,GAAb,EAAkB;AAChB,aAAO;AACLD,QAAAA,QAAQ,EAAEE,aADL;AAELgC,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID;;AACD,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcnC,IAAd,CAAL,EAA0B;AACxBA,MAAAA,IAAI,GAAGA,IAAI,CAAC7C,IAAL,GAAYH,WAAZ,GAA0BJ,OAA1B,CAAkC,KAAlC,EAAyC,GAAzC,EAA8CA,OAA9C,CAAsD,IAAtD,EAA4D,GAA5D,CAAP;AACAoD,MAAAA,IAAI,GAAGA,IAAI,CAAC7D,KAAL,CAAW,GAAX,CAAP;AACA,YAAMc,MAAM,GAAG;AACb8C,QAAAA,QAAQ,EAAE,EADG;AAEbkC,QAAAA,OAAO,EAAE;AAFI,OAAf;AAIAjC,MAAAA,IAAI,CAACzB,OAAL,CAAa6D,EAAE,IAAI;AACjB,YAAIA,EAAJ,EAAQ;AACN,eAAK,IAAIC,GAAT,IAAgBpC,aAAhB,EAA+B;AAC7B,gBAAI,GAAGqC,cAAH,CAAkBC,IAAlB,CAAuBtC,aAAvB,EAAsCoC,GAAtC,CAAJ,EAAgD;AAC9C,kBAAIA,GAAG,CAACrF,WAAJ,OAAsBoF,EAAE,CAACpF,WAAH,EAAtB,IAA0C,CAAC,GAAGsF,cAAH,CAAkBC,IAAlB,CAAuBtF,MAAM,CAAC8C,QAA9B,EAAwCsC,GAAxC,CAA/C,EAA6F;AAC3FpF,gBAAAA,MAAM,CAAC8C,QAAP,CAAgBsC,GAAhB,IAAuBpC,aAAa,CAACoC,GAAD,CAApC;;AACA,oBAAIA,GAAG,KAAK,SAAZ,EAAuB;AACrBpF,kBAAAA,MAAM,CAAC8C,QAAP,CAAgBI,aAAhB,GAAgC,EAAhC;AACAlD,kBAAAA,MAAM,CAAC8C,QAAP,CAAgBK,gBAAhB,GAAmC,EAAnC;AACD;;AAED,oBAAI,CAACnD,MAAM,CAAC8C,QAAP,CAAgBsC,GAAhB,CAAL,EAA2B;AAAEpF,kBAAAA,MAAM,CAACgF,OAAP;AAAmB;AACjD;AACF;AACF;AACF;AACF,OAhBD;AAiBA,aAAOhF,MAAP;AACD;AACF;;AAED,SAAO,IAAIK,OAAJ,CAAaC,OAAD,IAAa;AAC9BlC,IAAAA,OAAO,CAACmC,QAAR,CAAiB,MAAM;AACrB,UAAItC,IAAI,CAACsH,UAAL,CAAgBxC,IAAhB,KAAyB,CAAC3C,QAA9B,EAAwC;AACtCA,QAAAA,QAAQ,GAAG2C,IAAX;AACAA,QAAAA,IAAI,GAAG,GAAP;AACD,OAHD,MAGO;AACLA,QAAAA,IAAI,GAAGA,IAAI,IAAI,GAAf;AACD;;AACD,YAAMyC,OAAO,GAAGT,iBAAiB,CAAChC,IAAD,CAAjC;AACA,UAAI0C,cAAc,GAAGD,OAAO,CAACR,OAA7B;;AAEA,UAAIU,iBAAiB,GAAI,YAAY;AACnC,eAAO,YAAY;AACjB,cAAI,EAAED,cAAF,KAAqB,CAAzB,EAA4B;AAC1B,gBAAIrF,QAAJ,EAAc;AACZA,cAAAA,QAAQ,CAACoF,OAAO,CAAC1C,QAAT,CAAR;AACD;;AACDxC,YAAAA,OAAO,CAACkF,OAAO,CAAC1C,QAAT,CAAP;AACD;AACF,SAPD;AAQD,OATuB,EAAxB;;AAWA,UAAI6C,GAAG,GAAG,EAAV;;AACA,UAAI;AACF,YAAI,GAAGN,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,SAAzC,CAAJ,EAAyD;AACvD0C,UAAAA,OAAO,CAAC1C,QAAR,CAAiBG,OAAjB,GAA2B7E,OAAO,CAAC0E,QAAR,CAAiBG,OAA5C;AACAjF,UAAAA,IAAI,CAAC,iBAAD,EAAoB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC/C,gBAAI,CAACD,KAAL,EAAY;AACV,kBAAIyE,cAAc,GAAGxE,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,EAAiCgB,IAAjC,EAArB;AACA,kBAAI+C,OAAO,GAAG2C,cAAc,CAAC1G,KAAf,CAAqB,GAArB,CAAd;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiBI,aAAjB,GAAiCD,OAAO,CAAC1D,MAAR,GAAiB,CAAjB,GAAqB0D,OAAO,CAAC,CAAD,CAA5B,GAAkCA,OAAO,CAAC,CAAD,CAA1E;AACAuC,cAAAA,OAAO,CAAC1C,QAAR,CAAiBK,gBAAjB,GAAoCF,OAAO,CAAC1D,MAAR,GAAiB,CAAjB,GAAqB0D,OAAO,CAAC,CAAD,CAA5B,GAAkC,SAAtE;AACD;;AACDyC,YAAAA,iBAAiB;AAClB,WARG,CAAJ;AASD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,KAAzC,CAAJ,EAAqD;AACnD9E,UAAAA,IAAI,CAAC,QAAD,EAAW,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AACtC,gBAAI,CAACD,KAAL,EAAY;AACVqE,cAAAA,OAAO,CAAC1C,QAAR,CAAiBQ,GAAjB,GAAuBlC,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,CAAvB;AACD;;AACDwG,YAAAA,iBAAiB;AAClB,WALG,CAAJ;AAMD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,KAAzC,CAAJ,EAAqD;AACnD6C,UAAAA,GAAG,GAAG,KAAN;;AACA,cAAInH,QAAJ,EAAc;AACZmH,YAAAA,GAAG,IAAI,MAAP;AACD;;AACD3H,UAAAA,IAAI,CAAE,GAAE2H,GAAI,KAAR,EAAc,UAAUxE,KAAV,EAAiBC,MAAjB,EAAyB;AACzC,gBAAI,CAACD,KAAL,EAAY;AACV,kBAAIqC,GAAG,GAAGpC,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,EAAiCgB,IAAjC,EAAV;;AACA,kBAAI,CAACsD,GAAG,CAACqC,UAAJ,CAAe,OAAf,CAAL,EAA8B;AAC5BL,gBAAAA,OAAO,CAAC1C,QAAR,CAAiBU,GAAjB,GAAuBA,GAAvB;AACD;AACF;;AACDkC,YAAAA,iBAAiB;AAClB,WARG,CAAJ;AASD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,MAAzC,CAAJ,EAAsD;AACpD9E,UAAAA,IAAI,CAAC,gBAAD,EAAmB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC9C,gBAAI,CAACD,KAAL,EAAY;AACVqE,cAAAA,OAAO,CAAC1C,QAAR,CAAiBS,IAAjB,GAAwBnC,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,CAAxB;AACD;;AACDwG,YAAAA,iBAAiB;AAClB,WALG,CAAJ;AAMD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,MAAzC,CAAJ,EAAsD;AACpD6C,UAAAA,GAAG,GAAG,MAAN;;AACA,cAAInH,QAAJ,EAAc;AACZmH,YAAAA,GAAG,IAAI,MAAP;AACD;;AACD3H,UAAAA,IAAI,CAAE,GAAE2H,GAAI,YAAR,EAAqB,UAAUxE,KAAV,EAAiBC,MAAjB,EAAyB;AAChD,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAMsC,IAAI,GAAGrC,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAjD;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiBW,IAAjB,GAAwB,CAACA,IAAI,CAAC1D,WAAL,GAAmBb,KAAnB,CAAyB,SAAzB,EAAoC,CAApC,KAA0C,EAA3C,EAA+CgB,IAA/C,EAAxB;AACD;;AACDwF,YAAAA,iBAAiB;AAClB,WANG,CAAJ;AAOD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,KAAzC,CAAJ,EAAqD;AACnD6C,UAAAA,GAAG,GAAG,KAAN;;AACA,cAAInH,QAAJ,EAAc;AACZmH,YAAAA,GAAG,IAAI,MAAP;AACD;;AACD3H,UAAAA,IAAI,CAAE,GAAE2H,GAAI,YAAR,EAAqB,UAAUxE,KAAV,EAAiBC,MAAjB,EAAyB;AAChD,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAMyC,GAAG,GAAGxC,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAhD;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiBc,GAAjB,GAAuB,CAACA,GAAG,CAAC7D,WAAJ,GAAkBb,KAAlB,CAAwB,SAAxB,EAAmC,CAAnC,KAAyC,EAA1C,EAA8CgB,IAA9C,EAAvB;AACD;;AACDwF,YAAAA,iBAAiB;AAClB,WANG,CAAJ;AAOD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,OAAzC,CAAJ,EAAuD;AACrD6C,UAAAA,GAAG,GAAG,OAAN;;AACA,cAAInH,QAAJ,EAAc;AACZmH,YAAAA,GAAG,IAAI,MAAP;AACD;;AACD3H,UAAAA,IAAI,CAAE,GAAE2H,GAAI,YAAR,EAAqB,UAAUxE,KAAV,EAAiBC,MAAjB,EAAyB;AAChD,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAMuC,KAAK,GAAGtC,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAlD;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiBY,KAAjB,GAAyB,CAACA,KAAK,CAAC3D,WAAN,GAAoBb,KAApB,CAA0B,OAA1B,EAAmC,CAAnC,KAAyC,EAA1C,EAA8CgB,IAA9C,EAAzB;AACD;;AACDwF,YAAAA,iBAAiB;AAClB,WANG,CAAJ;AAOD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,KAAzC,CAAJ,EAAqD;AACnD,cAAIvE,OAAJ,EAAa;AACX,kBAAMuH,iBAAiB,GAAG5H,EAAE,CAAC6H,UAAH,CAAc,uBAAd,CAA1B;;AACA,gBAAI9H,IAAI,CAAC+H,iBAAL,MAA4BF,iBAAhC,EAAmD;AACjD9H,cAAAA,IAAI,CAAC,eAAD,EAAkB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC7C,oBAAI,CAACD,KAAL,EAAY;AACV,sBAAIwC,GAAG,GAAGvC,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAA9C;AACAyE,kBAAAA,GAAG,GAAG,CAACA,GAAG,CAAC5D,WAAJ,GAAkBb,KAAlB,CAAwB,SAAxB,EAAmC,CAAnC,KAAyC,EAA1C,EAA8CgB,IAA9C,EAAN;AACAsF,kBAAAA,OAAO,CAAC1C,QAAR,CAAiBa,GAAjB,GAAuB,CAACA,GAAG,CAACzE,KAAJ,CAAU,GAAV,EAAe,CAAf,KAAqB,EAAtB,EAA0BgB,IAA1B,EAAvB;AACD;;AACDwF,gBAAAA,iBAAiB;AAClB,eAPG,CAAJ;AAQD,aATD,MASO;AACLA,cAAAA,iBAAiB;AAClB;AACF,WAdD,MAcO;AACL1H,YAAAA,IAAI,CAAC,eAAD,EAAkB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC7C,kBAAI,CAACD,KAAL,EAAY;AACV,oBAAIwC,GAAG,GAAGvC,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAA9C;AACAyE,gBAAAA,GAAG,GAAG,CAACA,GAAG,CAAC5D,WAAJ,GAAkBb,KAAlB,CAAwB,SAAxB,EAAmC,CAAnC,KAAyC,EAA1C,EAA8CgB,IAA9C,EAAN;AACAsF,gBAAAA,OAAO,CAAC1C,QAAR,CAAiBa,GAAjB,GAAuB,CAACA,GAAG,CAACzE,KAAJ,CAAU,GAAV,EAAe,CAAf,KAAqB,EAAtB,EAA0BgB,IAA1B,EAAvB;AACD;;AACDwF,cAAAA,iBAAiB;AAClB,aAPG,CAAJ;AAQD;AACF;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,QAAzC,CAAJ,EAAwD;AACtD9E,UAAAA,IAAI,CAAC,mBAAD,EAAsB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AACjD,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAM6C,MAAM,GAAG,CAAC5C,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAArC,EAAyCA,KAAzC,CAA+C,GAA/C,CAAf;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiBkB,MAAjB,GAA2BA,MAAM,CAACzE,MAAP,GAAgB,CAAhB,GAAoByE,MAAM,CAAC,CAAD,CAAN,CAAUrE,OAAV,CAAkB,QAAlB,EAA4B,EAA5B,EAAgCA,OAAhC,CAAwC,GAAxC,EAA6C,EAA7C,EAAiDO,IAAjD,EAApB,GAA8E,EAAzG;AACD;;AACDwF,YAAAA,iBAAiB;AAClB,WANG,CAAJ;AAOD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,OAAzC,CAAJ,EAAuD;AACrD9E,UAAAA,IAAI,CAAC,eAAD,EAAkB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC7C,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAM8C,KAAK,GAAG7C,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAlD;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiBmB,KAAjB,GAAyB,CAACA,KAAK,CAAClE,WAAN,GAAoBb,KAApB,CAA0B,GAA1B,EAA+B,CAA/B,KAAqC,EAAtC,EAA0CgB,IAA1C,EAAzB;AACD;;AACDwF,YAAAA,iBAAiB;AAClB,WANG,CAAJ;AAOD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,OAAzC,CAAJ,EAAuD;AACrD9E,UAAAA,IAAI,CAAC,UAAD,EAAa,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AACxC,gBAAI,CAACD,KAAL,EAAY;AACV,kBAAI0C,KAAK,GAAGzC,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAhD;AACA2E,cAAAA,KAAK,GAAGA,KAAK,CAAC9D,WAAN,EAAR;;AACA,kBAAI8D,KAAK,CAAC5D,OAAN,CAAc,GAAd,IAAqB,CAAC,CAA1B,EAA6B;AAC3B4D,gBAAAA,KAAK,GAAG,CAACA,KAAK,CAAC3E,KAAN,CAAY,GAAZ,EAAiB,CAAjB,KAAuB,EAAxB,EAA4BgB,IAA5B,EAAR;AACA,sBAAM+F,KAAK,GAAGpC,KAAK,CAAC3E,KAAN,CAAY,GAAZ,CAAd;AACAsG,gBAAAA,OAAO,CAAC1C,QAAR,CAAiBe,KAAjB,GAAyB,CAACoC,KAAK,CAACA,KAAK,CAAC1G,MAAN,GAAe,CAAhB,CAAL,IAA2B,EAA5B,EAAgCW,IAAhC,EAAzB;AACD,eAJD,MAIO;AACL,oBAAI2D,KAAK,CAAC5D,OAAN,CAAc,OAAd,IAAyB,CAAC,CAA9B,EAAiC;AAC/B4D,kBAAAA,KAAK,GAAGA,KAAK,CAAC3E,KAAN,CAAY,OAAZ,EAAqB,CAArB,CAAR;AACAsG,kBAAAA,OAAO,CAAC1C,QAAR,CAAiBe,KAAjB,GAAyBA,KAAK,CAAC3E,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAzB;AACD;AACF;AACF;;AACDwG,YAAAA,iBAAiB;AAClB,WAhBG,CAAJ;AAiBD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,KAAzC,CAAJ,EAAqD;AACnD9E,UAAAA,IAAI,CAAC,QAAD,EAAW,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AACtC,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAM+C,GAAG,GAAG9C,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAhD;AACA,kBAAI+G,KAAK,GAAG/B,GAAG,CAAChF,KAAJ,CAAU,GAAV,CAAZ;;AACA,kBAAI+G,KAAK,CAAC,CAAD,CAAL,CAAShG,OAAT,CAAiB,GAAjB,CAAJ,EAA2B;AACzBgG,gBAAAA,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAL,CAAS/G,KAAT,CAAe,GAAf,CAAR;AACD;;AACDsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiBoB,GAAjB,GAAuB+B,KAAK,CAAC,CAAD,CAAL,CAAStG,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAAvB;AACD;;AACD+F,YAAAA,iBAAiB;AAClB,WAVG,CAAJ;AAWD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,OAAzC,CAAJ,EAAuD;AACrD9E,UAAAA,IAAI,CAAC,wBAAD,EAA2B,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AACtD,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAM2C,KAAK,GAAG1C,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAlD;AACA,oBAAM+G,KAAK,GAAGnC,KAAK,CAAC5E,KAAN,CAAY,GAAZ,CAAd;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiBgB,KAAjB,GAAyB7F,IAAI,CAACsE,QAAL,CAAc0D,KAAd,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,IAA/B,CAAzB;AACD;;AACDP,YAAAA,iBAAiB;AAClB,WAPG,CAAJ;AAQD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,QAAzC,CAAJ,EAAwD;AACtD9E,UAAAA,IAAI,CAAC,kBAAD,EAAqB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAChD,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAMgD,MAAM,GAAG/C,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAnD;AACA,oBAAM+G,KAAK,GAAG9B,MAAM,CAACjF,KAAP,CAAa,GAAb,CAAd;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiBqB,MAAjB,GAA0B8B,KAAK,CAAC1G,MAAN,GAAe,CAAf,IAAoB0G,KAAK,CAAC,CAAD,CAAL,CAASC,QAAT,CAAkB,GAAlB,CAApB,GAA6CD,KAAK,CAAC,CAAD,CAAL,CAASxG,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAA7C,GAAqE,EAA/F;AACD;;AACDiG,YAAAA,iBAAiB;AAClB,WAPG,CAAJ;AAQD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,SAAzC,CAAJ,EAAyD;AACvD9E,UAAAA,IAAI,CAAC,iCAAD,EAAoC,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC/D,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAMiD,OAAO,GAAGhD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,KAAiC,EAAjD;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiBsB,OAAjB,GAA2BnG,IAAI,CAACsE,QAAL,CAAc6B,OAAd,EAAuB,cAAvB,EAAuC,GAAvC,EAA4C,IAA5C,CAA3B;AACD;;AACDsB,YAAAA,iBAAiB;AAClB,WANG,CAAJ;AAOD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,SAAzC,CAAJ,EAAyD;AACvD9E,UAAAA,IAAI,CAAC,kBAAD,EAAqB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAChD,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAM4C,OAAO,GAAG3C,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAApD;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiBiB,OAAjB,GAA2B,CAACA,OAAO,CAAChE,WAAR,GAAsBb,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,KAAuC,EAAxC,EAA4CS,OAA5C,CAAoD,UAApD,EAAgE,EAAhE,CAA3B;AACD;;AACD+F,YAAAA,iBAAiB;AAClB,WANG,CAAJ;AAOD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,YAAzC,CAAJ,EAA4D;AAC1D,cAAIxE,MAAJ,EAAY;AACVN,YAAAA,IAAI,CAAC,qBAAD,EAAwB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AACnD,kBAAI,CAACD,KAAL,EAAY;AACV,sBAAMgF,aAAa,GAAG/E,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8BkH,IAA9B,EAAtB;;AACA,oBAAID,aAAa,CAAC5G,MAAlB,EAA0B;AACxBvB,kBAAAA,IAAI,CAACmI,aAAa,CAACA,aAAa,CAAC5G,MAAd,GAAuB,CAAxB,CAAb,GAA0C,KAA3C,EAAkD,UAAU4B,KAAV,EAAiBC,MAAjB,EAAyB;AAC7E,wBAAI,CAACD,KAAL,EAAY;AACV,4BAAMkD,UAAU,GAAGjD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,EAAiCA,KAAjC,CAAuC,GAAvC,KAA+C,EAAlE;AACAsG,sBAAAA,OAAO,CAAC1C,QAAR,CAAiBuB,UAAjB,GAA8BA,UAAU,CAAC9E,MAAX,GAAoB8E,UAAU,CAACA,UAAU,CAAC9E,MAAX,GAAoB,CAArB,CAA9B,GAAwD,EAAtF;AACD;;AACDmG,oBAAAA,iBAAiB;AAClB,mBANG,CAAJ;AAOD,iBARD,MAQO;AACLA,kBAAAA,iBAAiB;AAClB;AACF,eAbD,MAaO;AACL1H,gBAAAA,IAAI,CAAC,SAAD,EAAY,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AACvC,sBAAI,CAACD,KAAL,EAAY;AACV,0BAAMkD,UAAU,GAAGjD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,EAAiCA,KAAjC,CAAuC,GAAvC,KAA+C,EAAlE;AACAsG,oBAAAA,OAAO,CAAC1C,QAAR,CAAiBuB,UAAjB,GAA8BA,UAAU,CAAC9E,MAAX,GAAoB8E,UAAU,CAACA,UAAU,CAAC9E,MAAX,GAAoB,CAArB,CAA9B,GAAwD,EAAtF;AACAiG,oBAAAA,OAAO,CAAC1C,QAAR,CAAiBuB,UAAjB,GAA8BmB,OAAO,CAAC1C,QAAR,CAAiBuB,UAAjB,CAA4BnF,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAA9B;AACD;;AACDwG,kBAAAA,iBAAiB;AAClB,iBAPG,CAAJ;AAQAA,gBAAAA,iBAAiB;AAClB;AACF,aAzBG,CAAJ;AA0BD,WA3BD,MA2BO;AACL,gBAAIlH,QAAJ,EAAc;AACZP,cAAAA,IAAI,CAACuE,IAAL,CAAU,oBAAV,EAAgCJ,IAAhC,CAAsChB,MAAD,IAAY;AAC/C,oBAAIiF,eAAe,GAAGjF,MAAM,CAAClC,KAAP,CAAa,SAAb,CAAtB;;AACA,qBAAK,IAAIoH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,eAAe,CAAC9G,MAApC,EAA4C+G,CAAC,EAA7C,EAAiD;AAC/C,sBAAID,eAAe,CAACC,CAAD,CAAf,CAAmBpG,IAAnB,OAA8B,EAAlC,EAAsC;AACpC,wBAAImB,KAAK,GAAGgF,eAAe,CAACC,CAAD,CAAf,CAAmBpG,IAAnB,GAA0BhB,KAA1B,CAAgC,MAAhC,CAAZ;AACA,wBAAIqH,UAAU,GAAGtI,IAAI,CAACsE,QAAL,CAAclB,KAAd,EAAqB,SAArB,EAAgC,GAAhC,EAAqC,IAArC,EAA2CtB,WAA3C,EAAjB;;AACA,wBAAIwG,UAAU,CAACtG,OAAX,CAAmB,YAAnB,IAAmC,CAAC,CAAxC,EAA2C;AACzC,4BAAMgG,KAAK,GAAGM,UAAU,CAACrH,KAAX,CAAiB,UAAjB,CAAd;;AACA,0BAAI+G,KAAK,CAAC1G,MAAN,GAAe,CAAnB,EAAsB;AACpBiG,wBAAAA,OAAO,CAAC1C,QAAR,CAAiBuB,UAAjB,GAA8B4B,KAAK,CAAC,CAAD,CAAnC;AACD;AACF;AACF;AACF;;AACDP,gBAAAA,iBAAiB;AAClB,eAfD;AAgBD,aAjBD,MAiBO;AACL1H,cAAAA,IAAI,CAAC,aAAD,EAAgB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC3C,oBAAI,CAACD,KAAL,EAAY;AACV,wBAAMkD,UAAU,GAAGjD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,EAAiCA,KAAjC,CAAuC,GAAvC,KAA+C,EAAlE;AACAsG,kBAAAA,OAAO,CAAC1C,QAAR,CAAiBuB,UAAjB,GAA8BA,UAAU,CAAC9E,MAAX,GAAoB8E,UAAU,CAACA,UAAU,CAAC9E,MAAX,GAAoB,CAArB,CAA9B,GAAwD,EAAtF;AACD;;AACDmG,gBAAAA,iBAAiB;AAClB,eANG,CAAJ;AAOD;AACF;AACF;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,MAAzC,CAAJ,EAAsD;AACpD9E,UAAAA,IAAI,CAAC,SAAD,EAAY,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AACvC,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAMmD,IAAI,GAAGlD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,KAAiC,EAA9C;;AACA,qBAAOoF,IAAI,CAAC/E,MAAL,GAAc,CAAd,IAAmB+E,IAAI,CAAC,CAAD,CAAJ,CAAQpE,IAAR,OAAmB,EAA7C,EAAiD;AAC/CoE,gBAAAA,IAAI,CAACkC,KAAL;AACD;;AACD,kBAAIlC,IAAI,CAAC/E,MAAL,GAAc,CAAlB,EAAqB;AACnBiG,gBAAAA,OAAO,CAAC1C,QAAR,CAAiBwB,IAAjB,GAAwBA,IAAI,CAAC,CAAD,CAAJ,CAAQpF,KAAR,CAAc,GAAd,EAAmBuH,GAAnB,GAAyBvH,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,EAAuCS,OAAvC,CAA+C,GAA/C,EAAoD,EAApD,CAAxB;AACD;AACF;;AACD+F,YAAAA,iBAAiB;AAClB,WAXG,CAAJ;AAYD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,QAAzC,CAAJ,EAAwD;AACtD9E,UAAAA,IAAI,CAAC,gBAAD,EAAmB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC9C,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAMoD,MAAM,GAAGnD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAnD;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiByB,MAAjB,GAA0BA,MAAM,CAACxE,WAAP,GAAqBJ,OAArB,CAA6B,QAA7B,EAAuC,EAAvC,EAA2CO,IAA3C,EAA1B;AACD;;AACDwF,YAAAA,iBAAiB;AAClB,WANG,CAAJ;AAOD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,SAAzC,CAAJ,EAAyD;AACvD9E,UAAAA,IAAI,CAAC,iBAAD,EAAoB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC/C,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAMoD,MAAM,GAAGnD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAnD;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiB0B,OAAjB,GAA2BD,MAAM,CAACxE,WAAP,GAAqBJ,OAArB,CAA6B,QAA7B,EAAuC,EAAvC,EAA2CO,IAA3C,EAA3B;AACD;;AACDwF,YAAAA,iBAAiB;AAClB,WANG,CAAJ;AAOD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,KAAzC,CAAJ,EAAqD;AACnD9E,UAAAA,IAAI,CAAC,aAAD,EAAgB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC3C,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAMsD,GAAG,GAAGrD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAhD;AACA,oBAAM+G,KAAK,GAAGxB,GAAG,CAACvF,KAAJ,CAAU,GAAV,CAAd;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiB2B,GAAjB,GAAuBwB,KAAK,CAAC1G,MAAN,IAAgB,CAAhB,GAAoB0G,KAAK,CAAC,CAAD,CAAzB,GAA+B,EAAtD;AACD;;AACDP,YAAAA,iBAAiB;AAClB,WAPG,CAAJ;AAQD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,MAAzC,CAAJ,EAAsD;AACpD9E,UAAAA,IAAI,CAAC,cAAD,EAAiB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC5C,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAMsD,GAAG,GAAGrD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAhD;AACA,oBAAM+G,KAAK,GAAGxB,GAAG,CAACvF,KAAJ,CAAU,GAAV,CAAd;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiB4B,IAAjB,GAAwBuB,KAAK,CAAC1G,MAAN,IAAgB,CAAhB,GAAoB0G,KAAK,CAAC,CAAD,CAAzB,GAA+B,EAAvD;AACD;;AACDP,YAAAA,iBAAiB;AAClB,WAPG,CAAJ;AAQD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,MAAzC,CAAJ,EAAsD;AACpD,cAAIvE,OAAJ,EAAa;AACX;AACAP,YAAAA,IAAI,CAAC,gCAAD,EAAmC,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC9D,kBAAI,CAACD,KAAD,IAAUC,MAAM,CAACnC,QAAP,GAAkBc,WAAlB,GAAgCE,OAAhC,CAAwC,iBAAxC,MAA+D,CAAC,CAA9E,EAAiF;AAC/E;AACAjC,gBAAAA,IAAI,CAAC,oBAAD,EAAuB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAClD,sBAAI,CAACD,KAAL,EAAY;AACV,0BAAMwD,IAAI,GAAGvD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAjD;AACA,0BAAM+G,KAAK,GAAGtB,IAAI,CAACzF,KAAL,CAAW,GAAX,CAAd;AACAsG,oBAAAA,OAAO,CAAC1C,QAAR,CAAiB6B,IAAjB,GAAwBsB,KAAK,CAAC1G,MAAN,KAAiB,CAAjB,GAAqB0G,KAAK,CAAC,CAAD,CAAL,CAAS/F,IAAT,EAArB,GAAuC,EAA/D;AACD;;AACDwF,kBAAAA,iBAAiB;AAClB,iBAPG,CAAJ;AAQD,eAVD,MAUO;AACLA,gBAAAA,iBAAiB;AAClB;AACF,aAdG,CAAJ;AAeD,WAjBD,MAiBO;AACL1H,YAAAA,IAAI,CAAC,oBAAD,EAAuB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAClD,kBAAI,CAACD,KAAL,EAAY;AACV,sBAAMwD,IAAI,GAAGvD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAjD;AACA,sBAAM+G,KAAK,GAAGtB,IAAI,CAACzF,KAAL,CAAW,GAAX,CAAd;AACAsG,gBAAAA,OAAO,CAAC1C,QAAR,CAAiB6B,IAAjB,GAAwBsB,KAAK,CAAC1G,MAAN,KAAiB,CAAjB,GAAqB0G,KAAK,CAAC,CAAD,CAAL,CAAS/F,IAAT,EAArB,GAAuC,EAA/D;AACD;;AACDwF,cAAAA,iBAAiB;AAClB,aAPG,CAAJ;AAQD;AACF;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,KAAzC,CAAJ,EAAqD;AACnD,cAAKvE,OAAO,IAAIN,IAAI,CAAC+H,iBAAL,EAAZ,IAAyC,CAACzH,OAA9C,EAAuD;AACrDP,YAAAA,IAAI,CAAC,kBAAD,EAAqB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAChD,kBAAI,CAACD,KAAL,EAAY;AACVqE,gBAAAA,OAAO,CAAC1C,QAAR,CAAiB8B,GAAjB,GAAuBxD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,EAAiCgB,IAAjC,MAA2C,EAAlE;AACD;;AACD,kBAAIsF,OAAO,CAAC1C,QAAR,CAAiB8B,GAAjB,CAAqB3E,OAArB,CAA6B,GAA7B,IAAoC,CAAC,CAAzC,EAA4C;AAC1CyF,gBAAAA,iBAAiB;AAClB,eAFD,MAEO;AACL1H,gBAAAA,IAAI,CAAC,eAAD,EAAkB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC7C,sBAAI,CAACD,KAAL,EAAY;AACV,0BAAMyD,GAAG,GAAGxD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,EAAiCgB,IAAjC,EAAZ;;AACA,wBAAI0E,GAAG,CAAC3E,OAAJ,CAAY,KAAZ,IAAqB,CAAC,CAAtB,IAA2B2E,GAAG,CAAC3E,OAAJ,CAAY,GAAZ,IAAmB,CAAC,CAAnD,EAAsD;AACpD,4BAAMgG,KAAK,GAAGrB,GAAG,CAAC1F,KAAJ,CAAU,GAAV,CAAd;AACAsG,sBAAAA,OAAO,CAAC1C,QAAR,CAAiB8B,GAAjB,GAAuBqB,KAAK,CAAC,CAAD,CAAL,CAAS/F,IAAT,MAAmBsF,OAAO,CAAC1C,QAAR,CAAiB8B,GAA3D;AACD;AACF;;AACDc,kBAAAA,iBAAiB;AAClB,iBATG,CAAJ;AAUD;AACF,aAlBG,CAAJ;AAmBD,WApBD,MAoBO;AACLA,YAAAA,iBAAiB;AAClB;AACF;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,YAAzC,CAAJ,EAA4D;AAC1D9E,UAAAA,IAAI,CAACC,IAAI,CAACyI,aAAL,KAAuB,UAAxB,EAAoC,UAAUvF,KAAV,EAAiBC,MAAjB,EAAyB;AAC/D,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAMwF,IAAI,GAAGvF,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAjD;AACA,oBAAM+G,KAAK,GAAGU,IAAI,CAACzH,KAAL,CAAW,GAAX,CAAd;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiB+B,UAAjB,GAA8BoB,KAAK,CAAC,CAAD,CAAnC;AACD;;AACDP,YAAAA,iBAAiB;AAClB,WAPG,CAAJ;AAQD;;AACD,YAAI,GAAGL,cAAH,CAAkBC,IAAlB,CAAuBE,OAAO,CAAC1C,QAA/B,EAAyC,QAAzC,CAAJ,EAAwD;AACtD9E,UAAAA,IAAI,CAAC,uBAAD,EAA0B,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AACrD,gBAAI,CAACD,KAAL,EAAY;AACV,oBAAM2D,MAAM,GAAG1D,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,KAAoC,EAAnD;AACAsG,cAAAA,OAAO,CAAC1C,QAAR,CAAiBgC,MAAjB,GAA0BA,MAAM,CAAC5E,IAAP,EAA1B;AACD;;AACDwF,YAAAA,iBAAiB;AAClB,WANG,CAAJ;AAOD;AACF,OA3XD,CA2XE,OAAOhD,CAAP,EAAU;AACV,YAAItC,QAAJ,EAAc;AAAEA,UAAAA,QAAQ,CAACoF,OAAO,CAAC1C,QAAT,CAAR;AAA6B;;AAC7CxC,QAAAA,OAAO,CAACkF,OAAO,CAAC1C,QAAT,CAAP;AACD;AACF,KArZD;AAsZD,GAvZM,CAAP;AAwZD;;AAEDlD,OAAO,CAACkD,QAAR,GAAmBA,QAAnB;;AAEA,SAAS8D,KAAT,CAAexG,QAAf,EAAyB;AACvB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUuG,MAAV,KAAqB;AACtCzI,IAAAA,OAAO,CAACmC,QAAR,CAAiB,MAAM;AACrB,UAAI/B,QAAJ,EAAc;AACZ,YAAI2C,KAAK,GAAG,IAAI2F,KAAJ,CAAUjI,aAAV,CAAZ;;AACA,YAAIuB,QAAJ,EAAc;AACZA,UAAAA,QAAQ,CAACvB,aAAD,CAAR;AACD;;AACDgI,QAAAA,MAAM,CAAC1F,KAAD,CAAN;AACD;;AAED,UAAInB,MAAM,GAAG,EAAb;AACAhC,MAAAA,IAAI,CAAC,aAAD,EAAgB,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC3C,YAAI,CAACD,KAAL,EAAY;AACVnB,UAAAA,MAAM,GAAGoB,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,CAAT;AACD;;AACD,YAAIkB,QAAJ,EAAc;AACZA,UAAAA,QAAQ,CAACJ,MAAD,CAAR;AACD;;AACDM,QAAAA,OAAO,CAACN,MAAD,CAAP;AACD,OARG,CAAJ;AASD,KAnBD;AAoBD,GArBM,CAAP;AAsBD;;AAEDJ,OAAO,CAACgH,KAAR,GAAgBA,KAAhB;;AAEA,SAASvE,IAAT,CAAcjC,QAAd,EAAwB;AACtB,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9BlC,IAAAA,OAAO,CAACmC,QAAR,CAAiB,MAAM;AAErB,UAAIP,MAAM,GAAG;AACXlC,QAAAA,EAAE,EAAE;AADO,OAAb;AAGA,UAAImI,KAAJ;;AAEA,UAAI1H,OAAJ,EAAa;AACXP,QAAAA,IAAI,CAAC,4DAAD,EAA+D,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC1F,cAAI,CAACD,KAAL,EAAY;AACV8E,YAAAA,KAAK,GAAG7E,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,EAAiCS,OAAjC,CAAyC,IAAzC,EAA+C,EAA/C,EAAmDT,KAAnD,CAAyD,GAAzD,CAAR;AACAc,YAAAA,MAAM,CAAClC,EAAP,GAAYmI,KAAK,CAAC1G,MAAN,GAAe,CAAf,GAAmB0G,KAAK,CAAC,CAAD,CAAL,CAAS/F,IAAT,GAAgBH,WAAhB,EAAnB,GAAmD,EAA/D;AACD;;AACD,cAAIK,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CAACJ,MAAD,CAAR;AACD;;AACDM,UAAAA,OAAO,CAACN,MAAD,CAAP;AACD,SATG,CAAJ;AAUD;;AACD,UAAI1B,MAAJ,EAAY;AACVN,QAAAA,IAAI,CAAC,4FAAD,EAA+F,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC1H,cAAI,CAACD,KAAL,EAAY;AACVnB,YAAAA,MAAM,CAAClC,EAAP,GAAYsD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,EAAiCgB,IAAjC,GAAwCH,WAAxC,EAAZ;AACD;;AACD,cAAIK,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CAACJ,MAAD,CAAR;AACD;;AACDM,UAAAA,OAAO,CAACN,MAAD,CAAP;AACD,SARG,CAAJ;AASD;;AACD,UAAIvB,QAAQ,IAAIC,QAAZ,IAAwBC,OAA5B,EAAqC;AACnCX,QAAAA,IAAI,CAAC,4BAAD,EAA+B,UAAUmD,KAAV,EAAiBC,MAAjB,EAAyB;AAC1D,cAAI,CAACD,KAAL,EAAY;AACVnB,YAAAA,MAAM,CAAClC,EAAP,GAAYsD,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,EAAiCgB,IAAjC,GAAwCH,WAAxC,EAAZ;AACD;;AACD,cAAIK,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CAACJ,MAAD,CAAR;AACD;;AACDM,UAAAA,OAAO,CAACN,MAAD,CAAP;AACD,SARG,CAAJ;AASD;;AACD,UAAIxB,QAAJ,EAAc;AACZR,QAAAA,IAAI,CAAC,sGAAD,EAAyGC,IAAI,CAAC4E,WAA9G,EAA2H,UAAU1B,KAAV,EAAiBC,MAAjB,EAAyB;AACtJ,cAAI,CAACD,KAAL,EAAY;AACV8E,YAAAA,KAAK,GAAG7E,MAAM,CAACnC,QAAP,GAAkBC,KAAlB,CAAwB,MAAxB,EAAgC,CAAhC,EAAmCA,KAAnC,CAAyC,QAAzC,CAAR;AACAc,YAAAA,MAAM,CAAClC,EAAP,GAAYmI,KAAK,CAAC1G,MAAN,GAAe,CAAf,GAAmB0G,KAAK,CAAC,CAAD,CAAL,CAAStG,OAAT,CAAiB,eAAjB,EAAkC,EAAlC,EAAsCI,WAAtC,EAAnB,GAAyE,EAArF;AACD;;AACD,cAAIK,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CAACJ,MAAD,CAAR;AACD;;AACDM,UAAAA,OAAO,CAACN,MAAD,CAAP;AACD,SATG,CAAJ;AAUD;AACF,KArDD;AAsDD,GAvDM,CAAP;AAwDD;;AAEDJ,OAAO,CAACyC,IAAR,GAAeA,IAAf","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// osinfo.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 3. Operating System\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst exec = require('child_process').exec;\nconst util = require('./util');\nconst fs = require('fs');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nconst NOT_SUPPORTED = 'not supported';\n\n// --------------------------\n// Get current time and OS uptime\n\nfunction time() {\n  let t = new Date().toString().split(' ');\n\n  return {\n    current: Date.now(),\n    uptime: os.uptime(),\n    timezone: (t.length >= 7) ? t[5] : '',\n    timezoneName: (t.length >= 7) ? t.slice(6).join(' ').replace(/\\(/g, '').replace(/\\)/g, '') : ''\n  };\n}\n\nexports.time = time;\n\n// --------------------------\n// Get logo filename of OS distribution\n\nfunction getLogoFile(distro) {\n  distro = distro || '';\n  distro = distro.toLowerCase();\n  let result = _platform;\n  if (_windows) {\n    result = 'windows';\n  }\n  else if (distro.indexOf('mac os') !== -1) {\n    result = 'apple';\n  }\n  else if (distro.indexOf('arch') !== -1) {\n    result = 'arch';\n  }\n  else if (distro.indexOf('centos') !== -1) {\n    result = 'centos';\n  }\n  else if (distro.indexOf('coreos') !== -1) {\n    result = 'coreos';\n  }\n  else if (distro.indexOf('debian') !== -1) {\n    result = 'debian';\n  }\n  else if (distro.indexOf('deepin') !== -1) {\n    result = 'deepin';\n  }\n  else if (distro.indexOf('elementary') !== -1) {\n    result = 'elementary';\n  }\n  else if (distro.indexOf('fedora') !== -1) {\n    result = 'fedora';\n  }\n  else if (distro.indexOf('gentoo') !== -1) {\n    result = 'gentoo';\n  }\n  else if (distro.indexOf('mageia') !== -1) {\n    result = 'mageia';\n  }\n  else if (distro.indexOf('mandriva') !== -1) {\n    result = 'mandriva';\n  }\n  else if (distro.indexOf('manjaro') !== -1) {\n    result = 'manjaro';\n  }\n  else if (distro.indexOf('mint') !== -1) {\n    result = 'mint';\n  }\n  else if (distro.indexOf('mx') !== -1) {\n    result = 'mx';\n  }\n  else if (distro.indexOf('openbsd') !== -1) {\n    result = 'openbsd';\n  }\n  else if (distro.indexOf('freebsd') !== -1) {\n    result = 'freebsd';\n  }\n  else if (distro.indexOf('opensuse') !== -1) {\n    result = 'opensuse';\n  }\n  else if (distro.indexOf('pclinuxos') !== -1) {\n    result = 'pclinuxos';\n  }\n  else if (distro.indexOf('puppy') !== -1) {\n    result = 'puppy';\n  }\n  else if (distro.indexOf('raspbian') !== -1) {\n    result = 'raspbian';\n  }\n  else if (distro.indexOf('reactos') !== -1) {\n    result = 'reactos';\n  }\n  else if (distro.indexOf('redhat') !== -1) {\n    result = 'redhat';\n  }\n  else if (distro.indexOf('slackware') !== -1) {\n    result = 'slackware';\n  }\n  else if (distro.indexOf('sugar') !== -1) {\n    result = 'sugar';\n  }\n  else if (distro.indexOf('steam') !== -1) {\n    result = 'steam';\n  }\n  else if (distro.indexOf('suse') !== -1) {\n    result = 'suse';\n  }\n  else if (distro.indexOf('mate') !== -1) {\n    result = 'ubuntu-mate';\n  }\n  else if (distro.indexOf('lubuntu') !== -1) {\n    result = 'lubuntu';\n  }\n  else if (distro.indexOf('xubuntu') !== -1) {\n    result = 'xubuntu';\n  }\n  else if (distro.indexOf('ubuntu') !== -1) {\n    result = 'ubuntu';\n  }\n  else if (distro.indexOf('solaris') !== -1) {\n    result = 'solaris';\n  }\n  else if (distro.indexOf('tails') !== -1) {\n    result = 'tails';\n  }\n  else if (distro.indexOf('robolinux') !== -1) {\n    result = 'robolinux';\n  } else if (_linux && distro) {\n    result = distro.toLowerCase().trim().replace(/\\s+/g, '-');\n  }\n  return result;\n}\n\n// --------------------------\n// OS Information\n\nfunction osInfo(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = {\n\n        platform: (_platform === 'Windows_NT' ? 'Windows' : _platform),\n        distro: 'unknown',\n        release: 'unknown',\n        codename: '',\n        kernel: os.release(),\n        arch: os.arch(),\n        hostname: os.hostname(),\n        codepage: '',\n        logofile: '',\n        serial: '',\n        build: '',\n        servicepack: '',\n        uefi: false\n      };\n\n      if (_linux) {\n\n        exec('cat /etc/*-release; cat /usr/lib/os-release; cat /etc/openwrt_release', function (error, stdout) {\n          //if (!error) {\n          /**\n           * @namespace\n           * @property {string}  DISTRIB_ID\n           * @property {string}  NAME\n           * @property {string}  DISTRIB_RELEASE\n           * @property {string}  VERSION_ID\n           * @property {string}  DISTRIB_CODENAME\n           */\n          let release = {};\n          let lines = stdout.toString().split('\\n');\n          lines.forEach(function (line) {\n            if (line.indexOf('=') !== -1) {\n              release[line.split('=')[0].trim().toUpperCase()] = line.split('=')[1].trim();\n            }\n          });\n          let releaseVersion = (release.VERSION || '').replace(/\"/g, '');\n          let codename = (release.DISTRIB_CODENAME || release.VERSION_CODENAME || '').replace(/\"/g, '');\n          if (releaseVersion.indexOf('(') >= 0) {\n            codename = releaseVersion.split('(')[1].replace(/[()]/g, '').trim();\n            releaseVersion = releaseVersion.split('(')[0].trim();\n          }\n          result.distro = (release.DISTRIB_ID || release.NAME || 'unknown').replace(/\"/g, '');\n          result.logofile = getLogoFile(result.distro);\n          result.release = (releaseVersion || release.DISTRIB_RELEASE || release.VERSION_ID || 'unknown').replace(/\"/g, '');\n          result.codename = codename;\n          result.codepage = util.getCodepage();\n          result.build = (release.BUILD_ID || '').replace(/\"/g, '').trim();\n          isUefiLinux().then(uefi => {\n            result.uefi = uefi;\n            uuid().then(data => {\n              result.serial = data.os;\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            });\n          });\n          //}\n        });\n      }\n      if (_freebsd || _openbsd || _netbsd) {\n\n        exec('sysctl kern.ostype kern.osrelease kern.osrevision kern.hostuuid machdep.bootmethod', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            result.distro = util.getValue(lines, 'kern.ostype');\n            result.logofile = getLogoFile(result.distro);\n            result.release = util.getValue(lines, 'kern.osrelease').split('-')[0];\n            result.serial = util.getValue(lines, 'kern.uuid');\n            result.codename = '';\n            result.codepage = util.getCodepage();\n            result.uefi = util.getValue(lines, 'machdep.bootmethod').toLowerCase().indexOf('uefi') >= 0;\n          }\n          if (callback) {\n            callback(result);\n          }\n          resolve(result);\n        });\n      }\n      if (_darwin) {\n        exec('sw_vers; sysctl kern.ostype kern.osrelease kern.osrevision kern.uuid', function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          result.serial = util.getValue(lines, 'kern.uuid');\n          result.distro = util.getValue(lines, 'ProductName');\n          result.release = util.getValue(lines, 'ProductVersion');\n          result.build = util.getValue(lines, 'BuildVersion');\n          result.logofile = getLogoFile(result.distro);\n          result.codename = 'macOS';\n          result.codename = (result.release.indexOf('10.4') > -1 ? 'Mac OS X Tiger' : result.codename);\n          result.codename = (result.release.indexOf('10.4') > -1 ? 'Mac OS X Tiger' : result.codename);\n          result.codename = (result.release.indexOf('10.4') > -1 ? 'Mac OS X Tiger' : result.codename);\n          result.codename = (result.release.indexOf('10.5') > -1 ? 'Mac OS X Leopard' : result.codename);\n          result.codename = (result.release.indexOf('10.6') > -1 ? 'Mac OS X Snow Leopard' : result.codename);\n          result.codename = (result.release.indexOf('10.7') > -1 ? 'Mac OS X Lion' : result.codename);\n          result.codename = (result.release.indexOf('10.8') > -1 ? 'OS X Mountain Lion' : result.codename);\n          result.codename = (result.release.indexOf('10.9') > -1 ? 'OS X Mavericks' : result.codename);\n          result.codename = (result.release.indexOf('10.10') > -1 ? 'OS X Yosemite' : result.codename);\n          result.codename = (result.release.indexOf('10.11') > -1 ? 'OS X El Capitan' : result.codename);\n          result.codename = (result.release.indexOf('10.12') > -1 ? 'macOS Sierra' : result.codename);\n          result.codename = (result.release.indexOf('10.13') > -1 ? 'macOS High Sierra' : result.codename);\n          result.codename = (result.release.indexOf('10.14') > -1 ? 'macOS Mojave' : result.codename);\n          result.codename = (result.release.indexOf('10.15') > -1 ? 'macOS Catalina' : result.codename);\n          result.uefi = true;\n          result.codepage = util.getCodepage();\n          if (callback) {\n            callback(result);\n          }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        result.release = result.kernel;\n        exec('uname -o', function (error, stdout) {\n          let lines = stdout.toString().split('\\n');\n          result.distro = lines[0];\n          result.logofile = getLogoFile(result.distro);\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_windows) {\n        result.logofile = getLogoFile();\n        result.release = result.kernel;\n        try {\n          util.wmic('os get /value').then((stdout) => {\n            let lines = stdout.toString().split('\\r\\n');\n            result.distro = util.getValue(lines, 'Caption', '=').trim();\n            result.serial = util.getValue(lines, 'SerialNumber', '=').trim();\n            result.build = util.getValue(lines, 'BuildNumber', '=').trim();\n            result.servicepack = util.getValue(lines, 'ServicePackMajorVersion', '=').trim() + '.' + util.getValue(lines, 'ServicePackMinorVersion', '=').trim();\n            result.codepage = util.getCodepage();\n            isUefiWindows().then(uefi => {\n              result.uefi = uefi;\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            });\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.osInfo = osInfo;\n\nfunction isUefiLinux() {\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      fs.stat('/sys/firmware/efi', function (err) {\n        if (!err) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  });\n}\n\nfunction isUefiWindows() {\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      try {\n        exec('findstr /C:\"Detected boot environment\" \"%windir%\\\\Panther\\\\setupact.log\"', util.execOptsWin, function (error, stdout) {\n          if (!error) {\n            const line = stdout.toString().split('\\n\\r')[0];\n            resolve(line.toLowerCase().indexOf('uefi') >= 0);\n            return;\n          }\n          resolve(false);\n        });\n      } catch (e) {\n        resolve(false);\n      }\n    });\n  });\n}\n\nfunction versions(apps, callback) {\n  let versionObject = {\n    kernel: os.release(),\n    openssl: '',\n    systemOpenssl: '',\n    systemOpensslLib: '',\n    node: process.versions.node,\n    v8: process.versions.v8,\n    npm: '',\n    yarn: '',\n    pm2: '',\n    gulp: '',\n    grunt: '',\n    git: '',\n    tsc: '',\n    mysql: '',\n    redis: '',\n    mongodb: '',\n    apache: '',\n    nginx: '',\n    php: '',\n    docker: '',\n    postfix: '',\n    postgresql: '',\n    perl: '',\n    python: '',\n    python3: '',\n    pip: '',\n    pip3: '',\n    java: '',\n    gcc: '',\n    virtualbox: '',\n    dotnet: ''\n  };\n\n  function checkVersionParam(apps) {\n    if (apps === '*') {\n      return {\n        versions: versionObject,\n        counter: 26\n      };\n    }\n    if (!Array.isArray(apps)) {\n      apps = apps.trim().toLowerCase().replace(/,+/g, '|').replace(/ /g, '|');\n      apps = apps.split('|');\n      const result = {\n        versions: {},\n        counter: 0\n      };\n      apps.forEach(el => {\n        if (el) {\n          for (let key in versionObject) {\n            if ({}.hasOwnProperty.call(versionObject, key)) {\n              if (key.toLowerCase() === el.toLowerCase() && !{}.hasOwnProperty.call(result.versions, key)) {\n                result.versions[key] = versionObject[key];\n                if (key === 'openssl') {\n                  result.versions.systemOpenssl = '';\n                  result.versions.systemOpensslLib = '';\n                }\n\n                if (!result.versions[key]) { result.counter++; }\n              }\n            }\n          }\n        }\n      });\n      return result;\n    }\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      if (util.isFunction(apps) && !callback) {\n        callback = apps;\n        apps = '*';\n      } else {\n        apps = apps || '*';\n      }\n      const appsObj = checkVersionParam(apps);\n      let totalFunctions = appsObj.counter;\n\n      let functionProcessed = (function () {\n        return function () {\n          if (--totalFunctions === 0) {\n            if (callback) {\n              callback(appsObj.versions);\n            }\n            resolve(appsObj.versions);\n          }\n        };\n      })();\n\n      let cmd = '';\n      try {\n        if ({}.hasOwnProperty.call(appsObj.versions, 'openssl')) {\n          appsObj.versions.openssl = process.versions.openssl;\n          exec('openssl version', function (error, stdout) {\n            if (!error) {\n              let openssl_string = stdout.toString().split('\\n')[0].trim();\n              let openssl = openssl_string.split(' ');\n              appsObj.versions.systemOpenssl = openssl.length > 0 ? openssl[1] : openssl[0];\n              appsObj.versions.systemOpensslLib = openssl.length > 0 ? openssl[0] : 'openssl';\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'npm')) {\n          exec('npm -v', function (error, stdout) {\n            if (!error) {\n              appsObj.versions.npm = stdout.toString().split('\\n')[0];\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'pm2')) {\n          cmd = 'pm2';\n          if (_windows) {\n            cmd += '.cmd';\n          }\n          exec(`${cmd} -v`, function (error, stdout) {\n            if (!error) {\n              let pm2 = stdout.toString().split('\\n')[0].trim();\n              if (!pm2.startsWith('[PM2]')) {\n                appsObj.versions.pm2 = pm2;\n              }\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'yarn')) {\n          exec('yarn --version', function (error, stdout) {\n            if (!error) {\n              appsObj.versions.yarn = stdout.toString().split('\\n')[0];\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'gulp')) {\n          cmd = 'gulp';\n          if (_windows) {\n            cmd += '.cmd';\n          }\n          exec(`${cmd} --version`, function (error, stdout) {\n            if (!error) {\n              const gulp = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.gulp = (gulp.toLowerCase().split('version')[1] || '').trim();\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'tsc')) {\n          cmd = 'tsc';\n          if (_windows) {\n            cmd += '.cmd';\n          }\n          exec(`${cmd} --version`, function (error, stdout) {\n            if (!error) {\n              const tsc = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.tsc = (tsc.toLowerCase().split('version')[1] || '').trim();\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'grunt')) {\n          cmd = 'grunt';\n          if (_windows) {\n            cmd += '.cmd';\n          }\n          exec(`${cmd} --version`, function (error, stdout) {\n            if (!error) {\n              const grunt = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.grunt = (grunt.toLowerCase().split('cli v')[1] || '').trim();\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'git')) {\n          if (_darwin) {\n            const gitHomebrewExists = fs.existsSync('/usr/local/Cellar/git');\n            if (util.darwinXcodeExists() || gitHomebrewExists) {\n              exec('git --version', function (error, stdout) {\n                if (!error) {\n                  let git = stdout.toString().split('\\n')[0] || '';\n                  git = (git.toLowerCase().split('version')[1] || '').trim();\n                  appsObj.versions.git = (git.split(' ')[0] || '').trim();\n                }\n                functionProcessed();\n              });\n            } else {\n              functionProcessed();\n            }\n          } else {\n            exec('git --version', function (error, stdout) {\n              if (!error) {\n                let git = stdout.toString().split('\\n')[0] || '';\n                git = (git.toLowerCase().split('version')[1] || '').trim();\n                appsObj.versions.git = (git.split(' ')[0] || '').trim();\n              }\n              functionProcessed();\n            });\n          }\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'apache')) {\n          exec('apachectl -v 2>&1', function (error, stdout) {\n            if (!error) {\n              const apache = (stdout.toString().split('\\n')[0] || '').split(':');\n              appsObj.versions.apache = (apache.length > 1 ? apache[1].replace('Apache', '').replace('/', '').trim() : '');\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'nginx')) {\n          exec('nginx -v 2>&1', function (error, stdout) {\n            if (!error) {\n              const nginx = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.nginx = (nginx.toLowerCase().split('/')[1] || '').trim();\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'mysql')) {\n          exec('mysql -V', function (error, stdout) {\n            if (!error) {\n              let mysql = stdout.toString().split('\\n')[0] || '';\n              mysql = mysql.toLowerCase();\n              if (mysql.indexOf(',') > -1) {\n                mysql = (mysql.split(',')[0] || '').trim();\n                const parts = mysql.split(' ');\n                appsObj.versions.mysql = (parts[parts.length - 1] || '').trim();\n              } else {\n                if (mysql.indexOf(' ver ') > -1) {\n                  mysql = mysql.split(' ver ')[1];\n                  appsObj.versions.mysql = mysql.split(' ')[0];\n                }\n              }\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'php')) {\n          exec('php -v', function (error, stdout) {\n            if (!error) {\n              const php = stdout.toString().split('\\n')[0] || '';\n              let parts = php.split('(');\n              if (parts[0].indexOf('-')) {\n                parts = parts[0].split('-');\n              }\n              appsObj.versions.php = parts[0].replace(/[^0-9.]/g, '');\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'redis')) {\n          exec('redis-server --version', function (error, stdout) {\n            if (!error) {\n              const redis = stdout.toString().split('\\n')[0] || '';\n              const parts = redis.split(' ');\n              appsObj.versions.redis = util.getValue(parts, 'v', '=', true);\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'docker')) {\n          exec('docker --version', function (error, stdout) {\n            if (!error) {\n              const docker = stdout.toString().split('\\n')[0] || '';\n              const parts = docker.split(' ');\n              appsObj.versions.docker = parts.length > 2 && parts[2].endsWith(',') ? parts[2].slice(0, -1) : '';\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'postfix')) {\n          exec('postconf -d | grep mail_version', function (error, stdout) {\n            if (!error) {\n              const postfix = stdout.toString().split('\\n') || [];\n              appsObj.versions.postfix = util.getValue(postfix, 'mail_version', '=', true);\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'mongodb')) {\n          exec('mongod --version', function (error, stdout) {\n            if (!error) {\n              const mongodb = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.mongodb = (mongodb.toLowerCase().split(',')[0] || '').replace(/[^0-9.]/g, '');\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'postgresql')) {\n          if (_linux) {\n            exec('locate bin/postgres', function (error, stdout) {\n              if (!error) {\n                const postgresqlBin = stdout.toString().split('\\n').sort();\n                if (postgresqlBin.length) {\n                  exec(postgresqlBin[postgresqlBin.length - 1] + ' -V', function (error, stdout) {\n                    if (!error) {\n                      const postgresql = stdout.toString().split('\\n')[0].split(' ') || [];\n                      appsObj.versions.postgresql = postgresql.length ? postgresql[postgresql.length - 1] : '';\n                    }\n                    functionProcessed();\n                  });\n                } else {\n                  functionProcessed();\n                }\n              } else {\n                exec('psql -V', function (error, stdout) {\n                  if (!error) {\n                    const postgresql = stdout.toString().split('\\n')[0].split(' ') || [];\n                    appsObj.versions.postgresql = postgresql.length ? postgresql[postgresql.length - 1] : '';\n                    appsObj.versions.postgresql = appsObj.versions.postgresql.split('-')[0];\n                  }\n                  functionProcessed();\n                });\n                functionProcessed();\n              }\n            });\n          } else {\n            if (_windows) {\n              util.wmic('service get /value').then((stdout) => {\n                let serviceSections = stdout.split(/\\n\\s*\\n/);\n                for (let i = 0; i < serviceSections.length; i++) {\n                  if (serviceSections[i].trim() !== '') {\n                    let lines = serviceSections[i].trim().split('\\r\\n');\n                    let srvCaption = util.getValue(lines, 'caption', '=', true).toLowerCase();\n                    if (srvCaption.indexOf('postgresql') > -1) {\n                      const parts = srvCaption.split(' server ');\n                      if (parts.length > 1) {\n                        appsObj.versions.postgresql = parts[1];\n                      }\n                    }\n                  }\n                }\n                functionProcessed();\n              });\n            } else {\n              exec('postgres -V', function (error, stdout) {\n                if (!error) {\n                  const postgresql = stdout.toString().split('\\n')[0].split(' ') || [];\n                  appsObj.versions.postgresql = postgresql.length ? postgresql[postgresql.length - 1] : '';\n                }\n                functionProcessed();\n              });\n            }\n          }\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'perl')) {\n          exec('perl -v', function (error, stdout) {\n            if (!error) {\n              const perl = stdout.toString().split('\\n') || '';\n              while (perl.length > 0 && perl[0].trim() === '') {\n                perl.shift();\n              }\n              if (perl.length > 0) {\n                appsObj.versions.perl = perl[0].split('(').pop().split(')')[0].replace('v', '');\n              }\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'python')) {\n          exec('python -V 2>&1', function (error, stdout) {\n            if (!error) {\n              const python = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.python = python.toLowerCase().replace('python', '').trim();\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'python3')) {\n          exec('python3 -V 2>&1', function (error, stdout) {\n            if (!error) {\n              const python = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.python3 = python.toLowerCase().replace('python', '').trim();\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'pip')) {\n          exec('pip -V 2>&1', function (error, stdout) {\n            if (!error) {\n              const pip = stdout.toString().split('\\n')[0] || '';\n              const parts = pip.split(' ');\n              appsObj.versions.pip = parts.length >= 2 ? parts[1] : '';\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'pip3')) {\n          exec('pip3 -V 2>&1', function (error, stdout) {\n            if (!error) {\n              const pip = stdout.toString().split('\\n')[0] || '';\n              const parts = pip.split(' ');\n              appsObj.versions.pip3 = parts.length >= 2 ? parts[1] : '';\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'java')) {\n          if (_darwin) {\n            // check if any JVM is installed but avoid dialog box that Java needs to be installed\n            exec('/usr/libexec/java_home -V 2>&1', function (error, stdout) {\n              if (!error && stdout.toString().toLowerCase().indexOf('no java runtime') === -1) {\n                // now this can be done savely\n                exec('java -version 2>&1', function (error, stdout) {\n                  if (!error) {\n                    const java = stdout.toString().split('\\n')[0] || '';\n                    const parts = java.split('\"');\n                    appsObj.versions.java = parts.length === 3 ? parts[1].trim() : '';\n                  }\n                  functionProcessed();\n                });\n              } else {\n                functionProcessed();\n              }\n            });\n          } else {\n            exec('java -version 2>&1', function (error, stdout) {\n              if (!error) {\n                const java = stdout.toString().split('\\n')[0] || '';\n                const parts = java.split('\"');\n                appsObj.versions.java = parts.length === 3 ? parts[1].trim() : '';\n              }\n              functionProcessed();\n            });\n          }\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'gcc')) {\n          if ((_darwin && util.darwinXcodeExists()) || !_darwin) {\n            exec('gcc -dumpversion', function (error, stdout) {\n              if (!error) {\n                appsObj.versions.gcc = stdout.toString().split('\\n')[0].trim() || '';\n              }\n              if (appsObj.versions.gcc.indexOf('.') > -1) {\n                functionProcessed();\n              } else {\n                exec('gcc --version', function (error, stdout) {\n                  if (!error) {\n                    const gcc = stdout.toString().split('\\n')[0].trim();\n                    if (gcc.indexOf('gcc') > -1 && gcc.indexOf(')') > -1) {\n                      const parts = gcc.split(')');\n                      appsObj.versions.gcc = parts[1].trim() || appsObj.versions.gcc;\n                    }\n                  }\n                  functionProcessed();\n                });\n              }\n            });\n          } else {\n            functionProcessed();\n          }\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'virtualbox')) {\n          exec(util.getVboxmanage() + ' -v 2>&1', function (error, stdout) {\n            if (!error) {\n              const vbox = stdout.toString().split('\\n')[0] || '';\n              const parts = vbox.split('r');\n              appsObj.versions.virtualbox = parts[0];\n            }\n            functionProcessed();\n          });\n        }\n        if ({}.hasOwnProperty.call(appsObj.versions, 'dotnet')) {\n          exec('dotnet --version 2>&1', function (error, stdout) {\n            if (!error) {\n              const dotnet = stdout.toString().split('\\n')[0] || '';\n              appsObj.versions.dotnet = dotnet.trim();\n            }\n            functionProcessed();\n          });\n        }\n      } catch (e) {\n        if (callback) { callback(appsObj.versions); }\n        resolve(appsObj.versions);\n      }\n    });\n  });\n}\n\nexports.versions = versions;\n\nfunction shell(callback) {\n  return new Promise((resolve, reject) => {\n    process.nextTick(() => {\n      if (_windows) {\n        let error = new Error(NOT_SUPPORTED);\n        if (callback) {\n          callback(NOT_SUPPORTED);\n        }\n        reject(error);\n      }\n\n      let result = '';\n      exec('echo $SHELL', function (error, stdout) {\n        if (!error) {\n          result = stdout.toString().split('\\n')[0];\n        }\n        if (callback) {\n          callback(result);\n        }\n        resolve(result);\n      });\n    });\n  });\n}\n\nexports.shell = shell;\n\nfunction uuid(callback) {\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      let result = {\n        os: ''\n      };\n      let parts;\n\n      if (_darwin) {\n        exec('ioreg -rd1 -c IOPlatformExpertDevice | grep IOPlatformUUID', function (error, stdout) {\n          if (!error) {\n            parts = stdout.toString().split('\\n')[0].replace(/\"/g, '').split('=');\n            result.os = parts.length > 1 ? parts[1].trim().toLowerCase() : '';\n          }\n          if (callback) {\n            callback(result);\n          }\n          resolve(result);\n        });\n      }\n      if (_linux) {\n        exec('( cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null || hostname ) | head -n 1 || :', function (error, stdout) {\n          if (!error) {\n            result.os = stdout.toString().split('\\n')[0].trim().toLowerCase();\n          }\n          if (callback) {\n            callback(result);\n          }\n          resolve(result);\n        });\n      }\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('kenv -q smbios.system.uuid', function (error, stdout) {\n          if (!error) {\n            result.os = stdout.toString().split('\\n')[0].trim().toLowerCase();\n          }\n          if (callback) {\n            callback(result);\n          }\n          resolve(result);\n        });\n      }\n      if (_windows) {\n        exec('%windir%\\\\System32\\\\reg query \"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography\" /v MachineGuid', util.execOptsWin, function (error, stdout) {\n          if (!error) {\n            parts = stdout.toString().split('\\n\\r')[0].split('REG_SZ');\n            result.os = parts.length > 1 ? parts[1].replace(/\\r+|\\n+|\\s+/ig, '').toLowerCase() : '';\n          }\n          if (callback) {\n            callback(result);\n          }\n          resolve(result);\n        });\n      }\n    });\n  });\n}\n\nexports.uuid = uuid;\n"]},"metadata":{},"sourceType":"script"}