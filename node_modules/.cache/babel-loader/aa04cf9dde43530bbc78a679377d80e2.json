{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n'use strict';\n/**\n * @file Reload functions related\n * @author Alexandre Strzelewicz <as@unitech.io>\n * @project PM2\n */\n\nvar cst = require('../../constants.js');\n\nvar Utility = require('../Utility.js');\n/**\n * softReload will wait permission from process to exit\n * @method softReload\n * @param {} God\n * @param {} id\n * @param {} cb\n * @return Literal\n */\n\n\nfunction softReload(God, id, cb) {\n  var t_key = '_old_' + id; // Move old worker to tmp id\n\n  God.clusters_db[t_key] = God.clusters_db[id];\n  delete God.clusters_db[id];\n  var old_worker = God.clusters_db[t_key]; // Deep copy\n\n  var new_env = Utility.clone(old_worker.pm2_env); // Reset created_at and unstable_restarts\n\n  God.resetState(new_env);\n  new_env.restart_time += 1;\n  old_worker.pm2_env.pm_id = t_key;\n  old_worker.pm_id = t_key;\n  God.executeApp(new_env, function (err, new_worker) {\n    if (err) return cb(err);\n    var timer = null;\n\n    var onListen = function () {\n      clearTimeout(timer);\n      softCleanDeleteProcess();\n      console.log('-softReload- New worker listening');\n    }; // Bind to know when the new process is up\n\n\n    new_worker.once('listening', onListen);\n    timer = setTimeout(function () {\n      new_worker.removeListener('listening', onListen);\n      softCleanDeleteProcess();\n    }, new_env.listen_timeout || cst.GRACEFUL_LISTEN_TIMEOUT); // Remove old worker properly\n\n    var softCleanDeleteProcess = function () {\n      var cleanUp = function () {\n        clearTimeout(timer);\n        console.log('-softReload- Old worker disconnected');\n        return God.deleteProcessId(t_key, cb);\n      };\n\n      old_worker.once('disconnect', cleanUp);\n\n      try {\n        if (old_worker.state != 'dead' && old_worker.state != 'disconnected') old_worker.send && old_worker.send('shutdown');else {\n          clearTimeout(timer);\n          console.error('Worker %d is already disconnected', old_worker.pm2_env.pm_id);\n          return God.deleteProcessId(t_key, cb);\n        }\n      } catch (e) {\n        clearTimeout(timer);\n        console.error('Worker %d is already disconnected', old_worker.pm2_env.pm_id);\n        return God.deleteProcessId(t_key, cb);\n      }\n\n      timer = setTimeout(function () {\n        old_worker.removeListener('disconnect', cleanUp);\n        return God.deleteProcessId(t_key, cb);\n      }, cst.GRACEFUL_TIMEOUT);\n      return false;\n    };\n\n    return false;\n  });\n  return false;\n}\n\n;\n/**\n * hardReload will reload without waiting permission from process\n * @method hardReload\n * @param {} God\n * @param {} id\n * @param {} cb\n * @return Literal\n */\n\nfunction hardReload(God, id, wait_msg, cb) {\n  var t_key = '_old_' + id; // Move old worker to tmp id\n\n  God.clusters_db[t_key] = God.clusters_db[id];\n  delete God.clusters_db[id];\n  var old_worker = God.clusters_db[t_key]; // Deep copy\n\n  var new_env = Utility.clone(old_worker.pm2_env);\n  new_env.restart_time += 1; // Reset created_at and unstable_restarts\n\n  God.resetState(new_env);\n  old_worker.pm2_env.pm_id = t_key;\n  old_worker.pm_id = t_key;\n  var timer = null;\n  var readySignalSent = false;\n\n  var onListen = function () {\n    clearTimeout(timer);\n    readySignalSent = true;\n    console.log('-reload- New worker listening');\n    return God.deleteProcessId(t_key, cb);\n  };\n\n  var listener = function (packet) {\n    if (packet.raw === 'ready' && packet.process.name === old_worker.pm2_env.name && packet.process.pm_id === id) {\n      God.bus.removeListener('process:msg', listener);\n      return onListen();\n    }\n  };\n\n  if (wait_msg !== 'listening') {\n    God.bus.on('process:msg', listener);\n  }\n\n  God.executeApp(new_env, function (err, new_worker) {\n    if (err) return cb(err); // Bind to know when the new process is up\n\n    if (wait_msg === 'listening') {\n      new_worker.once('listening', onListen);\n    }\n\n    timer = setTimeout(function () {\n      if (readySignalSent) {\n        return;\n      }\n\n      if (wait_msg === 'listening') new_worker.removeListener(wait_msg, onListen);else God.bus.removeListener('process:msg', listener);\n      return God.deleteProcessId(t_key, cb);\n    }, new_env.listen_timeout || cst.GRACEFUL_LISTEN_TIMEOUT);\n    return false;\n  });\n  return false;\n}\n\n;\n/**\n * Description\n * @method exports\n * @param {} God\n * @return\n */\n\nmodule.exports = function (God) {\n  /**\n   * Reload\n   * @method softReloadProcessId\n   * @param {} id\n   * @param {} cb\n   * @return CallExpression\n   */\n  God.softReloadProcessId = function (opts, cb) {\n    var id = opts.id;\n    var env = opts.env || {};\n    if (!(id in God.clusters_db)) return cb(new Error(`pm_id ${id} not available in ${id}`));\n\n    if (God.clusters_db[id].pm2_env.status == cst.ONLINE_STATUS && God.clusters_db[id].pm2_env.exec_mode == 'cluster_mode' && !God.clusters_db[id].pm2_env.wait_ready) {\n      Utility.extend(God.clusters_db[id].pm2_env.env, opts.env);\n      Utility.extendExtraConfig(God.clusters_db[id], opts);\n      return softReload(God, id, cb);\n    } else {\n      console.log('Process %s in a stopped status, starting it', id);\n      return God.restartProcessId(opts, cb);\n    }\n  };\n  /**\n   * Reload\n   * @method reloadProcessId\n   * @param {} id\n   * @param {} cb\n   * @return CallExpression\n   */\n\n\n  God.reloadProcessId = function (opts, cb) {\n    var id = opts.id;\n    var env = opts.env || {};\n    if (!(id in God.clusters_db)) return cb(new Error('PM2 ID unknown'));\n\n    if (God.clusters_db[id].pm2_env.status == cst.ONLINE_STATUS && God.clusters_db[id].pm2_env.exec_mode == 'cluster_mode') {\n      Utility.extend(God.clusters_db[id].pm2_env.env, opts.env);\n      Utility.extendExtraConfig(God.clusters_db[id], opts);\n      var wait_msg = God.clusters_db[id].pm2_env.wait_ready ? 'ready' : 'listening';\n      return hardReload(God, id, wait_msg, cb);\n    } else {\n      console.log('Process %s in a stopped status, starting it', id);\n      return God.restartProcessId(opts, cb);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/God/Reload.js"],"names":["cst","require","Utility","softReload","God","id","cb","t_key","clusters_db","old_worker","new_env","clone","pm2_env","resetState","restart_time","pm_id","executeApp","err","new_worker","timer","onListen","clearTimeout","softCleanDeleteProcess","console","log","once","setTimeout","removeListener","listen_timeout","GRACEFUL_LISTEN_TIMEOUT","cleanUp","deleteProcessId","state","send","error","e","GRACEFUL_TIMEOUT","hardReload","wait_msg","readySignalSent","listener","packet","raw","process","name","bus","on","module","exports","softReloadProcessId","opts","env","Error","status","ONLINE_STATUS","exec_mode","wait_ready","extend","extendExtraConfig","restartProcessId","reloadProcessId"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n'use strict';\n\n/**\n * @file Reload functions related\n * @author Alexandre Strzelewicz <as@unitech.io>\n * @project PM2\n */\n\nvar cst           = require('../../constants.js');\nvar Utility       = require('../Utility.js');\n\n/**\n * softReload will wait permission from process to exit\n * @method softReload\n * @param {} God\n * @param {} id\n * @param {} cb\n * @return Literal\n */\nfunction softReload(God, id, cb) {\n  var t_key = '_old_' + id;\n\n  // Move old worker to tmp id\n  God.clusters_db[t_key] = God.clusters_db[id];\n\n  delete God.clusters_db[id];\n\n  var old_worker = God.clusters_db[t_key];\n\n  // Deep copy\n  var new_env = Utility.clone(old_worker.pm2_env);\n\n  // Reset created_at and unstable_restarts\n  God.resetState(new_env);\n\n  new_env.restart_time += 1;\n\n  old_worker.pm2_env.pm_id = t_key;\n  old_worker.pm_id = t_key;\n\n  God.executeApp(new_env, function(err, new_worker) {\n    if (err) return cb(err);\n\n    var timer = null;\n\n    var onListen = function () {\n      clearTimeout(timer);\n      softCleanDeleteProcess();\n      console.log('-softReload- New worker listening');\n    };\n\n    // Bind to know when the new process is up\n    new_worker.once('listening', onListen);\n\n    timer = setTimeout(function() {\n      new_worker.removeListener('listening', onListen);\n      softCleanDeleteProcess();\n    }, new_env.listen_timeout || cst.GRACEFUL_LISTEN_TIMEOUT);\n\n    // Remove old worker properly\n    var softCleanDeleteProcess = function () {\n      var cleanUp = function () {\n        clearTimeout(timer);\n        console.log('-softReload- Old worker disconnected');\n        return God.deleteProcessId(t_key, cb);\n      };\n\n      old_worker.once('disconnect', cleanUp);\n\n      try {\n        if (old_worker.state != 'dead' && old_worker.state != 'disconnected')\n          old_worker.send && old_worker.send('shutdown');\n        else {\n          clearTimeout(timer);\n          console.error('Worker %d is already disconnected', old_worker.pm2_env.pm_id);\n          return God.deleteProcessId(t_key, cb);\n        }\n      } catch(e) {\n        clearTimeout(timer);\n        console.error('Worker %d is already disconnected', old_worker.pm2_env.pm_id);\n        return God.deleteProcessId(t_key, cb);\n      }\n\n      timer = setTimeout(function () {\n        old_worker.removeListener('disconnect', cleanUp);\n        return God.deleteProcessId(t_key, cb);\n      }, cst.GRACEFUL_TIMEOUT);\n      return false;\n    };\n    return false;\n  });\n  return false;\n};\n\n/**\n * hardReload will reload without waiting permission from process\n * @method hardReload\n * @param {} God\n * @param {} id\n * @param {} cb\n * @return Literal\n */\nfunction hardReload(God, id, wait_msg, cb) {\n  var t_key = '_old_' + id;\n\n  // Move old worker to tmp id\n  God.clusters_db[t_key] = God.clusters_db[id];\n  delete God.clusters_db[id];\n\n  var old_worker = God.clusters_db[t_key];\n  // Deep copy\n  var new_env = Utility.clone(old_worker.pm2_env);\n  new_env.restart_time += 1;\n\n  // Reset created_at and unstable_restarts\n  God.resetState(new_env);\n\n  old_worker.pm2_env.pm_id = t_key;\n  old_worker.pm_id = t_key;\n  var timer = null;\n  var readySignalSent = false;\n  \n  var onListen = function () {\n    clearTimeout(timer);\n    readySignalSent = true;\n    console.log('-reload- New worker listening');\n    return God.deleteProcessId(t_key, cb);\n  };\n  \n  var listener = function (packet) {\n    if (packet.raw === 'ready' &&\n        packet.process.name === old_worker.pm2_env.name &&\n        packet.process.pm_id === id) {\n      God.bus.removeListener('process:msg', listener);\n      return onListen();\n    }\n  };\n  \n  if (wait_msg !== 'listening') {\n    God.bus.on('process:msg', listener);\n  }\n  \n  God.executeApp(new_env, function(err, new_worker) {\n    if (err) return cb(err);\n\n    // Bind to know when the new process is up\n    if (wait_msg === 'listening') {\n      new_worker.once('listening', onListen);\n    }\n\n    timer = setTimeout(function() {\n      if (readySignalSent) {\n        return;\n      }\n      \n      if (wait_msg === 'listening')\n        new_worker.removeListener(wait_msg, onListen);\n      else\n        God.bus.removeListener('process:msg', listener);\n\n      return God.deleteProcessId(t_key, cb);\n    }, new_env.listen_timeout || cst.GRACEFUL_LISTEN_TIMEOUT);\n\n    return false;\n  });\n  return false;\n};\n\n/**\n * Description\n * @method exports\n * @param {} God\n * @return\n */\nmodule.exports = function(God) {\n\n  /**\n   * Reload\n   * @method softReloadProcessId\n   * @param {} id\n   * @param {} cb\n   * @return CallExpression\n   */\n  God.softReloadProcessId = function(opts, cb) {\n    var id  = opts.id;\n    var env = opts.env || {};\n\n    if (!(id in God.clusters_db))\n      return cb(new Error(`pm_id ${id} not available in ${id}`));\n\n    if (God.clusters_db[id].pm2_env.status == cst.ONLINE_STATUS &&\n        God.clusters_db[id].pm2_env.exec_mode == 'cluster_mode' &&\n        !God.clusters_db[id].pm2_env.wait_ready) {\n\n      Utility.extend(God.clusters_db[id].pm2_env.env, opts.env);\n      Utility.extendExtraConfig(God.clusters_db[id], opts);\n\n      return softReload(God, id, cb);\n    }\n    else {\n      console.log('Process %s in a stopped status, starting it', id);\n      return God.restartProcessId(opts, cb);\n    }\n  };\n\n  /**\n   * Reload\n   * @method reloadProcessId\n   * @param {} id\n   * @param {} cb\n   * @return CallExpression\n   */\n  God.reloadProcessId = function(opts, cb) {\n    var id  = opts.id;\n    var env = opts.env || {};\n\n    if (!(id in God.clusters_db))\n      return cb(new Error('PM2 ID unknown'));\n\n    if (God.clusters_db[id].pm2_env.status == cst.ONLINE_STATUS &&\n        God.clusters_db[id].pm2_env.exec_mode == 'cluster_mode') {\n\n      Utility.extend(God.clusters_db[id].pm2_env.env, opts.env);\n      Utility.extendExtraConfig(God.clusters_db[id], opts);\n\n      var wait_msg = God.clusters_db[id].pm2_env.wait_ready ? 'ready' : 'listening';\n      return hardReload(God, id, wait_msg, cb);\n    }\n    else {\n      console.log('Process %s in a stopped status, starting it', id);\n      return God.restartProcessId(opts, cb);\n    }\n  };\n\n};\n"]},"metadata":{},"sourceType":"script"}