{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n'use strict';\n/**\n * @file Cluster execution functions related\n * @author Alexandre Strzelewicz <as@unitech.io>\n * @project PM2\n */\n\nvar cluster = require('cluster');\n\nvar Utility = require('../Utility.js');\n\nvar pkg = require('../../package.json');\n/**\n * Description\n * @method exports\n * @param {} God\n * @return\n */\n\n\nmodule.exports = function ClusterMode(God) {\n  /**\n   * For Node apps - Cluster mode\n   * It will wrap the code and enable load-balancing mode\n   * @method nodeApp\n   * @param {} env_copy\n   * @param {} cb\n   * @return Literal\n   */\n  God.nodeApp = function nodeApp(env_copy, cb) {\n    var clu = null;\n    console.log(`App [${env_copy.name}:${env_copy.pm_id}] starting in -cluster mode-`);\n\n    if (env_copy.node_args && Array.isArray(env_copy.node_args)) {\n      cluster.settings.execArgv = env_copy.node_args;\n    }\n\n    env_copy._pm2_version = pkg.version;\n\n    try {\n      // node.js cluster clients can not receive deep-level objects or arrays in the forked process, e.g.:\n      // { \"args\": [\"foo\", \"bar\"], \"env\": { \"foo1\": \"bar1\" }} will be parsed to\n      // { \"args\": \"foo, bar\", \"env\": \"[object Object]\"}\n      // So we passing a stringified JSON here.\n      clu = cluster.fork({\n        pm2_env: JSON.stringify(env_copy),\n        windowsHide: true\n      });\n    } catch (e) {\n      God.logAndGenerateError(e);\n      return cb(e);\n    }\n\n    clu.pm2_env = env_copy;\n    /**\n     * Broadcast message to God\n     */\n\n    clu.on('message', function cluMessage(msg) {\n      /*********************************\n       * If you edit this function\n       * Do the same in ForkMode.js !\n       *********************************/\n      if (msg.data && msg.type) {\n        return God.bus.emit(msg.type ? msg.type : 'process:msg', {\n          at: Utility.getDate(),\n          data: msg.data,\n          process: {\n            pm_id: clu.pm2_env.pm_id,\n            name: clu.pm2_env.name,\n            rev: clu.pm2_env.versioning && clu.pm2_env.versioning.revision ? clu.pm2_env.versioning.revision : null,\n            namespace: clu.pm2_env.namespace\n          }\n        });\n      } else {\n        if (typeof msg == 'object' && 'node_version' in msg) {\n          clu.pm2_env.node_version = msg.node_version;\n          return false;\n        } else if (typeof msg == 'object' && 'cron_restart' in msg) {\n          return God.restartProcessId({\n            id: clu.pm2_env.pm_id\n          }, function () {\n            console.log('Application %s has been restarted via CRON', clu.pm2_env.name);\n          });\n        }\n\n        return God.bus.emit('process:msg', {\n          at: Utility.getDate(),\n          raw: msg,\n          process: {\n            pm_id: clu.pm2_env.pm_id,\n            name: clu.pm2_env.name,\n            namespace: clu.pm2_env.namespace\n          }\n        });\n      }\n    });\n    return cb(null, clu);\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/God/ClusterMode.js"],"names":["cluster","require","Utility","pkg","module","exports","ClusterMode","God","nodeApp","env_copy","cb","clu","console","log","name","pm_id","node_args","Array","isArray","settings","execArgv","_pm2_version","version","fork","pm2_env","JSON","stringify","windowsHide","e","logAndGenerateError","on","cluMessage","msg","data","type","bus","emit","at","getDate","process","rev","versioning","revision","namespace","node_version","restartProcessId","id","raw"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n'use strict';\n\n/**\n * @file Cluster execution functions related\n * @author Alexandre Strzelewicz <as@unitech.io>\n * @project PM2\n */\nvar cluster       = require('cluster');\nvar Utility       = require('../Utility.js');\nvar pkg           = require('../../package.json');\n\n/**\n * Description\n * @method exports\n * @param {} God\n * @return\n */\nmodule.exports = function ClusterMode(God) {\n\n  /**\n   * For Node apps - Cluster mode\n   * It will wrap the code and enable load-balancing mode\n   * @method nodeApp\n   * @param {} env_copy\n   * @param {} cb\n   * @return Literal\n   */\n  God.nodeApp = function nodeApp(env_copy, cb){\n    var clu = null;\n\n    console.log(`App [${env_copy.name}:${env_copy.pm_id}] starting in -cluster mode-`)\n    if (env_copy.node_args && Array.isArray(env_copy.node_args)) {\n      cluster.settings.execArgv = env_copy.node_args;\n    }\n\n    env_copy._pm2_version = pkg.version;\n\n    try {\n      // node.js cluster clients can not receive deep-level objects or arrays in the forked process, e.g.:\n      // { \"args\": [\"foo\", \"bar\"], \"env\": { \"foo1\": \"bar1\" }} will be parsed to\n      // { \"args\": \"foo, bar\", \"env\": \"[object Object]\"}\n      // So we passing a stringified JSON here.\n      clu = cluster.fork({pm2_env: JSON.stringify(env_copy), windowsHide: true});\n    } catch(e) {\n      God.logAndGenerateError(e);\n      return cb(e);\n    }\n\n    clu.pm2_env = env_copy;\n\n    /**\n     * Broadcast message to God\n     */\n    clu.on('message', function cluMessage(msg) {\n      /*********************************\n       * If you edit this function\n       * Do the same in ForkMode.js !\n       *********************************/\n      if (msg.data && msg.type) {\n        return God.bus.emit(msg.type ? msg.type : 'process:msg', {\n          at      : Utility.getDate(),\n          data    : msg.data,\n          process :  {\n            pm_id      : clu.pm2_env.pm_id,\n            name       : clu.pm2_env.name,\n            rev        : (clu.pm2_env.versioning && clu.pm2_env.versioning.revision) ? clu.pm2_env.versioning.revision : null,\n            namespace  : clu.pm2_env.namespace\n          }\n        });\n      }\n      else {\n\n        if (typeof msg == 'object' && 'node_version' in msg) {\n          clu.pm2_env.node_version = msg.node_version;\n          return false;\n        } else if (typeof msg == 'object' && 'cron_restart' in msg) {\n          return God.restartProcessId({\n            id : clu.pm2_env.pm_id\n          }, function() {\n            console.log('Application %s has been restarted via CRON', clu.pm2_env.name);\n          });\n        }\n\n        return God.bus.emit('process:msg', {\n          at      : Utility.getDate(),\n          raw     : msg,\n          process :  {\n            pm_id      : clu.pm2_env.pm_id,\n            name       : clu.pm2_env.name,\n            namespace  : clu.pm2_env.namespace\n          }\n        });\n      }\n    });\n\n    return cb(null, clu);\n  };\n};\n"]},"metadata":{},"sourceType":"script"}