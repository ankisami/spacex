{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Message = require('amp-message');\n\nvar SubSocket = require('./sub');\n/**\n * Expose `SubEmitterSocket`.\n */\n\n\nmodule.exports = SubEmitterSocket;\n/**\n * Initialzie a new `SubEmitterSocket`.\n *\n * @api private\n */\n\nfunction SubEmitterSocket() {\n  this.sock = new SubSocket();\n  this.sock.onmessage = this.onmessage.bind(this);\n  this.bind = this.sock.bind.bind(this.sock);\n  this.connect = this.sock.connect.bind(this.sock);\n  this.close = this.sock.close.bind(this.sock);\n  this.listeners = [];\n}\n/**\n * Message handler.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, mulitpart)\n * @api private\n */\n\n\nSubEmitterSocket.prototype.onmessage = function () {\n  var listeners = this.listeners;\n  var self = this;\n  return function (buf) {\n    var msg = new Message(buf);\n    var topic = msg.shift();\n\n    for (var i = 0; i < listeners.length; ++i) {\n      var listener = listeners[i];\n      var m = listener.re.exec(topic);\n      if (!m) continue;\n      listener.fn.apply(this, m.slice(1).concat(msg.args));\n    }\n  };\n};\n/**\n * Subscribe to `event` and invoke the given callback `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {SubEmitterSocket} self\n * @api public\n */\n\n\nSubEmitterSocket.prototype.on = function (event, fn) {\n  var re = this.sock.subscribe(event);\n  this.listeners.push({\n    event: event,\n    re: re,\n    fn: fn\n  });\n  return this;\n};\n/**\n * Unsubscribe with the given `event`.\n *\n * @param {String} event\n * @return {SubEmitterSocket} self\n * @api public\n */\n\n\nSubEmitterSocket.prototype.off = function (event) {\n  for (var i = 0; i < this.listeners.length; ++i) {\n    if (this.listeners[i].event === event) {\n      this.sock.unsubscribe(this.listeners[i].re);\n      this.listeners.splice(i--, 1);\n    }\n  }\n\n  return this;\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2-axon/lib/sockets/sub-emitter.js"],"names":["Message","require","SubSocket","module","exports","SubEmitterSocket","sock","onmessage","bind","connect","close","listeners","prototype","self","buf","msg","topic","shift","i","length","listener","m","re","exec","fn","apply","slice","concat","args","on","event","subscribe","push","off","unsubscribe","splice"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,OAAD,CAAvB;AAEA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,gBAAjB;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASA,gBAAT,GAA4B;AAC1B,OAAKC,IAAL,GAAY,IAAIJ,SAAJ,EAAZ;AACA,OAAKI,IAAL,CAAUC,SAAV,GAAsB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAtB;AACA,OAAKA,IAAL,GAAY,KAAKF,IAAL,CAAUE,IAAV,CAAeA,IAAf,CAAoB,KAAKF,IAAzB,CAAZ;AACA,OAAKG,OAAL,GAAe,KAAKH,IAAL,CAAUG,OAAV,CAAkBD,IAAlB,CAAuB,KAAKF,IAA5B,CAAf;AACA,OAAKI,KAAL,GAAa,KAAKJ,IAAL,CAAUI,KAAV,CAAgBF,IAAhB,CAAqB,KAAKF,IAA1B,CAAb;AACA,OAAKK,SAAL,GAAiB,EAAjB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAN,gBAAgB,CAACO,SAAjB,CAA2BL,SAA3B,GAAuC,YAAU;AAC/C,MAAII,SAAS,GAAG,KAAKA,SAArB;AACA,MAAIE,IAAI,GAAG,IAAX;AAEA,SAAO,UAASC,GAAT,EAAa;AAClB,QAAIC,GAAG,GAAG,IAAIf,OAAJ,CAAYc,GAAZ,CAAV;AACA,QAAIE,KAAK,GAAGD,GAAG,CAACE,KAAJ,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,SAAS,CAACQ,MAA9B,EAAsC,EAAED,CAAxC,EAA2C;AACzC,UAAIE,QAAQ,GAAGT,SAAS,CAACO,CAAD,CAAxB;AAEA,UAAIG,CAAC,GAAGD,QAAQ,CAACE,EAAT,CAAYC,IAAZ,CAAiBP,KAAjB,CAAR;AACA,UAAI,CAACK,CAAL,EAAQ;AAERD,MAAAA,QAAQ,CAACI,EAAT,CAAYC,KAAZ,CAAkB,IAAlB,EAAwBJ,CAAC,CAACK,KAAF,CAAQ,CAAR,EAAWC,MAAX,CAAkBZ,GAAG,CAACa,IAAtB,CAAxB;AACD;AACF,GAZD;AAaD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAvB,gBAAgB,CAACO,SAAjB,CAA2BiB,EAA3B,GAAgC,UAASC,KAAT,EAAgBN,EAAhB,EAAmB;AACjD,MAAIF,EAAE,GAAG,KAAKhB,IAAL,CAAUyB,SAAV,CAAoBD,KAApB,CAAT;AACA,OAAKnB,SAAL,CAAeqB,IAAf,CAAoB;AAClBF,IAAAA,KAAK,EAAEA,KADW;AAElBR,IAAAA,EAAE,EAAEA,EAFc;AAGlBE,IAAAA,EAAE,EAAEA;AAHc,GAApB;AAKA,SAAO,IAAP;AACD,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAnB,gBAAgB,CAACO,SAAjB,CAA2BqB,GAA3B,GAAiC,UAASH,KAAT,EAAe;AAC9C,OAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKP,SAAL,CAAeQ,MAAnC,EAA2C,EAAED,CAA7C,EAAgD;AAC9C,QAAI,KAAKP,SAAL,CAAeO,CAAf,EAAkBY,KAAlB,KAA4BA,KAAhC,EAAuC;AACrC,WAAKxB,IAAL,CAAU4B,WAAV,CAAsB,KAAKvB,SAAL,CAAeO,CAAf,EAAkBI,EAAxC;AACA,WAAKX,SAAL,CAAewB,MAAf,CAAsBjB,CAAC,EAAvB,EAA2B,CAA3B;AACD;AACF;;AACD,SAAO,IAAP;AACD,CARD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar Message = require('amp-message');\nvar SubSocket = require('./sub');\n\n/**\n * Expose `SubEmitterSocket`.\n */\n\nmodule.exports = SubEmitterSocket;\n\n/**\n * Initialzie a new `SubEmitterSocket`.\n *\n * @api private\n */\n\nfunction SubEmitterSocket() {\n  this.sock = new SubSocket;\n  this.sock.onmessage = this.onmessage.bind(this);\n  this.bind = this.sock.bind.bind(this.sock);\n  this.connect = this.sock.connect.bind(this.sock);\n  this.close = this.sock.close.bind(this.sock);\n  this.listeners = [];\n}\n\n/**\n * Message handler.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, mulitpart)\n * @api private\n */\n\nSubEmitterSocket.prototype.onmessage = function(){\n  var listeners = this.listeners;\n  var self = this;\n\n  return function(buf){\n    var msg = new Message(buf);\n    var topic = msg.shift();\n\n    for (var i = 0; i < listeners.length; ++i) {\n      var listener = listeners[i];\n\n      var m = listener.re.exec(topic);\n      if (!m) continue;\n\n      listener.fn.apply(this, m.slice(1).concat(msg.args));\n    }\n  }\n};\n\n/**\n * Subscribe to `event` and invoke the given callback `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {SubEmitterSocket} self\n * @api public\n */\n\nSubEmitterSocket.prototype.on = function(event, fn){\n  var re = this.sock.subscribe(event);\n  this.listeners.push({\n    event: event,\n    re: re,\n    fn: fn\n  });\n  return this;\n};\n\n/**\n * Unsubscribe with the given `event`.\n *\n * @param {String} event\n * @return {SubEmitterSocket} self\n * @api public\n */\n\nSubEmitterSocket.prototype.off = function(event){\n  for (var i = 0; i < this.listeners.length; ++i) {\n    if (this.listeners[i].event === event) {\n      this.sock.unsubscribe(this.listeners[i].re);\n      this.listeners.splice(i--, 1);\n    }\n  }\n  return this;\n};\n"]},"metadata":{},"sourceType":"script"}