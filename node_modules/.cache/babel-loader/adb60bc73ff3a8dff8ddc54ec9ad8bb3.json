{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\nvar debug = require('debug')('pm2:client');\n\nvar Common = require('./Common.js');\n\nvar KMDaemon = require('@pm2/agent/src/InteractorClient');\n\nvar rpc = require('pm2-axon-rpc');\n\nvar forEach = require('async/forEach');\n\nvar axon = require('pm2-axon');\n\nvar util = require('util');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar pkg = require('../package.json');\n\nvar which = require('./tools/which.js');\n\nfunction noop() {}\n\nvar Client = module.exports = function (opts) {\n  if (!opts) opts = {};\n  if (!opts.conf) this.conf = require('../constants.js');else {\n    this.conf = opts.conf;\n  }\n  this.daemon_mode = typeof opts.daemon_mode === 'undefined' ? true : opts.daemon_mode;\n  this.pm2_home = this.conf.PM2_ROOT_PATH;\n  this.secret_key = opts.secret_key;\n  this.public_key = opts.public_key;\n  this.machine_name = opts.machine_name; // Create all folders and files needed\n  // Client depends to that to interact with PM2 properly\n\n  this.initFileStructure(this.conf);\n  debug('Using RPC file %s', this.conf.DAEMON_RPC_PORT);\n  debug('Using PUB file %s', this.conf.DAEMON_PUB_PORT);\n  this.rpc_socket_file = this.conf.DAEMON_RPC_PORT;\n  this.pub_socket_file = this.conf.DAEMON_PUB_PORT;\n}; // @breaking change (noDaemonMode has been drop)\n// @todo ret err\n\n\nClient.prototype.start = function (cb) {\n  var that = this;\n  this.pingDaemon(function (daemonAlive) {\n    if (daemonAlive === true) return that.launchRPC(function (err, meta) {\n      return cb(null, {\n        daemon_mode: that.conf.daemon_mode,\n        new_pm2_instance: false,\n        rpc_socket_file: that.rpc_socket_file,\n        pub_socket_file: that.pub_socket_file,\n        pm2_home: that.pm2_home\n      });\n    });\n    /**\n     * No Daemon mode\n     */\n\n    if (that.daemon_mode === false) {\n      var Daemon = require('./Daemon.js');\n\n      var daemon = new Daemon({\n        pub_socket_file: that.conf.DAEMON_PUB_PORT,\n        rpc_socket_file: that.conf.DAEMON_RPC_PORT,\n        pid_file: that.conf.PM2_PID_FILE_PATH,\n        ignore_signals: true\n      });\n      console.log('Launching in no daemon mode');\n      daemon.innerStart(function () {\n        KMDaemon.launchAndInteract(that.conf, {\n          machine_name: that.machine_name,\n          public_key: that.public_key,\n          secret_key: that.secret_key,\n          pm2_version: pkg.version\n        }, function (err, data, interactor_proc) {\n          that.interactor_process = interactor_proc;\n        });\n        that.launchRPC(function (err, meta) {\n          return cb(null, {\n            daemon_mode: that.conf.daemon_mode,\n            new_pm2_instance: true,\n            rpc_socket_file: that.rpc_socket_file,\n            pub_socket_file: that.pub_socket_file,\n            pm2_home: that.pm2_home\n          });\n        });\n      });\n      return false;\n    }\n    /**\n     * Daemon mode\n     */\n\n\n    that.launchDaemon(function (err, child) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(err) : process.exit(that.conf.ERROR_EXIT);\n      }\n\n      if (!process.env.PM2_DISCRETE_MODE) Common.printOut(that.conf.PREFIX_MSG + 'PM2 Successfully daemonized');\n      that.launchRPC(function (err, meta) {\n        return cb(null, {\n          daemon_mode: that.conf.daemon_mode,\n          new_pm2_instance: true,\n          rpc_socket_file: that.rpc_socket_file,\n          pub_socket_file: that.pub_socket_file,\n          pm2_home: that.pm2_home\n        });\n      });\n    });\n  });\n}; // Init file structure of pm2_home\n// This includes\n// - pm2 pid and log path\n// - rpc and pub socket for command execution\n\n\nClient.prototype.initFileStructure = function (opts) {\n  if (!fs.existsSync(opts.DEFAULT_LOG_PATH)) {\n    try {\n      require('mkdirp').sync(opts.DEFAULT_LOG_PATH);\n    } catch (e) {\n      console.error(e.stack || e);\n    }\n  }\n\n  if (!fs.existsSync(opts.DEFAULT_PID_PATH)) {\n    try {\n      require('mkdirp').sync(opts.DEFAULT_PID_PATH);\n    } catch (e) {\n      console.error(e.stack || e);\n    }\n  }\n\n  if (!fs.existsSync(opts.PM2_MODULE_CONF_FILE)) {\n    try {\n      fs.writeFileSync(opts.PM2_MODULE_CONF_FILE, \"{}\");\n    } catch (e) {\n      console.error(e.stack || e);\n    }\n  }\n\n  if (!fs.existsSync(opts.DEFAULT_MODULE_PATH)) {\n    try {\n      require('mkdirp').sync(opts.DEFAULT_MODULE_PATH);\n    } catch (e) {\n      console.error(e.stack || e);\n    }\n  }\n\n  if (process.env.PM2_DISCRETE_MODE) {\n    try {\n      fs.writeFileSync(path.join(opts.PM2_HOME, 'touch'), Date.now().toString());\n    } catch (e) {\n      debug(e.stack || e);\n    }\n  }\n\n  if (!process.env.PM2_PROGRAMMATIC && !fs.existsSync(path.join(opts.PM2_HOME, 'touch'))) {\n    var vCheck = require('./VersionCheck.js');\n\n    vCheck({\n      state: 'install',\n      version: pkg.version\n    });\n    var dt = fs.readFileSync(path.join(__dirname, opts.PM2_BANNER));\n    console.log(dt.toString());\n\n    try {\n      fs.writeFileSync(path.join(opts.PM2_HOME, 'touch'), Date.now().toString());\n    } catch (e) {\n      debug(e.stack || e);\n    }\n  }\n};\n\nClient.prototype.close = function (cb) {\n  var that = this;\n  forEach([that.disconnectRPC.bind(that), that.disconnectBus.bind(that)], function (fn, next) {\n    fn(next);\n  }, cb);\n};\n/**\n * Launch the Daemon by forking this same file\n * The method Client.remoteWrapper will be called\n *\n * @method launchDaemon\n * @param {Object} opts\n * @param {Object} [opts.interactor=true] allow to disable interaction on launch\n */\n\n\nClient.prototype.launchDaemon = function (opts, cb) {\n  if (typeof opts == 'function') {\n    cb = opts;\n    opts = {\n      interactor: true\n    };\n  }\n\n  var that = this;\n  var ClientJS = path.resolve(path.dirname(module.filename), 'Daemon.js');\n  var node_args = [];\n  var out, err; // if (process.env.TRAVIS) {\n  //   // Redirect PM2 internal err and out to STDERR STDOUT when running with Travis\n  //   out = 1;\n  //   err = 2;\n  // }\n  // else {\n\n  out = fs.openSync(that.conf.PM2_LOG_FILE_PATH, 'a'), err = fs.openSync(that.conf.PM2_LOG_FILE_PATH, 'a'); //}\n\n  if (this.conf.LOW_MEMORY_ENVIRONMENT) {\n    var os = require('os');\n\n    node_args.push('--gc-global'); // Does full GC (smaller memory footprint)\n\n    node_args.push('--max-old-space-size=' + Math.floor(os.totalmem() / 1024 / 1024));\n  } // Node.js tuning for better performance\n  //node_args.push('--expose-gc'); // Allows manual GC in the code\n\n  /**\n   * Add node [arguments] depending on PM2_NODE_OPTIONS env variable\n   */\n\n\n  if (process.env.PM2_NODE_OPTIONS) node_args = node_args.concat(process.env.PM2_NODE_OPTIONS.split(' '));\n  node_args.push(ClientJS);\n  if (!process.env.PM2_DISCRETE_MODE) Common.printOut(that.conf.PREFIX_MSG + 'Spawning PM2 daemon with pm2_home=' + this.pm2_home);\n  var interpreter = 'node';\n  if (which('node') == null) interpreter = process.execPath;\n\n  var child = require('child_process').spawn(interpreter, node_args, {\n    detached: true,\n    cwd: that.conf.cwd || process.cwd(),\n    env: util._extend({\n      'SILENT': that.conf.DEBUG ? !that.conf.DEBUG : true,\n      'PM2_HOME': that.pm2_home\n    }, process.env),\n    stdio: ['ipc', out, err]\n  });\n\n  function onError(e) {\n    console.error(e.message || e);\n    return cb ? cb(e.message || e) : false;\n  }\n\n  child.once('error', onError);\n  child.unref();\n  child.once('message', function (msg) {\n    debug('PM2 daemon launched with return message: ', msg);\n    child.removeListener('error', onError);\n    child.disconnect();\n    if (opts && opts.interactor == false) return cb(null, child);\n    if (process.env.PM2_NO_INTERACTION == 'true') return cb(null, child);\n    /**\n     * Here the Keymetrics agent is launched automaticcaly if\n     * it has been already configured before (via pm2 link)\n     */\n\n    KMDaemon.launchAndInteract(that.conf, {\n      machine_name: that.machine_name,\n      public_key: that.public_key,\n      secret_key: that.secret_key,\n      pm2_version: pkg.version\n    }, function (err, data, interactor_proc) {\n      that.interactor_process = interactor_proc;\n      return cb(null, child);\n    });\n  });\n};\n/**\n * Ping the daemon to know if it alive or not\n * @api public\n * @method pingDaemon\n * @param {} cb\n * @return\n */\n\n\nClient.prototype.pingDaemon = function pingDaemon(cb) {\n  var req = axon.socket('req');\n  var client = new rpc.Client(req);\n  var that = this;\n  debug('[PING PM2] Trying to connect to server');\n  client.sock.once('reconnect attempt', function () {\n    client.sock.close();\n    debug('Daemon not launched');\n    process.nextTick(function () {\n      return cb(false);\n    });\n  });\n  client.sock.once('error', function (e) {\n    if (e.code === 'EACCES') {\n      fs.stat(that.conf.DAEMON_RPC_PORT, function (e, stats) {\n        if (stats.uid === 0) {\n          console.error(that.conf.PREFIX_MSG_ERR + 'Permission denied, to give access to current user:');\n          console.log('$ sudo chown ' + process.env.USER + ':' + process.env.USER + ' ' + that.conf.DAEMON_RPC_PORT + ' ' + that.conf.DAEMON_PUB_PORT);\n        } else console.error(that.conf.PREFIX_MSG_ERR + 'Permission denied, check permissions on ' + that.conf.DAEMON_RPC_PORT);\n\n        process.exit(1);\n      });\n    } else console.error(e.message || e);\n  });\n  client.sock.once('connect', function () {\n    client.sock.once('close', function () {\n      return cb(true);\n    });\n    client.sock.close();\n    debug('Daemon alive');\n  });\n  req.connect(this.rpc_socket_file);\n};\n/**\n * Methods to interact with the Daemon via RPC\n * This method wait to be connected to the Daemon\n * Once he's connected it trigger the command parsing (on ./bin/pm2 file, at the end)\n * @method launchRPC\n * @params {function} [cb]\n * @return\n */\n\n\nClient.prototype.launchRPC = function launchRPC(cb) {\n  var self = this;\n  debug('Launching RPC client on socket file %s', this.rpc_socket_file);\n  var req = axon.socket('req');\n  this.client = new rpc.Client(req);\n\n  var connectHandler = function () {\n    self.client.sock.removeListener('error', errorHandler);\n    debug('RPC Connected to Daemon');\n\n    if (cb) {\n      setTimeout(function () {\n        cb(null);\n      }, 4);\n    }\n  };\n\n  var errorHandler = function (e) {\n    self.client.sock.removeListener('connect', connectHandler);\n\n    if (cb) {\n      return cb(e);\n    }\n  };\n\n  this.client.sock.once('connect', connectHandler);\n  this.client.sock.once('error', errorHandler);\n  this.client_sock = req.connect(this.rpc_socket_file);\n};\n/**\n * Methods to close the RPC connection\n * @callback cb\n */\n\n\nClient.prototype.disconnectRPC = function disconnectRPC(cb) {\n  var that = this;\n  if (!cb) cb = noop;\n\n  if (!this.client_sock || !this.client_sock.close) {\n    this.client = null;\n    return process.nextTick(function () {\n      cb(new Error('SUB connection to PM2 is not launched'));\n    });\n  }\n\n  if (this.client_sock.connected === false || this.client_sock.closing === true) {\n    this.client = null;\n    return process.nextTick(function () {\n      cb(new Error('RPC already being closed'));\n    });\n  }\n\n  try {\n    var timer;\n    that.client_sock.once('close', function () {\n      clearTimeout(timer);\n      that.client = null;\n      debug('PM2 RPC cleanly closed');\n      return cb(null, {\n        msg: 'RPC Successfully closed'\n      });\n    });\n    timer = setTimeout(function () {\n      if (that.client_sock.destroy) that.client_sock.destroy();\n      that.client = null;\n      return cb(null, {\n        msg: 'RPC Successfully closed via timeout'\n      });\n    }, 200);\n    that.client_sock.close();\n  } catch (e) {\n    debug('Error while disconnecting RPC PM2', e.stack || e);\n    return cb(e);\n  }\n\n  return false;\n};\n\nClient.prototype.launchBus = function launchEventSystem(cb) {\n  var self = this;\n  this.sub = axon.socket('sub-emitter');\n  this.sub_sock = this.sub.connect(this.pub_socket_file);\n  this.sub_sock.once('connect', function () {\n    return cb(null, self.sub, self.sub_sock);\n  });\n};\n\nClient.prototype.disconnectBus = function disconnectBus(cb) {\n  if (!cb) cb = noop;\n  var that = this;\n\n  if (!this.sub_sock || !this.sub_sock.close) {\n    that.sub = null;\n    return process.nextTick(function () {\n      cb(null, {\n        msg: 'bus was not connected'\n      });\n    });\n  }\n\n  if (this.sub_sock.connected === false || this.sub_sock.closing === true) {\n    that.sub = null;\n    return process.nextTick(function () {\n      cb(new Error('SUB connection is already being closed'));\n    });\n  }\n\n  try {\n    var timer;\n    that.sub_sock.once('close', function () {\n      that.sub = null;\n      clearTimeout(timer);\n      debug('PM2 PUB cleanly closed');\n      return cb();\n    });\n    timer = setTimeout(function () {\n      if (Client.sub_sock.destroy) that.sub_sock.destroy();\n      return cb();\n    }, 200);\n    this.sub_sock.close();\n  } catch (e) {\n    return cb(e);\n  }\n};\n/**\n * Description\n * @method gestExposedMethods\n * @param {} cb\n * @return\n */\n\n\nClient.prototype.getExposedMethods = function getExposedMethods(cb) {\n  this.client.methods(cb);\n};\n/**\n * Description\n * @method executeRemote\n * @param {} method\n * @param {} env\n * @param {} fn\n * @return\n */\n\n\nClient.prototype.executeRemote = function executeRemote(method, app_conf, fn) {\n  var self = this; // stop watch on stop | env is the process id\n\n  if (method.indexOf('stop') !== -1) {\n    this.stopWatch(method, app_conf);\n  } // stop watching when process is deleted\n  else if (method.indexOf('delete') !== -1) {\n      this.stopWatch(method, app_conf);\n    } // stop everything on kill\n    else if (method.indexOf('kill') !== -1) {\n        this.stopWatch('deleteAll', app_conf);\n      } else if (method.indexOf('restartProcessId') !== -1 && process.argv.indexOf('--watch') > -1) {\n        delete app_conf.env.current_conf.watch;\n        this.toggleWatch(method, app_conf);\n      }\n\n  if (!this.client || !this.client.call) {\n    this.start(function (error) {\n      if (error) {\n        if (fn) return fn(error);\n        console.error(error);\n        return process.exit(0);\n      }\n\n      if (self.client) {\n        return self.client.call(method, app_conf, fn);\n      }\n    });\n    return false;\n  }\n\n  debug('Calling daemon method pm2:%s on rpc socket:%s', method, this.rpc_socket_file);\n  return this.client.call(method, app_conf, fn);\n};\n\nClient.prototype.notifyGod = function (action_name, id, cb) {\n  this.executeRemote('notifyByProcessId', {\n    id: id,\n    action_name: action_name,\n    manually: true\n  }, function () {\n    debug('God notified');\n    return cb ? cb() : false;\n  });\n};\n\nClient.prototype.killDaemon = function killDaemon(fn) {\n  var timeout;\n  var that = this;\n\n  function quit() {\n    that.close(function () {\n      return fn ? fn(null, {\n        success: true\n      }) : false;\n    });\n  } // under unix, we listen for signal (that is send by daemon to notify us that its shuting down)\n\n\n  if (process.platform !== 'win32' && process.platform !== 'win64') {\n    process.once('SIGQUIT', function () {\n      debug('Received SIGQUIT from pm2 daemon');\n      clearTimeout(timeout);\n      quit();\n    });\n  } else {\n    // if under windows, try to ping the daemon to see if it still here\n    setTimeout(function () {\n      that.pingDaemon(function (alive) {\n        if (!alive) {\n          clearTimeout(timeout);\n          return quit();\n        }\n      });\n    }, 250);\n  }\n\n  timeout = setTimeout(function () {\n    quit();\n  }, 3000); // Kill daemon\n\n  this.executeRemote('killMe', {\n    pid: process.pid\n  });\n};\n/**\n * Description\n * @method toggleWatch\n * @param {String} pm2 method name\n * @param {Object} application environment, should include id\n * @param {Function} callback\n */\n\n\nClient.prototype.toggleWatch = function toggleWatch(method, env, fn) {\n  debug('Calling toggleWatch');\n  this.client.call('toggleWatch', method, env, function () {\n    return fn ? fn() : false;\n  });\n};\n/**\n * Description\n * @method startWatch\n * @param {String} pm2 method name\n * @param {Object} application environment, should include id\n * @param {Function} callback\n */\n\n\nClient.prototype.startWatch = function restartWatch(method, env, fn) {\n  debug('Calling startWatch');\n  this.client.call('startWatch', method, env, function () {\n    return fn ? fn() : false;\n  });\n};\n/**\n * Description\n * @method stopWatch\n * @param {String} pm2 method name\n * @param {Object} application environment, should include id\n * @param {Function} callback\n */\n\n\nClient.prototype.stopWatch = function stopWatch(method, env, fn) {\n  debug('Calling stopWatch');\n  this.client.call('stopWatch', method, env, function () {\n    return fn ? fn() : false;\n  });\n};\n\nClient.prototype.getAllProcess = function (cb) {\n  var found_proc = [];\n  this.executeRemote('getMonitorData', {}, function (err, procs) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    return cb(null, procs);\n  });\n};\n\nClient.prototype.getAllProcessId = function (cb) {\n  var found_proc = [];\n  this.executeRemote('getMonitorData', {}, function (err, procs) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    return cb(null, procs.map(proc => proc.pm_id));\n  });\n};\n\nClient.prototype.getAllProcessIdWithoutModules = function (cb) {\n  var found_proc = [];\n  this.executeRemote('getMonitorData', {}, function (err, procs) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    var proc_ids = procs.filter(proc => !proc.pm2_env.pmx_module).map(proc => proc.pm_id);\n    return cb(null, proc_ids);\n  });\n};\n\nClient.prototype.getProcessIdByName = function (name, force_all, cb) {\n  var found_proc = [];\n  var full_details = {};\n\n  if (typeof cb === 'undefined') {\n    cb = force_all;\n    force_all = false;\n  }\n\n  if (typeof name == 'number') name = name.toString();\n  this.executeRemote('getMonitorData', {}, function (err, list) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    list.forEach(function (proc) {\n      if (proc.pm2_env.name == name || proc.pm2_env.pm_exec_path == path.resolve(name)) {\n        found_proc.push(proc.pm_id);\n        full_details[proc.pm_id] = proc;\n      }\n    });\n    return cb(null, found_proc, full_details);\n  });\n};\n\nClient.prototype.getProcessIdsByNamespace = function (namespace, force_all, cb) {\n  var found_proc = [];\n  var full_details = {};\n\n  if (typeof cb === 'undefined') {\n    cb = force_all;\n    force_all = false;\n  }\n\n  if (typeof namespace == 'number') namespace = namespace.toString();\n  this.executeRemote('getMonitorData', {}, function (err, list) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    list.forEach(function (proc) {\n      if (proc.pm2_env.namespace == namespace) {\n        found_proc.push(proc.pm_id);\n        full_details[proc.pm_id] = proc;\n      }\n    });\n    return cb(null, found_proc, full_details);\n  });\n};\n\nClient.prototype.getProcessByName = function (name, cb) {\n  var found_proc = [];\n  this.executeRemote('getMonitorData', {}, function (err, list) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    list.forEach(function (proc) {\n      if (proc.pm2_env.name == name || proc.pm2_env.pm_exec_path == path.resolve(name)) {\n        found_proc.push(proc);\n      }\n    });\n    return cb(null, found_proc);\n  });\n};\n\nClient.prototype.getProcessByNameOrId = function (nameOrId, cb) {\n  var foundProc = [];\n  this.executeRemote('getMonitorData', {}, function (err, list) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    list.forEach(function (proc) {\n      if (proc.pm2_env.name === nameOrId || proc.pm2_env.pm_exec_path === path.resolve(nameOrId) || proc.pid === parseInt(nameOrId) || proc.pm2_env.pm_id === parseInt(nameOrId)) {\n        foundProc.push(proc);\n      }\n    });\n    return cb(null, foundProc);\n  });\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/Client.js"],"names":["debug","require","Common","KMDaemon","rpc","forEach","axon","util","fs","path","pkg","which","noop","Client","module","exports","opts","conf","daemon_mode","pm2_home","PM2_ROOT_PATH","secret_key","public_key","machine_name","initFileStructure","DAEMON_RPC_PORT","DAEMON_PUB_PORT","rpc_socket_file","pub_socket_file","prototype","start","cb","that","pingDaemon","daemonAlive","launchRPC","err","meta","new_pm2_instance","Daemon","daemon","pid_file","PM2_PID_FILE_PATH","ignore_signals","console","log","innerStart","launchAndInteract","pm2_version","version","data","interactor_proc","interactor_process","launchDaemon","child","printError","process","exit","ERROR_EXIT","env","PM2_DISCRETE_MODE","printOut","PREFIX_MSG","existsSync","DEFAULT_LOG_PATH","sync","e","error","stack","DEFAULT_PID_PATH","PM2_MODULE_CONF_FILE","writeFileSync","DEFAULT_MODULE_PATH","join","PM2_HOME","Date","now","toString","PM2_PROGRAMMATIC","vCheck","state","dt","readFileSync","__dirname","PM2_BANNER","close","disconnectRPC","bind","disconnectBus","fn","next","interactor","ClientJS","resolve","dirname","filename","node_args","out","openSync","PM2_LOG_FILE_PATH","LOW_MEMORY_ENVIRONMENT","os","push","Math","floor","totalmem","PM2_NODE_OPTIONS","concat","split","interpreter","execPath","spawn","detached","cwd","_extend","DEBUG","stdio","onError","message","once","unref","msg","removeListener","disconnect","PM2_NO_INTERACTION","req","socket","client","sock","nextTick","code","stat","stats","uid","PREFIX_MSG_ERR","USER","connect","self","connectHandler","errorHandler","setTimeout","client_sock","Error","connected","closing","timer","clearTimeout","destroy","launchBus","launchEventSystem","sub","sub_sock","getExposedMethods","methods","executeRemote","method","app_conf","indexOf","stopWatch","argv","current_conf","watch","toggleWatch","call","notifyGod","action_name","id","manually","killDaemon","timeout","quit","success","platform","alive","pid","startWatch","restartWatch","getAllProcess","found_proc","procs","getAllProcessId","map","proc","pm_id","getAllProcessIdWithoutModules","proc_ids","filter","pm2_env","pmx_module","getProcessIdByName","name","force_all","full_details","list","pm_exec_path","getProcessIdsByNamespace","namespace","getProcessByName","getProcessByNameOrId","nameOrId","foundProc","parseInt"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n\nvar debug          = require('debug')('pm2:client');\nvar Common         = require('./Common.js');\nvar KMDaemon       = require('@pm2/agent/src/InteractorClient');\nvar rpc            = require('pm2-axon-rpc');\nvar forEach        = require('async/forEach');\nvar axon           = require('pm2-axon');\nvar util           = require('util');\nvar fs             = require('fs');\nvar path           = require('path');\nvar pkg            = require('../package.json');\nvar which          = require('./tools/which.js');\n\nfunction noop() {}\n\nvar Client = module.exports = function(opts) {\n  if (!opts) opts = {};\n\n  if (!opts.conf)\n    this.conf = require('../constants.js');\n  else {\n    this.conf     = opts.conf;\n  }\n\n  this.daemon_mode = typeof(opts.daemon_mode) === 'undefined' ? true : opts.daemon_mode;\n  this.pm2_home    = this.conf.PM2_ROOT_PATH;\n  this.secret_key   = opts.secret_key;\n  this.public_key   = opts.public_key;\n  this.machine_name = opts.machine_name;\n\n  // Create all folders and files needed\n  // Client depends to that to interact with PM2 properly\n  this.initFileStructure(this.conf);\n\n  debug('Using RPC file %s', this.conf.DAEMON_RPC_PORT);\n  debug('Using PUB file %s', this.conf.DAEMON_PUB_PORT);\n  this.rpc_socket_file = this.conf.DAEMON_RPC_PORT;\n  this.pub_socket_file = this.conf.DAEMON_PUB_PORT;\n};\n\n// @breaking change (noDaemonMode has been drop)\n// @todo ret err\nClient.prototype.start = function(cb) {\n  var that = this;\n\n  this.pingDaemon(function(daemonAlive) {\n    if (daemonAlive === true)\n      return that.launchRPC(function(err, meta) {\n        return cb(null, {\n          daemon_mode      : that.conf.daemon_mode,\n          new_pm2_instance : false,\n          rpc_socket_file  : that.rpc_socket_file,\n          pub_socket_file  : that.pub_socket_file,\n          pm2_home         : that.pm2_home\n        });\n      });\n\n    /**\n     * No Daemon mode\n     */\n    if (that.daemon_mode === false) {\n      var Daemon         = require('./Daemon.js');\n\n      var daemon = new Daemon({\n        pub_socket_file : that.conf.DAEMON_PUB_PORT,\n        rpc_socket_file : that.conf.DAEMON_RPC_PORT,\n        pid_file        : that.conf.PM2_PID_FILE_PATH,\n        ignore_signals  : true\n      });\n\n      console.log('Launching in no daemon mode');\n\n      daemon.innerStart(function() {\n        KMDaemon.launchAndInteract(that.conf, {\n          machine_name : that.machine_name,\n          public_key   : that.public_key,\n          secret_key   : that.secret_key,\n          pm2_version  : pkg.version\n        }, function(err, data, interactor_proc) {\n          that.interactor_process = interactor_proc;\n        });\n\n        that.launchRPC(function(err, meta) {\n          return cb(null, {\n            daemon_mode      : that.conf.daemon_mode,\n            new_pm2_instance : true,\n            rpc_socket_file  : that.rpc_socket_file,\n            pub_socket_file  : that.pub_socket_file,\n            pm2_home         : that.pm2_home\n          });\n        });\n      });\n      return false;\n    }\n\n    /**\n     * Daemon mode\n     */\n    that.launchDaemon(function(err, child) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(err) : process.exit(that.conf.ERROR_EXIT);\n      }\n\n      if (!process.env.PM2_DISCRETE_MODE)\n        Common.printOut(that.conf.PREFIX_MSG + 'PM2 Successfully daemonized');\n\n      that.launchRPC(function(err, meta) {\n        return cb(null, {\n          daemon_mode      : that.conf.daemon_mode,\n          new_pm2_instance : true,\n          rpc_socket_file  : that.rpc_socket_file,\n          pub_socket_file  : that.pub_socket_file,\n          pm2_home         : that.pm2_home\n        });\n      });\n    });\n  });\n};\n\n// Init file structure of pm2_home\n// This includes\n// - pm2 pid and log path\n// - rpc and pub socket for command execution\nClient.prototype.initFileStructure = function (opts) {\n  if (!fs.existsSync(opts.DEFAULT_LOG_PATH)) {\n    try {\n      require('mkdirp').sync(opts.DEFAULT_LOG_PATH);\n    } catch (e) {\n      console.error(e.stack || e);\n    }\n  }\n\n  if (!fs.existsSync(opts.DEFAULT_PID_PATH)) {\n    try {\n      require('mkdirp').sync(opts.DEFAULT_PID_PATH);\n    } catch (e) {\n      console.error(e.stack || e);\n    }\n  }\n\n  if (!fs.existsSync(opts.PM2_MODULE_CONF_FILE)) {\n    try {\n      fs.writeFileSync(opts.PM2_MODULE_CONF_FILE, \"{}\");\n    } catch (e) {\n      console.error(e.stack || e);\n    }\n  }\n\n  if (!fs.existsSync(opts.DEFAULT_MODULE_PATH)) {\n    try {\n      require('mkdirp').sync(opts.DEFAULT_MODULE_PATH);\n    } catch (e) {\n      console.error(e.stack || e);\n    }\n  }\n\n  if (process.env.PM2_DISCRETE_MODE) {\n    try {\n      fs.writeFileSync(path.join(opts.PM2_HOME, 'touch'), Date.now().toString());\n    } catch(e) {\n      debug(e.stack || e);\n    }\n  }\n\n  if (!process.env.PM2_PROGRAMMATIC && !fs.existsSync(path.join(opts.PM2_HOME, 'touch'))) {\n\n    var vCheck = require('./VersionCheck.js')\n\n    vCheck({\n      state: 'install',\n      version: pkg.version\n    })\n\n    var dt = fs.readFileSync(path.join(__dirname, opts.PM2_BANNER));\n    console.log(dt.toString());\n    try {\n      fs.writeFileSync(path.join(opts.PM2_HOME, 'touch'), Date.now().toString());\n    } catch(e) {\n      debug(e.stack || e);\n    }\n  }\n};\n\nClient.prototype.close = function(cb) {\n  var that = this;\n\n  forEach([\n    that.disconnectRPC.bind(that),\n    that.disconnectBus.bind(that)\n  ], function(fn, next) {\n    fn(next)\n  }, cb);\n};\n\n/**\n * Launch the Daemon by forking this same file\n * The method Client.remoteWrapper will be called\n *\n * @method launchDaemon\n * @param {Object} opts\n * @param {Object} [opts.interactor=true] allow to disable interaction on launch\n */\nClient.prototype.launchDaemon = function(opts, cb) {\n  if (typeof(opts) == 'function') {\n    cb = opts;\n    opts = {\n      interactor : true\n    };\n  }\n\n  var that = this\n  var ClientJS = path.resolve(path.dirname(module.filename), 'Daemon.js');\n  var node_args = [];\n  var out, err;\n\n  // if (process.env.TRAVIS) {\n  //   // Redirect PM2 internal err and out to STDERR STDOUT when running with Travis\n  //   out = 1;\n  //   err = 2;\n  // }\n  // else {\n  out = fs.openSync(that.conf.PM2_LOG_FILE_PATH, 'a'),\n  err = fs.openSync(that.conf.PM2_LOG_FILE_PATH, 'a');\n  //}\n\n  if (this.conf.LOW_MEMORY_ENVIRONMENT) {\n    var os = require('os');\n    node_args.push('--gc-global'); // Does full GC (smaller memory footprint)\n    node_args.push('--max-old-space-size=' + Math.floor(os.totalmem() / 1024 / 1024));\n  }\n\n  // Node.js tuning for better performance\n  //node_args.push('--expose-gc'); // Allows manual GC in the code\n\n  /**\n   * Add node [arguments] depending on PM2_NODE_OPTIONS env variable\n   */\n  if (process.env.PM2_NODE_OPTIONS)\n    node_args = node_args.concat(process.env.PM2_NODE_OPTIONS.split(' '));\n  node_args.push(ClientJS);\n\n  if (!process.env.PM2_DISCRETE_MODE)\n    Common.printOut(that.conf.PREFIX_MSG + 'Spawning PM2 daemon with pm2_home=' + this.pm2_home);\n\n  var interpreter = 'node';\n\n  if (which('node') == null)\n    interpreter = process.execPath;\n\n  var child = require('child_process').spawn(interpreter, node_args, {\n    detached   : true,\n    cwd        : that.conf.cwd || process.cwd(),\n    env        : util._extend({\n      'SILENT'      : that.conf.DEBUG ? !that.conf.DEBUG : true,\n      'PM2_HOME'   : that.pm2_home\n    }, process.env),\n    stdio      : ['ipc', out, err]\n  });\n\n  function onError(e) {\n    console.error(e.message || e);\n    return cb ? cb(e.message || e) : false;\n  }\n\n  child.once('error', onError);\n\n  child.unref();\n\n  child.once('message', function(msg) {\n    debug('PM2 daemon launched with return message: ', msg);\n    child.removeListener('error', onError);\n    child.disconnect();\n\n    if (opts && opts.interactor == false)\n      return cb(null, child);\n\n    if (process.env.PM2_NO_INTERACTION == 'true')\n      return cb(null, child);\n\n    /**\n     * Here the Keymetrics agent is launched automaticcaly if\n     * it has been already configured before (via pm2 link)\n     */\n    KMDaemon.launchAndInteract(that.conf, {\n      machine_name : that.machine_name,\n      public_key   : that.public_key,\n      secret_key   : that.secret_key,\n      pm2_version  : pkg.version\n    }, function(err, data, interactor_proc) {\n      that.interactor_process = interactor_proc;\n      return cb(null, child);\n    });\n  });\n};\n\n/**\n * Ping the daemon to know if it alive or not\n * @api public\n * @method pingDaemon\n * @param {} cb\n * @return\n */\nClient.prototype.pingDaemon = function pingDaemon(cb) {\n  var req    = axon.socket('req');\n  var client = new rpc.Client(req);\n  var that = this;\n\n  debug('[PING PM2] Trying to connect to server');\n\n  client.sock.once('reconnect attempt', function() {\n    client.sock.close();\n    debug('Daemon not launched');\n    process.nextTick(function() {\n      return cb(false);\n    });\n  });\n\n  client.sock.once('error', function(e) {\n    if (e.code === 'EACCES') {\n      fs.stat(that.conf.DAEMON_RPC_PORT, function(e, stats) {\n        if (stats.uid === 0) {\n          console.error(that.conf.PREFIX_MSG_ERR + 'Permission denied, to give access to current user:');\n          console.log('$ sudo chown ' + process.env.USER + ':' + process.env.USER + ' ' + that.conf.DAEMON_RPC_PORT +  ' ' + that.conf.DAEMON_PUB_PORT);\n        }\n        else\n          console.error(that.conf.PREFIX_MSG_ERR + 'Permission denied, check permissions on ' + that.conf.DAEMON_RPC_PORT);\n\n        process.exit(1);\n      });\n    }\n    else\n      console.error(e.message || e);\n  });\n\n  client.sock.once('connect', function() {\n    client.sock.once('close', function() {\n      return cb(true);\n    });\n    client.sock.close();\n    debug('Daemon alive');\n  });\n\n  req.connect(this.rpc_socket_file);\n};\n\n/**\n * Methods to interact with the Daemon via RPC\n * This method wait to be connected to the Daemon\n * Once he's connected it trigger the command parsing (on ./bin/pm2 file, at the end)\n * @method launchRPC\n * @params {function} [cb]\n * @return\n */\nClient.prototype.launchRPC = function launchRPC(cb) {\n  var self = this;\n  debug('Launching RPC client on socket file %s', this.rpc_socket_file);\n  var req      = axon.socket('req');\n  this.client  = new rpc.Client(req);\n\n  var connectHandler = function() {\n    self.client.sock.removeListener('error', errorHandler);\n    debug('RPC Connected to Daemon');\n    if (cb) {\n      setTimeout(function() {\n        cb(null);\n      }, 4);\n    }\n  };\n\n  var errorHandler = function(e) {\n    self.client.sock.removeListener('connect', connectHandler);\n    if (cb) {\n      return cb(e);\n    }\n  };\n\n  this.client.sock.once('connect', connectHandler);\n  this.client.sock.once('error', errorHandler);\n  this.client_sock = req.connect(this.rpc_socket_file);\n};\n\n/**\n * Methods to close the RPC connection\n * @callback cb\n */\nClient.prototype.disconnectRPC = function disconnectRPC(cb) {\n  var that = this;\n  if (!cb) cb = noop;\n\n  if (!this.client_sock || !this.client_sock.close) {\n    this.client = null;\n    return process.nextTick(function() {\n      cb(new Error('SUB connection to PM2 is not launched'));\n    });\n  }\n\n  if (this.client_sock.connected === false ||\n      this.client_sock.closing === true) {\n    this.client = null;\n    return process.nextTick(function() {\n      cb(new Error('RPC already being closed'));\n    });\n  }\n\n  try {\n    var timer;\n\n    that.client_sock.once('close', function() {\n      clearTimeout(timer);\n      that.client = null;\n      debug('PM2 RPC cleanly closed');\n      return cb(null, { msg : 'RPC Successfully closed' });\n    });\n\n    timer = setTimeout(function() {\n      if (that.client_sock.destroy)\n        that.client_sock.destroy();\n      that.client = null;\n      return cb(null, { msg : 'RPC Successfully closed via timeout' });\n    }, 200);\n\n    that.client_sock.close();\n  } catch(e) {\n    debug('Error while disconnecting RPC PM2', e.stack || e);\n    return cb(e);\n  }\n  return false;\n};\n\nClient.prototype.launchBus = function launchEventSystem(cb) {\n  var self = this;\n  this.sub = axon.socket('sub-emitter');\n  this.sub_sock = this.sub.connect(this.pub_socket_file);\n\n  this.sub_sock.once('connect', function() {\n    return cb(null, self.sub, self.sub_sock);\n  });\n};\n\nClient.prototype.disconnectBus = function disconnectBus(cb) {\n  if (!cb) cb = noop;\n\n  var that = this;\n\n  if (!this.sub_sock || !this.sub_sock.close) {\n    that.sub = null;\n    return process.nextTick(function() {\n      cb(null, { msg : 'bus was not connected'});\n    });\n  }\n\n  if (this.sub_sock.connected === false ||\n      this.sub_sock.closing === true) {\n    that.sub = null;\n    return process.nextTick(function() {\n      cb(new Error('SUB connection is already being closed'));\n    });\n  }\n\n  try {\n    var timer;\n\n    that.sub_sock.once('close', function() {\n      that.sub = null;\n      clearTimeout(timer);\n      debug('PM2 PUB cleanly closed');\n      return cb();\n    });\n\n    timer = setTimeout(function() {\n      if (Client.sub_sock.destroy)\n        that.sub_sock.destroy();\n      return cb();\n    }, 200);\n\n    this.sub_sock.close();\n  } catch(e) {\n    return cb(e);\n  }\n};\n\n/**\n * Description\n * @method gestExposedMethods\n * @param {} cb\n * @return\n */\nClient.prototype.getExposedMethods = function getExposedMethods(cb) {\n  this.client.methods(cb);\n};\n\n/**\n * Description\n * @method executeRemote\n * @param {} method\n * @param {} env\n * @param {} fn\n * @return\n */\nClient.prototype.executeRemote = function executeRemote(method, app_conf, fn) {\n  var self = this;\n\n  // stop watch on stop | env is the process id\n  if (method.indexOf('stop') !== -1) {\n    this.stopWatch(method, app_conf);\n  }\n  // stop watching when process is deleted\n  else if (method.indexOf('delete') !== -1) {\n    this.stopWatch(method, app_conf);\n  }\n  // stop everything on kill\n  else if (method.indexOf('kill') !== -1) {\n    this.stopWatch('deleteAll', app_conf);\n  }\n  else if (method.indexOf('restartProcessId') !== -1 && process.argv.indexOf('--watch') > -1) {\n    delete app_conf.env.current_conf.watch;\n    this.toggleWatch(method, app_conf);\n  }\n\n  if (!this.client || !this.client.call) {\n    this.start(function(error) {\n      if (error) {\n        if (fn)\n          return fn(error);\n        console.error(error);\n        return process.exit(0);\n      }\n      if (self.client) {\n        return self.client.call(method, app_conf, fn);\n      }\n    });\n    return false;\n  }\n\n  debug('Calling daemon method pm2:%s on rpc socket:%s', method, this.rpc_socket_file);\n  return this.client.call(method, app_conf, fn);\n};\n\nClient.prototype.notifyGod = function(action_name, id, cb) {\n  this.executeRemote('notifyByProcessId', {\n    id : id,\n    action_name : action_name,\n    manually : true\n  }, function() {\n    debug('God notified');\n    return cb ? cb() : false;\n  });\n};\n\nClient.prototype.killDaemon = function killDaemon(fn) {\n  var timeout;\n  var that = this;\n\n  function quit() {\n    that.close(function() {\n      return fn ? fn(null, {success:true}) : false;\n    });\n  }\n\n  // under unix, we listen for signal (that is send by daemon to notify us that its shuting down)\n  if (process.platform !== 'win32' && process.platform !== 'win64') {\n    process.once('SIGQUIT', function() {\n      debug('Received SIGQUIT from pm2 daemon');\n      clearTimeout(timeout);\n      quit();\n    });\n  }\n  else {\n    // if under windows, try to ping the daemon to see if it still here\n    setTimeout(function() {\n      that.pingDaemon(function(alive) {\n        if (!alive) {\n          clearTimeout(timeout);\n          return quit();\n        }\n      });\n    }, 250)\n  }\n\n  timeout = setTimeout(function() {\n    quit();\n  }, 3000);\n\n  // Kill daemon\n  this.executeRemote('killMe', {pid : process.pid});\n};\n\n\n/**\n * Description\n * @method toggleWatch\n * @param {String} pm2 method name\n * @param {Object} application environment, should include id\n * @param {Function} callback\n */\nClient.prototype.toggleWatch = function toggleWatch(method, env, fn) {\n  debug('Calling toggleWatch');\n  this.client.call('toggleWatch', method, env, function() {\n    return fn ? fn() : false;\n  });\n};\n\n/**\n * Description\n * @method startWatch\n * @param {String} pm2 method name\n * @param {Object} application environment, should include id\n * @param {Function} callback\n */\nClient.prototype.startWatch = function restartWatch(method, env, fn) {\n  debug('Calling startWatch');\n  this.client.call('startWatch', method, env, function() {\n    return fn ? fn() : false;\n  });\n};\n\n/**\n * Description\n * @method stopWatch\n * @param {String} pm2 method name\n * @param {Object} application environment, should include id\n * @param {Function} callback\n */\nClient.prototype.stopWatch = function stopWatch(method, env, fn) {\n  debug('Calling stopWatch');\n  this.client.call('stopWatch', method, env, function() {\n    return fn ? fn() : false;\n  });\n};\n\nClient.prototype.getAllProcess = function(cb) {\n  var found_proc = [];\n\n  this.executeRemote('getMonitorData', {}, function(err, procs) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    return cb(null, procs);\n  });\n};\n\nClient.prototype.getAllProcessId = function(cb) {\n  var found_proc = [];\n\n  this.executeRemote('getMonitorData', {}, function(err, procs) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    return cb(null, procs.map(proc => proc.pm_id));\n  });\n};\n\nClient.prototype.getAllProcessIdWithoutModules = function(cb) {\n  var found_proc = [];\n\n  this.executeRemote('getMonitorData', {}, function(err, procs) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    var proc_ids = procs\n        .filter(proc => !proc.pm2_env.pmx_module)\n        .map(proc => proc.pm_id)\n\n    return cb(null, proc_ids);\n  });\n};\n\nClient.prototype.getProcessIdByName = function(name, force_all, cb) {\n  var found_proc   = [];\n  var full_details = {};\n\n  if (typeof(cb) === 'undefined') {\n    cb = force_all;\n    force_all = false;\n  }\n\n  if (typeof(name) == 'number')\n    name = name.toString();\n\n  this.executeRemote('getMonitorData', {}, function(err, list) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    list.forEach(function(proc) {\n      if (proc.pm2_env.name == name || proc.pm2_env.pm_exec_path == path.resolve(name)) {\n        found_proc.push(proc.pm_id);\n        full_details[proc.pm_id] = proc;\n      }\n    });\n\n    return cb(null, found_proc, full_details);\n  });\n};\n\nClient.prototype.getProcessIdsByNamespace = function(namespace, force_all, cb) {\n  var found_proc   = [];\n  var full_details = {};\n\n  if (typeof(cb) === 'undefined') {\n    cb = force_all;\n    force_all = false;\n  }\n\n  if (typeof(namespace) == 'number')\n    namespace = namespace.toString();\n\n  this.executeRemote('getMonitorData', {}, function(err, list) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    list.forEach(function(proc) {\n      if (proc.pm2_env.namespace == namespace) {\n        found_proc.push(proc.pm_id);\n        full_details[proc.pm_id] = proc;\n      }\n    });\n\n    return cb(null, found_proc, full_details);\n  });\n};\n\nClient.prototype.getProcessByName = function(name, cb) {\n  var found_proc = [];\n\n  this.executeRemote('getMonitorData', {}, function(err, list) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    list.forEach(function(proc) {\n      if (proc.pm2_env.name == name ||\n          proc.pm2_env.pm_exec_path == path.resolve(name)) {\n        found_proc.push(proc);\n      }\n    });\n\n    return cb(null, found_proc);\n  });\n};\n\nClient.prototype.getProcessByNameOrId = function (nameOrId, cb) {\n  var foundProc = [];\n\n  this.executeRemote('getMonitorData', {}, function (err, list) {\n    if (err) {\n      Common.printError('Error retrieving process list: ' + err);\n      return cb(err);\n    }\n\n    list.forEach(function (proc) {\n      if (proc.pm2_env.name === nameOrId ||\n        proc.pm2_env.pm_exec_path === path.resolve(nameOrId) ||\n        proc.pid === parseInt(nameOrId) ||\n        proc.pm2_env.pm_id === parseInt(nameOrId)) {\n        foundProc.push(proc);\n      }\n    });\n\n    return cb(null, foundProc);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}