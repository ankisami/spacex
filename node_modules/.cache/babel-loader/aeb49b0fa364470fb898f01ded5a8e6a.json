{"ast":null,"code":"/**\n * Protocol version.\n */\nvar version = 1;\n/**\n * Encode `msg` and `args`.\n *\n * @param {Array} args\n * @return {Buffer}\n * @api public\n */\n\nmodule.exports = function (args) {\n  var argc = args.length;\n  var len = 1;\n  var off = 0; // data length\n\n  for (var i = 0; i < argc; i++) {\n    len += 4 + args[i].length;\n  } // buffer\n\n\n  var buf = new Buffer(len); // pack meta\n\n  buf[off++] = version << 4 | argc; // pack args\n\n  for (var i = 0; i < argc; i++) {\n    var arg = args[i];\n    buf.writeUInt32BE(arg.length, off);\n    off += 4;\n    arg.copy(buf, off);\n    off += arg.length;\n  }\n\n  return buf;\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/amp/lib/encode.js"],"names":["version","module","exports","args","argc","length","len","off","i","buf","Buffer","arg","writeUInt32BE","copy"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAG,CAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAc;AAC7B,MAAIC,IAAI,GAAGD,IAAI,CAACE,MAAhB;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,CAAV,CAH6B,CAK7B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7BF,IAAAA,GAAG,IAAI,IAAIH,IAAI,CAACK,CAAD,CAAJ,CAAQH,MAAnB;AACD,GAR4B,CAU7B;;;AACA,MAAII,GAAG,GAAG,IAAIC,MAAJ,CAAWJ,GAAX,CAAV,CAX6B,CAa7B;;AACAG,EAAAA,GAAG,CAACF,GAAG,EAAJ,CAAH,GAAaP,OAAO,IAAI,CAAX,GAAeI,IAA5B,CAd6B,CAgB7B;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7B,QAAIG,GAAG,GAAGR,IAAI,CAACK,CAAD,CAAd;AAEAC,IAAAA,GAAG,CAACG,aAAJ,CAAkBD,GAAG,CAACN,MAAtB,EAA8BE,GAA9B;AACAA,IAAAA,GAAG,IAAI,CAAP;AAEAI,IAAAA,GAAG,CAACE,IAAJ,CAASJ,GAAT,EAAcF,GAAd;AACAA,IAAAA,GAAG,IAAII,GAAG,CAACN,MAAX;AACD;;AAED,SAAOI,GAAP;AACD,CA5BD","sourcesContent":["\n/**\n * Protocol version.\n */\n\nvar version = 1;\n\n/**\n * Encode `msg` and `args`.\n *\n * @param {Array} args\n * @return {Buffer}\n * @api public\n */\n\nmodule.exports = function(args){\n  var argc = args.length;\n  var len = 1;\n  var off = 0;\n\n  // data length\n  for (var i = 0; i < argc; i++) {\n    len += 4 + args[i].length;\n  }\n\n  // buffer\n  var buf = new Buffer(len);\n\n  // pack meta\n  buf[off++] = version << 4 | argc;\n\n  // pack args\n  for (var i = 0; i < argc; i++) {\n    var arg = args[i];\n\n    buf.writeUInt32BE(arg.length, off);\n    off += 4;\n\n    arg.copy(buf, off);\n    off += arg.length;\n  }\n\n  return buf;\n};"]},"metadata":{},"sourceType":"script"}