{"ast":null,"code":"'use strict';\n\nconst colors = require('ansi-colors');\n\nconst ArrayPrompt = require('../types/array');\n\nconst utils = require('../utils');\n\nclass LikertScale extends ArrayPrompt {\n  constructor(options = {}) {\n    super(options);\n    this.widths = [].concat(options.messageWidth || 50);\n    this.align = [].concat(options.align || 'left');\n    this.linebreak = options.linebreak || false;\n    this.edgeLength = options.edgeLength || 3;\n    this.newline = options.newline || '\\n   ';\n    let start = options.startNumber || 1;\n\n    if (typeof this.scale === 'number') {\n      this.scaleKey = false;\n      this.scale = Array(this.scale).fill(0).map((v, i) => ({\n        name: i + start\n      }));\n    }\n  }\n\n  async reset() {\n    this.tableized = false;\n    await super.reset();\n    return this.render();\n  }\n\n  tableize() {\n    if (this.tableized === true) return;\n    this.tableized = true;\n    let longest = 0;\n\n    for (let ch of this.choices) {\n      longest = Math.max(longest, ch.message.length);\n      ch.scaleIndex = ch.initial || 2;\n      ch.scale = [];\n\n      for (let i = 0; i < this.scale.length; i++) {\n        ch.scale.push({\n          index: i\n        });\n      }\n    }\n\n    this.widths[0] = Math.min(this.widths[0], longest + 3);\n  }\n\n  async dispatch(s, key) {\n    if (this.multiple) {\n      return this[key.name] ? await this[key.name](s, key) : await super.dispatch(s, key);\n    }\n\n    this.alert();\n  }\n\n  heading(msg, item, i) {\n    return this.styles.strong(msg);\n  }\n\n  separator() {\n    return this.styles.muted(this.symbols.ellipsis);\n  }\n\n  right() {\n    let choice = this.focused;\n    if (choice.scaleIndex >= this.scale.length - 1) return this.alert();\n    choice.scaleIndex++;\n    return this.render();\n  }\n\n  left() {\n    let choice = this.focused;\n    if (choice.scaleIndex <= 0) return this.alert();\n    choice.scaleIndex--;\n    return this.render();\n  }\n\n  indent() {\n    return '';\n  }\n\n  format() {\n    if (this.state.submitted) {\n      let values = this.choices.map(ch => this.styles.info(ch.index));\n      return values.join(', ');\n    }\n\n    return '';\n  }\n\n  pointer() {\n    return '';\n  }\n  /**\n   * Render the scale \"Key\". Something like:\n   * @return {String}\n   */\n\n\n  renderScaleKey() {\n    if (this.scaleKey === false) return '';\n    if (this.state.submitted) return '';\n    let scale = this.scale.map(item => `   ${item.name} - ${item.message}`);\n    let key = ['', ...scale].map(item => this.styles.muted(item));\n    return key.join('\\n');\n  }\n  /**\n   * Render the heading row for the scale.\n   * @return {String}\n   */\n\n\n  renderScaleHeading(max) {\n    let keys = this.scale.map(ele => ele.name);\n\n    if (typeof this.options.renderScaleHeading === 'function') {\n      keys = this.options.renderScaleHeading.call(this, max);\n    }\n\n    let diff = this.scaleLength - keys.join('').length;\n    let spacing = Math.round(diff / (keys.length - 1));\n    let names = keys.map(key => this.styles.strong(key));\n    let headings = names.join(' '.repeat(spacing));\n    let padding = ' '.repeat(this.widths[0]);\n    return this.margin[3] + padding + this.margin[1] + headings;\n  }\n  /**\n   * Render a scale indicator => ◯ or ◉ by default\n   */\n\n\n  scaleIndicator(choice, item, i) {\n    if (typeof this.options.scaleIndicator === 'function') {\n      return this.options.scaleIndicator.call(this, choice, item, i);\n    }\n\n    let enabled = choice.scaleIndex === item.index;\n    if (item.disabled) return this.styles.hint(this.symbols.radio.disabled);\n    if (enabled) return this.styles.success(this.symbols.radio.on);\n    return this.symbols.radio.off;\n  }\n  /**\n   * Render the actual scale => ◯────◯────◉────◯────◯\n   */\n\n\n  renderScale(choice, i) {\n    let scale = choice.scale.map(item => this.scaleIndicator(choice, item, i));\n    let padding = this.term === 'Hyper' ? '' : ' ';\n    return scale.join(padding + this.symbols.line.repeat(this.edgeLength));\n  }\n  /**\n   * Render a choice, including scale =>\n   *   \"The website is easy to navigate. ◯───◯───◉───◯───◯\"\n   */\n\n\n  async renderChoice(choice, i) {\n    await this.onChoice(choice, i);\n    let focused = this.index === i;\n    let pointer = await this.pointer(choice, i);\n    let hint = await choice.hint;\n\n    if (hint && !utils.hasColor(hint)) {\n      hint = this.styles.muted(hint);\n    }\n\n    let pad = str => this.margin[3] + str.replace(/\\s+$/, '').padEnd(this.widths[0], ' ');\n\n    let newline = this.newline;\n    let ind = this.indent(choice);\n    let message = await this.resolve(choice.message, this.state, choice, i);\n    let scale = await this.renderScale(choice, i);\n    let margin = this.margin[1] + this.margin[3];\n    this.scaleLength = colors.unstyle(scale).length;\n    this.widths[0] = Math.min(this.widths[0], this.width - this.scaleLength - margin.length);\n    let msg = utils.wordWrap(message, {\n      width: this.widths[0],\n      newline\n    });\n    let lines = msg.split('\\n').map(line => pad(line) + this.margin[1]);\n\n    if (focused) {\n      scale = this.styles.info(scale);\n      lines = lines.map(line => this.styles.info(line));\n    }\n\n    lines[0] += scale;\n    if (this.linebreak) lines.push('');\n    return [ind + pointer, lines.join('\\n')].filter(Boolean);\n  }\n\n  async renderChoices() {\n    if (this.state.submitted) return '';\n    this.tableize();\n    let choices = this.visible.map(async (ch, i) => await this.renderChoice(ch, i));\n    let visible = await Promise.all(choices);\n    let heading = await this.renderScaleHeading();\n    return this.margin[0] + [heading, ...visible.map(v => v.join(' '))].join('\\n');\n  }\n\n  async render() {\n    let {\n      submitted,\n      size\n    } = this.state;\n    let prefix = await this.prefix();\n    let separator = await this.separator();\n    let message = await this.message();\n    let prompt = '';\n\n    if (this.options.promptLine !== false) {\n      prompt = [prefix, message, separator, ''].join(' ');\n      this.state.prompt = prompt;\n    }\n\n    let header = await this.header();\n    let output = await this.format();\n    let key = await this.renderScaleKey();\n    let help = (await this.error()) || (await this.hint());\n    let body = await this.renderChoices();\n    let footer = await this.footer();\n    let err = this.emptyError;\n    if (output) prompt += output;\n    if (help && !prompt.includes(help)) prompt += ' ' + help;\n\n    if (submitted && !output && !body.trim() && this.multiple && err != null) {\n      prompt += this.styles.danger(err);\n    }\n\n    this.clear(size);\n    this.write([header, prompt, key, body, footer].filter(Boolean).join('\\n'));\n\n    if (!this.state.submitted) {\n      this.write(this.margin[2]);\n    }\n\n    this.restore();\n  }\n\n  submit() {\n    this.value = {};\n\n    for (let choice of this.choices) {\n      this.value[choice.name] = choice.scaleIndex;\n    }\n\n    return this.base.submit.call(this);\n  }\n\n}\n\nmodule.exports = LikertScale;","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/lib/prompts/scale.js"],"names":["colors","require","ArrayPrompt","utils","LikertScale","constructor","options","widths","concat","messageWidth","align","linebreak","edgeLength","newline","start","startNumber","scale","scaleKey","Array","fill","map","v","i","name","reset","tableized","render","tableize","longest","ch","choices","Math","max","message","length","scaleIndex","initial","push","index","min","dispatch","s","key","multiple","alert","heading","msg","item","styles","strong","separator","muted","symbols","ellipsis","right","choice","focused","left","indent","format","state","submitted","values","info","join","pointer","renderScaleKey","renderScaleHeading","keys","ele","call","diff","scaleLength","spacing","round","names","headings","repeat","padding","margin","scaleIndicator","enabled","disabled","hint","radio","success","on","off","renderScale","term","line","renderChoice","onChoice","hasColor","pad","str","replace","padEnd","ind","resolve","unstyle","width","wordWrap","lines","split","filter","Boolean","renderChoices","visible","Promise","all","size","prefix","prompt","promptLine","header","output","help","error","body","footer","err","emptyError","includes","trim","danger","clear","write","restore","submit","value","base","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst colors = require('ansi-colors');\nconst ArrayPrompt = require('../types/array');\nconst utils = require('../utils');\n\nclass LikertScale extends ArrayPrompt {\n  constructor(options = {}) {\n    super(options);\n    this.widths = [].concat(options.messageWidth || 50);\n    this.align = [].concat(options.align || 'left');\n    this.linebreak = options.linebreak || false;\n    this.edgeLength = options.edgeLength || 3;\n    this.newline = options.newline || '\\n   ';\n    let start = options.startNumber || 1;\n    if (typeof this.scale === 'number') {\n      this.scaleKey = false;\n      this.scale = Array(this.scale).fill(0).map((v, i) => ({ name: i + start }));\n    }\n  }\n\n  async reset() {\n    this.tableized = false;\n    await super.reset();\n    return this.render();\n  }\n\n  tableize() {\n    if (this.tableized === true) return;\n    this.tableized = true;\n    let longest = 0;\n\n    for (let ch of this.choices) {\n      longest = Math.max(longest, ch.message.length);\n      ch.scaleIndex = ch.initial || 2;\n      ch.scale = [];\n\n      for (let i = 0; i < this.scale.length; i++) {\n        ch.scale.push({ index: i });\n      }\n    }\n    this.widths[0] = Math.min(this.widths[0], longest + 3);\n  }\n\n  async dispatch(s, key) {\n    if (this.multiple) {\n      return this[key.name] ? await this[key.name](s, key) : await super.dispatch(s, key);\n    }\n    this.alert();\n  }\n\n  heading(msg, item, i) {\n    return this.styles.strong(msg);\n  }\n\n  separator() {\n    return this.styles.muted(this.symbols.ellipsis);\n  }\n\n  right() {\n    let choice = this.focused;\n    if (choice.scaleIndex >= this.scale.length - 1) return this.alert();\n    choice.scaleIndex++;\n    return this.render();\n  }\n\n  left() {\n    let choice = this.focused;\n    if (choice.scaleIndex <= 0) return this.alert();\n    choice.scaleIndex--;\n    return this.render();\n  }\n\n  indent() {\n    return '';\n  }\n\n  format() {\n    if (this.state.submitted) {\n      let values = this.choices.map(ch => this.styles.info(ch.index));\n      return values.join(', ');\n    }\n    return '';\n  }\n\n  pointer() {\n    return '';\n  }\n\n  /**\n   * Render the scale \"Key\". Something like:\n   * @return {String}\n   */\n\n  renderScaleKey() {\n    if (this.scaleKey === false) return '';\n    if (this.state.submitted) return '';\n    let scale = this.scale.map(item => `   ${item.name} - ${item.message}`);\n    let key = ['', ...scale].map(item => this.styles.muted(item));\n    return key.join('\\n');\n  }\n\n  /**\n   * Render the heading row for the scale.\n   * @return {String}\n   */\n\n  renderScaleHeading(max) {\n    let keys = this.scale.map(ele => ele.name);\n    if (typeof this.options.renderScaleHeading === 'function') {\n      keys = this.options.renderScaleHeading.call(this, max);\n    }\n    let diff = this.scaleLength - keys.join('').length;\n    let spacing = Math.round(diff / (keys.length - 1));\n    let names = keys.map(key => this.styles.strong(key));\n    let headings = names.join(' '.repeat(spacing));\n    let padding = ' '.repeat(this.widths[0]);\n    return this.margin[3] + padding + this.margin[1] + headings;\n  }\n\n  /**\n   * Render a scale indicator => ◯ or ◉ by default\n   */\n\n  scaleIndicator(choice, item, i) {\n    if (typeof this.options.scaleIndicator === 'function') {\n      return this.options.scaleIndicator.call(this, choice, item, i);\n    }\n    let enabled = choice.scaleIndex === item.index;\n    if (item.disabled) return this.styles.hint(this.symbols.radio.disabled);\n    if (enabled) return this.styles.success(this.symbols.radio.on);\n    return this.symbols.radio.off;\n  }\n\n  /**\n   * Render the actual scale => ◯────◯────◉────◯────◯\n   */\n\n  renderScale(choice, i) {\n    let scale = choice.scale.map(item => this.scaleIndicator(choice, item, i));\n    let padding = this.term === 'Hyper' ? '' : ' ';\n    return scale.join(padding + this.symbols.line.repeat(this.edgeLength));\n  }\n\n  /**\n   * Render a choice, including scale =>\n   *   \"The website is easy to navigate. ◯───◯───◉───◯───◯\"\n   */\n\n  async renderChoice(choice, i) {\n    await this.onChoice(choice, i);\n\n    let focused = this.index === i;\n    let pointer = await this.pointer(choice, i);\n    let hint = await choice.hint;\n\n    if (hint && !utils.hasColor(hint)) {\n      hint = this.styles.muted(hint);\n    }\n\n    let pad = str => this.margin[3] + str.replace(/\\s+$/, '').padEnd(this.widths[0], ' ');\n    let newline = this.newline;\n    let ind = this.indent(choice);\n    let message = await this.resolve(choice.message, this.state, choice, i);\n    let scale = await this.renderScale(choice, i);\n    let margin = this.margin[1] + this.margin[3];\n    this.scaleLength = colors.unstyle(scale).length;\n    this.widths[0] = Math.min(this.widths[0], this.width - this.scaleLength - margin.length);\n    let msg = utils.wordWrap(message, { width: this.widths[0], newline });\n    let lines = msg.split('\\n').map(line => pad(line) + this.margin[1]);\n\n    if (focused) {\n      scale = this.styles.info(scale);\n      lines = lines.map(line => this.styles.info(line));\n    }\n\n    lines[0] += scale;\n\n    if (this.linebreak) lines.push('');\n    return [ind + pointer, lines.join('\\n')].filter(Boolean);\n  }\n\n  async renderChoices() {\n    if (this.state.submitted) return '';\n    this.tableize();\n    let choices = this.visible.map(async(ch, i) => await this.renderChoice(ch, i));\n    let visible = await Promise.all(choices);\n    let heading = await this.renderScaleHeading();\n    return this.margin[0] + [heading, ...visible.map(v => v.join(' '))].join('\\n');\n  }\n\n  async render() {\n    let { submitted, size } = this.state;\n\n    let prefix = await this.prefix();\n    let separator = await this.separator();\n    let message = await this.message();\n\n    let prompt = '';\n    if (this.options.promptLine !== false) {\n      prompt = [prefix, message, separator, ''].join(' ');\n      this.state.prompt = prompt;\n    }\n\n    let header = await this.header();\n    let output = await this.format();\n    let key = await this.renderScaleKey();\n    let help = await this.error() || await this.hint();\n    let body = await this.renderChoices();\n    let footer = await this.footer();\n    let err = this.emptyError;\n\n    if (output) prompt += output;\n    if (help && !prompt.includes(help)) prompt += ' ' + help;\n\n    if (submitted && !output && !body.trim() && this.multiple && err != null) {\n      prompt += this.styles.danger(err);\n    }\n\n    this.clear(size);\n    this.write([header, prompt, key, body, footer].filter(Boolean).join('\\n'));\n    if (!this.state.submitted) {\n      this.write(this.margin[2]);\n    }\n    this.restore();\n  }\n\n  submit() {\n    this.value = {};\n    for (let choice of this.choices) {\n      this.value[choice.name] = choice.scaleIndex;\n    }\n    return this.base.submit.call(this);\n  }\n}\n\nmodule.exports = LikertScale;\n"]},"metadata":{},"sourceType":"script"}