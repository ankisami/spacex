{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\n/**\n * Render a placeholder value with cursor and styling based on the\n * position of the cursor.\n *\n * @param {Object} `prompt` Prompt instance.\n * @param {String} `input` Input string.\n * @param {String} `initial` The initial user-provided value.\n * @param {Number} `pos` Current cursor position.\n * @param {Boolean} `showCursor` Render a simulated cursor using the inverse primary style.\n * @return {String} Returns the styled placeholder string.\n * @api public\n */\n\n\nmodule.exports = (prompt, options = {}) => {\n  prompt.cursorHide();\n  let {\n    input = '',\n    initial = '',\n    pos,\n    showCursor = true,\n    color\n  } = options;\n  let style = color || prompt.styles.placeholder;\n  let inverse = utils.inverse(prompt.styles.primary);\n\n  let blinker = str => inverse(prompt.styles.black(str));\n\n  let output = input;\n  let char = ' ';\n  let reverse = blinker(char);\n\n  if (prompt.blink && prompt.blink.off === true) {\n    blinker = str => str;\n\n    reverse = '';\n  }\n\n  if (showCursor && pos === 0 && initial === '' && input === '') {\n    return blinker(char);\n  }\n\n  if (showCursor && pos === 0 && (input === initial || input === '')) {\n    return blinker(initial[0]) + style(initial.slice(1));\n  }\n\n  initial = utils.isPrimitive(initial) ? `${initial}` : '';\n  input = utils.isPrimitive(input) ? `${input}` : '';\n  let placeholder = initial && initial.startsWith(input) && initial !== input;\n  let cursor = placeholder ? blinker(initial[input.length]) : reverse;\n\n  if (pos !== input.length && showCursor === true) {\n    output = input.slice(0, pos) + blinker(input[pos]) + input.slice(pos + 1);\n    cursor = '';\n  }\n\n  if (showCursor === false) {\n    cursor = '';\n  }\n\n  if (placeholder) {\n    let raw = prompt.styles.unstyle(output + cursor);\n    return output + cursor + style(initial.slice(raw.length));\n  }\n\n  return output + cursor;\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/lib/placeholder.js"],"names":["utils","require","module","exports","prompt","options","cursorHide","input","initial","pos","showCursor","color","style","styles","placeholder","inverse","primary","blinker","str","black","output","char","reverse","blink","off","slice","isPrimitive","startsWith","cursor","length","raw","unstyle"],"mappings":"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","sourcesContent":["'use strict';\n\nconst utils = require('./utils');\n\n/**\n * Render a placeholder value with cursor and styling based on the\n * position of the cursor.\n *\n * @param {Object} `prompt` Prompt instance.\n * @param {String} `input` Input string.\n * @param {String} `initial` The initial user-provided value.\n * @param {Number} `pos` Current cursor position.\n * @param {Boolean} `showCursor` Render a simulated cursor using the inverse primary style.\n * @return {String} Returns the styled placeholder string.\n * @api public\n */\n\nmodule.exports = (prompt, options = {}) => {\n  prompt.cursorHide();\n\n  let { input = '', initial = '', pos, showCursor = true, color } = options;\n  let style = color || prompt.styles.placeholder;\n  let inverse = utils.inverse(prompt.styles.primary);\n  let blinker = str => inverse(prompt.styles.black(str));\n  let output = input;\n  let char = ' ';\n  let reverse = blinker(char);\n\n  if (prompt.blink && prompt.blink.off === true) {\n    blinker = str => str;\n    reverse = '';\n  }\n\n  if (showCursor && pos === 0 && initial === '' && input === '') {\n    return blinker(char);\n  }\n\n  if (showCursor && pos === 0 && (input === initial || input === '')) {\n    return blinker(initial[0]) + style(initial.slice(1));\n  }\n\n  initial = utils.isPrimitive(initial) ? `${initial}` : '';\n  input = utils.isPrimitive(input) ? `${input}` : '';\n\n  let placeholder = initial && initial.startsWith(input) && initial !== input;\n  let cursor = placeholder ? blinker(initial[input.length]) : reverse;\n\n  if (pos !== input.length && showCursor === true) {\n    output = input.slice(0, pos) + blinker(input[pos]) + input.slice(pos + 1);\n    cursor = '';\n  }\n\n  if (showCursor === false) {\n    cursor = '';\n  }\n\n  if (placeholder) {\n    let raw = prompt.styles.unstyle(output + cursor);\n    return output + cursor + style(initial.slice(raw.length));\n  }\n\n  return output + cursor;\n};\n"]},"metadata":{},"sourceType":"script"}