{"ast":null,"code":"'use strict';\n\nconst util = require('util');\n\nconst path = require('path');\n\nconst childProcess = require('child_process');\n\nconst TEN_MEGABYTES = 1000 * 1000 * 10;\nconst execFile = util.promisify(childProcess.execFile);\n\nconst windows = async () => {\n  // Source: https://github.com/MarkTiedemann/fastlist\n  const bin = path.join(__dirname, 'fastlist.exe');\n  const {\n    stdout\n  } = await execFile(bin, {\n    maxBuffer: TEN_MEGABYTES\n  });\n  return stdout.trim().split('\\r\\n').map(line => line.split('\\t')).map(([name, pid, ppid]) => ({\n    name,\n    pid: Number.parseInt(pid, 10),\n    ppid: Number.parseInt(ppid, 10)\n  }));\n};\n\nconst main = async (options = {}) => {\n  const flags = (options.all === false ? '' : 'a') + 'wwxo';\n  const ret = {};\n  await Promise.all(['comm', 'args', 'ppid', 'uid', '%cpu', '%mem'].map(async cmd => {\n    const {\n      stdout\n    } = await execFile('ps', [flags, `pid,${cmd}`], {\n      maxBuffer: TEN_MEGABYTES\n    });\n\n    for (let line of stdout.trim().split('\\n').slice(1)) {\n      line = line.trim();\n      const [pid] = line.split(' ', 1);\n      const val = line.slice(pid.length + 1).trim();\n\n      if (ret[pid] === undefined) {\n        ret[pid] = {};\n      }\n\n      ret[pid][cmd] = val;\n    }\n  })); // Filter out inconsistencies as there might be race\n  // issues due to differences in `ps` between the spawns\n\n  return Object.entries(ret).filter(([, value]) => value.comm && value.args && value.ppid && value.uid && value['%cpu'] && value['%mem']).map(([key, value]) => ({\n    pid: Number.parseInt(key, 10),\n    name: path.basename(value.comm),\n    cmd: value.args,\n    ppid: Number.parseInt(value.ppid, 10),\n    uid: Number.parseInt(value.uid, 10),\n    cpu: Number.parseFloat(value['%cpu']),\n    memory: Number.parseFloat(value['%mem'])\n  }));\n};\n\nmodule.exports = process.platform === 'win32' ? windows : main; // TODO: remove this in the next major version\n\nmodule.exports.default = module.exports;","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/Sysinfo/psList.js"],"names":["util","require","path","childProcess","TEN_MEGABYTES","execFile","promisify","windows","bin","join","__dirname","stdout","maxBuffer","trim","split","map","line","name","pid","ppid","Number","parseInt","main","options","flags","all","ret","Promise","cmd","slice","val","length","undefined","Object","entries","filter","value","comm","args","uid","key","basename","cpu","parseFloat","memory","module","exports","process","platform","default"],"mappings":"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","sourcesContent":["'use strict';\nconst util = require('util');\nconst path = require('path');\nconst childProcess = require('child_process');\n\nconst TEN_MEGABYTES = 1000 * 1000 * 10;\nconst execFile = util.promisify(childProcess.execFile);\n\nconst windows = async () => {\n\t// Source: https://github.com/MarkTiedemann/fastlist\n\tconst bin = path.join(__dirname, 'fastlist.exe');\n\n\tconst {stdout} = await execFile(bin, {maxBuffer: TEN_MEGABYTES});\n\n\treturn stdout\n\t\t.trim()\n\t\t.split('\\r\\n')\n\t\t.map(line => line.split('\\t'))\n\t\t.map(([name, pid, ppid]) => ({\n\t\t\tname,\n\t\t\tpid: Number.parseInt(pid, 10),\n\t\t\tppid: Number.parseInt(ppid, 10)\n\t\t}));\n};\n\nconst main = async (options = {}) => {\n\tconst flags = (options.all === false ? '' : 'a') + 'wwxo';\n\tconst ret = {};\n\n\tawait Promise.all(['comm', 'args', 'ppid', 'uid', '%cpu', '%mem'].map(async cmd => {\n\t\tconst {stdout} = await execFile('ps', [flags, `pid,${cmd}`], {maxBuffer: TEN_MEGABYTES});\n\n\t\tfor (let line of stdout.trim().split('\\n').slice(1)) {\n\t\t\tline = line.trim();\n\t\t\tconst [pid] = line.split(' ', 1);\n\t\t\tconst val = line.slice(pid.length + 1).trim();\n\n\t\t\tif (ret[pid] === undefined) {\n\t\t\t\tret[pid] = {};\n\t\t\t}\n\n\t\t\tret[pid][cmd] = val;\n\t\t}\n\t}));\n\n\t// Filter out inconsistencies as there might be race\n\t// issues due to differences in `ps` between the spawns\n\treturn Object.entries(ret)\n\t\t.filter(([, value]) => value.comm && value.args && value.ppid && value.uid && value['%cpu'] && value['%mem'])\n\t\t.map(([key, value]) => ({\n\t\t\tpid: Number.parseInt(key, 10),\n\t\t\tname: path.basename(value.comm),\n\t\t\tcmd: value.args,\n\t\t\tppid: Number.parseInt(value.ppid, 10),\n\t\t\tuid: Number.parseInt(value.uid, 10),\n\t\t\tcpu: Number.parseFloat(value['%cpu']),\n\t\t\tmemory: Number.parseFloat(value['%mem'])\n\t\t}));\n};\n\nmodule.exports = process.platform === 'win32' ? windows : main;\n// TODO: remove this in the next major version\nmodule.exports.default = module.exports;\n"]},"metadata":{},"sourceType":"script"}