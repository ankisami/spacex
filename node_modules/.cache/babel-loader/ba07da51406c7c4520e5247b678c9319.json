{"ast":null,"code":"const sysinfo = require('systeminformation');\n\nconst psList = require('./psList.js');\n\nconst async = require('async');\n\nconst MeanCalc = require('./MeanCalc.js');\n\nconst fork = require('child_process').fork;\n\nconst DEFAULT_CONVERSION = 1024 * 1024;\n\nconst os = require('os');\n\nconst fs = require('fs');\n\nconst debug = require('debug')('pm2:sysinfos');\n\nclass SystemInfo {\n  constructor() {\n    this.infos = {\n      baseboard: {\n        model: null,\n        version: null\n      },\n      cpu: {\n        manufacturer: null,\n        brand: null,\n        speedmax: null,\n        cores: null,\n        physicalCores: null,\n        processors: null,\n        temperature: null,\n        usage: null\n      },\n      mem: {\n        total: null,\n        free: null,\n        active: null\n      },\n      os: {\n        platform: null,\n        distro: null,\n        release: null,\n        codename: null,\n        kernel: null,\n        arch: null\n      },\n      fd: {\n        opened: null,\n        max: null\n      },\n      storage: {\n        io: {\n          read: new MeanCalc(15),\n          write: new MeanCalc(15)\n        },\n        physical_disks: [{\n          device: null,\n          type: null,\n          name: null,\n          interfaceType: null,\n          vendor: null\n        }],\n        filesystems: [{}]\n      },\n      connections: ['source_ip:source_port-dest_ip:dest_port-proc_name'],\n      network: {\n        latency: new MeanCalc(5),\n        tx_5: new MeanCalc(5),\n        rx_5: new MeanCalc(5),\n        rx_errors_60: new MeanCalc(60),\n        tx_errors_60: new MeanCalc(60),\n        tx_dropped_60: new MeanCalc(60),\n        rx_dropped_60: new MeanCalc(60)\n      },\n      // Procs\n      containers: [],\n      processes: {\n        cpu_sorted: null,\n        mem_sorted: null\n      },\n      services: {\n        running: null,\n        stopped: null\n      }\n    };\n    this.restart = true;\n    this.ping_timeout = null;\n  } // Cast MeanCalc and other object to real value\n  // This method retrieve the machine snapshot well formated\n\n\n  report() {\n    var report = JSON.parse(JSON.stringify(this.infos));\n    report.network.latency = this.infos.network.latency.val();\n    report.network.tx_5 = this.infos.network.tx_5.val();\n    report.network.rx_5 = this.infos.network.rx_5.val();\n    report.network.rx_errors_60 = this.infos.network.rx_errors_60.val();\n    report.network.tx_errors_60 = this.infos.network.tx_errors_60.val();\n    report.network.rx_dropped_60 = this.infos.network.rx_dropped_60.val();\n    report.network.tx_dropped_60 = this.infos.network.tx_dropped_60.val();\n    report.storage.io.read = this.infos.storage.io.read.val();\n    report.storage.io.write = this.infos.storage.io.write.val();\n    return report;\n  }\n\n  fork() {\n    this.process = fork(__filename, {\n      detached: false,\n      windowsHide: true,\n      stdio: ['inherit', 'inherit', 'inherit', 'ipc']\n    });\n    this.process.on('exit', code => {\n      console.log(`systeminfos collection process offline with code ${code}`); // if (this.restart == true)\n      //   this.fork()\n    });\n    this.process.on('error', e => {\n      console.log(`Sysinfo errored`, e);\n    });\n    this.process.on('message', msg => {\n      try {\n        msg = JSON.parse(msg);\n      } catch (e) {}\n\n      if (msg.cmd == 'ping') {\n        if (this.process.connected == true) {\n          try {\n            this.process.send('pong');\n          } catch (e) {\n            console.error('Cannot send message to Sysinfos');\n          }\n        }\n      }\n    });\n  }\n\n  query(cb) {\n    if (this.process.connected == true) {\n      try {\n        this.process.send('query');\n      } catch (e) {\n        return cb(new Error('not ready yet'), null);\n      }\n    } else return cb(new Error('not ready yet'), null);\n\n    var res = msg => {\n      try {\n        msg = JSON.parse(msg);\n      } catch (e) {}\n\n      if (msg.cmd == 'query:res') {\n        listener.removeListener('message', res);\n        return cb(null, msg.data);\n      }\n    };\n\n    var listener = this.process.on('message', res);\n  }\n\n  kill() {\n    this.restart = false;\n    this.process.kill();\n  }\n\n  startCollection() {\n    this.staticInformations();\n    var dockerCollection, processCollection, memCollection, servicesCollection;\n    (dockerCollection = () => {\n      this.dockerSummary(() => {\n        setTimeout(dockerCollection.bind(this), 300);\n      });\n    })();\n    (processCollection = () => {\n      this.processesSummary(() => {\n        setTimeout(processCollection.bind(this), 5000);\n      });\n    })(); // (servicesCollection = () => {\n    //   this.servicesSummary(() => {\n    //     setTimeout(servicesCollection.bind(this), 60000)\n    //   })\n    // })();\n\n    (memCollection = () => {\n      this.memStats(() => {\n        setTimeout(memCollection.bind(this), 1000);\n      });\n    })();\n    this.networkConnectionsWorker();\n    this.disksStatsWorker();\n    this.networkStatsWorker();\n    this.cpuStatsWorker();\n    this.fdStatsWorker();\n    setInterval(() => {\n      if (process.connected == false) {\n        console.error('Sysinfos not connected, exiting');\n        process.exit();\n      }\n\n      try {\n        process.send(JSON.stringify({\n          cmd: 'ping'\n        }));\n      } catch (e) {\n        console.error('PM2 is dead while doing process.send');\n        process.exit();\n      }\n\n      this.ping_timeout = setTimeout(() => {\n        console.error('PM2 is dead while waiting for a pong');\n        process.exit();\n      }, 2000);\n    }, 3000); // Systeminfo receive command\n\n    process.on('message', cmd => {\n      if (cmd == 'query') {\n        try {\n          var res = JSON.stringify({\n            cmd: 'query:res',\n            data: this.report()\n          });\n          process.send(res);\n        } catch (e) {\n          console.error('Could not retrieve system informations', e);\n        }\n      } else if (cmd == 'pong') {\n        clearTimeout(this.ping_timeout);\n      }\n    });\n  }\n\n  staticInformations() {\n    var getCPU = () => {\n      return sysinfo.cpu().then(data => {\n        this.infos.cpu = {\n          brand: data.manufacturer,\n          model: data.brand,\n          speed: data.speedmax,\n          cores: data.cores,\n          physicalCores: data.physicalCores\n        };\n      });\n    };\n\n    var getBaseboard = () => {\n      return sysinfo.system().then(data => {\n        this.infos.baseboard = {\n          manufacturer: data.manufacturer,\n          model: data.model,\n          version: data.version\n        };\n      });\n    };\n\n    var getOsInfo = () => {\n      return sysinfo.osInfo().then(data => {\n        this.infos.os = {\n          platform: data.platform,\n          distro: data.distro,\n          release: data.release,\n          codename: data.codename,\n          kernel: data.kernel,\n          arch: data.arch\n        };\n      });\n    };\n\n    var diskLayout = () => {\n      this.infos.storage.physical_disks = [];\n      return sysinfo.diskLayout().then(disks => {\n        disks.forEach(disk => {\n          this.infos.storage.physical_disks.push({\n            device: disk.device,\n            type: disk.type,\n            name: disk.name,\n            interfaceType: disk.interfaceType,\n            vendor: disk.vendor\n          });\n        });\n      });\n    };\n\n    getBaseboard().then(getCPU).then(getOsInfo).then(diskLayout).catch(e => {\n      debug(`Error when trying to retrieve static informations`, e);\n    });\n  }\n\n  dockerSummary(cb = () => {}) {\n    sysinfo.dockerContainers('all').then(containers => {\n      var non_exited_containers = containers.filter(container => container.state != 'exited');\n      var new_containers = [];\n      async.forEach(non_exited_containers, (container, next) => {\n        sysinfo.dockerContainerStats(container.id).then(stats => {\n          var meta = container;\n          stats[0].cpu_percent = stats[0].cpu_percent.toFixed(1);\n          stats[0].mem_percent = stats[0].mem_percent.toFixed(1);\n          stats[0].netIO.tx = (stats[0].netIO.tx / DEFAULT_CONVERSION).toFixed(1);\n          stats[0].netIO.rx = (stats[0].netIO.rx / DEFAULT_CONVERSION).toFixed(1);\n          stats[0].blockIO.w = (stats[0].blockIO.w / DEFAULT_CONVERSION).toFixed(1);\n          stats[0].blockIO.r = (stats[0].blockIO.r / DEFAULT_CONVERSION).toFixed(1);\n          meta.stats = Array.isArray(stats) == true ? stats[0] : null;\n          new_containers.push(meta);\n          next();\n        }).catch(e => {\n          debug(e);\n          next();\n        });\n      }, err => {\n        if (err) debug(err);\n        this.infos.containers = new_containers.sort((a, b) => {\n          var textA = a.name.toUpperCase();\n          var textB = b.name.toUpperCase();\n          return textA < textB ? -1 : textA > textB ? 1 : 0;\n        });\n        return cb();\n      });\n    }).catch(e => {\n      debug(e);\n      return cb();\n    });\n  }\n\n  servicesSummary() {\n    sysinfo.services('*').then(services => {\n      this.infos.services.running = services.filter(service => service.running === true);\n      this.infos.services.stopped = services.filter(service => service.running === false);\n    }).catch(e => {\n      debug(e);\n    });\n  }\n\n  processesSummary(cb) {\n    psList().then(processes => {\n      this.infos.processes.cpu_sorted = processes.filter(a => !(a.cmd.includes('SystemInfo') && a.cmd.includes('PM2'))).sort((a, b) => b.cpu - a.cpu).slice(0, 5);\n      this.infos.processes.mem_sorted = processes.filter(a => !(a.cmd.includes('SystemInfo') && a.cmd.includes('PM2'))).sort((a, b) => b.memory - a.memory).slice(0, 5);\n      return cb();\n    }).catch(e => {\n      debug(`Error when retrieving process list`, e);\n      return cb();\n    });\n  }\n\n  cpuStatsWorker() {\n    var cpuTempCollection;\n    (cpuTempCollection = () => {\n      sysinfo.cpuTemperature().then(data => {\n        this.infos.cpu.temperature = data.main;\n        setTimeout(cpuTempCollection.bind(this), 2000);\n      }).catch(e => {\n        setTimeout(cpuTempCollection.bind(this), 2000);\n      });\n    })();\n\n    function fetch() {\n      const startMeasure = computeUsage();\n      setTimeout(_ => {\n        var endMeasure = computeUsage();\n        var idleDifference = endMeasure.idle - startMeasure.idle;\n        var totalDifference = endMeasure.total - startMeasure.total;\n        var percentageCPU = (10000 - Math.round(10000 * idleDifference / totalDifference)) / 100;\n        this.infos.cpu.usage = percentageCPU.toFixed(1);\n      }, 100);\n    }\n\n    function computeUsage() {\n      let totalIdle = 0;\n      let totalTick = 0;\n      const cpus = os.cpus();\n\n      for (var i = 0, len = cpus.length; i < len; i++) {\n        var cpu = cpus[i];\n\n        for (let type in cpu.times) {\n          totalTick += cpu.times[type];\n        }\n\n        totalIdle += cpu.times.idle;\n      }\n\n      return {\n        idle: parseInt(totalIdle / cpus.length),\n        total: parseInt(totalTick / cpus.length)\n      };\n    }\n\n    setInterval(fetch.bind(this), 1000);\n    fetch.bind(this)();\n  }\n\n  memStats(cb) {\n    sysinfo.mem().then(data => {\n      this.infos.mem.total = (data.total / DEFAULT_CONVERSION).toFixed(2);\n      this.infos.mem.free = (data.free / DEFAULT_CONVERSION).toFixed(2);\n      this.infos.mem.active = (data.active / DEFAULT_CONVERSION).toFixed(2);\n      this.infos.mem.available = (data.available / DEFAULT_CONVERSION).toFixed(2);\n      return cb();\n    }).catch(e => {\n      debug(`Error while getting memory info`, e);\n      return cb();\n    });\n  }\n\n  networkConnectionsWorker() {\n    var retrieveConn;\n    (retrieveConn = () => {\n      sysinfo.networkConnections().then(conns => {\n        this.infos.connections = conns.filter(conn => conn.localport != '443' && conn.peerport != '443').map(conn => `${conn.localaddress}:${conn.localport}-${conn.peeraddress}:${conn.peerport}-${conn.proc ? conn.proc : 'unknown'}`);\n        setTimeout(retrieveConn.bind(this), 10 * 1000);\n      }).catch(e => {\n        debug(`Error while retrieving filesystem infos`, e);\n        setTimeout(retrieveConn.bind(this), 10 * 1000);\n      });\n    })();\n  }\n\n  disksStatsWorker() {\n    var rx = 0;\n    var wx = 0;\n    var started = false;\n    var fsSizeCollection, ioCollection;\n    (fsSizeCollection = () => {\n      sysinfo.fsSize().then(fss => {\n        var fse = fss.filter(fs => fs.size / (1024 * 1024) > 200);\n        this.infos.storage.filesystems = fse;\n        setTimeout(fsSizeCollection.bind(this), 30 * 1000);\n      }).catch(e => {\n        debug(`Error while retrieving filesystem infos`, e);\n        setTimeout(fsSizeCollection.bind(this), 10 * 1000);\n      });\n    })();\n    (ioCollection = () => {\n      sysinfo.fsStats().then(fs_stats => {\n        var new_rx = fs_stats.rx;\n        var new_wx = fs_stats.wx;\n        var read = ((new_rx - rx) / DEFAULT_CONVERSION).toFixed(3);\n        var write = ((new_wx - wx) / DEFAULT_CONVERSION).toFixed(3);\n\n        if (started == true) {\n          this.infos.storage.io.read.add(parseFloat(read));\n          this.infos.storage.io.write.add(parseFloat(write));\n        }\n\n        rx = new_rx;\n        wx = new_wx;\n        started = true;\n        setTimeout(ioCollection.bind(this), 1000);\n      }).catch(e => {\n        debug(`Error while getting network statistics`, e);\n        setTimeout(ioCollection.bind(this), 1000);\n      });\n    })();\n  }\n\n  fdStatsWorker() {\n    var getFDOpened = () => {\n      fs.readFile('/proc/sys/fs/file-nr', (err, out) => {\n        if (err) return;\n        const output = out.toString().trim();\n        const parsed = output.split('\\t');\n        if (parsed.length !== 3) return;\n        this.infos.fd.opened = parseInt(parsed[0]);\n        this.infos.fd.max = parseInt(parsed[2]);\n      });\n    };\n\n    setInterval(() => {\n      getFDOpened();\n    }, 20 * 1000);\n    getFDOpened();\n  }\n\n  networkStatsWorker() {\n    var latencyCollection, networkStatsCollection; // (latencyCollection = () => {\n    //   sysinfo.inetLatency()\n    //     .then(latency => {\n    //       this.infos.network.latency.add(latency)\n    //       setTimeout(latencyCollection.bind(this), 2000)\n    //     })\n    //     .catch(e => {\n    //       debug(e)\n    //       setTimeout(latencyCollection.bind(this), 2000)\n    //     })\n    // })()\n\n    sysinfo.networkInterfaceDefault(net_interface => {\n      var started = false;\n      var rx = 0;\n      var tx = 0;\n      var rx_e = 0;\n      var tx_e = 0;\n      var rx_d = 0;\n      var tx_d = 0;\n      (networkStatsCollection = () => {\n        sysinfo.networkStats(net_interface).then(net => {\n          var new_rx = (net[0].rx_bytes - rx) / DEFAULT_CONVERSION;\n          var new_tx = (net[0].tx_bytes - tx) / DEFAULT_CONVERSION;\n          rx = net[0].rx_bytes;\n          tx = net[0].tx_bytes;\n          var new_rx_e = (net[0].rx_errors - rx_e) / DEFAULT_CONVERSION;\n          var new_tx_e = (net[0].tx_errors - tx_e) / DEFAULT_CONVERSION;\n          rx_e = net[0].rx_errors;\n          tx_e = net[0].tx_errors;\n          var new_rx_d = (net[0].rx_dropped - rx_d) / DEFAULT_CONVERSION;\n          var new_tx_d = (net[0].tx_dropped - tx_d) / DEFAULT_CONVERSION;\n          rx_d = net[0].rx_dropped;\n          tx_d = net[0].tx_dropped;\n\n          if (started == true) {\n            this.infos.network.rx_5.add(new_rx);\n            this.infos.network.tx_5.add(new_tx);\n            this.infos.network.rx_errors_60.add(new_rx_e);\n            this.infos.network.tx_errors_60.add(new_tx_e);\n            this.infos.network.rx_dropped_60.add(new_rx_d);\n            this.infos.network.tx_dropped_60.add(new_tx_d);\n          }\n\n          started = true;\n          setTimeout(networkStatsCollection.bind(this), 1000);\n        }).catch(e => {\n          debug(`Error on retrieving network stats`, e);\n          setTimeout(networkStatsCollection.bind(this), 900);\n        });\n      })();\n    });\n  }\n\n}\n\nmodule.exports = SystemInfo;\n\nif (require.main === module) {\n  var sys = new SystemInfo();\n  sys.startCollection();\n}","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/Sysinfo/SystemInfo.js"],"names":["sysinfo","require","psList","async","MeanCalc","fork","DEFAULT_CONVERSION","os","fs","debug","SystemInfo","constructor","infos","baseboard","model","version","cpu","manufacturer","brand","speedmax","cores","physicalCores","processors","temperature","usage","mem","total","free","active","platform","distro","release","codename","kernel","arch","fd","opened","max","storage","io","read","write","physical_disks","device","type","name","interfaceType","vendor","filesystems","connections","network","latency","tx_5","rx_5","rx_errors_60","tx_errors_60","tx_dropped_60","rx_dropped_60","containers","processes","cpu_sorted","mem_sorted","services","running","stopped","restart","ping_timeout","report","JSON","parse","stringify","val","process","__filename","detached","windowsHide","stdio","on","code","console","log","e","msg","cmd","connected","send","error","query","cb","Error","res","listener","removeListener","data","kill","startCollection","staticInformations","dockerCollection","processCollection","memCollection","servicesCollection","dockerSummary","setTimeout","bind","processesSummary","memStats","networkConnectionsWorker","disksStatsWorker","networkStatsWorker","cpuStatsWorker","fdStatsWorker","setInterval","exit","clearTimeout","getCPU","then","speed","getBaseboard","system","getOsInfo","osInfo","diskLayout","disks","forEach","disk","push","catch","dockerContainers","non_exited_containers","filter","container","state","new_containers","next","dockerContainerStats","id","stats","meta","cpu_percent","toFixed","mem_percent","netIO","tx","rx","blockIO","w","r","Array","isArray","err","sort","a","b","textA","toUpperCase","textB","servicesSummary","service","includes","slice","memory","cpuTempCollection","cpuTemperature","main","fetch","startMeasure","computeUsage","_","endMeasure","idleDifference","idle","totalDifference","percentageCPU","Math","round","totalIdle","totalTick","cpus","i","len","length","times","parseInt","available","retrieveConn","networkConnections","conns","conn","localport","peerport","map","localaddress","peeraddress","proc","wx","started","fsSizeCollection","ioCollection","fsSize","fss","fse","size","fsStats","fs_stats","new_rx","new_wx","add","parseFloat","getFDOpened","readFile","out","output","toString","trim","parsed","split","latencyCollection","networkStatsCollection","networkInterfaceDefault","net_interface","rx_e","tx_e","rx_d","tx_d","networkStats","net","rx_bytes","new_tx","tx_bytes","new_rx_e","rx_errors","new_tx_e","tx_errors","new_rx_d","rx_dropped","new_tx_d","tx_dropped","module","exports","sys"],"mappings":"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","sourcesContent":["\nconst sysinfo = require('systeminformation')\nconst psList = require('./psList.js')\nconst async = require('async')\nconst MeanCalc = require('./MeanCalc.js')\nconst fork = require('child_process').fork\nconst DEFAULT_CONVERSION = 1024 * 1024\nconst os = require('os')\nconst fs = require('fs')\nconst debug = require('debug')('pm2:sysinfos')\n\nclass SystemInfo {\n  constructor() {\n    this.infos = {\n      baseboard: {\n        model: null,\n        version: null\n      },\n      cpu: {\n        manufacturer: null,\n        brand: null,\n        speedmax: null,\n        cores: null,\n        physicalCores: null,\n        processors: null,\n        temperature: null,\n        usage: null\n      },\n      mem: {\n        total: null,\n        free: null,\n        active: null\n      },\n      os: {\n        platform: null,\n        distro: null,\n        release: null,\n        codename: null,\n        kernel: null,\n        arch: null,\n      },\n      fd: {\n        opened: null,\n        max: null\n      },\n      storage: {\n        io: {\n          read: new MeanCalc(15),\n          write: new MeanCalc(15)\n        },\n        physical_disks: [{\n          device: null,\n          type: null,\n          name: null,\n          interfaceType: null,\n          vendor: null\n        }],\n        filesystems: [{\n        }]\n      },\n      connections: ['source_ip:source_port-dest_ip:dest_port-proc_name'],\n      network: {\n        latency: new MeanCalc(5),\n        tx_5: new MeanCalc(5),\n        rx_5: new MeanCalc(5),\n        rx_errors_60: new MeanCalc(60),\n        tx_errors_60: new MeanCalc(60),\n        tx_dropped_60: new MeanCalc(60),\n        rx_dropped_60: new MeanCalc(60)\n      },\n      // Procs\n      containers: [],\n      processes: {\n        cpu_sorted: null,\n        mem_sorted: null\n      },\n      services: {\n        running: null,\n        stopped: null\n      }\n    }\n    this.restart = true\n    this.ping_timeout = null\n  }\n\n  // Cast MeanCalc and other object to real value\n  // This method retrieve the machine snapshot well formated\n  report() {\n    var report = JSON.parse(JSON.stringify(this.infos))\n    report.network.latency = this.infos.network.latency.val()\n    report.network.tx_5 = this.infos.network.tx_5.val()\n    report.network.rx_5 = this.infos.network.rx_5.val()\n    report.network.rx_errors_60 = this.infos.network.rx_errors_60.val()\n    report.network.tx_errors_60 = this.infos.network.tx_errors_60.val()\n    report.network.rx_dropped_60 = this.infos.network.rx_dropped_60.val()\n    report.network.tx_dropped_60 = this.infos.network.tx_dropped_60.val()\n    report.storage.io.read = this.infos.storage.io.read.val()\n    report.storage.io.write = this.infos.storage.io.write.val()\n    return report\n  }\n\n  fork() {\n    this.process = fork(__filename, {\n      detached: false,\n      windowsHide: true,\n      stdio: ['inherit', 'inherit', 'inherit', 'ipc']\n    })\n\n    this.process.on('exit', (code) => {\n      console.log(`systeminfos collection process offline with code ${code}`)\n      // if (this.restart == true)\n      //   this.fork()\n    })\n\n    this.process.on('error', (e) => {\n      console.log(`Sysinfo errored`, e)\n    })\n\n    this.process.on('message', (msg) => {\n      try {\n        msg = JSON.parse(msg)\n      }\n      catch (e) {\n      }\n      if (msg.cmd == 'ping') {\n        if (this.process.connected == true) {\n          try {\n            this.process.send('pong')\n          } catch(e) {\n            console.error('Cannot send message to Sysinfos')\n          }\n        }\n      }\n    })\n  }\n\n  query(cb) {\n    if (this.process.connected == true) {\n      try {\n        this.process.send('query')\n      } catch(e) {\n        return cb(new Error('not ready yet'), null)\n      }\n    }\n    else\n      return cb(new Error('not ready yet'), null)\n\n    var res = (msg) => {\n      try {\n        msg = JSON.parse(msg)\n      }\n      catch (e) {\n      }\n\n      if (msg.cmd == 'query:res') {\n        listener.removeListener('message', res)\n        return cb(null, msg.data)\n      }\n    }\n\n    var listener = this.process.on('message', res)\n  }\n\n  kill() {\n    this.restart = false\n    this.process.kill()\n  }\n\n  startCollection() {\n    this.staticInformations()\n\n    var dockerCollection, processCollection, memCollection, servicesCollection\n\n    (dockerCollection = () => {\n      this.dockerSummary(() => {\n        setTimeout(dockerCollection.bind(this), 300)\n      })\n    })();\n\n    (processCollection = () => {\n      this.processesSummary(() => {\n        setTimeout(processCollection.bind(this), 5000)\n      })\n    })();\n\n    // (servicesCollection = () => {\n    //   this.servicesSummary(() => {\n    //     setTimeout(servicesCollection.bind(this), 60000)\n    //   })\n    // })();\n\n    (memCollection = () => {\n      this.memStats(() => {\n        setTimeout(memCollection.bind(this), 1000)\n      })\n    })();\n\n    this.networkConnectionsWorker()\n    this.disksStatsWorker()\n    this.networkStatsWorker()\n\n    this.cpuStatsWorker()\n    this.fdStatsWorker()\n\n    setInterval(() => {\n      if (process.connected == false) {\n        console.error('Sysinfos not connected, exiting')\n        process.exit()\n      }\n      try {\n        process.send(JSON.stringify({cmd: 'ping'}))\n      } catch(e) {\n        console.error('PM2 is dead while doing process.send')\n        process.exit()\n      }\n      this.ping_timeout = setTimeout(() => {\n        console.error('PM2 is dead while waiting for a pong')\n        process.exit()\n      }, 2000)\n    }, 3000)\n\n    // Systeminfo receive command\n    process.on('message', (cmd) => {\n      if (cmd == 'query') {\n        try {\n          var res = JSON.stringify({\n            cmd: 'query:res',\n            data: this.report()\n          })\n          process.send(res)\n        } catch (e) {\n          console.error('Could not retrieve system informations', e)\n        }\n      }\n      else if (cmd == 'pong') {\n        clearTimeout(this.ping_timeout)\n      }\n    })\n\n  }\n\n  staticInformations() {\n    var getCPU = () => {\n      return sysinfo.cpu()\n        .then(data => {\n          this.infos.cpu = {\n            brand: data.manufacturer,\n            model: data.brand,\n            speed: data.speedmax,\n            cores: data.cores,\n            physicalCores: data.physicalCores\n          }\n        })\n    }\n\n    var getBaseboard = () => {\n      return sysinfo.system()\n        .then(data => {\n          this.infos.baseboard = {\n            manufacturer: data.manufacturer,\n            model: data.model,\n            version: data.version\n          }\n        })\n    }\n\n    var getOsInfo = () => {\n      return sysinfo.osInfo()\n        .then(data => {\n          this.infos.os = {\n            platform: data.platform,\n            distro: data.distro,\n            release: data.release,\n            codename: data.codename,\n            kernel: data.kernel,\n            arch: data.arch\n          }\n        })\n    }\n\n    var diskLayout = () => {\n      this.infos.storage.physical_disks = []\n\n      return sysinfo.diskLayout()\n        .then(disks => {\n          disks.forEach((disk) => {\n            this.infos.storage.physical_disks.push({\n              device: disk.device,\n              type: disk.type,\n              name: disk.name,\n              interfaceType: disk.interfaceType,\n              vendor: disk.vendor\n            })\n          })\n        })\n    }\n\n    getBaseboard()\n      .then(getCPU)\n      .then(getOsInfo)\n      .then(diskLayout)\n      .catch(e => {\n        debug(`Error when trying to retrieve static informations`, e)\n      })\n  }\n\n  dockerSummary(cb = () => {}) {\n    sysinfo.dockerContainers('all')\n      .then(containers => {\n        var non_exited_containers = containers.filter(container => container.state != 'exited')\n        var new_containers = []\n\n        async.forEach(non_exited_containers, (container, next) => {\n          sysinfo.dockerContainerStats(container.id)\n            .then(stats => {\n              var meta = container\n\n              stats[0].cpu_percent = (stats[0].cpu_percent).toFixed(1)\n              stats[0].mem_percent = (stats[0].mem_percent).toFixed(1)\n              stats[0].netIO.tx = (stats[0].netIO.tx / DEFAULT_CONVERSION).toFixed(1)\n              stats[0].netIO.rx = (stats[0].netIO.rx / DEFAULT_CONVERSION).toFixed(1)\n\n              stats[0].blockIO.w = (stats[0].blockIO.w / DEFAULT_CONVERSION).toFixed(1)\n              stats[0].blockIO.r = (stats[0].blockIO.r / DEFAULT_CONVERSION).toFixed(1)\n\n              meta.stats = Array.isArray(stats) == true ? stats[0] : null\n              new_containers.push(meta)\n              next()\n            })\n            .catch(e => {\n              debug(e)\n              next()\n            })\n        }, (err) => {\n          if (err)\n            debug(err)\n          this.infos.containers = new_containers.sort((a, b) => {\n            var textA = a.name.toUpperCase();\n            var textB = b.name.toUpperCase();\n            return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n          })\n          return cb()\n        })\n      })\n      .catch(e => {\n        debug(e)\n        return cb()\n      })\n  }\n\n  servicesSummary() {\n    sysinfo.services('*')\n      .then(services => {\n        this.infos.services.running = services.filter(service => service.running === true)\n        this.infos.services.stopped = services.filter(service => service.running === false)\n      })\n      .catch(e => {\n        debug(e)\n      })\n  }\n\n  processesSummary(cb) {\n    psList()\n      .then(processes => {\n        this.infos.processes.cpu_sorted = processes\n          .filter(a => !(a.cmd.includes('SystemInfo') && a.cmd.includes('PM2')))\n          .sort((a, b) => b.cpu - a.cpu).slice(0, 5)\n        this.infos.processes.mem_sorted = processes\n          .filter(a => !(a.cmd.includes('SystemInfo') && a.cmd.includes('PM2')))\n          .sort((a, b) => b.memory - a.memory).slice(0, 5)\n        return cb()\n      })\n      .catch(e => {\n        debug(`Error when retrieving process list`, e)\n        return cb()\n      })\n  }\n\n  cpuStatsWorker() {\n    var cpuTempCollection\n\n    (cpuTempCollection = () => {\n      sysinfo.cpuTemperature()\n        .then(data => {\n          this.infos.cpu.temperature = data.main\n          setTimeout(cpuTempCollection.bind(this), 2000)\n        })\n        .catch(e => {\n          setTimeout(cpuTempCollection.bind(this), 2000)\n        })\n    })()\n\n    function fetch () {\n      const startMeasure = computeUsage()\n\n      setTimeout(_ => {\n        var endMeasure = computeUsage()\n\n        var idleDifference = endMeasure.idle - startMeasure.idle\n        var totalDifference = endMeasure.total - startMeasure.total\n\n        var percentageCPU = (10000 - Math.round(10000 * idleDifference / totalDifference)) / 100\n        this.infos.cpu.usage = (percentageCPU).toFixed(1)\n      }, 100)\n    }\n\n    function computeUsage () {\n      let totalIdle = 0\n      let totalTick = 0\n      const cpus = os.cpus()\n\n      for (var i = 0, len = cpus.length; i < len; i++) {\n        var cpu = cpus[i]\n        for (let type in cpu.times) {\n          totalTick += cpu.times[type]\n        }\n        totalIdle += cpu.times.idle\n      }\n\n      return {\n        idle: parseInt(totalIdle / cpus.length),\n        total: parseInt(totalTick / cpus.length)\n      }\n    }\n\n    setInterval(fetch.bind(this), 1000)\n    fetch.bind(this)()\n  }\n\n  memStats(cb) {\n    sysinfo.mem()\n      .then(data => {\n        this.infos.mem.total = (data.total / DEFAULT_CONVERSION).toFixed(2)\n        this.infos.mem.free = (data.free / DEFAULT_CONVERSION).toFixed(2)\n        this.infos.mem.active = (data.active / DEFAULT_CONVERSION).toFixed(2)\n        this.infos.mem.available = (data.available / DEFAULT_CONVERSION).toFixed(2)\n        return cb()\n      })\n      .catch(e => {\n        debug(`Error while getting memory info`, e)\n        return cb()\n      })\n  }\n\n  networkConnectionsWorker() {\n    var retrieveConn\n\n    (retrieveConn = () => {\n      sysinfo.networkConnections()\n        .then(conns => {\n          this.infos.connections = conns\n            .filter(conn => conn.localport != '443' && conn.peerport != '443')\n            .map(conn => `${conn.localaddress}:${conn.localport}-${conn.peeraddress}:${conn.peerport}-${conn.proc ? conn.proc : 'unknown'}`)\n          setTimeout(retrieveConn.bind(this), 10 * 1000)\n        })\n        .catch(e => {\n          debug(`Error while retrieving filesystem infos`, e)\n          setTimeout(retrieveConn.bind(this), 10 * 1000)\n        })\n    })();\n  }\n\n  disksStatsWorker() {\n    var rx = 0\n    var wx = 0\n    var started = false\n    var fsSizeCollection, ioCollection\n\n    (fsSizeCollection = () => {\n      sysinfo.fsSize()\n        .then(fss => {\n          var fse = fss.filter(fs => (fs.size / (1024 * 1024)) > 200)\n          this.infos.storage.filesystems = fse\n          setTimeout(fsSizeCollection.bind(this), 30 * 1000)\n        })\n        .catch(e => {\n          debug(`Error while retrieving filesystem infos`, e)\n          setTimeout(fsSizeCollection.bind(this), 10 * 1000)\n        })\n    })();\n\n    (ioCollection = () => {\n      sysinfo.fsStats()\n        .then(fs_stats => {\n          var new_rx = fs_stats.rx\n          var new_wx = fs_stats.wx\n\n          var read = ((new_rx - rx) / DEFAULT_CONVERSION).toFixed(3)\n          var write = ((new_wx - wx) / DEFAULT_CONVERSION).toFixed(3)\n\n          if (started == true) {\n            this.infos.storage.io.read.add(parseFloat(read))\n            this.infos.storage.io.write.add(parseFloat(write))\n          }\n\n          rx = new_rx\n          wx = new_wx\n          started = true\n          setTimeout(ioCollection.bind(this), 1000)\n        })\n        .catch(e => {\n          debug(`Error while getting network statistics`, e)\n          setTimeout(ioCollection.bind(this), 1000)\n        })\n    })();\n  }\n\n  fdStatsWorker() {\n    var getFDOpened = () => {\n      fs.readFile('/proc/sys/fs/file-nr', (err, out) => {\n        if (err) return\n        const output = out.toString().trim()\n        const parsed = output.split('\\t')\n        if (parsed.length !== 3) return\n        this.infos.fd.opened = parseInt(parsed[0])\n        this.infos.fd.max = parseInt(parsed[2])\n      })\n    }\n\n    setInterval(() => {\n      getFDOpened()\n    }, 20 * 1000)\n\n    getFDOpened()\n  }\n\n  networkStatsWorker() {\n    var latencyCollection, networkStatsCollection\n\n    // (latencyCollection = () => {\n    //   sysinfo.inetLatency()\n    //     .then(latency => {\n    //       this.infos.network.latency.add(latency)\n    //       setTimeout(latencyCollection.bind(this), 2000)\n    //     })\n    //     .catch(e => {\n    //       debug(e)\n    //       setTimeout(latencyCollection.bind(this), 2000)\n    //     })\n    // })()\n\n    sysinfo.networkInterfaceDefault((net_interface) => {\n      var started = false\n      var rx = 0\n      var tx = 0\n      var rx_e = 0\n      var tx_e = 0\n      var rx_d = 0\n      var tx_d = 0;\n\n      (networkStatsCollection = () => {\n        sysinfo.networkStats(net_interface)\n          .then((net) => {\n            var new_rx = (net[0].rx_bytes - rx) / DEFAULT_CONVERSION\n            var new_tx = (net[0].tx_bytes - tx) / DEFAULT_CONVERSION\n            rx = net[0].rx_bytes\n            tx = net[0].tx_bytes\n\n            var new_rx_e = (net[0].rx_errors - rx_e) / DEFAULT_CONVERSION\n            var new_tx_e = (net[0].tx_errors - tx_e) / DEFAULT_CONVERSION\n            rx_e = net[0].rx_errors\n            tx_e = net[0].tx_errors\n\n            var new_rx_d = (net[0].rx_dropped - rx_d) / DEFAULT_CONVERSION\n            var new_tx_d = (net[0].tx_dropped - tx_d) / DEFAULT_CONVERSION\n            rx_d = net[0].rx_dropped\n            tx_d = net[0].tx_dropped\n\n            if (started == true) {\n              this.infos.network.rx_5.add(new_rx)\n              this.infos.network.tx_5.add(new_tx)\n              this.infos.network.rx_errors_60.add(new_rx_e)\n              this.infos.network.tx_errors_60.add(new_tx_e)\n              this.infos.network.rx_dropped_60.add(new_rx_d)\n              this.infos.network.tx_dropped_60.add(new_tx_d)\n            }\n            started = true\n            setTimeout(networkStatsCollection.bind(this), 1000)\n          })\n          .catch(e => {\n            debug(`Error on retrieving network stats`, e)\n            setTimeout(networkStatsCollection.bind(this), 900)\n          })\n      })()\n    })\n\n  }\n}\n\nmodule.exports = SystemInfo\n\nif (require.main === module) {\n  var sys = new SystemInfo()\n  sys.startCollection()\n}\n"]},"metadata":{},"sourceType":"script"}