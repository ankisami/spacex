{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n'use strict';\n\nconst commander = require('commander');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst eachLimit = require('async/eachLimit');\n\nconst series = require('async/series');\n\nconst debug = require('debug')('pm2:cli');\n\nconst util = require('util');\n\nconst chalk = require('chalk');\n\nconst fclone = require('fclone');\n\nvar DockerMgmt = require('./API/ExtraMgmt/Docker.js');\n\nvar conf = require('../constants.js');\n\nvar Client = require('./Client');\n\nvar Common = require('./Common');\n\nvar KMDaemon = require('@pm2/agent/src/InteractorClient');\n\nvar Config = require('./tools/Config');\n\nvar Modularizer = require('./API/Modules/Modularizer.js');\n\nvar path_structure = require('../paths.js');\n\nvar UX = require('./API/UX');\n\nvar pkg = require('../package.json');\n\nvar hf = require('./API/Modules/flagExt.js');\n\nvar Configuration = require('./Configuration.js');\n\nconst semver = require('semver');\n\nconst sexec = require('./tools/sexec.js');\n\nvar IMMUTABLE_MSG = chalk.bold.blue('Use --update-env to update environment variables');\n/**\n * Main Function to be imported\n * can be aliased to PM2\n *\n * To use it when PM2 is installed as a module:\n *\n * var PM2 = require('pm2');\n *\n * var pm2 = PM2(<opts>);\n *\n *\n * @param {Object}  opts\n * @param {String}  [opts.cwd=<current>]         override pm2 cwd for starting scripts\n * @param {String}  [opts.pm2_home=[<paths.js>]] pm2 directory for log, pids, socket files\n * @param {Boolean} [opts.independent=false]     unique PM2 instance (random pm2_home)\n * @param {Boolean} [opts.daemon_mode=true]      should be called in the same process or not\n * @param {String}  [opts.public_key=null]       pm2 plus bucket public key\n * @param {String}  [opts.secret_key=null]       pm2 plus bucket secret key\n * @param {String}  [opts.machine_name=null]     pm2 plus instance name\n */\n\nclass API {\n  constructor(opts) {\n    if (!opts) opts = {};\n    var that = this;\n    this.daemon_mode = typeof opts.daemon_mode == 'undefined' ? true : opts.daemon_mode;\n    this.pm2_home = conf.PM2_ROOT_PATH;\n    this.public_key = conf.PUBLIC_KEY || opts.public_key || null;\n    this.secret_key = conf.SECRET_KEY || opts.secret_key || null;\n    this.machine_name = conf.MACHINE_NAME || opts.machine_name || null;\n    /**\n     * CWD resolution\n     */\n\n    this.cwd = process.cwd();\n\n    if (opts.cwd) {\n      this.cwd = path.resolve(opts.cwd);\n    }\n    /**\n     * PM2 HOME resolution\n     */\n\n\n    if (opts.pm2_home && opts.independent == true) throw new Error('You cannot set a pm2_home and independent instance in same time');\n\n    if (opts.pm2_home) {\n      // Override default conf file\n      this.pm2_home = opts.pm2_home;\n      conf = util._extend(conf, path_structure(this.pm2_home));\n    } else if (opts.independent == true && conf.IS_WINDOWS === false) {\n      // Create an unique pm2 instance\n      const crypto = require('crypto');\n\n      var random_file = crypto.randomBytes(8).toString('hex');\n      this.pm2_home = path.join('/tmp', random_file); // If we dont explicitly tell to have a daemon\n      // It will go as in proc\n\n      if (typeof opts.daemon_mode == 'undefined') this.daemon_mode = false;\n      conf = util._extend(conf, path_structure(this.pm2_home));\n    }\n\n    this._conf = conf;\n\n    if (conf.IS_WINDOWS) {\n      // Weird fix, may need to be dropped\n      // @todo windows connoisseur double check\n      if (process.stdout._handle && process.stdout._handle.setBlocking) process.stdout._handle.setBlocking(true);\n    }\n\n    this.Client = new Client({\n      pm2_home: that.pm2_home,\n      conf: this._conf,\n      secret_key: this.secret_key,\n      public_key: this.public_key,\n      daemon_mode: this.daemon_mode,\n      machine_name: this.machine_name\n    });\n    this.pm2_configuration = Configuration.getSync('pm2') || {};\n    this.gl_interact_infos = null;\n    this.gl_is_km_linked = false;\n\n    try {\n      var pid = fs.readFileSync(conf.INTERACTOR_PID_PATH);\n      pid = parseInt(pid.toString().trim());\n      process.kill(pid, 0);\n      that.gl_is_km_linked = true;\n    } catch (e) {\n      that.gl_is_km_linked = false;\n    } // For testing purposes\n\n\n    if (this.secret_key && process.env.NODE_ENV == 'local_test') that.gl_is_km_linked = true;\n    KMDaemon.ping(this._conf, function (err, result) {\n      if (!err && result === true) {\n        fs.readFile(conf.INTERACTION_CONF, (err, _conf) => {\n          if (!err) {\n            try {\n              that.gl_interact_infos = JSON.parse(_conf.toString());\n            } catch (e) {\n              var json5 = require('./tools/json5.js');\n\n              try {\n                that.gl_interact_infos = json5.parse(_conf.toString());\n              } catch (e) {\n                console.error(e);\n                that.gl_interact_infos = null;\n              }\n            }\n          }\n        });\n      }\n    });\n    this.gl_retry = 0;\n  }\n  /**\n   * Connect to PM2\n   * Calling this command is now optional\n   *\n   * @param {Function} cb callback once pm2 is ready for commands\n   */\n\n\n  connect(noDaemon, cb) {\n    var that = this;\n    this.start_timer = new Date();\n\n    if (typeof cb == 'undefined') {\n      cb = noDaemon;\n      noDaemon = false;\n    } else if (noDaemon === true) {\n      // Backward compatibility with PM2 1.x\n      this.Client.daemon_mode = false;\n      this.daemon_mode = false;\n    }\n\n    this.Client.start(function (err, meta) {\n      if (err) return cb(err);\n      if (meta.new_pm2_instance == false && that.daemon_mode === true) return cb(err, meta); // If new pm2 instance has been popped\n      // Lauch all modules\n\n      that.launchAll(that, function (err_mod) {\n        return cb(err, meta);\n      });\n    });\n  }\n  /**\n   * Usefull when custom PM2 created with independent flag set to true\n   * This will cleanup the newly created instance\n   * by removing folder, killing PM2 and so on\n   *\n   * @param {Function} cb callback once cleanup is successfull\n   */\n\n\n  destroy(cb) {\n    var that = this;\n    debug('Killing and deleting current deamon');\n    this.killDaemon(function () {\n      var cmd = 'rm -rf ' + that.pm2_home;\n      var test_path = path.join(that.pm2_home, 'module_conf.json');\n      var test_path_2 = path.join(that.pm2_home, 'pm2.pid');\n      if (that.pm2_home.indexOf('.pm2') > -1) return cb(new Error('Destroy is not a allowed method on .pm2'));\n      fs.access(test_path, fs.R_OK, function (err) {\n        if (err) return cb(err);\n        debug('Deleting temporary folder %s', that.pm2_home);\n        sexec(cmd, cb);\n      });\n    });\n  }\n  /**\n   * Disconnect from PM2 instance\n   * This will allow your software to exit by itself\n   *\n   * @param {Function} [cb] optional callback once connection closed\n   */\n\n\n  disconnect(cb) {\n    var that = this;\n    if (!cb) cb = function () {};\n    this.Client.close(function (err, data) {\n      debug('The session lasted %ds', (new Date() - that.start_timer) / 1000);\n      return cb(err, data);\n    });\n  }\n\n  /**\n   * Alias on disconnect\n   * @param cb\n   */\n  close(cb) {\n    this.disconnect(cb);\n  }\n  /**\n   * Launch modules\n   *\n   * @param {Function} cb callback once pm2 has launched modules\n   */\n\n\n  launchModules(cb) {\n    this.launchAll(this, cb);\n  }\n  /**\n   * Enable bus allowing to retrieve various process event\n   * like logs, restarts, reloads\n   *\n   * @param {Function} cb callback called with 1st param err and 2nb param the bus\n   */\n\n\n  launchBus(cb) {\n    this.Client.launchBus(cb);\n  }\n  /**\n   * Exit methods for API\n   * @param {Integer} code exit code for terminal\n   */\n\n\n  exitCli(code) {\n    var that = this; // Do nothing if PM2 called programmatically (also in speedlist)\n\n    if (conf.PM2_PROGRAMMATIC && process.env.PM2_USAGE != 'CLI') return false;\n    KMDaemon.disconnectRPC(function () {\n      that.Client.close(function () {\n        code = code || 0; // Safe exits process after all streams are drained.\n        // file descriptor flag.\n\n        var fds = 0; // exits process when stdout (1) and sdterr(2) are both drained.\n\n        function tryToExit() {\n          if (fds & 1 && fds & 2) {\n            debug('This command took %ds to execute', (new Date() - that.start_timer) / 1000);\n            process.exit(code);\n          }\n        }\n\n        [process.stdout, process.stderr].forEach(function (std) {\n          var fd = std.fd;\n\n          if (!std.bufferSize) {\n            // bufferSize equals 0 means current stream is drained.\n            fds = fds | fd;\n          } else {\n            // Appends nothing to the std queue, but will trigger `tryToExit` event on `drain`.\n            std.write && std.write('', function () {\n              fds = fds | fd;\n              tryToExit();\n            });\n          } // Does not write anything more.\n\n\n          delete std.write;\n        });\n        tryToExit();\n      });\n    });\n  } ////////////////////////////\n  // Application management //\n  ////////////////////////////\n\n  /**\n   * Start a file or json with configuration\n   * @param {Object||String} cmd script to start or json\n   * @param {Function} cb called when application has been started\n   */\n\n\n  start(cmd, opts, cb) {\n    if (typeof opts == \"function\") {\n      cb = opts;\n      opts = {};\n    }\n\n    if (!opts) opts = {};\n\n    if (semver.lt(process.version, '6.0.0')) {\n      Common.printOut(conf.PREFIX_MSG_WARNING + 'Node 4 is deprecated, please upgrade to use pm2 to have all features');\n    }\n\n    var that = this;\n    if (util.isArray(opts.watch) && opts.watch.length === 0) opts.watch = (opts.rawArgs ? !!~opts.rawArgs.indexOf('--watch') : !!~process.argv.indexOf('--watch')) || false;\n\n    if (Common.isConfigFile(cmd) || typeof cmd === 'object') {\n      that._startJson(cmd, opts, 'restartProcessId', (err, procs) => {\n        return cb ? cb(err, procs) : this.speedList();\n      });\n    } else {\n      that._startScript(cmd, opts, (err, procs) => {\n        return cb ? cb(err, procs) : this.speedList(0);\n      });\n    }\n  }\n  /**\n   * Reset process counters\n   *\n   * @method resetMetaProcess\n   */\n\n\n  reset(process_name, cb) {\n    var that = this;\n\n    function processIds(ids, cb) {\n      eachLimit(ids, conf.CONCURRENT_ACTIONS, function (id, next) {\n        that.Client.executeRemote('resetMetaProcessId', id, function (err, res) {\n          if (err) console.error(err);\n          Common.printOut(conf.PREFIX_MSG + 'Resetting meta for process id %d', id);\n          return next();\n        });\n      }, function (err) {\n        if (err) return cb(Common.retErr(err));\n        return cb ? cb(null, {\n          success: true\n        }) : that.speedList();\n      });\n    }\n\n    if (process_name == 'all') {\n      that.Client.getAllProcessId(function (err, ids) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n        }\n\n        return processIds(ids, cb);\n      });\n    } else if (isNaN(process_name)) {\n      that.Client.getProcessIdByName(process_name, function (err, ids) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n        }\n\n        if (ids.length === 0) {\n          Common.printError('Unknown process name');\n          return cb ? cb(new Error('Unknown process name')) : that.exitCli(conf.ERROR_EXIT);\n        }\n\n        return processIds(ids, cb);\n      });\n    } else {\n      processIds([process_name], cb);\n    }\n  }\n  /**\n   * Update daemonized PM2 Daemon\n   *\n   * @param {Function} cb callback when pm2 has been upgraded\n   */\n\n\n  update(cb) {\n    var that = this;\n    Common.printOut('Be sure to have the latest version by doing `npm install pm2@latest -g` before doing this procedure.'); // Dump PM2 processes\n\n    that.Client.executeRemote('notifyKillPM2', {}, function () {});\n    that.getVersion(function (err, new_version) {\n      // If not linked to PM2 plus, and update PM2 to latest, display motd.update\n      if (!that.gl_is_km_linked && !err && pkg.version != new_version) {\n        var dt = fs.readFileSync(path.join(__dirname, that._conf.PM2_UPDATE));\n        console.log(dt.toString());\n      }\n\n      that.dump(function (err) {\n        debug('Dumping successfull', err);\n        that.killDaemon(function () {\n          debug('------------------ Everything killed', arguments);\n          that.Client.launchDaemon({\n            interactor: false\n          }, function (err, child) {\n            that.Client.launchRPC(function () {\n              that.resurrect(function () {\n                Common.printOut(chalk.blue.bold('>>>>>>>>>> PM2 updated'));\n                that.launchAll(that, function () {\n                  KMDaemon.launchAndInteract(that._conf, {\n                    pm2_version: pkg.version\n                  }, function (err, data, interactor_proc) {});\n                  setTimeout(() => {\n                    return cb ? cb(null, {\n                      success: true\n                    }) : that.speedList();\n                  }, 250);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n    return false;\n  }\n  /**\n   * Reload an application\n   *\n   * @param {String} process_name Application Name or All\n   * @param {Object} opts         Options\n   * @param {Function} cb         Callback\n   */\n\n\n  reload(process_name, opts, cb) {\n    var that = this;\n\n    if (typeof opts == \"function\") {\n      cb = opts;\n      opts = {};\n    }\n\n    var delay = Common.lockReload();\n\n    if (delay > 0 && opts.force != true) {\n      Common.printError(conf.PREFIX_MSG_ERR + 'Reload already in progress, please try again in ' + Math.floor((conf.RELOAD_LOCK_TIMEOUT - delay) / 1000) + ' seconds or use --force');\n      return cb ? cb(new Error('Reload in progress')) : that.exitCli(conf.ERROR_EXIT);\n    }\n\n    if (Common.isConfigFile(process_name)) that._startJson(process_name, opts, 'reloadProcessId', function (err, apps) {\n      Common.unlockReload();\n      if (err) return cb ? cb(err) : that.exitCli(conf.ERROR_EXIT);\n      return cb ? cb(null, apps) : that.exitCli(conf.SUCCESS_EXIT);\n    });else {\n      if (opts && opts.env) {\n        var err = 'Using --env [env] without passing the ecosystem.config.js does not work';\n        Common.err(err);\n        Common.unlockReload();\n        return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (opts && !opts.updateEnv) Common.printOut(IMMUTABLE_MSG);\n\n      that._operate('reloadProcessId', process_name, opts, function (err, apps) {\n        Common.unlockReload();\n        if (err) return cb ? cb(err) : that.exitCli(conf.ERROR_EXIT);\n        return cb ? cb(null, apps) : that.exitCli(conf.SUCCESS_EXIT);\n      });\n    }\n  }\n  /**\n   * Restart process\n   *\n   * @param {String} cmd   Application Name / Process id / JSON application file / 'all'\n   * @param {Object} opts  Extra options to be updated\n   * @param {Function} cb  Callback\n   */\n\n\n  restart(cmd, opts, cb) {\n    if (typeof opts == \"function\") {\n      cb = opts;\n      opts = {};\n    }\n\n    var that = this;\n    if (typeof cmd === 'number') cmd = cmd.toString();\n\n    if (cmd == \"-\") {\n      // Restart from PIPED JSON\n      process.stdin.resume();\n      process.stdin.setEncoding('utf8');\n      process.stdin.on('data', function (param) {\n        process.stdin.pause();\n        that.actionFromJson('restartProcessId', param, opts, 'pipe', cb);\n      });\n    } else if (Common.isConfigFile(cmd) || typeof cmd === 'object') that._startJson(cmd, opts, 'restartProcessId', cb);else {\n      if (opts && opts.env) {\n        var err = 'Using --env [env] without passing the ecosystem.config.js does not work';\n        Common.err(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (opts && !opts.updateEnv) Common.printOut(IMMUTABLE_MSG);\n\n      that._operate('restartProcessId', cmd, opts, cb);\n    }\n  }\n  /**\n   * Delete process\n   *\n   * @param {String} process_name Application Name / Process id / Application file / 'all'\n   * @param {Function} cb Callback\n   */\n\n\n  delete(process_name, jsonVia, cb) {\n    var that = this;\n\n    if (typeof jsonVia === \"function\") {\n      cb = jsonVia;\n      jsonVia = null;\n    }\n\n    if (typeof process_name === \"number\") {\n      process_name = process_name.toString();\n    }\n\n    if (jsonVia == 'pipe') return that.actionFromJson('deleteProcessId', process_name, commander, 'pipe', (err, procs) => {\n      return cb ? cb(err, procs) : this.speedList();\n    });\n    if (Common.isConfigFile(process_name)) return that.actionFromJson('deleteProcessId', process_name, commander, 'file', (err, procs) => {\n      return cb ? cb(err, procs) : this.speedList();\n    });else {\n      that._operate('deleteProcessId', process_name, (err, procs) => {\n        return cb ? cb(err, procs) : this.speedList();\n      });\n    }\n  }\n  /**\n   * Stop process\n   *\n   * @param {String} process_name Application Name / Process id / Application file / 'all'\n   * @param {Function} cb Callback\n   */\n\n\n  stop(process_name, cb) {\n    var that = this;\n    if (typeof process_name === 'number') process_name = process_name.toString();\n\n    if (process_name == \"-\") {\n      process.stdin.resume();\n      process.stdin.setEncoding('utf8');\n      process.stdin.on('data', function (param) {\n        process.stdin.pause();\n        that.actionFromJson('stopProcessId', param, commander, 'pipe', (err, procs) => {\n          return cb ? cb(err, procs) : this.speedList();\n        });\n      });\n    } else if (Common.isConfigFile(process_name)) that.actionFromJson('stopProcessId', process_name, commander, 'file', (err, procs) => {\n      return cb ? cb(err, procs) : this.speedList();\n    });else that._operate('stopProcessId', process_name, (err, procs) => {\n      return cb ? cb(err, procs) : this.speedList();\n    });\n  }\n  /**\n   * Get list of all processes managed\n   *\n   * @param {Function} cb Callback\n   */\n\n\n  list(opts, cb) {\n    var that = this;\n\n    if (typeof opts == 'function') {\n      cb = opts;\n      opts = null;\n    }\n\n    that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (opts && opts.rawArgs && opts.rawArgs.indexOf('--watch') > -1) {\n        var dayjs = require('dayjs');\n\n        function show() {\n          process.stdout.write('\\x1b[2J');\n          process.stdout.write('\\x1b[0f');\n          console.log('Last refresh: ', dayjs().format());\n          that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n            UX.list(list, null);\n          });\n        }\n\n        show();\n        setInterval(show, 900);\n        return false;\n      }\n\n      return cb ? cb(null, list) : that.speedList(null);\n    });\n  }\n  /**\n   * Kill Daemon\n   *\n   * @param {Function} cb Callback\n   */\n\n\n  killDaemon(cb) {\n    process.env.PM2_STATUS = 'stopping';\n    var that = this;\n    that.Client.executeRemote('notifyKillPM2', {}, function () {});\n    Common.printOut(conf.PREFIX_MSG + '[v] Modules Stopped');\n\n    that._operate('deleteProcessId', 'all', function (err, list) {\n      Common.printOut(conf.PREFIX_MSG + '[v] All Applications Stopped');\n      process.env.PM2_SILENT = 'false';\n      that.killAgent(function (err, data) {\n        if (!err) {\n          Common.printOut(conf.PREFIX_MSG + '[v] Agent Stopped');\n        }\n\n        that.Client.killDaemon(function (err, res) {\n          if (err) Common.printError(err);\n          Common.printOut(conf.PREFIX_MSG + '[v] PM2 Daemon Stopped');\n          return cb ? cb(err, res) : that.exitCli(conf.SUCCESS_EXIT);\n        });\n      });\n    });\n  }\n\n  kill(cb) {\n    this.killDaemon(cb);\n  } /////////////////////\n  // Private methods //\n  /////////////////////\n\n  /**\n   * Method to START / RESTART a script\n   *\n   * @private\n   * @param {string} script script name (will be resolved according to location)\n   */\n\n\n  _startScript(script, opts, cb) {\n    if (typeof opts == \"function\") {\n      cb = opts;\n      opts = {};\n    }\n\n    var that = this;\n    /**\n     * Commander.js tricks\n     */\n\n    var app_conf = Config.filterOptions(opts);\n    var appConf = {};\n    if (typeof app_conf.name == 'function') delete app_conf.name;\n    delete app_conf.args; // Retrieve arguments via -- <args>\n\n    var argsIndex;\n    if (opts.rawArgs && (argsIndex = opts.rawArgs.indexOf('--')) >= 0) app_conf.args = opts.rawArgs.slice(argsIndex + 1);else if (opts.scriptArgs) app_conf.args = opts.scriptArgs;\n    app_conf.script = script;\n    if (!app_conf.namespace) app_conf.namespace = 'default';\n\n    if ((appConf = Common.verifyConfs(app_conf)) instanceof Error) {\n      Common.err(appConf);\n      return cb ? cb(Common.retErr(appConf)) : that.exitCli(conf.ERROR_EXIT);\n    }\n\n    app_conf = appConf[0];\n\n    if (opts.watchDelay) {\n      if (typeof opts.watchDelay === \"string\" && opts.watchDelay.indexOf(\"ms\") !== -1) app_conf.watch_delay = parseInt(opts.watchDelay);else {\n        app_conf.watch_delay = parseFloat(opts.watchDelay) * 1000;\n      }\n    }\n\n    var mas = [];\n    if (typeof opts.ext != 'undefined') hf.make_available_extension(opts, mas); // for -e flag\n\n    mas.length > 0 ? app_conf.ignore_watch = mas : 0;\n    /**\n     * If -w option, write configuration to configuration.json file\n     */\n\n    if (app_conf.write) {\n      var dst_path = path.join(process.env.PWD || process.cwd(), app_conf.name + '-pm2.json');\n      Common.printOut(conf.PREFIX_MSG + 'Writing configuration to', chalk.blue(dst_path)); // pretty JSON\n\n      try {\n        fs.writeFileSync(dst_path, JSON.stringify(app_conf, null, 2));\n      } catch (e) {\n        console.error(e.stack || e);\n      }\n    }\n\n    series([restartExistingProcessName, restartExistingNameSpace, restartExistingProcessId, restartExistingProcessPathOrStartNew], function (err, data) {\n      if (err instanceof Error) return cb ? cb(err) : that.exitCli(conf.ERROR_EXIT);\n      var ret = {};\n      data.forEach(function (_dt) {\n        if (_dt !== undefined) ret = _dt;\n      });\n      return cb ? cb(null, ret) : that.speedList();\n    });\n    /**\n     * If start <app_name> start/restart application\n     */\n\n    function restartExistingProcessName(cb) {\n      if (!isNaN(script) || typeof script === 'string' && script.indexOf('/') != -1 || typeof script === 'string' && path.extname(script) !== '') return cb(null);\n      that.Client.getProcessIdByName(script, function (err, ids) {\n        if (err && cb) return cb(err);\n\n        if (ids.length > 0) {\n          that._operate('restartProcessId', script, opts, function (err, list) {\n            if (err) return cb(err);\n            Common.printOut(conf.PREFIX_MSG + 'Process successfully started');\n            return cb(true, list);\n          });\n        } else return cb(null);\n      });\n    }\n    /**\n     * If start <namespace> start/restart namespace\n     */\n\n\n    function restartExistingNameSpace(cb) {\n      if (!isNaN(script) || typeof script === 'string' && script.indexOf('/') != -1 || typeof script === 'string' && path.extname(script) !== '') return cb(null);\n\n      if (script !== 'all') {\n        that.Client.getProcessIdsByNamespace(script, function (err, ids) {\n          if (err && cb) return cb(err);\n\n          if (ids.length > 0) {\n            that._operate('restartProcessId', script, opts, function (err, list) {\n              if (err) return cb(err);\n              Common.printOut(conf.PREFIX_MSG + 'Process successfully started');\n              return cb(true, list);\n            });\n          } else return cb(null);\n        });\n      } else {\n        that._operate('restartProcessId', 'all', function (err, list) {\n          if (err) return cb(err);\n          Common.printOut(conf.PREFIX_MSG + 'Process successfully started');\n          return cb(true, list);\n        });\n      }\n    }\n\n    function restartExistingProcessId(cb) {\n      if (isNaN(script)) return cb(null);\n\n      that._operate('restartProcessId', script, opts, function (err, list) {\n        if (err) return cb(err);\n        Common.printOut(conf.PREFIX_MSG + 'Process successfully started');\n        return cb(true, list);\n      });\n    }\n    /**\n     * Restart a process with the same full path\n     * Or start it\n     */\n\n\n    function restartExistingProcessPathOrStartNew(cb) {\n      that.Client.executeRemote('getMonitorData', {}, function (err, procs) {\n        if (err) return cb ? cb(new Error(err)) : that.exitCli(conf.ERROR_EXIT);\n        var full_path = path.resolve(that.cwd, script);\n        var managed_script = null;\n        procs.forEach(function (proc) {\n          if (proc.pm2_env.pm_exec_path == full_path && proc.pm2_env.name == app_conf.name) managed_script = proc;\n        });\n\n        if (managed_script && (managed_script.pm2_env.status == conf.STOPPED_STATUS || managed_script.pm2_env.status == conf.STOPPING_STATUS || managed_script.pm2_env.status == conf.ERRORED_STATUS)) {\n          // Restart process if stopped\n          var app_name = managed_script.pm2_env.name;\n\n          that._operate('restartProcessId', app_name, opts, function (err, list) {\n            if (err) return cb ? cb(new Error(err)) : that.exitCli(conf.ERROR_EXIT);\n            Common.printOut(conf.PREFIX_MSG + 'Process successfully started');\n            return cb(true, list);\n          });\n\n          return false;\n        } else if (managed_script && !opts.force) {\n          Common.err('Script already launched, add -f option to force re-execution');\n          return cb(new Error('Script already launched'));\n        }\n\n        var resolved_paths = null;\n\n        try {\n          resolved_paths = Common.resolveAppAttributes({\n            cwd: that.cwd,\n            pm2_home: that.pm2_home\n          }, app_conf);\n        } catch (e) {\n          Common.err(e.message);\n          return cb(Common.retErr(e));\n        }\n\n        Common.printOut(conf.PREFIX_MSG + 'Starting %s in %s (%d instance' + (resolved_paths.instances > 1 ? 's' : '') + ')', resolved_paths.pm_exec_path, resolved_paths.exec_mode, resolved_paths.instances);\n        if (!resolved_paths.env) resolved_paths.env = {}; // Set PM2 HOME in case of child process using PM2 API\n\n        resolved_paths.env['PM2_HOME'] = that.pm2_home;\n        var additional_env = Modularizer.getAdditionalConf(resolved_paths.name);\n\n        util._extend(resolved_paths.env, additional_env); // Is KM linked?\n\n\n        resolved_paths.km_link = that.gl_is_km_linked;\n        that.Client.executeRemote('prepare', resolved_paths, function (err, data) {\n          if (err) {\n            Common.printError(conf.PREFIX_MSG_ERR + 'Error while launching application', err.stack || err);\n            return cb(Common.retErr(err));\n          }\n\n          Common.printOut(conf.PREFIX_MSG + 'Done.');\n          return cb(true, data);\n        });\n        return false;\n      });\n    }\n  }\n  /**\n   * Method to start/restart/reload processes from a JSON file\n   * It will start app not started\n   * Can receive only option to skip applications\n   *\n   * @private\n   */\n\n\n  _startJson(file, opts, action, pipe, cb) {\n    var config = {};\n    var appConf = {};\n    var staticConf = [];\n    var deployConf = {};\n    var apps_info = [];\n    var that = this;\n    /**\n     * Get File configuration\n     */\n\n    if (typeof cb === 'undefined' && typeof pipe === 'function') {\n      cb = pipe;\n    }\n\n    if (typeof file === 'object') {\n      config = file;\n    } else if (pipe === 'pipe') {\n      config = Common.parseConfig(file, 'pipe');\n    } else {\n      var data = null;\n      var isAbsolute = path.isAbsolute(file);\n      var file_path = isAbsolute ? file : path.join(that.cwd, file);\n      debug('Resolved filepath %s', file_path);\n\n      try {\n        data = fs.readFileSync(file_path);\n      } catch (e) {\n        Common.printError(conf.PREFIX_MSG_ERR + 'File ' + file + ' not found');\n        return cb ? cb(Common.retErr(e)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      try {\n        config = Common.parseConfig(data, file);\n      } catch (e) {\n        Common.printError(conf.PREFIX_MSG_ERR + 'File ' + file + ' malformated');\n        console.error(e);\n        return cb ? cb(Common.retErr(e)) : that.exitCli(conf.ERROR_EXIT);\n      }\n    }\n    /**\n     * Alias some optional fields\n     */\n\n\n    if (config.deploy) deployConf = config.deploy;\n    if (config.static) staticConf = config.static;\n    if (config.apps) appConf = config.apps;else if (config.pm2) appConf = config.pm2;else appConf = config;\n    if (!Array.isArray(appConf)) appConf = [appConf];\n    if ((appConf = Common.verifyConfs(appConf)) instanceof Error) return cb ? cb(appConf) : that.exitCli(conf.ERROR_EXIT);\n    process.env.PM2_JSON_PROCESSING = true; // Get App list\n\n    var apps_name = [];\n    var proc_list = {}; // Add statics to apps\n\n    staticConf.forEach(function (serve) {\n      appConf.push({\n        name: serve.name ? serve.name : `static-page-server-${serve.port}`,\n        script: path.resolve(__dirname, 'API', 'Serve.js'),\n        env: {\n          PM2_SERVE_PORT: serve.port,\n          PM2_SERVE_HOST: serve.host,\n          PM2_SERVE_PATH: serve.path,\n          PM2_SERVE_SPA: serve.spa,\n          PM2_SERVE_DIRECTORY: serve.directory,\n          PM2_SERVE_BASIC_AUTH: serve.basic_auth !== undefined,\n          PM2_SERVE_BASIC_AUTH_USERNAME: serve.basic_auth ? serve.basic_auth.username : null,\n          PM2_SERVE_BASIC_AUTH_PASSWORD: serve.basic_auth ? serve.basic_auth.password : null,\n          PM2_SERVE_MONITOR: serve.monitor\n        }\n      });\n    }); // Here we pick only the field we want from the CLI when starting a JSON\n\n    appConf.forEach(function (app) {\n      if (!app.env) {\n        app.env = {};\n      }\n\n      app.env.io = app.io; // --only <app>\n\n      if (opts.only) {\n        var apps = opts.only.split(/,| /);\n        if (apps.indexOf(app.name) == -1) return false;\n      } // Namespace\n\n\n      if (!app.namespace) {\n        if (opts.namespace) app.namespace = opts.namespace;else app.namespace = 'default';\n      } // --watch\n\n\n      if (!app.watch && opts.watch && opts.watch === true) app.watch = true; // --ignore-watch\n\n      if (!app.ignore_watch && opts.ignore_watch) app.ignore_watch = opts.ignore_watch;\n      if (opts.install_url) app.install_url = opts.install_url; // --instances <nb>\n\n      if (opts.instances && typeof opts.instances === 'number') app.instances = opts.instances; // --uid <user>\n\n      if (opts.uid) app.uid = opts.uid; // --gid <user>\n\n      if (opts.gid) app.gid = opts.gid; // Specific\n\n      if (app.append_env_to_name && opts.env) app.name += '-' + opts.env;\n      if (opts.name_prefix && app.name.indexOf(opts.name_prefix) == -1) app.name = `${opts.name_prefix}:${app.name}`;\n      app.username = Common.getCurrentUsername();\n      apps_name.push(app.name);\n    });\n    that.Client.executeRemote('getMonitorData', {}, function (err, raw_proc_list) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n      }\n      /**\n       * Uniquify in memory process list\n       */\n\n\n      raw_proc_list.forEach(function (proc) {\n        proc_list[proc.name] = proc;\n      });\n      /**\n       * Auto detect application already started\n       * and act on them depending on action\n       */\n\n      eachLimit(Object.keys(proc_list), conf.CONCURRENT_ACTIONS, function (proc_name, next) {\n        // Skip app name (--only option)\n        if (apps_name.indexOf(proc_name) == -1) return next();\n        if (!(action == 'reloadProcessId' || action == 'softReloadProcessId' || action == 'restartProcessId')) throw new Error('Wrong action called');\n        var apps = appConf.filter(function (app) {\n          return app.name == proc_name;\n        });\n        var envs = apps.map(function (app) {\n          // Binds env_diff to env and returns it.\n          return Common.mergeEnvironmentVariables(app, opts.env, deployConf);\n        }); // Assigns own enumerable properties of all\n        // Notice: if people use the same name in different apps,\n        //         duplicated envs will be overrode by the last one\n\n        var env = envs.reduce(function (e1, e2) {\n          return util._extend(e1, e2);\n        }); // When we are processing JSON, allow to keep the new env by default\n\n        env.updateEnv = true; // Pass `env` option\n\n        that._operate(action, proc_name, env, function (err, ret) {\n          if (err) Common.printError(err); // For return\n\n          apps_info = apps_info.concat(ret);\n          that.Client.notifyGod(action, proc_name); // And Remove from array to spy\n\n          apps_name.splice(apps_name.indexOf(proc_name), 1);\n          return next();\n        });\n      }, function (err) {\n        if (err) return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n        if (apps_name.length > 0 && action != 'start') Common.printOut(conf.PREFIX_MSG_WARNING + 'Applications %s not running, starting...', apps_name.join(', ')); // Start missing apps\n\n        return startApps(apps_name, function (err, apps) {\n          apps_info = apps_info.concat(apps);\n          return cb ? cb(err, apps_info) : that.speedList(err ? 1 : 0);\n        });\n      });\n      return false;\n    });\n\n    function startApps(app_name_to_start, cb) {\n      var apps_to_start = [];\n      var apps_started = [];\n      var apps_errored = [];\n      appConf.forEach(function (app, i) {\n        if (app_name_to_start.indexOf(app.name) != -1) {\n          apps_to_start.push(appConf[i]);\n        }\n      });\n      eachLimit(apps_to_start, conf.CONCURRENT_ACTIONS, function (app, next) {\n        if (opts.cwd) app.cwd = opts.cwd;\n        if (opts.force_name) app.name = opts.force_name;\n        if (opts.started_as_module) app.pmx_module = true;\n        var resolved_paths = null; // hardcode script name to use `serve` feature inside a process file\n\n        if (app.script === 'serve') {\n          app.script = path.resolve(__dirname, 'API', 'Serve.js');\n        }\n\n        try {\n          resolved_paths = Common.resolveAppAttributes({\n            cwd: that.cwd,\n            pm2_home: that.pm2_home\n          }, app);\n        } catch (e) {\n          apps_errored.push(e);\n          Common.err(`Error: ${e.message}`);\n          return next();\n        }\n\n        if (!resolved_paths.env) resolved_paths.env = {}; // Set PM2 HOME in case of child process using PM2 API\n\n        resolved_paths.env['PM2_HOME'] = that.pm2_home;\n        var additional_env = Modularizer.getAdditionalConf(resolved_paths.name);\n\n        util._extend(resolved_paths.env, additional_env);\n\n        resolved_paths.env = Common.mergeEnvironmentVariables(resolved_paths, opts.env, deployConf);\n        delete resolved_paths.env.current_conf; // Is KM linked?\n\n        resolved_paths.km_link = that.gl_is_km_linked;\n\n        if (resolved_paths.wait_ready) {\n          Common.warn(`App ${resolved_paths.name} has option 'wait_ready' set, waiting for app to be ready...`);\n        }\n\n        that.Client.executeRemote('prepare', resolved_paths, function (err, data) {\n          if (err) {\n            Common.printError(conf.PREFIX_MSG_ERR + 'Process failed to launch %s', err.message ? err.message : err);\n            return next();\n          }\n\n          if (data.length === 0) {\n            Common.printError(conf.PREFIX_MSG_ERR + 'Process config loading failed', data);\n            return next();\n          }\n\n          Common.printOut(conf.PREFIX_MSG + 'App [%s] launched (%d instances)', data[0].pm2_env.name, data.length);\n          apps_started = apps_started.concat(data);\n          next();\n        });\n      }, function (err) {\n        var final_error = err || apps_errored.length > 0 ? apps_errored : null;\n        return cb ? cb(final_error, apps_started) : that.speedList();\n      });\n      return false;\n    }\n  }\n  /**\n   * Apply a RPC method on the json file\n   * @private\n   * @method actionFromJson\n   * @param {string} action RPC Method\n   * @param {object} options\n   * @param {string|object} file file\n   * @param {string} jsonVia action type (=only 'pipe' ?)\n   * @param {Function}\n   */\n\n\n  actionFromJson(action, file, opts, jsonVia, cb) {\n    var appConf = {};\n    var ret_processes = [];\n    var that = this; //accept programmatic calls\n\n    if (typeof file == 'object') {\n      cb = typeof jsonVia == 'function' ? jsonVia : cb;\n      appConf = file;\n    } else if (jsonVia == 'file') {\n      var data = null;\n\n      try {\n        data = fs.readFileSync(file);\n      } catch (e) {\n        Common.printError(conf.PREFIX_MSG_ERR + 'File ' + file + ' not found');\n        return cb ? cb(Common.retErr(e)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      try {\n        appConf = Common.parseConfig(data, file);\n      } catch (e) {\n        Common.printError(conf.PREFIX_MSG_ERR + 'File ' + file + ' malformated');\n        console.error(e);\n        return cb ? cb(Common.retErr(e)) : that.exitCli(conf.ERROR_EXIT);\n      }\n    } else if (jsonVia == 'pipe') {\n      appConf = Common.parseConfig(file, 'pipe');\n    } else {\n      Common.printError('Bad call to actionFromJson, jsonVia should be one of file, pipe');\n      return that.exitCli(conf.ERROR_EXIT);\n    } // Backward compatibility\n\n\n    if (appConf.apps) appConf = appConf.apps;\n    if (!Array.isArray(appConf)) appConf = [appConf];\n    if ((appConf = Common.verifyConfs(appConf)) instanceof Error) return cb ? cb(appConf) : that.exitCli(conf.ERROR_EXIT);\n    eachLimit(appConf, conf.CONCURRENT_ACTIONS, function (proc, next1) {\n      var name = '';\n      var new_env;\n      if (!proc.name) name = path.basename(proc.script);else name = proc.name;\n      if (opts.only && opts.only != name) return process.nextTick(next1);\n      if (opts && opts.env) new_env = Common.mergeEnvironmentVariables(proc, opts.env);else new_env = Common.mergeEnvironmentVariables(proc);\n      that.Client.getProcessIdByName(name, function (err, ids) {\n        if (err) {\n          Common.printError(err);\n          return next1();\n        }\n\n        if (!ids) return next1();\n        eachLimit(ids, conf.CONCURRENT_ACTIONS, function (id, next2) {\n          var opts = {}; //stopProcessId could accept options to?\n\n          if (action == 'restartProcessId') {\n            opts = {\n              id: id,\n              env: new_env\n            };\n          } else {\n            opts = id;\n          }\n\n          that.Client.executeRemote(action, opts, function (err, res) {\n            ret_processes.push(res);\n\n            if (err) {\n              Common.printError(err);\n              return next2();\n            }\n\n            if (action == 'restartProcessId') {\n              that.Client.notifyGod('restart', id);\n            } else if (action == 'deleteProcessId') {\n              that.Client.notifyGod('delete', id);\n            } else if (action == 'stopProcessId') {\n              that.Client.notifyGod('stop', id);\n            }\n\n            Common.printOut(conf.PREFIX_MSG + '[%s](%d) \\u2713', name, id);\n            return next2();\n          });\n        }, function (err) {\n          return next1(null, ret_processes);\n        });\n      });\n    }, function (err) {\n      if (cb) return cb(null, ret_processes);else return that.speedList();\n    });\n  }\n  /**\n   * Main function to operate with PM2 daemon\n   *\n   * @param {String} action_name  Name of action (restartProcessId, deleteProcessId, stopProcessId)\n   * @param {String} process_name can be 'all', a id integer or process name\n   * @param {Object} envs         object with CLI options / environment\n   */\n\n\n  _operate(action_name, process_name, envs, cb) {\n    var that = this;\n    var update_env = false;\n    var ret = []; // Make sure all options exist\n\n    if (!envs) envs = {};\n\n    if (typeof envs == 'function') {\n      cb = envs;\n      envs = {};\n    } // Set via env.update (JSON processing)\n\n\n    if (envs.updateEnv === true) update_env = true;\n    var concurrent_actions = envs.parallel || conf.CONCURRENT_ACTIONS;\n\n    if (!process.env.PM2_JSON_PROCESSING || envs.commands) {\n      envs = that._handleAttributeUpdate(envs);\n    }\n    /**\n     * Set current updated configuration if not passed\n     */\n\n\n    if (!envs.current_conf) {\n      var _conf = fclone(envs);\n\n      envs = {\n        current_conf: _conf\n      }; // Is KM linked?\n\n      envs.current_conf.km_link = that.gl_is_km_linked;\n    }\n    /**\n     * Operate action on specific process id\n     */\n\n\n    function processIds(ids, cb) {\n      Common.printOut(conf.PREFIX_MSG + 'Applying action %s on app [%s](ids: %s)', action_name, process_name, ids);\n      if (ids.length <= 2) concurrent_actions = 1;\n      if (action_name == 'deleteProcessId') concurrent_actions = 10;\n      eachLimit(ids, concurrent_actions, function (id, next) {\n        var opts; // These functions need extra param to be passed\n\n        if (action_name == 'restartProcessId' || action_name == 'reloadProcessId' || action_name == 'softReloadProcessId') {\n          var new_env = {};\n\n          if (update_env === true) {\n            if (conf.PM2_PROGRAMMATIC == true) new_env = Common.safeExtend({}, process.env);else new_env = util._extend({}, process.env);\n            Object.keys(envs).forEach(function (k) {\n              new_env[k] = envs[k];\n            });\n          } else {\n            new_env = envs;\n          }\n\n          opts = {\n            id: id,\n            env: new_env\n          };\n        } else {\n          opts = id;\n        }\n\n        that.Client.executeRemote(action_name, opts, function (err, res) {\n          if (err) {\n            Common.printError(conf.PREFIX_MSG_ERR + 'Process %s not found', id);\n            return next(`Process ${id} not found`);\n          }\n\n          if (action_name == 'restartProcessId') {\n            that.Client.notifyGod('restart', id);\n          } else if (action_name == 'deleteProcessId') {\n            that.Client.notifyGod('delete', id);\n          } else if (action_name == 'stopProcessId') {\n            that.Client.notifyGod('stop', id);\n          } else if (action_name == 'reloadProcessId') {\n            that.Client.notifyGod('reload', id);\n          } else if (action_name == 'softReloadProcessId') {\n            that.Client.notifyGod('graceful reload', id);\n          }\n\n          if (!Array.isArray(res)) res = [res]; // Filter return\n\n          res.forEach(function (proc) {\n            Common.printOut(conf.PREFIX_MSG + '[%s](%d) \\u2713', proc.pm2_env ? proc.pm2_env.name : process_name, id);\n\n            if (action_name == 'stopProcessId' && proc.pm2_env && proc.pm2_env.cron_restart) {\n              Common.warn(`App ${chalk.bold(proc.pm2_env.name)} stopped but CRON RESTART is still UP ${proc.pm2_env.cron_restart}`);\n            }\n\n            if (!proc.pm2_env) return false;\n            ret.push({\n              name: proc.pm2_env.name,\n              namespace: proc.pm2_env.namespace,\n              pm_id: proc.pm2_env.pm_id,\n              status: proc.pm2_env.status,\n              restart_time: proc.pm2_env.restart_time,\n              pm2_env: {\n                name: proc.pm2_env.name,\n                namespace: proc.pm2_env.namespace,\n                pm_id: proc.pm2_env.pm_id,\n                status: proc.pm2_env.status,\n                restart_time: proc.pm2_env.restart_time,\n                env: proc.pm2_env.env\n              }\n            });\n          });\n          return next();\n        });\n      }, function (err) {\n        if (err) return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n        return cb ? cb(null, ret) : that.speedList();\n      });\n    }\n\n    if (process_name == 'all') {\n      // When using shortcuts like 'all', do not delete modules\n      var fn;\n      if (process.env.PM2_STATUS == 'stopping') that.Client.getAllProcessId(function (err, ids) {\n        reoperate(err, ids);\n      });else that.Client.getAllProcessIdWithoutModules(function (err, ids) {\n        reoperate(err, ids);\n      });\n\n      function reoperate(err, ids) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n        }\n\n        if (!ids || ids.length === 0) {\n          Common.printError(conf.PREFIX_MSG_WARNING + 'No process found');\n          return cb ? cb(new Error('process name not found')) : that.exitCli(conf.ERROR_EXIT);\n        }\n\n        return processIds(ids, cb);\n      }\n    } // operate using regex\n    else if (isNaN(process_name) && process_name[0] === '/' && process_name[process_name.length - 1] === '/') {\n        var regex = new RegExp(process_name.replace(/\\//g, ''));\n        that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n          if (err) {\n            Common.printError('Error retrieving process list: ' + err);\n            return cb(err);\n          }\n\n          var found_proc = [];\n          list.forEach(function (proc) {\n            if (regex.test(proc.pm2_env.name)) {\n              found_proc.push(proc.pm_id);\n            }\n          });\n\n          if (found_proc.length === 0) {\n            Common.printError(conf.PREFIX_MSG_WARNING + 'No process found');\n            return cb ? cb(new Error('process name not found')) : that.exitCli(conf.ERROR_EXIT);\n          }\n\n          return processIds(found_proc, cb);\n        });\n      } else if (isNaN(process_name)) {\n        /**\n         * We can not stop or delete a module but we can restart it\n         * to refresh configuration variable\n         */\n        var allow_module_restart = action_name == 'restartProcessId' ? true : false;\n        that.Client.getProcessIdByName(process_name, allow_module_restart, function (err, ids) {\n          if (err) {\n            Common.printError(err);\n            return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n          }\n\n          if (ids && ids.length > 0) {\n            /**\n            * Determine if the process to restart is a module\n            * if yes load configuration variables and merge with the current environment\n            */\n            var additional_env = Modularizer.getAdditionalConf(process_name);\n\n            util._extend(envs, additional_env);\n\n            return processIds(ids, cb);\n          }\n\n          that.Client.getProcessIdsByNamespace(process_name, allow_module_restart, function (err, ns_process_ids) {\n            if (err) {\n              Common.printError(err);\n              return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n            }\n\n            if (!ns_process_ids || ns_process_ids.length === 0) {\n              Common.printError(conf.PREFIX_MSG_ERR + 'Process or Namespace %s not found', process_name);\n              return cb ? cb(new Error('process or namespace not found')) : that.exitCli(conf.ERROR_EXIT);\n            }\n            /**\n             * Determine if the process to restart is a module\n             * if yes load configuration variables and merge with the current environment\n             */\n\n\n            var ns_additional_env = Modularizer.getAdditionalConf(process_name);\n\n            util._extend(envs, ns_additional_env);\n\n            return processIds(ns_process_ids, cb);\n          });\n        });\n      } else {\n        if (that.pm2_configuration.docker == \"true\" || that.pm2_configuration.docker == true) {\n          // Docker/Systemd process interaction detection\n          that.Client.executeRemote('getMonitorData', {}, (err, proc_list) => {\n            var higher_id = 0;\n            proc_list.forEach(p => {\n              p.pm_id > higher_id ? higher_id = p.pm_id : null;\n            }); // Is Docker/Systemd\n\n            if (process_name > higher_id) return DockerMgmt.processCommand(that, higher_id, process_name, action_name, err => {\n              if (err) {\n                Common.printError(conf.PREFIX_MSG_ERR + (err.message ? err.message : err));\n                return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n              }\n\n              return cb ? cb(null, ret) : that.speedList();\n            }); // Check if application name as number is an app name\n\n            that.Client.getProcessIdByName(process_name, function (err, ids) {\n              if (ids.length > 0) return processIds(ids, cb); // Check if application name as number is an namespace\n\n              that.Client.getProcessIdsByNamespace(process_name, function (err, ns_process_ids) {\n                if (ns_process_ids.length > 0) return processIds(ns_process_ids, cb); // Else operate on pm id\n\n                return processIds([process_name], cb);\n              });\n            });\n          });\n        } else {\n          // Check if application name as number is an app name\n          that.Client.getProcessIdByName(process_name, function (err, ids) {\n            if (ids.length > 0) return processIds(ids, cb); // Check if application name as number is an namespace\n\n            that.Client.getProcessIdsByNamespace(process_name, function (err, ns_process_ids) {\n              if (ns_process_ids.length > 0) return processIds(ns_process_ids, cb); // Else operate on pm id\n\n              return processIds([process_name], cb);\n            });\n          });\n        }\n      }\n  }\n  /**\n   * Converts CamelCase Commander.js arguments\n   * to Underscore\n   * (nodeArgs -> node_args)\n   */\n\n\n  _handleAttributeUpdate(opts) {\n    var conf = Config.filterOptions(opts);\n    var that = this;\n    if (typeof conf.name != 'string') delete conf.name;\n    var argsIndex = 0;\n\n    if (opts.rawArgs && (argsIndex = opts.rawArgs.indexOf('--')) >= 0) {\n      conf.args = opts.rawArgs.slice(argsIndex + 1);\n    }\n\n    var appConf = Common.verifyConfs(conf)[0];\n\n    if (appConf instanceof Error) {\n      Common.printError('Error while transforming CamelCase args to underscore');\n      return appConf;\n    }\n\n    if (argsIndex == -1) delete appConf.args;\n    if (appConf.name == 'undefined') delete appConf.name;\n    delete appConf.exec_mode;\n\n    if (util.isArray(appConf.watch) && appConf.watch.length === 0) {\n      if (!~opts.rawArgs.indexOf('--watch')) delete appConf.watch;\n    } // Options set via environment variables\n\n\n    if (process.env.PM2_DEEP_MONITORING) appConf.deep_monitoring = true; // Force deletion of defaults values set by commander\n    // to avoid overriding specified configuration by user\n\n    if (appConf.treekill === true) delete appConf.treekill;\n    if (appConf.pmx === true) delete appConf.pmx;\n    if (appConf.vizion === true) delete appConf.vizion;\n    if (appConf.automation === true) delete appConf.automation;\n    if (appConf.autorestart === true) delete appConf.autorestart;\n    return appConf;\n  }\n\n  getProcessIdByName(name, cb) {\n    var that = this;\n    this.Client.getProcessIdByName(name, function (err, id) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      console.log(id);\n      return cb ? cb(null, id) : that.exitCli(conf.SUCCESS_EXIT);\n    });\n  }\n  /**\n   * Description\n   * @method jlist\n   * @param {} debug\n   * @return\n   */\n\n\n  jlist(debug) {\n    var that = this;\n    that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n      if (err) {\n        Common.printError(err);\n        return that.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (debug) {\n        process.stdout.write(util.inspect(list, false, null, false));\n      } else {\n        process.stdout.write(JSON.stringify(list));\n      }\n\n      that.exitCli(conf.SUCCESS_EXIT);\n    });\n  }\n  /**\n   * Display system information\n   * @method slist\n   * @return\n   */\n\n\n  slist(tree) {\n    this.Client.executeRemote('getSystemData', {}, (err, sys_infos) => {\n      if (err) {\n        Common.err(err);\n        return this.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (tree === true) {\n        var treeify = require('./tools/treeify.js');\n\n        console.log(treeify.asTree(sys_infos, true));\n      } else process.stdout.write(util.inspect(sys_infos, false, null, false));\n\n      this.exitCli(conf.SUCCESS_EXIT);\n    });\n  }\n  /**\n   * Description\n   * @method speedList\n   * @return\n   */\n\n\n  speedList(code, apps_acted) {\n    var that = this;\n    var systemdata = null;\n    var acted = [];\n\n    if (code != 0 && code != null) {\n      return that.exitCli(code ? code : conf.SUCCESS_EXIT);\n    }\n\n    if (apps_acted && apps_acted.length > 0) {\n      apps_acted.forEach(proc => {\n        acted.push(proc.pm2_env ? proc.pm2_env.pm_id : proc.pm_id);\n      });\n    } // Do nothing if PM2 called programmatically and not called from CLI (also in exitCli)\n\n\n    if (conf.PM2_PROGRAMMATIC && process.env.PM2_USAGE != 'CLI') return false;\n    return that.Client.executeRemote('getSystemData', {}, (err, sys_infos) => {\n      that.Client.executeRemote('getMonitorData', {}, (err, proc_list) => {\n        doList(err, proc_list, sys_infos);\n      });\n    });\n\n    function doList(err, list, sys_infos) {\n      if (err) {\n        if (that.gl_retry == 0) {\n          that.gl_retry += 1;\n          return setTimeout(that.speedList.bind(that), 1400);\n        }\n\n        console.error('Error retrieving process list: %s.\\nA process seems to be on infinite loop, retry in 5 seconds', err);\n        return that.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (process.stdout.isTTY === false) {\n        UX.list_min(list);\n      } else if (commander.miniList && !commander.silent) UX.list_min(list);else if (!commander.silent) {\n        if (that.gl_interact_infos) {\n          var dashboard_url = `https://app.pm2.io/#/r/${that.gl_interact_infos.public_key}`;\n\n          if (that.gl_interact_infos.info_node != 'https://root.keymetrics.io') {\n            dashboard_url = `${that.gl_interact_infos.info_node}/#/r/${that.gl_interact_infos.public_key}`;\n          }\n\n          Common.printOut('%s PM2+ activated | Instance Name: %s | Dash: %s', chalk.green.bold('⇆'), chalk.bold(that.gl_interact_infos.machine_name), chalk.bold(dashboard_url));\n        }\n\n        UX.list(list, sys_infos); //Common.printOut(chalk.white.italic(' Use `pm2 show <id|name>` to get more details about an app'));\n      }\n\n      if (that.Client.daemon_mode == false) {\n        Common.printOut('[--no-daemon] Continue to stream logs');\n        Common.printOut('[--no-daemon] Exit on target PM2 exit pid=' + fs.readFileSync(conf.PM2_PID_FILE_PATH).toString());\n        global._auto_exit = true;\n        return that.streamLogs('all', 0, false, 'HH:mm:ss', false);\n      } // if (process.stdout.isTTY) if looking for start logs\n      else if (!process.env.TRAVIS && process.env.NODE_ENV != 'test' && acted.length > 0 && commander.attach === true) {\n          Common.info(`Log streaming apps id: ${chalk.cyan(acted.join(' '))}, exit with Ctrl-C or will exit in 10secs`); // setTimeout(() => {\n          //   Common.info(`Log streaming exited automatically, run 'pm2 logs' to continue watching logs`)\n          //   return that.exitCli(code ? code : conf.SUCCESS_EXIT);\n          // }, 10000)\n\n          return acted.forEach(proc_name => {\n            that.streamLogs(proc_name, 0, false, null, false);\n          });\n        } else {\n          return that.exitCli(code ? code : conf.SUCCESS_EXIT);\n        }\n    }\n  }\n  /**\n   * Scale up/down a process\n   * @method scale\n   */\n\n\n  scale(app_name, number, cb) {\n    var that = this;\n\n    function addProcs(proc, value, cb) {\n      (function ex(proc, number) {\n        if (number-- === 0) return cb();\n        Common.printOut(conf.PREFIX_MSG + 'Scaling up application');\n        that.Client.executeRemote('duplicateProcessId', proc.pm2_env.pm_id, ex.bind(this, proc, number));\n      })(proc, number);\n    }\n\n    function rmProcs(procs, value, cb) {\n      var i = 0;\n\n      (function ex(procs, number) {\n        if (number++ === 0) return cb();\n\n        that._operate('deleteProcessId', procs[i++].pm2_env.pm_id, ex.bind(this, procs, number));\n      })(procs, number);\n    }\n\n    function end() {\n      return cb ? cb(null, {\n        success: true\n      }) : that.speedList();\n    }\n\n    this.Client.getProcessByName(app_name, function (err, procs) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (!procs || procs.length === 0) {\n        Common.printError(conf.PREFIX_MSG_ERR + 'Application %s not found', app_name);\n        return cb ? cb(new Error('App not found')) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      var proc_number = procs.length;\n\n      if (typeof number === 'string' && number.indexOf('+') >= 0) {\n        number = parseInt(number, 10);\n        return addProcs(procs[0], number, end);\n      } else if (typeof number === 'string' && number.indexOf('-') >= 0) {\n        number = parseInt(number, 10);\n        return rmProcs(procs[0], number, end);\n      } else {\n        number = parseInt(number, 10);\n        number = number - proc_number;\n        if (number < 0) return rmProcs(procs, number, end);else if (number > 0) return addProcs(procs[0], number, end);else {\n          Common.printError(conf.PREFIX_MSG_ERR + 'Nothing to do');\n          return cb ? cb(new Error('Same process number')) : that.exitCli(conf.ERROR_EXIT);\n        }\n      }\n    });\n  }\n  /**\n   * Description\n   * @method describeProcess\n   * @param {} pm2_id\n   * @return\n   */\n\n\n  describe(pm2_id, cb) {\n    var that = this;\n    var found_proc = [];\n    that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n      if (err) {\n        Common.printError('Error retrieving process list: ' + err);\n        that.exitCli(conf.ERROR_EXIT);\n      }\n\n      list.forEach(function (proc) {\n        if (!isNaN(pm2_id) && proc.pm_id == pm2_id || typeof pm2_id === 'string' && proc.name == pm2_id) {\n          found_proc.push(proc);\n        }\n      });\n\n      if (found_proc.length === 0) {\n        Common.printError(conf.PREFIX_MSG_WARNING + '%s doesn\\'t exist', pm2_id);\n        return cb ? cb(null, []) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (!cb) {\n        found_proc.forEach(function (proc) {\n          UX.describe(proc);\n        });\n      }\n\n      return cb ? cb(null, found_proc) : that.exitCli(conf.SUCCESS_EXIT);\n    });\n  }\n  /**\n   * API method to perform a deep update of PM2\n   * @method deepUpdate\n   */\n\n\n  deepUpdate(cb) {\n    var that = this;\n    Common.printOut(conf.PREFIX_MSG + 'Updating PM2...');\n    var child = sexec(\"npm i -g pm2@latest; pm2 update\");\n    child.stdout.on('end', function () {\n      Common.printOut(conf.PREFIX_MSG + 'PM2 successfully updated');\n      cb ? cb(null, {\n        success: true\n      }) : that.exitCli(conf.SUCCESS_EXIT);\n    });\n  }\n\n}\n\n; //////////////////////////\n// Load all API methods //\n//////////////////////////\n\nrequire('./API/Extra.js')(API);\n\nrequire('./API/Deploy.js')(API);\n\nrequire('./API/Modules/index.js')(API);\n\nrequire('./API/pm2-plus/link.js')(API);\n\nrequire('./API/pm2-plus/process-selector.js')(API);\n\nrequire('./API/pm2-plus/helpers.js')(API);\n\nrequire('./API/Configuration.js')(API);\n\nrequire('./API/Version.js')(API);\n\nrequire('./API/Startup.js')(API);\n\nrequire('./API/LogManagement.js')(API);\n\nrequire('./API/Containerizer.js')(API);\n\nmodule.exports = API;","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/API.js"],"names":["commander","require","fs","path","eachLimit","series","debug","util","chalk","fclone","DockerMgmt","conf","Client","Common","KMDaemon","Config","Modularizer","path_structure","UX","pkg","hf","Configuration","semver","sexec","IMMUTABLE_MSG","bold","blue","API","constructor","opts","that","daemon_mode","pm2_home","PM2_ROOT_PATH","public_key","PUBLIC_KEY","secret_key","SECRET_KEY","machine_name","MACHINE_NAME","cwd","process","resolve","independent","Error","_extend","IS_WINDOWS","crypto","random_file","randomBytes","toString","join","_conf","stdout","_handle","setBlocking","pm2_configuration","getSync","gl_interact_infos","gl_is_km_linked","pid","readFileSync","INTERACTOR_PID_PATH","parseInt","trim","kill","e","env","NODE_ENV","ping","err","result","readFile","INTERACTION_CONF","JSON","parse","json5","console","error","gl_retry","connect","noDaemon","cb","start_timer","Date","start","meta","new_pm2_instance","launchAll","err_mod","destroy","killDaemon","cmd","test_path","test_path_2","indexOf","access","R_OK","disconnect","close","data","launchModules","launchBus","exitCli","code","PM2_PROGRAMMATIC","PM2_USAGE","disconnectRPC","fds","tryToExit","exit","stderr","forEach","std","fd","bufferSize","write","lt","version","printOut","PREFIX_MSG_WARNING","isArray","watch","length","rawArgs","argv","isConfigFile","_startJson","procs","speedList","_startScript","reset","process_name","processIds","ids","CONCURRENT_ACTIONS","id","next","executeRemote","res","PREFIX_MSG","retErr","success","getAllProcessId","printError","ERROR_EXIT","isNaN","getProcessIdByName","update","getVersion","new_version","dt","__dirname","PM2_UPDATE","log","dump","arguments","launchDaemon","interactor","child","launchRPC","resurrect","launchAndInteract","pm2_version","interactor_proc","setTimeout","reload","delay","lockReload","force","PREFIX_MSG_ERR","Math","floor","RELOAD_LOCK_TIMEOUT","apps","unlockReload","SUCCESS_EXIT","updateEnv","_operate","restart","stdin","resume","setEncoding","on","param","pause","actionFromJson","delete","jsonVia","stop","list","dayjs","show","format","setInterval","PM2_STATUS","PM2_SILENT","killAgent","script","app_conf","filterOptions","appConf","name","args","argsIndex","slice","scriptArgs","namespace","verifyConfs","watchDelay","watch_delay","parseFloat","mas","ext","make_available_extension","ignore_watch","dst_path","PWD","writeFileSync","stringify","stack","restartExistingProcessName","restartExistingNameSpace","restartExistingProcessId","restartExistingProcessPathOrStartNew","ret","_dt","undefined","extname","getProcessIdsByNamespace","full_path","managed_script","proc","pm2_env","pm_exec_path","status","STOPPED_STATUS","STOPPING_STATUS","ERRORED_STATUS","app_name","resolved_paths","resolveAppAttributes","message","instances","exec_mode","additional_env","getAdditionalConf","km_link","file","action","pipe","config","staticConf","deployConf","apps_info","parseConfig","isAbsolute","file_path","deploy","static","pm2","Array","PM2_JSON_PROCESSING","apps_name","proc_list","serve","push","port","PM2_SERVE_PORT","PM2_SERVE_HOST","host","PM2_SERVE_PATH","PM2_SERVE_SPA","spa","PM2_SERVE_DIRECTORY","directory","PM2_SERVE_BASIC_AUTH","basic_auth","PM2_SERVE_BASIC_AUTH_USERNAME","username","PM2_SERVE_BASIC_AUTH_PASSWORD","password","PM2_SERVE_MONITOR","monitor","app","io","only","split","install_url","uid","gid","append_env_to_name","name_prefix","getCurrentUsername","raw_proc_list","Object","keys","proc_name","filter","envs","map","mergeEnvironmentVariables","reduce","e1","e2","concat","notifyGod","splice","startApps","app_name_to_start","apps_to_start","apps_started","apps_errored","i","force_name","started_as_module","pmx_module","current_conf","wait_ready","warn","final_error","ret_processes","next1","new_env","basename","nextTick","next2","action_name","update_env","concurrent_actions","parallel","commands","_handleAttributeUpdate","safeExtend","k","cron_restart","pm_id","restart_time","fn","reoperate","getAllProcessIdWithoutModules","regex","RegExp","replace","found_proc","test","allow_module_restart","ns_process_ids","ns_additional_env","docker","higher_id","p","processCommand","PM2_DEEP_MONITORING","deep_monitoring","treekill","pmx","vizion","automation","autorestart","jlist","inspect","slist","tree","sys_infos","treeify","asTree","apps_acted","systemdata","acted","doList","bind","isTTY","list_min","miniList","silent","dashboard_url","info_node","green","PM2_PID_FILE_PATH","global","_auto_exit","streamLogs","TRAVIS","attach","info","cyan","scale","number","addProcs","value","ex","rmProcs","end","getProcessByName","proc_number","describe","pm2_id","deepUpdate","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n'use strict';\n\nconst commander   = require('commander');\nconst fs          = require('fs');\nconst path        = require('path');\nconst eachLimit   = require('async/eachLimit');\nconst series      = require('async/series');\nconst debug       = require('debug')('pm2:cli');\nconst util        = require('util');\nconst chalk       = require('chalk');\nconst fclone      = require('fclone');\n\nvar DockerMgmt  = require('./API/ExtraMgmt/Docker.js')\nvar conf        = require('../constants.js');\nvar Client      = require('./Client');\nvar Common      = require('./Common');\nvar KMDaemon    = require('@pm2/agent/src/InteractorClient');\nvar Config      = require('./tools/Config');\nvar Modularizer = require('./API/Modules/Modularizer.js');\nvar path_structure = require('../paths.js');\nvar UX          = require('./API/UX');\nvar pkg         = require('../package.json');\nvar hf = require('./API/Modules/flagExt.js');\nvar Configuration = require('./Configuration.js');\nconst semver = require('semver')\nconst sexec = require('./tools/sexec.js')\n\nvar IMMUTABLE_MSG = chalk.bold.blue('Use --update-env to update environment variables');\n\n/**\n * Main Function to be imported\n * can be aliased to PM2\n *\n * To use it when PM2 is installed as a module:\n *\n * var PM2 = require('pm2');\n *\n * var pm2 = PM2(<opts>);\n *\n *\n * @param {Object}  opts\n * @param {String}  [opts.cwd=<current>]         override pm2 cwd for starting scripts\n * @param {String}  [opts.pm2_home=[<paths.js>]] pm2 directory for log, pids, socket files\n * @param {Boolean} [opts.independent=false]     unique PM2 instance (random pm2_home)\n * @param {Boolean} [opts.daemon_mode=true]      should be called in the same process or not\n * @param {String}  [opts.public_key=null]       pm2 plus bucket public key\n * @param {String}  [opts.secret_key=null]       pm2 plus bucket secret key\n * @param {String}  [opts.machine_name=null]     pm2 plus instance name\n */\nclass API {\n\n  constructor (opts) {\n    if (!opts) opts = {};\n    var that = this;\n\n    this.daemon_mode = typeof(opts.daemon_mode) == 'undefined' ? true : opts.daemon_mode;\n    this.pm2_home = conf.PM2_ROOT_PATH;\n    this.public_key = conf.PUBLIC_KEY || opts.public_key || null;\n    this.secret_key = conf.SECRET_KEY || opts.secret_key || null;\n    this.machine_name = conf.MACHINE_NAME || opts.machine_name || null\n\n    /**\n     * CWD resolution\n     */\n    this.cwd = process.cwd();\n    if (opts.cwd) {\n      this.cwd = path.resolve(opts.cwd);\n    }\n\n    /**\n     * PM2 HOME resolution\n     */\n    if (opts.pm2_home && opts.independent == true)\n      throw new Error('You cannot set a pm2_home and independent instance in same time');\n\n    if (opts.pm2_home) {\n      // Override default conf file\n      this.pm2_home = opts.pm2_home;\n      conf = util._extend(conf, path_structure(this.pm2_home));\n    }\n    else if (opts.independent == true && conf.IS_WINDOWS === false) {\n      // Create an unique pm2 instance\n      const crypto = require('crypto');\n      var random_file = crypto.randomBytes(8).toString('hex');\n      this.pm2_home = path.join('/tmp', random_file);\n\n      // If we dont explicitly tell to have a daemon\n      // It will go as in proc\n      if (typeof(opts.daemon_mode) == 'undefined')\n        this.daemon_mode = false;\n      conf = util._extend(conf, path_structure(this.pm2_home));\n    }\n\n    this._conf = conf;\n\n    if (conf.IS_WINDOWS) {\n      // Weird fix, may need to be dropped\n      // @todo windows connoisseur double check\n      if (process.stdout._handle && process.stdout._handle.setBlocking)\n        process.stdout._handle.setBlocking(true);\n    }\n\n    this.Client = new Client({\n      pm2_home: that.pm2_home,\n      conf: this._conf,\n      secret_key: this.secret_key,\n      public_key: this.public_key,\n      daemon_mode: this.daemon_mode,\n      machine_name: this.machine_name\n    });\n\n    this.pm2_configuration = Configuration.getSync('pm2') || {}\n\n    this.gl_interact_infos = null;\n    this.gl_is_km_linked = false;\n\n    try {\n      var pid = fs.readFileSync(conf.INTERACTOR_PID_PATH);\n      pid = parseInt(pid.toString().trim());\n      process.kill(pid, 0);\n      that.gl_is_km_linked = true;\n    } catch (e) {\n      that.gl_is_km_linked = false;\n    }\n\n    // For testing purposes\n    if (this.secret_key && process.env.NODE_ENV == 'local_test')\n      that.gl_is_km_linked = true;\n\n    KMDaemon.ping(this._conf, function(err, result) {\n      if (!err && result === true) {\n        fs.readFile(conf.INTERACTION_CONF, (err, _conf) => {\n          if (!err) {\n            try {\n              that.gl_interact_infos = JSON.parse(_conf.toString())\n            } catch(e) {\n              var json5 = require('./tools/json5.js')\n              try {\n                that.gl_interact_infos = json5.parse(_conf.toString())\n              } catch(e) {\n                console.error(e)\n                that.gl_interact_infos = null\n              }\n            }\n          }\n        })\n      }\n    })\n\n    this.gl_retry = 0;\n  }\n\n  /**\n   * Connect to PM2\n   * Calling this command is now optional\n   *\n   * @param {Function} cb callback once pm2 is ready for commands\n   */\n  connect (noDaemon, cb) {\n    var that = this;\n    this.start_timer = new Date();\n\n    if (typeof(cb) == 'undefined') {\n      cb = noDaemon;\n      noDaemon = false;\n    } else if (noDaemon === true) {\n      // Backward compatibility with PM2 1.x\n      this.Client.daemon_mode = false;\n      this.daemon_mode = false;\n    }\n\n    this.Client.start(function(err, meta) {\n      if (err)\n        return cb(err);\n\n      if (meta.new_pm2_instance == false && that.daemon_mode === true)\n        return cb(err, meta);\n\n      // If new pm2 instance has been popped\n      // Lauch all modules\n      that.launchAll(that, function(err_mod) {\n        return cb(err, meta);\n      });\n    });\n  }\n\n  /**\n   * Usefull when custom PM2 created with independent flag set to true\n   * This will cleanup the newly created instance\n   * by removing folder, killing PM2 and so on\n   *\n   * @param {Function} cb callback once cleanup is successfull\n   */\n  destroy (cb) {\n    var that = this;\n\n    debug('Killing and deleting current deamon');\n\n    this.killDaemon(function() {\n      var cmd = 'rm -rf ' + that.pm2_home;\n      var test_path = path.join(that.pm2_home, 'module_conf.json');\n      var test_path_2 = path.join(that.pm2_home, 'pm2.pid');\n\n      if (that.pm2_home.indexOf('.pm2') > -1)\n        return cb(new Error('Destroy is not a allowed method on .pm2'));\n\n      fs.access(test_path, fs.R_OK, function(err) {\n        if (err) return cb(err);\n        debug('Deleting temporary folder %s', that.pm2_home);\n        sexec(cmd, cb);\n      });\n    });\n  }\n\n  /**\n   * Disconnect from PM2 instance\n   * This will allow your software to exit by itself\n   *\n   * @param {Function} [cb] optional callback once connection closed\n   */\n  disconnect (cb) {\n    var that = this;\n\n    if (!cb) cb = function() {};\n\n    this.Client.close(function(err, data) {\n      debug('The session lasted %ds', (new Date() - that.start_timer) / 1000);\n      return cb(err, data);\n    });\n  };\n\n  /**\n   * Alias on disconnect\n   * @param cb\n   */\n  close (cb) {\n    this.disconnect(cb);\n  }\n\n  /**\n   * Launch modules\n   *\n   * @param {Function} cb callback once pm2 has launched modules\n   */\n  launchModules (cb) {\n    this.launchAll(this, cb);\n  }\n\n  /**\n   * Enable bus allowing to retrieve various process event\n   * like logs, restarts, reloads\n   *\n   * @param {Function} cb callback called with 1st param err and 2nb param the bus\n   */\n  launchBus (cb) {\n    this.Client.launchBus(cb);\n  }\n\n  /**\n   * Exit methods for API\n   * @param {Integer} code exit code for terminal\n   */\n  exitCli (code) {\n    var that = this;\n\n    // Do nothing if PM2 called programmatically (also in speedlist)\n    if (conf.PM2_PROGRAMMATIC && process.env.PM2_USAGE != 'CLI') return false;\n\n    KMDaemon.disconnectRPC(function() {\n      that.Client.close(function() {\n        code = code || 0;\n        // Safe exits process after all streams are drained.\n        // file descriptor flag.\n        var fds = 0;\n        // exits process when stdout (1) and sdterr(2) are both drained.\n        function tryToExit() {\n          if ((fds & 1) && (fds & 2)) {\n            debug('This command took %ds to execute', (new Date() - that.start_timer) / 1000);\n            process.exit(code);\n          }\n        }\n\n        [process.stdout, process.stderr].forEach(function(std) {\n          var fd = std.fd;\n          if (!std.bufferSize) {\n            // bufferSize equals 0 means current stream is drained.\n            fds = fds | fd;\n          } else {\n            // Appends nothing to the std queue, but will trigger `tryToExit` event on `drain`.\n            std.write && std.write('', function() {\n              fds = fds | fd;\n              tryToExit();\n            });\n          }\n          // Does not write anything more.\n          delete std.write;\n        });\n        tryToExit();\n      });\n    });\n  }\n\n////////////////////////////\n// Application management //\n////////////////////////////\n\n  /**\n   * Start a file or json with configuration\n   * @param {Object||String} cmd script to start or json\n   * @param {Function} cb called when application has been started\n   */\n  start (cmd, opts, cb) {\n    if (typeof(opts) == \"function\") {\n      cb = opts;\n      opts = {};\n    }\n    if (!opts) opts = {};\n\n    if (semver.lt(process.version, '6.0.0')) {\n      Common.printOut(conf.PREFIX_MSG_WARNING + 'Node 4 is deprecated, please upgrade to use pm2 to have all features');\n    }\n\n    var that = this;\n    if (util.isArray(opts.watch) && opts.watch.length === 0)\n      opts.watch = (opts.rawArgs ? !!~opts.rawArgs.indexOf('--watch') : !!~process.argv.indexOf('--watch')) || false;\n\n    if (Common.isConfigFile(cmd) || (typeof(cmd) === 'object')) {\n      that._startJson(cmd, opts, 'restartProcessId', (err, procs) => {\n        return cb ? cb(err, procs) : this.speedList()\n      })\n    }\n    else {\n      that._startScript(cmd, opts, (err, procs) => {\n        return cb ? cb(err, procs) : this.speedList(0)\n      })\n    }\n  }\n\n  /**\n   * Reset process counters\n   *\n   * @method resetMetaProcess\n   */\n  reset (process_name, cb) {\n    var that = this;\n\n    function processIds(ids, cb) {\n      eachLimit(ids, conf.CONCURRENT_ACTIONS, function(id, next) {\n        that.Client.executeRemote('resetMetaProcessId', id, function(err, res) {\n          if (err) console.error(err);\n          Common.printOut(conf.PREFIX_MSG + 'Resetting meta for process id %d', id);\n          return next();\n        });\n      }, function(err) {\n        if (err) return cb(Common.retErr(err));\n        return cb ? cb(null, {success:true}) : that.speedList();\n      });\n    }\n\n    if (process_name == 'all') {\n      that.Client.getAllProcessId(function(err, ids) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n        }\n        return processIds(ids, cb);\n      });\n    }\n    else if (isNaN(process_name)) {\n      that.Client.getProcessIdByName(process_name, function(err, ids) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n        }\n        if (ids.length === 0) {\n          Common.printError('Unknown process name');\n          return cb ? cb(new Error('Unknown process name')) : that.exitCli(conf.ERROR_EXIT);\n        }\n        return processIds(ids, cb);\n      });\n    } else {\n      processIds([process_name], cb);\n    }\n  }\n\n  /**\n   * Update daemonized PM2 Daemon\n   *\n   * @param {Function} cb callback when pm2 has been upgraded\n   */\n  update (cb) {\n    var that = this;\n\n    Common.printOut('Be sure to have the latest version by doing `npm install pm2@latest -g` before doing this procedure.');\n\n    // Dump PM2 processes\n    that.Client.executeRemote('notifyKillPM2', {}, function() {});\n\n    that.getVersion(function(err, new_version) {\n      // If not linked to PM2 plus, and update PM2 to latest, display motd.update\n      if (!that.gl_is_km_linked && !err && (pkg.version != new_version)) {\n        var dt = fs.readFileSync(path.join(__dirname, that._conf.PM2_UPDATE));\n        console.log(dt.toString());\n      }\n\n      that.dump(function(err) {\n        debug('Dumping successfull', err);\n        that.killDaemon(function() {\n          debug('------------------ Everything killed', arguments);\n          that.Client.launchDaemon({interactor:false}, function(err, child) {\n            that.Client.launchRPC(function() {\n              that.resurrect(function() {\n                Common.printOut(chalk.blue.bold('>>>>>>>>>> PM2 updated'));\n                that.launchAll(that, function() {\n                  KMDaemon.launchAndInteract(that._conf, {\n                    pm2_version: pkg.version\n                  }, function(err, data, interactor_proc) {\n                  })\n                  setTimeout(() => {\n                    return cb ? cb(null, {success:true}) : that.speedList();\n                  }, 250)\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n\n    return false;\n  }\n\n  /**\n   * Reload an application\n   *\n   * @param {String} process_name Application Name or All\n   * @param {Object} opts         Options\n   * @param {Function} cb         Callback\n   */\n  reload (process_name, opts, cb) {\n    var that = this;\n\n    if (typeof(opts) == \"function\") {\n      cb = opts;\n      opts = {};\n    }\n\n    var delay = Common.lockReload();\n    if (delay > 0 && opts.force != true) {\n      Common.printError(conf.PREFIX_MSG_ERR + 'Reload already in progress, please try again in ' + Math.floor((conf.RELOAD_LOCK_TIMEOUT - delay) / 1000) + ' seconds or use --force');\n      return cb ? cb(new Error('Reload in progress')) : that.exitCli(conf.ERROR_EXIT);\n    }\n\n    if (Common.isConfigFile(process_name))\n      that._startJson(process_name, opts, 'reloadProcessId', function(err, apps) {\n        Common.unlockReload();\n        if (err)\n          return cb ? cb(err) : that.exitCli(conf.ERROR_EXIT);\n        return cb ? cb(null, apps) : that.exitCli(conf.SUCCESS_EXIT);\n      });\n    else {\n      if (opts && opts.env) {\n        var err = 'Using --env [env] without passing the ecosystem.config.js does not work'\n        Common.err(err);\n        Common.unlockReload();\n        return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (opts && !opts.updateEnv)\n        Common.printOut(IMMUTABLE_MSG);\n\n      that._operate('reloadProcessId', process_name, opts, function(err, apps) {\n        Common.unlockReload();\n\n        if (err)\n          return cb ? cb(err) : that.exitCli(conf.ERROR_EXIT);\n        return cb ? cb(null, apps) : that.exitCli(conf.SUCCESS_EXIT);\n      });\n    }\n  }\n\n  /**\n   * Restart process\n   *\n   * @param {String} cmd   Application Name / Process id / JSON application file / 'all'\n   * @param {Object} opts  Extra options to be updated\n   * @param {Function} cb  Callback\n   */\n  restart (cmd, opts, cb) {\n    if (typeof(opts) == \"function\") {\n      cb = opts;\n      opts = {};\n    }\n    var that = this;\n\n    if (typeof(cmd) === 'number')\n      cmd = cmd.toString();\n\n    if (cmd == \"-\") {\n      // Restart from PIPED JSON\n      process.stdin.resume();\n      process.stdin.setEncoding('utf8');\n      process.stdin.on('data', function (param) {\n        process.stdin.pause();\n        that.actionFromJson('restartProcessId', param, opts, 'pipe', cb);\n      });\n    }\n    else if (Common.isConfigFile(cmd) || typeof(cmd) === 'object')\n      that._startJson(cmd, opts, 'restartProcessId', cb);\n    else {\n      if (opts && opts.env) {\n        var err = 'Using --env [env] without passing the ecosystem.config.js does not work'\n        Common.err(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n      }\n      if (opts && !opts.updateEnv)\n        Common.printOut(IMMUTABLE_MSG);\n      that._operate('restartProcessId', cmd, opts, cb);\n    }\n  }\n\n  /**\n   * Delete process\n   *\n   * @param {String} process_name Application Name / Process id / Application file / 'all'\n   * @param {Function} cb Callback\n   */\n  delete (process_name, jsonVia, cb) {\n    var that = this;\n\n    if (typeof(jsonVia) === \"function\") {\n      cb = jsonVia;\n      jsonVia = null;\n    }\n\n    if (typeof(process_name) === \"number\") {\n      process_name = process_name.toString();\n    }\n\n    if (jsonVia == 'pipe')\n      return that.actionFromJson('deleteProcessId', process_name, commander, 'pipe', (err, procs) => {\n        return cb ? cb(err, procs) : this.speedList()\n      });\n    if (Common.isConfigFile(process_name))\n      return that.actionFromJson('deleteProcessId', process_name, commander, 'file', (err, procs) => {\n        return cb ? cb(err, procs) : this.speedList()\n      });\n    else {\n      that._operate('deleteProcessId', process_name, (err, procs) => {\n        return cb ? cb(err, procs) : this.speedList()\n      });\n    }\n  }\n\n  /**\n   * Stop process\n   *\n   * @param {String} process_name Application Name / Process id / Application file / 'all'\n   * @param {Function} cb Callback\n   */\n  stop (process_name, cb) {\n    var that = this;\n\n    if (typeof(process_name) === 'number')\n      process_name = process_name.toString();\n\n    if (process_name == \"-\") {\n      process.stdin.resume();\n      process.stdin.setEncoding('utf8');\n      process.stdin.on('data', function (param) {\n        process.stdin.pause();\n        that.actionFromJson('stopProcessId', param, commander, 'pipe', (err, procs) => {\n          return cb ? cb(err, procs) : this.speedList()\n        })\n      });\n    }\n    else if (Common.isConfigFile(process_name))\n      that.actionFromJson('stopProcessId', process_name, commander, 'file', (err, procs) => {\n        return cb ? cb(err, procs) : this.speedList()\n      });\n    else\n      that._operate('stopProcessId', process_name, (err, procs) => {\n        return cb ? cb(err, procs) : this.speedList()\n      });\n  }\n\n  /**\n   * Get list of all processes managed\n   *\n   * @param {Function} cb Callback\n   */\n  list (opts, cb) {\n    var that = this;\n\n    if (typeof(opts) == 'function') {\n      cb = opts;\n      opts = null;\n    }\n\n    that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (opts && opts.rawArgs && opts.rawArgs.indexOf('--watch') > -1) {\n        var dayjs = require('dayjs');\n        function show() {\n          process.stdout.write('\\x1b[2J');\n          process.stdout.write('\\x1b[0f');\n          console.log('Last refresh: ', dayjs().format());\n          that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n            UX.list(list, null);\n          });\n        }\n\n        show();\n        setInterval(show, 900);\n        return false;\n      }\n\n      return cb ? cb(null, list) : that.speedList(null);\n    });\n  }\n\n  /**\n   * Kill Daemon\n   *\n   * @param {Function} cb Callback\n   */\n  killDaemon (cb) {\n    process.env.PM2_STATUS = 'stopping'\n\n    var that = this;\n\n    that.Client.executeRemote('notifyKillPM2', {}, function() {});\n\n    Common.printOut(conf.PREFIX_MSG + '[v] Modules Stopped');\n\n    that._operate('deleteProcessId', 'all', function(err, list) {\n      Common.printOut(conf.PREFIX_MSG + '[v] All Applications Stopped');\n      process.env.PM2_SILENT = 'false';\n\n      that.killAgent(function(err, data) {\n        if (!err) {\n          Common.printOut(conf.PREFIX_MSG + '[v] Agent Stopped');\n        }\n\n        that.Client.killDaemon(function(err, res) {\n          if (err) Common.printError(err);\n          Common.printOut(conf.PREFIX_MSG + '[v] PM2 Daemon Stopped');\n          return cb ? cb(err, res) : that.exitCli(conf.SUCCESS_EXIT);\n        });\n\n      });\n    })\n  }\n\n  kill (cb) {\n    this.killDaemon(cb);\n  }\n\n  /////////////////////\n  // Private methods //\n  /////////////////////\n\n  /**\n   * Method to START / RESTART a script\n   *\n   * @private\n   * @param {string} script script name (will be resolved according to location)\n   */\n  _startScript (script, opts, cb) {\n    if (typeof opts == \"function\") {\n      cb = opts;\n      opts = {};\n    }\n    var that = this;\n\n    /**\n     * Commander.js tricks\n     */\n    var app_conf = Config.filterOptions(opts);\n    var appConf = {};\n\n    if (typeof app_conf.name == 'function')\n      delete app_conf.name;\n\n    delete app_conf.args;\n\n    // Retrieve arguments via -- <args>\n    var argsIndex;\n\n    if (opts.rawArgs && (argsIndex = opts.rawArgs.indexOf('--')) >= 0)\n      app_conf.args = opts.rawArgs.slice(argsIndex + 1);\n    else if (opts.scriptArgs)\n      app_conf.args = opts.scriptArgs;\n\n    app_conf.script = script;\n    if(!app_conf.namespace)\n      app_conf.namespace = 'default';\n\n    if ((appConf = Common.verifyConfs(app_conf)) instanceof Error) {\n      Common.err(appConf)\n      return cb ? cb(Common.retErr(appConf)) : that.exitCli(conf.ERROR_EXIT);\n    }\n\n    app_conf = appConf[0];\n\n    if (opts.watchDelay) {\n      if (typeof opts.watchDelay === \"string\" && opts.watchDelay.indexOf(\"ms\") !== -1)\n        app_conf.watch_delay = parseInt(opts.watchDelay);\n      else {\n        app_conf.watch_delay = parseFloat(opts.watchDelay) * 1000;\n      }\n    }\n\n    var mas = [];\n    if(typeof opts.ext != 'undefined')\n      hf.make_available_extension(opts, mas); // for -e flag\n    mas.length > 0 ? app_conf.ignore_watch = mas : 0;\n\n    /**\n     * If -w option, write configuration to configuration.json file\n     */\n    if (app_conf.write) {\n      var dst_path = path.join(process.env.PWD || process.cwd(), app_conf.name + '-pm2.json');\n      Common.printOut(conf.PREFIX_MSG + 'Writing configuration to', chalk.blue(dst_path));\n      // pretty JSON\n      try {\n        fs.writeFileSync(dst_path, JSON.stringify(app_conf, null, 2));\n      } catch (e) {\n        console.error(e.stack || e);\n      }\n    }\n\n    series([\n      restartExistingProcessName,\n      restartExistingNameSpace,\n      restartExistingProcessId,\n      restartExistingProcessPathOrStartNew\n    ], function(err, data) {\n      if (err instanceof Error)\n        return cb ? cb(err) : that.exitCli(conf.ERROR_EXIT);\n\n      var ret = {};\n\n      data.forEach(function(_dt) {\n        if (_dt !== undefined)\n          ret = _dt;\n      });\n\n      return cb ? cb(null, ret) : that.speedList();\n    });\n\n    /**\n     * If start <app_name> start/restart application\n     */\n    function restartExistingProcessName(cb) {\n      if (!isNaN(script) ||\n        (typeof script === 'string' && script.indexOf('/') != -1) ||\n        (typeof script === 'string' && path.extname(script) !== ''))\n        return cb(null);\n\n        that.Client.getProcessIdByName(script, function(err, ids) {\n          if (err && cb) return cb(err);\n          if (ids.length > 0) {\n            that._operate('restartProcessId', script, opts, function(err, list) {\n              if (err) return cb(err);\n              Common.printOut(conf.PREFIX_MSG + 'Process successfully started');\n              return cb(true, list);\n            });\n          }\n          else return cb(null);\n        });\n    }\n\n    /**\n     * If start <namespace> start/restart namespace\n     */\n    function restartExistingNameSpace(cb) {\n      if (!isNaN(script) ||\n        (typeof script === 'string' && script.indexOf('/') != -1) ||\n        (typeof script === 'string' && path.extname(script) !== ''))\n        return cb(null);\n\n      if (script !== 'all') {\n        that.Client.getProcessIdsByNamespace(script, function (err, ids) {\n          if (err && cb) return cb(err);\n          if (ids.length > 0) {\n            that._operate('restartProcessId', script, opts, function (err, list) {\n              if (err) return cb(err);\n              Common.printOut(conf.PREFIX_MSG + 'Process successfully started');\n              return cb(true, list);\n            });\n          }\n          else return cb(null);\n        });\n      }\n      else {\n        that._operate('restartProcessId', 'all', function(err, list) {\n          if (err) return cb(err);\n          Common.printOut(conf.PREFIX_MSG + 'Process successfully started');\n          return cb(true, list);\n        });\n      }\n    }\n\n    function restartExistingProcessId(cb) {\n      if (isNaN(script)) return cb(null);\n\n      that._operate('restartProcessId', script, opts, function(err, list) {\n        if (err) return cb(err);\n        Common.printOut(conf.PREFIX_MSG + 'Process successfully started');\n        return cb(true, list);\n      });\n    }\n\n    /**\n     * Restart a process with the same full path\n     * Or start it\n     */\n    function restartExistingProcessPathOrStartNew(cb) {\n      that.Client.executeRemote('getMonitorData', {}, function(err, procs) {\n        if (err) return cb ? cb(new Error(err)) : that.exitCli(conf.ERROR_EXIT);\n\n        var full_path = path.resolve(that.cwd, script);\n        var managed_script = null;\n\n        procs.forEach(function(proc) {\n          if (proc.pm2_env.pm_exec_path == full_path &&\n              proc.pm2_env.name == app_conf.name)\n            managed_script = proc;\n        });\n\n        if (managed_script &&\n          (managed_script.pm2_env.status == conf.STOPPED_STATUS ||\n            managed_script.pm2_env.status == conf.STOPPING_STATUS ||\n            managed_script.pm2_env.status == conf.ERRORED_STATUS)) {\n          // Restart process if stopped\n          var app_name = managed_script.pm2_env.name;\n\n          that._operate('restartProcessId', app_name, opts, function(err, list) {\n            if (err) return cb ? cb(new Error(err)) : that.exitCli(conf.ERROR_EXIT);\n            Common.printOut(conf.PREFIX_MSG + 'Process successfully started');\n            return cb(true, list);\n          });\n          return false;\n        }\n        else if (managed_script && !opts.force) {\n          Common.err('Script already launched, add -f option to force re-execution');\n          return cb(new Error('Script already launched'));\n        }\n\n        var resolved_paths = null;\n\n        try {\n          resolved_paths = Common.resolveAppAttributes({\n            cwd      : that.cwd,\n            pm2_home : that.pm2_home\n          }, app_conf);\n        } catch(e) {\n          Common.err(e.message);\n          return cb(Common.retErr(e));\n        }\n\n        Common.printOut(conf.PREFIX_MSG + 'Starting %s in %s (%d instance' + (resolved_paths.instances > 1 ? 's' : '') + ')',\n          resolved_paths.pm_exec_path, resolved_paths.exec_mode, resolved_paths.instances);\n\n        if (!resolved_paths.env) resolved_paths.env = {};\n\n        // Set PM2 HOME in case of child process using PM2 API\n        resolved_paths.env['PM2_HOME'] = that.pm2_home;\n\n        var additional_env = Modularizer.getAdditionalConf(resolved_paths.name);\n        util._extend(resolved_paths.env, additional_env);\n\n        // Is KM linked?\n        resolved_paths.km_link = that.gl_is_km_linked;\n\n        that.Client.executeRemote('prepare', resolved_paths, function(err, data) {\n          if (err) {\n            Common.printError(conf.PREFIX_MSG_ERR + 'Error while launching application', err.stack || err);\n            return cb(Common.retErr(err));\n          }\n\n          Common.printOut(conf.PREFIX_MSG + 'Done.');\n          return cb(true, data);\n        });\n        return false;\n      });\n    }\n  }\n\n  /**\n   * Method to start/restart/reload processes from a JSON file\n   * It will start app not started\n   * Can receive only option to skip applications\n   *\n   * @private\n   */\n  _startJson (file, opts, action, pipe, cb) {\n    var config     = {};\n    var appConf    = {};\n    var staticConf = [];\n    var deployConf = {};\n    var apps_info  = [];\n    var that = this;\n\n    /**\n     * Get File configuration\n     */\n    if (typeof(cb) === 'undefined' && typeof(pipe) === 'function') {\n      cb = pipe;\n    }\n    if (typeof(file) === 'object') {\n      config = file;\n    } else if (pipe === 'pipe') {\n      config = Common.parseConfig(file, 'pipe');\n    } else {\n      var data = null;\n\n      var isAbsolute = path.isAbsolute(file)\n      var file_path = isAbsolute ? file : path.join(that.cwd, file);\n\n      debug('Resolved filepath %s', file_path);\n\n      try {\n        data = fs.readFileSync(file_path);\n      } catch(e) {\n        Common.printError(conf.PREFIX_MSG_ERR + 'File ' + file +' not found');\n        return cb ? cb(Common.retErr(e)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      try {\n        config = Common.parseConfig(data, file);\n      } catch(e) {\n        Common.printError(conf.PREFIX_MSG_ERR + 'File ' + file + ' malformated');\n        console.error(e);\n        return cb ? cb(Common.retErr(e)) : that.exitCli(conf.ERROR_EXIT);\n      }\n    }\n\n    /**\n     * Alias some optional fields\n     */\n    if (config.deploy)\n      deployConf = config.deploy;\n    if (config.static)\n      staticConf = config.static;\n    if (config.apps)\n      appConf = config.apps;\n    else if (config.pm2)\n      appConf = config.pm2;\n    else\n      appConf = config;\n    if (!Array.isArray(appConf))\n      appConf = [appConf];\n\n    if ((appConf = Common.verifyConfs(appConf)) instanceof Error)\n      return cb ? cb(appConf) : that.exitCli(conf.ERROR_EXIT);\n\n    process.env.PM2_JSON_PROCESSING = true;\n\n    // Get App list\n    var apps_name = [];\n    var proc_list = {};\n\n    // Add statics to apps\n    staticConf.forEach(function(serve) {\n      appConf.push({\n        name: serve.name ? serve.name : `static-page-server-${serve.port}`,\n        script: path.resolve(__dirname, 'API', 'Serve.js'),\n        env: {\n          PM2_SERVE_PORT: serve.port,\n          PM2_SERVE_HOST: serve.host,\n          PM2_SERVE_PATH: serve.path,\n          PM2_SERVE_SPA: serve.spa,\n          PM2_SERVE_DIRECTORY: serve.directory,\n          PM2_SERVE_BASIC_AUTH: serve.basic_auth !== undefined,\n          PM2_SERVE_BASIC_AUTH_USERNAME: serve.basic_auth ? serve.basic_auth.username : null,\n          PM2_SERVE_BASIC_AUTH_PASSWORD: serve.basic_auth ? serve.basic_auth.password : null,\n          PM2_SERVE_MONITOR: serve.monitor\n        }\n      });\n    });\n\n    // Here we pick only the field we want from the CLI when starting a JSON\n    appConf.forEach(function(app) {\n      if (!app.env) { app.env = {}; }\n      app.env.io = app.io;\n      // --only <app>\n      if (opts.only) {\n        var apps = opts.only.split(/,| /)\n        if (apps.indexOf(app.name) == -1)\n          return false\n      }\n      // Namespace\n      if (!app.namespace) {\n        if (opts.namespace)\n          app.namespace = opts.namespace;\n        else\n          app.namespace = 'default';\n      }\n      // --watch\n      if (!app.watch && opts.watch && opts.watch === true)\n        app.watch = true;\n      // --ignore-watch\n      if (!app.ignore_watch && opts.ignore_watch)\n        app.ignore_watch = opts.ignore_watch;\n      if (opts.install_url)\n        app.install_url = opts.install_url;\n      // --instances <nb>\n      if (opts.instances && typeof(opts.instances) === 'number')\n        app.instances = opts.instances;\n      // --uid <user>\n      if (opts.uid)\n        app.uid = opts.uid;\n      // --gid <user>\n      if (opts.gid)\n        app.gid = opts.gid;\n      // Specific\n      if (app.append_env_to_name && opts.env)\n        app.name += ('-' + opts.env);\n      if (opts.name_prefix && app.name.indexOf(opts.name_prefix) == -1)\n        app.name = `${opts.name_prefix}:${app.name}`\n\n      app.username = Common.getCurrentUsername();\n      apps_name.push(app.name);\n    });\n\n    that.Client.executeRemote('getMonitorData', {}, function(err, raw_proc_list) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      /**\n       * Uniquify in memory process list\n       */\n      raw_proc_list.forEach(function(proc) {\n        proc_list[proc.name] = proc;\n      });\n\n      /**\n       * Auto detect application already started\n       * and act on them depending on action\n       */\n      eachLimit(Object.keys(proc_list), conf.CONCURRENT_ACTIONS, function(proc_name, next) {\n        // Skip app name (--only option)\n        if (apps_name.indexOf(proc_name) == -1)\n          return next();\n\n        if (!(action == 'reloadProcessId' ||\n            action == 'softReloadProcessId' ||\n            action == 'restartProcessId'))\n          throw new Error('Wrong action called');\n\n        var apps = appConf.filter(function(app) {\n          return app.name == proc_name;\n        });\n\n        var envs = apps.map(function(app){\n          // Binds env_diff to env and returns it.\n          return Common.mergeEnvironmentVariables(app, opts.env, deployConf);\n        });\n\n        // Assigns own enumerable properties of all\n        // Notice: if people use the same name in different apps,\n        //         duplicated envs will be overrode by the last one\n        var env = envs.reduce(function(e1, e2){\n          return util._extend(e1, e2);\n        });\n\n        // When we are processing JSON, allow to keep the new env by default\n        env.updateEnv = true;\n\n        // Pass `env` option\n        that._operate(action, proc_name, env, function(err, ret) {\n          if (err) Common.printError(err);\n\n          // For return\n          apps_info = apps_info.concat(ret);\n\n          that.Client.notifyGod(action, proc_name);\n          // And Remove from array to spy\n          apps_name.splice(apps_name.indexOf(proc_name), 1);\n          return next();\n        });\n\n      }, function(err) {\n        if (err) return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n        if (apps_name.length > 0 && action != 'start')\n          Common.printOut(conf.PREFIX_MSG_WARNING + 'Applications %s not running, starting...', apps_name.join(', '));\n        // Start missing apps\n        return startApps(apps_name, function(err, apps) {\n          apps_info = apps_info.concat(apps);\n          return cb ? cb(err, apps_info) : that.speedList(err ? 1 : 0);\n        });\n      });\n      return false;\n    });\n\n    function startApps(app_name_to_start, cb) {\n      var apps_to_start = [];\n      var apps_started = [];\n      var apps_errored = [];\n\n      appConf.forEach(function(app, i) {\n        if (app_name_to_start.indexOf(app.name) != -1) {\n          apps_to_start.push(appConf[i]);\n        }\n      });\n\n      eachLimit(apps_to_start, conf.CONCURRENT_ACTIONS, function(app, next) {\n        if (opts.cwd)\n          app.cwd = opts.cwd;\n        if (opts.force_name)\n          app.name = opts.force_name;\n        if (opts.started_as_module)\n          app.pmx_module = true;\n\n        var resolved_paths = null;\n\n        // hardcode script name to use `serve` feature inside a process file\n        if (app.script === 'serve') {\n          app.script = path.resolve(__dirname, 'API', 'Serve.js')\n        }\n\n        try {\n          resolved_paths = Common.resolveAppAttributes({\n            cwd      : that.cwd,\n            pm2_home : that.pm2_home\n          }, app);\n        } catch (e) {\n          apps_errored.push(e)\n          Common.err(`Error: ${e.message}`)\n          return next();\n        }\n\n        if (!resolved_paths.env) resolved_paths.env = {};\n\n        // Set PM2 HOME in case of child process using PM2 API\n        resolved_paths.env['PM2_HOME'] = that.pm2_home;\n\n        var additional_env = Modularizer.getAdditionalConf(resolved_paths.name);\n        util._extend(resolved_paths.env, additional_env);\n\n        resolved_paths.env = Common.mergeEnvironmentVariables(resolved_paths, opts.env, deployConf);\n\n        delete resolved_paths.env.current_conf;\n\n        // Is KM linked?\n        resolved_paths.km_link = that.gl_is_km_linked;\n\n        if (resolved_paths.wait_ready) {\n          Common.warn(`App ${resolved_paths.name} has option 'wait_ready' set, waiting for app to be ready...`)\n        }\n        that.Client.executeRemote('prepare', resolved_paths, function(err, data) {\n          if (err) {\n            Common.printError(conf.PREFIX_MSG_ERR + 'Process failed to launch %s', err.message ? err.message : err);\n            return next();\n          }\n          if (data.length === 0) {\n            Common.printError(conf.PREFIX_MSG_ERR + 'Process config loading failed', data);\n            return next();\n          }\n\n          Common.printOut(conf.PREFIX_MSG + 'App [%s] launched (%d instances)', data[0].pm2_env.name, data.length);\n          apps_started = apps_started.concat(data);\n          next();\n        });\n\n      }, function(err) {\n        var final_error = err || apps_errored.length > 0 ? apps_errored : null\n        return cb ? cb(final_error, apps_started) : that.speedList();\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Apply a RPC method on the json file\n   * @private\n   * @method actionFromJson\n   * @param {string} action RPC Method\n   * @param {object} options\n   * @param {string|object} file file\n   * @param {string} jsonVia action type (=only 'pipe' ?)\n   * @param {Function}\n   */\n  actionFromJson (action, file, opts, jsonVia, cb) {\n    var appConf = {};\n    var ret_processes = [];\n    var that = this;\n\n    //accept programmatic calls\n    if (typeof file == 'object') {\n      cb = typeof jsonVia == 'function' ? jsonVia : cb;\n      appConf = file;\n    }\n    else if (jsonVia == 'file') {\n      var data = null;\n\n      try {\n        data = fs.readFileSync(file);\n      } catch(e) {\n        Common.printError(conf.PREFIX_MSG_ERR + 'File ' + file +' not found');\n        return cb ? cb(Common.retErr(e)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      try {\n        appConf = Common.parseConfig(data, file);\n      } catch(e) {\n        Common.printError(conf.PREFIX_MSG_ERR + 'File ' + file + ' malformated');\n        console.error(e);\n        return cb ? cb(Common.retErr(e)) : that.exitCli(conf.ERROR_EXIT);\n      }\n    } else if (jsonVia == 'pipe') {\n      appConf = Common.parseConfig(file, 'pipe');\n    } else {\n      Common.printError('Bad call to actionFromJson, jsonVia should be one of file, pipe');\n      return that.exitCli(conf.ERROR_EXIT);\n    }\n\n    // Backward compatibility\n    if (appConf.apps)\n      appConf = appConf.apps;\n\n    if (!Array.isArray(appConf))\n      appConf = [appConf];\n\n    if ((appConf = Common.verifyConfs(appConf)) instanceof Error)\n      return cb ? cb(appConf) : that.exitCli(conf.ERROR_EXIT);\n\n    eachLimit(appConf, conf.CONCURRENT_ACTIONS, function(proc, next1) {\n      var name = '';\n      var new_env;\n\n      if (!proc.name)\n        name = path.basename(proc.script);\n      else\n        name = proc.name;\n\n      if (opts.only && opts.only != name)\n        return process.nextTick(next1);\n\n      if (opts && opts.env)\n        new_env = Common.mergeEnvironmentVariables(proc, opts.env);\n      else\n        new_env = Common.mergeEnvironmentVariables(proc);\n\n      that.Client.getProcessIdByName(name, function(err, ids) {\n        if (err) {\n          Common.printError(err);\n          return next1();\n        }\n        if (!ids) return next1();\n\n        eachLimit(ids, conf.CONCURRENT_ACTIONS, function(id, next2) {\n          var opts = {};\n\n          //stopProcessId could accept options to?\n          if (action == 'restartProcessId') {\n            opts = {id : id, env : new_env};\n          } else {\n            opts = id;\n          }\n\n          that.Client.executeRemote(action, opts, function(err, res) {\n            ret_processes.push(res);\n            if (err) {\n              Common.printError(err);\n              return next2();\n            }\n\n            if (action == 'restartProcessId') {\n              that.Client.notifyGod('restart', id);\n            } else if (action == 'deleteProcessId') {\n              that.Client.notifyGod('delete', id);\n            } else if (action == 'stopProcessId') {\n              that.Client.notifyGod('stop', id);\n            }\n\n            Common.printOut(conf.PREFIX_MSG + '[%s](%d) \\u2713', name, id);\n            return next2();\n          });\n        }, function(err) {\n          return next1(null, ret_processes);\n        });\n      });\n    }, function(err) {\n      if (cb) return cb(null, ret_processes);\n      else return that.speedList();\n    });\n  }\n\n\n  /**\n   * Main function to operate with PM2 daemon\n   *\n   * @param {String} action_name  Name of action (restartProcessId, deleteProcessId, stopProcessId)\n   * @param {String} process_name can be 'all', a id integer or process name\n   * @param {Object} envs         object with CLI options / environment\n   */\n  _operate (action_name, process_name, envs, cb) {\n    var that = this;\n    var update_env = false;\n    var ret = [];\n\n    // Make sure all options exist\n    if (!envs)\n      envs = {};\n\n    if (typeof(envs) == 'function'){\n      cb = envs;\n      envs = {};\n    }\n\n    // Set via env.update (JSON processing)\n    if (envs.updateEnv === true)\n      update_env = true;\n\n    var concurrent_actions = envs.parallel || conf.CONCURRENT_ACTIONS;\n\n    if (!process.env.PM2_JSON_PROCESSING || envs.commands) {\n      envs = that._handleAttributeUpdate(envs);\n    }\n\n    /**\n     * Set current updated configuration if not passed\n     */\n    if (!envs.current_conf) {\n      var _conf = fclone(envs);\n      envs = {\n        current_conf : _conf\n      }\n\n      // Is KM linked?\n      envs.current_conf.km_link = that.gl_is_km_linked;\n    }\n\n    /**\n     * Operate action on specific process id\n     */\n    function processIds(ids, cb) {\n      Common.printOut(conf.PREFIX_MSG + 'Applying action %s on app [%s](ids: %s)', action_name, process_name, ids);\n\n      if (ids.length <= 2)\n        concurrent_actions = 1;\n\n      if (action_name == 'deleteProcessId')\n        concurrent_actions = 10;\n\n      eachLimit(ids, concurrent_actions, function(id, next) {\n        var opts;\n\n        // These functions need extra param to be passed\n        if (action_name == 'restartProcessId' ||\n          action_name == 'reloadProcessId' ||\n          action_name == 'softReloadProcessId') {\n          var new_env = {};\n\n          if (update_env === true) {\n            if (conf.PM2_PROGRAMMATIC == true)\n              new_env = Common.safeExtend({}, process.env);\n            else\n              new_env = util._extend({}, process.env);\n\n            Object.keys(envs).forEach(function(k) {\n              new_env[k] = envs[k];\n            });\n          }\n          else {\n            new_env = envs;\n          }\n\n          opts = {\n            id  : id,\n            env : new_env\n          };\n        }\n        else {\n          opts = id;\n        }\n\n        that.Client.executeRemote(action_name, opts, function(err, res) {\n          if (err) {\n            Common.printError(conf.PREFIX_MSG_ERR + 'Process %s not found', id);\n            return next(`Process ${id} not found`);\n          }\n\n          if (action_name == 'restartProcessId') {\n            that.Client.notifyGod('restart', id);\n          } else if (action_name == 'deleteProcessId') {\n            that.Client.notifyGod('delete', id);\n          } else if (action_name == 'stopProcessId') {\n            that.Client.notifyGod('stop', id);\n          } else if (action_name == 'reloadProcessId') {\n            that.Client.notifyGod('reload', id);\n          } else if (action_name == 'softReloadProcessId') {\n            that.Client.notifyGod('graceful reload', id);\n          }\n\n          if (!Array.isArray(res))\n            res = [res];\n\n          // Filter return\n          res.forEach(function(proc) {\n            Common.printOut(conf.PREFIX_MSG + '[%s](%d) \\u2713', proc.pm2_env ? proc.pm2_env.name : process_name, id);\n\n            if (action_name == 'stopProcessId' && proc.pm2_env && proc.pm2_env.cron_restart) {\n              Common.warn(`App ${chalk.bold(proc.pm2_env.name)} stopped but CRON RESTART is still UP ${proc.pm2_env.cron_restart}`)\n            }\n\n            if (!proc.pm2_env) return false;\n\n            ret.push({\n              name         : proc.pm2_env.name,\n              namespace: proc.pm2_env.namespace,\n              pm_id        : proc.pm2_env.pm_id,\n              status       : proc.pm2_env.status,\n              restart_time : proc.pm2_env.restart_time,\n              pm2_env : {\n                name         : proc.pm2_env.name,\n                namespace: proc.pm2_env.namespace,\n                pm_id        : proc.pm2_env.pm_id,\n                status       : proc.pm2_env.status,\n                restart_time : proc.pm2_env.restart_time,\n                env          : proc.pm2_env.env\n              }\n            });\n          });\n\n          return next();\n        });\n      }, function(err) {\n        if (err) return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n        return cb ? cb(null, ret) : that.speedList();\n      });\n    }\n\n    if (process_name == 'all') {\n      // When using shortcuts like 'all', do not delete modules\n      var fn\n\n      if (process.env.PM2_STATUS == 'stopping')\n        that.Client.getAllProcessId(function(err, ids) {\n          reoperate(err, ids)\n        });\n      else\n        that.Client.getAllProcessIdWithoutModules(function(err, ids) {\n          reoperate(err, ids)\n        });\n\n      function reoperate(err, ids) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n        }\n        if (!ids || ids.length === 0) {\n          Common.printError(conf.PREFIX_MSG_WARNING + 'No process found');\n          return cb ? cb(new Error('process name not found')) : that.exitCli(conf.ERROR_EXIT);\n        }\n        return processIds(ids, cb);\n      }\n    }\n    // operate using regex\n    else if (isNaN(process_name) && process_name[0] === '/' && process_name[process_name.length - 1] === '/') {\n      var regex = new RegExp(process_name.replace(/\\//g, ''));\n\n      that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n        if (err) {\n          Common.printError('Error retrieving process list: ' + err);\n          return cb(err);\n        }\n        var found_proc = [];\n        list.forEach(function(proc) {\n          if (regex.test(proc.pm2_env.name)) {\n            found_proc.push(proc.pm_id);\n          }\n        });\n\n        if (found_proc.length === 0) {\n          Common.printError(conf.PREFIX_MSG_WARNING + 'No process found');\n          return cb ? cb(new Error('process name not found')) : that.exitCli(conf.ERROR_EXIT);\n        }\n\n        return processIds(found_proc, cb);\n      });\n    }\n    else if (isNaN(process_name)) {\n      /**\n       * We can not stop or delete a module but we can restart it\n       * to refresh configuration variable\n       */\n      var allow_module_restart = action_name == 'restartProcessId' ? true : false;\n\n      that.Client.getProcessIdByName(process_name, allow_module_restart, function (err, ids) {\n        if (err) {\n          Common.printError(err);\n          return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n        }\n        if (ids && ids.length > 0) {\n          /**\n         * Determine if the process to restart is a module\n         * if yes load configuration variables and merge with the current environment\n         */\n          var additional_env = Modularizer.getAdditionalConf(process_name);\n          util._extend(envs, additional_env);\n          return processIds(ids, cb);\n        }\n\n        that.Client.getProcessIdsByNamespace(process_name, allow_module_restart, function (err, ns_process_ids) {\n          if (err) {\n            Common.printError(err);\n            return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n          }\n          if (!ns_process_ids || ns_process_ids.length === 0) {\n            Common.printError(conf.PREFIX_MSG_ERR + 'Process or Namespace %s not found', process_name);\n            return cb ? cb(new Error('process or namespace not found')) : that.exitCli(conf.ERROR_EXIT);\n          }\n\n          /**\n           * Determine if the process to restart is a module\n           * if yes load configuration variables and merge with the current environment\n           */\n          var ns_additional_env = Modularizer.getAdditionalConf(process_name);\n          util._extend(envs, ns_additional_env);\n          return processIds(ns_process_ids, cb);\n        });\n      });\n    } else {\n      if (that.pm2_configuration.docker == \"true\" ||\n          that.pm2_configuration.docker == true) {\n        // Docker/Systemd process interaction detection\n        that.Client.executeRemote('getMonitorData', {}, (err, proc_list) => {\n          var higher_id = 0\n          proc_list.forEach(p => { p.pm_id > higher_id ? higher_id = p.pm_id : null })\n\n          // Is Docker/Systemd\n          if (process_name > higher_id)\n            return DockerMgmt.processCommand(that, higher_id, process_name, action_name, (err) => {\n              if (err) {\n                Common.printError(conf.PREFIX_MSG_ERR + (err.message ? err.message : err));\n                return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n              }\n\n              return cb ? cb(null, ret) : that.speedList();\n            })\n\n          // Check if application name as number is an app name\n          that.Client.getProcessIdByName(process_name, function(err, ids) {\n            if (ids.length > 0)\n              return processIds(ids, cb);\n\n            // Check if application name as number is an namespace\n            that.Client.getProcessIdsByNamespace(process_name, function(err, ns_process_ids) {\n              if (ns_process_ids.length > 0)\n                return processIds(ns_process_ids, cb);\n              // Else operate on pm id\n              return processIds([process_name], cb);\n            });\n          });\n        })\n      }\n      else {\n        // Check if application name as number is an app name\n        that.Client.getProcessIdByName(process_name, function(err, ids) {\n          if (ids.length > 0)\n            return processIds(ids, cb);\n\n          // Check if application name as number is an namespace\n          that.Client.getProcessIdsByNamespace(process_name, function(err, ns_process_ids) {\n            if (ns_process_ids.length > 0)\n              return processIds(ns_process_ids, cb);\n            // Else operate on pm id\n            return processIds([process_name], cb);\n          });\n        });\n      }\n    }\n  }\n\n  /**\n   * Converts CamelCase Commander.js arguments\n   * to Underscore\n   * (nodeArgs -> node_args)\n   */\n  _handleAttributeUpdate (opts) {\n    var conf = Config.filterOptions(opts);\n    var that = this;\n\n    if (typeof(conf.name) != 'string')\n      delete conf.name;\n\n    var argsIndex = 0;\n    if (opts.rawArgs && (argsIndex = opts.rawArgs.indexOf('--')) >= 0) {\n      conf.args = opts.rawArgs.slice(argsIndex + 1);\n    }\n\n    var appConf = Common.verifyConfs(conf)[0];\n\n    if (appConf instanceof Error) {\n      Common.printError('Error while transforming CamelCase args to underscore');\n      return appConf;\n    }\n\n    if (argsIndex == -1)\n      delete appConf.args;\n    if (appConf.name == 'undefined')\n      delete appConf.name;\n\n    delete appConf.exec_mode;\n\n    if (util.isArray(appConf.watch) && appConf.watch.length === 0) {\n      if (!~opts.rawArgs.indexOf('--watch'))\n        delete appConf.watch\n    }\n\n    // Options set via environment variables\n    if (process.env.PM2_DEEP_MONITORING)\n      appConf.deep_monitoring = true;\n\n    // Force deletion of defaults values set by commander\n    // to avoid overriding specified configuration by user\n    if (appConf.treekill === true)\n      delete appConf.treekill;\n    if (appConf.pmx === true)\n      delete appConf.pmx;\n    if (appConf.vizion === true)\n      delete appConf.vizion;\n    if (appConf.automation === true)\n      delete appConf.automation;\n    if (appConf.autorestart === true)\n      delete appConf.autorestart;\n\n    return appConf;\n  }\n\n  getProcessIdByName (name, cb) {\n    var that = this;\n\n    this.Client.getProcessIdByName(name, function(err, id) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n      }\n      console.log(id);\n      return cb ? cb(null, id) : that.exitCli(conf.SUCCESS_EXIT);\n    });\n  }\n\n  /**\n   * Description\n   * @method jlist\n   * @param {} debug\n   * @return\n   */\n  jlist (debug) {\n    var that = this;\n\n    that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n      if (err) {\n        Common.printError(err);\n        return that.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (debug) {\n        process.stdout.write(util.inspect(list, false, null, false));\n      }\n      else {\n        process.stdout.write(JSON.stringify(list));\n      }\n\n      that.exitCli(conf.SUCCESS_EXIT);\n\n    });\n  }\n\n  /**\n   * Display system information\n   * @method slist\n   * @return\n   */\n  slist (tree) {\n    this.Client.executeRemote('getSystemData', {}, (err, sys_infos) => {\n      if (err) {\n        Common.err(err)\n        return this.exitCli(conf.ERROR_EXIT)\n      }\n\n      if (tree === true) {\n        var treeify = require('./tools/treeify.js')\n        console.log(treeify.asTree(sys_infos, true))\n      }\n      else\n        process.stdout.write(util.inspect(sys_infos, false, null, false))\n      this.exitCli(conf.SUCCESS_EXIT)\n    })\n  }\n\n  /**\n   * Description\n   * @method speedList\n   * @return\n   */\n  speedList (code, apps_acted) {\n    var that = this;\n    var systemdata = null\n    var acted = []\n\n    if ((code != 0 && code != null)) {\n      return that.exitCli(code ? code : conf.SUCCESS_EXIT);\n    }\n\n    if (apps_acted && apps_acted.length > 0) {\n      apps_acted.forEach(proc => {\n        acted.push(proc.pm2_env ? proc.pm2_env.pm_id : proc.pm_id)\n      })\n    }\n\n    // Do nothing if PM2 called programmatically and not called from CLI (also in exitCli)\n    if ((conf.PM2_PROGRAMMATIC && process.env.PM2_USAGE != 'CLI'))\n      return false;\n\n    return that.Client.executeRemote('getSystemData', {}, (err, sys_infos) => {\n      that.Client.executeRemote('getMonitorData', {}, (err, proc_list) => {\n        doList(err, proc_list, sys_infos)\n      })\n    })\n\n    function doList(err, list, sys_infos) {\n      if (err) {\n        if (that.gl_retry == 0) {\n          that.gl_retry += 1;\n          return setTimeout(that.speedList.bind(that), 1400);\n        }\n        console.error('Error retrieving process list: %s.\\nA process seems to be on infinite loop, retry in 5 seconds',err);\n        return that.exitCli(conf.ERROR_EXIT);\n      }\n      if (process.stdout.isTTY === false) {\n        UX.list_min(list);\n      }\n      else if (commander.miniList && !commander.silent)\n        UX.list_min(list);\n      else if (!commander.silent) {\n        if (that.gl_interact_infos) {\n          var dashboard_url = `https://app.pm2.io/#/r/${that.gl_interact_infos.public_key}`\n\n          if (that.gl_interact_infos.info_node != 'https://root.keymetrics.io') {\n            dashboard_url = `${that.gl_interact_infos.info_node}/#/r/${that.gl_interact_infos.public_key}`\n          }\n\n          Common.printOut('%s PM2+ activated | Instance Name: %s | Dash: %s',\n                          chalk.green.bold('⇆'),\n                          chalk.bold(that.gl_interact_infos.machine_name),\n                          chalk.bold(dashboard_url))\n        }\n        UX.list(list, sys_infos);\n        //Common.printOut(chalk.white.italic(' Use `pm2 show <id|name>` to get more details about an app'));\n      }\n\n      if (that.Client.daemon_mode == false) {\n        Common.printOut('[--no-daemon] Continue to stream logs');\n        Common.printOut('[--no-daemon] Exit on target PM2 exit pid=' + fs.readFileSync(conf.PM2_PID_FILE_PATH).toString());\n        global._auto_exit = true;\n        return that.streamLogs('all', 0, false, 'HH:mm:ss', false);\n      }\n      // if (process.stdout.isTTY) if looking for start logs\n      else if (!process.env.TRAVIS && process.env.NODE_ENV != 'test' && acted.length > 0 && (commander.attach === true)) {\n        Common.info(`Log streaming apps id: ${chalk.cyan(acted.join(' '))}, exit with Ctrl-C or will exit in 10secs`)\n\n        // setTimeout(() => {\n        //   Common.info(`Log streaming exited automatically, run 'pm2 logs' to continue watching logs`)\n        //   return that.exitCli(code ? code : conf.SUCCESS_EXIT);\n        // }, 10000)\n\n        return acted.forEach((proc_name) => {\n          that.streamLogs(proc_name, 0, false, null, false);\n        })\n      }\n      else {\n        return that.exitCli(code ? code : conf.SUCCESS_EXIT);\n      }\n    }\n  }\n\n  /**\n   * Scale up/down a process\n   * @method scale\n   */\n  scale (app_name, number, cb) {\n    var that = this;\n\n    function addProcs(proc, value, cb) {\n      (function ex(proc, number) {\n        if (number-- === 0) return cb();\n        Common.printOut(conf.PREFIX_MSG + 'Scaling up application');\n        that.Client.executeRemote('duplicateProcessId', proc.pm2_env.pm_id, ex.bind(this, proc, number));\n      })(proc, number);\n    }\n\n    function rmProcs(procs, value, cb) {\n      var i = 0;\n\n      (function ex(procs, number) {\n        if (number++ === 0) return cb();\n        that._operate('deleteProcessId', procs[i++].pm2_env.pm_id, ex.bind(this, procs, number));\n      })(procs, number);\n    }\n\n    function end() {\n      return cb ? cb(null, {success:true}) : that.speedList();\n    }\n\n    this.Client.getProcessByName(app_name, function(err, procs) {\n      if (err) {\n        Common.printError(err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (!procs || procs.length === 0) {\n        Common.printError(conf.PREFIX_MSG_ERR + 'Application %s not found', app_name);\n        return cb ? cb(new Error('App not found')) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      var proc_number = procs.length;\n\n      if (typeof(number) === 'string' && number.indexOf('+') >= 0) {\n        number = parseInt(number, 10);\n        return addProcs(procs[0], number, end);\n      }\n      else if (typeof(number) === 'string' && number.indexOf('-') >= 0) {\n        number = parseInt(number, 10);\n        return rmProcs(procs[0], number, end);\n      }\n      else {\n        number = parseInt(number, 10);\n        number = number - proc_number;\n\n        if (number < 0)\n          return rmProcs(procs, number, end);\n        else if (number > 0)\n          return addProcs(procs[0], number, end);\n        else {\n          Common.printError(conf.PREFIX_MSG_ERR + 'Nothing to do');\n          return cb ? cb(new Error('Same process number')) : that.exitCli(conf.ERROR_EXIT);\n        }\n      }\n    });\n  }\n\n  /**\n   * Description\n   * @method describeProcess\n   * @param {} pm2_id\n   * @return\n   */\n  describe (pm2_id, cb) {\n    var that = this;\n\n    var found_proc = [];\n\n    that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n      if (err) {\n        Common.printError('Error retrieving process list: ' + err);\n        that.exitCli(conf.ERROR_EXIT);\n      }\n\n      list.forEach(function(proc) {\n        if ((!isNaN(pm2_id)    && proc.pm_id == pm2_id) ||\n          (typeof(pm2_id) === 'string' && proc.name  == pm2_id)) {\n          found_proc.push(proc);\n        }\n      });\n\n      if (found_proc.length === 0) {\n        Common.printError(conf.PREFIX_MSG_WARNING + '%s doesn\\'t exist', pm2_id);\n        return cb ? cb(null, []) : that.exitCli(conf.ERROR_EXIT);\n      }\n\n      if (!cb) {\n        found_proc.forEach(function(proc) {\n          UX.describe(proc);\n        });\n      }\n\n      return cb ? cb(null, found_proc) : that.exitCli(conf.SUCCESS_EXIT);\n    });\n  }\n\n  /**\n   * API method to perform a deep update of PM2\n   * @method deepUpdate\n   */\n  deepUpdate (cb) {\n    var that = this;\n\n    Common.printOut(conf.PREFIX_MSG + 'Updating PM2...');\n\n    var child = sexec(\"npm i -g pm2@latest; pm2 update\");\n\n    child.stdout.on('end', function() {\n      Common.printOut(conf.PREFIX_MSG + 'PM2 successfully updated');\n      cb ? cb(null, {success:true}) : that.exitCli(conf.SUCCESS_EXIT);\n    });\n  }\n};\n\n\n//////////////////////////\n// Load all API methods //\n//////////////////////////\n\nrequire('./API/Extra.js')(API);\nrequire('./API/Deploy.js')(API);\nrequire('./API/Modules/index.js')(API);\n\nrequire('./API/pm2-plus/link.js')(API);\nrequire('./API/pm2-plus/process-selector.js')(API);\nrequire('./API/pm2-plus/helpers.js')(API);\n\nrequire('./API/Configuration.js')(API);\nrequire('./API/Version.js')(API);\nrequire('./API/Startup.js')(API);\nrequire('./API/LogManagement.js')(API);\nrequire('./API/Containerizer.js')(API);\n\n\nmodule.exports = API;\n"]},"metadata":{},"sourceType":"script"}