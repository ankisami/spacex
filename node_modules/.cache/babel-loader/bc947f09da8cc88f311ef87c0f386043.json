{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n'use strict';\n/**\n * @file Utilities for PM2\n * @author Alexandre Strzelewicz <as@unitech.io>\n * @project PM2\n */\n\nvar p = require('path');\n\nvar treekill = require('../TreeKill');\n\nvar cst = require('../../constants.js');\n/**\n * Description\n * @method exports\n * @param {} God\n * @return\n */\n\n\nmodule.exports = function (God) {\n  /**\n   * Description\n   * @method logAndGenerateError\n   * @param {} err\n   * @return NewExpression\n   */\n  God.logAndGenerateError = function (err) {\n    // Is an Error object\n    if (err instanceof Error) {\n      console.trace(err);\n      return err;\n    } // Is a JSON or simple string\n\n\n    console.error(err);\n    return new Error(err);\n  };\n  /**\n   * Utility functions\n   * @method getProcesses\n   * @return MemberExpression\n   */\n\n\n  God.getProcesses = function () {\n    return God.clusters_db;\n  };\n\n  God.getFormatedProcess = function getFormatedProcesses(id) {\n    if (God.clusters_db[id]) return {\n      pid: God.clusters_db[id].process.pid,\n      name: God.clusters_db[id].pm2_env.name,\n      pm2_env: God.clusters_db[id].pm2_env,\n      pm_id: God.clusters_db[id].pm2_env.pm_id\n    };\n    return {};\n  };\n  /**\n   * Get formated processes\n   * @method getFormatedProcesses\n   * @return {Array} formated processes\n   */\n\n\n  God.getFormatedProcesses = function getFormatedProcesses() {\n    var keys = Object.keys(God.clusters_db);\n    var arr = new Array();\n    var kl = keys.length;\n\n    for (var i = 0; i < kl; i++) {\n      var key = keys[i];\n      if (!God.clusters_db[key]) continue; // Avoid _old type pm_ids\n\n      if (isNaN(God.clusters_db[key].pm2_env.pm_id)) continue;\n      arr.push({\n        pid: God.clusters_db[key].process.pid,\n        name: God.clusters_db[key].pm2_env.name,\n        pm2_env: God.clusters_db[key].pm2_env,\n        pm_id: God.clusters_db[key].pm2_env.pm_id\n      });\n    }\n\n    return arr;\n  };\n  /**\n   * Description\n   * @method findProcessById\n   * @param {} id\n   * @return ConditionalExpression\n   */\n\n\n  God.findProcessById = function findProcessById(id) {\n    return God.clusters_db[id] ? God.clusters_db[id] : null;\n  };\n  /**\n   * Description\n   * @method findByName\n   * @param {} name\n   * @return arr\n   */\n\n\n  God.findByName = function (name) {\n    var db = God.clusters_db;\n    var arr = [];\n\n    if (name == 'all') {\n      for (var key in db) {\n        // Avoid _old_proc process style\n        if (typeof God.clusters_db[key].pm2_env.pm_id === 'number') arr.push(db[key]);\n      }\n\n      return arr;\n    }\n\n    for (var key in db) {\n      if (God.clusters_db[key].pm2_env.name == name || God.clusters_db[key].pm2_env.pm_exec_path == p.resolve(name)) {\n        arr.push(db[key]);\n      }\n    }\n\n    return arr;\n  };\n  /**\n   * Check if a process is alive in system processes\n   * Return TRUE if process online\n   * @method checkProcess\n   * @param {} pid\n   * @return\n   */\n\n\n  God.checkProcess = function (pid) {\n    if (!pid) return false;\n\n    try {\n      // Sending 0 signal do not kill the process\n      process.kill(pid, 0);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n  /**\n   * Description\n   * @method processIsDead\n   * @param {} pid\n   * @param {} cb\n   * @return Literal\n   */\n\n\n  God.processIsDead = function (pid, pm2_env, cb, sigkill) {\n    if (!pid) return cb({\n      type: 'param:missing',\n      msg: 'no pid passed'\n    });\n    var timeout = null;\n    var kill_timeout = pm2_env && pm2_env.kill_timeout ? pm2_env.kill_timeout : cst.KILL_TIMEOUT;\n    var mode = pm2_env.exec_mode;\n    var timer = setInterval(function () {\n      if (God.checkProcess(pid) === false) {\n        console.log('pid=%d msg=process killed', pid);\n        clearTimeout(timeout);\n        clearInterval(timer);\n        return cb(null, true);\n      }\n\n      console.log('pid=%d msg=failed to kill - retrying in %dms', pid, pm2_env.kill_retry_time);\n      return false;\n    }, pm2_env.kill_retry_time);\n    timeout = setTimeout(function () {\n      clearInterval(timer);\n\n      if (sigkill) {\n        console.log('Process with pid %d could not be killed', pid);\n        return cb({\n          type: 'timeout',\n          msg: 'timeout'\n        });\n      } else {\n        console.log('Process with pid %d still alive after %sms, sending it SIGKILL now...', pid, kill_timeout);\n\n        if (pm2_env.treekill !== true) {\n          try {\n            process.kill(parseInt(pid), 'SIGKILL');\n          } catch (e) {\n            console.error('[SimpleKill][SIGKILL] %s pid can not be killed', pid, e.stack, e.message);\n          }\n\n          return God.processIsDead(pid, pm2_env, cb, true);\n        } else {\n          treekill(parseInt(pid), 'SIGKILL', function (err) {\n            return God.processIsDead(pid, pm2_env, cb, true);\n          });\n        }\n      }\n    }, kill_timeout);\n    return false;\n  };\n  /**\n   * Description\n   * @method killProcess\n   * @param int pid\n   * @param Object pm2_env\n   * @param function cb\n   * @return CallExpression\n   */\n\n\n  God.killProcess = function (pid, pm2_env, cb) {\n    if (!pid) return cb({\n      msg: 'no pid passed or null'\n    });\n\n    if (typeof pm2_env.pm_id === 'number' && (cst.KILL_USE_MESSAGE || pm2_env.shutdown_with_message == true)) {\n      var proc = God.clusters_db[pm2_env.pm_id];\n\n      if (proc && proc.send) {\n        try {\n          proc.send('shutdown');\n        } catch (e) {\n          console.error(`[AppKill] Cannot send \"shutdown\" message to ${pid}`);\n          console.error(e.stack, e.message);\n        }\n\n        return God.processIsDead(pid, pm2_env, cb);\n      } else {\n        console.log(`[AppKill] ${pid} pid cannot be notified with send()`);\n      }\n    }\n\n    if (pm2_env.treekill !== true) {\n      try {\n        process.kill(parseInt(pid), cst.KILL_SIGNAL);\n      } catch (e) {\n        console.error('[SimpleKill] %s pid can not be killed', pid, e.stack, e.message);\n      }\n\n      return God.processIsDead(pid, pm2_env, cb);\n    } else {\n      treekill(parseInt(pid), cst.KILL_SIGNAL, function (err) {\n        return God.processIsDead(pid, pm2_env, cb);\n      });\n    }\n  };\n  /**\n   * Description\n   * @method getNewId\n   * @return UpdateExpression\n   */\n\n\n  God.getNewId = function () {\n    return God.next_id++;\n  };\n  /**\n   * When a process is restarted or reloaded reset fields\n   * to monitor unstable starts\n   * @method resetState\n   * @param {} pm2_env\n   * @return\n   */\n\n\n  God.resetState = function (pm2_env) {\n    pm2_env.created_at = Date.now();\n    pm2_env.unstable_restarts = 0;\n    pm2_env.prev_restart_delay = 0;\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/God/Methods.js"],"names":["p","require","treekill","cst","module","exports","God","logAndGenerateError","err","Error","console","trace","error","getProcesses","clusters_db","getFormatedProcess","getFormatedProcesses","id","pid","process","name","pm2_env","pm_id","keys","Object","arr","Array","kl","length","i","key","isNaN","push","findProcessById","findByName","db","pm_exec_path","resolve","checkProcess","kill","processIsDead","cb","sigkill","type","msg","timeout","kill_timeout","KILL_TIMEOUT","mode","exec_mode","timer","setInterval","log","clearTimeout","clearInterval","kill_retry_time","setTimeout","parseInt","e","stack","message","killProcess","KILL_USE_MESSAGE","shutdown_with_message","proc","send","KILL_SIGNAL","getNewId","next_id","resetState","created_at","Date","now","unstable_restarts","prev_restart_delay"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n'use strict';\n\n/**\n * @file Utilities for PM2\n * @author Alexandre Strzelewicz <as@unitech.io>\n * @project PM2\n */\nvar p             = require('path');\nvar treekill      = require('../TreeKill');\nvar cst           = require('../../constants.js');\n\n/**\n * Description\n * @method exports\n * @param {} God\n * @return\n */\nmodule.exports = function(God) {\n\n  /**\n   * Description\n   * @method logAndGenerateError\n   * @param {} err\n   * @return NewExpression\n   */\n  God.logAndGenerateError = function(err) {\n    // Is an Error object\n    if (err instanceof Error) {\n      console.trace(err);\n      return err;\n    }\n    // Is a JSON or simple string\n    console.error(err);\n    return new Error(err);\n  };\n\n  /**\n   * Utility functions\n   * @method getProcesses\n   * @return MemberExpression\n   */\n  God.getProcesses = function() {\n    return God.clusters_db;\n  };\n\n  God.getFormatedProcess = function getFormatedProcesses(id) {\n    if (God.clusters_db[id])\n      return {\n        pid     : God.clusters_db[id].process.pid,\n        name    : God.clusters_db[id].pm2_env.name,\n        pm2_env : God.clusters_db[id].pm2_env,\n        pm_id   : God.clusters_db[id].pm2_env.pm_id\n      };\n    return {};\n  };\n\n  /**\n   * Get formated processes\n   * @method getFormatedProcesses\n   * @return {Array} formated processes\n   */\n  God.getFormatedProcesses = function getFormatedProcesses() {\n    var keys = Object.keys(God.clusters_db);\n    var arr  = new Array();\n    var kl   = keys.length;\n\n    for (var i = 0; i < kl; i++) {\n      var key = keys[i];\n\n      if (!God.clusters_db[key]) continue;\n      // Avoid _old type pm_ids\n      if (isNaN(God.clusters_db[key].pm2_env.pm_id)) continue;\n\n      arr.push({\n        pid     : God.clusters_db[key].process.pid,\n        name    : God.clusters_db[key].pm2_env.name,\n        pm2_env : God.clusters_db[key].pm2_env,\n        pm_id   : God.clusters_db[key].pm2_env.pm_id\n      })\n    }\n    return arr;\n  };\n\n  /**\n   * Description\n   * @method findProcessById\n   * @param {} id\n   * @return ConditionalExpression\n   */\n  God.findProcessById = function findProcessById(id) {\n    return God.clusters_db[id] ? God.clusters_db[id] : null;\n  };\n\n  /**\n   * Description\n   * @method findByName\n   * @param {} name\n   * @return arr\n   */\n  God.findByName = function(name) {\n    var db = God.clusters_db;\n    var arr = [];\n\n    if (name == 'all') {\n      for (var key in db) {\n        // Avoid _old_proc process style\n        if (typeof(God.clusters_db[key].pm2_env.pm_id) === 'number')\n          arr.push(db[key]);\n      }\n      return arr;\n    }\n\n    for (var key in db) {\n      if (God.clusters_db[key].pm2_env.name == name ||\n          God.clusters_db[key].pm2_env.pm_exec_path == p.resolve(name)) {\n        arr.push(db[key]);\n      }\n    }\n    return arr;\n  };\n\n  /**\n   * Check if a process is alive in system processes\n   * Return TRUE if process online\n   * @method checkProcess\n   * @param {} pid\n   * @return\n   */\n  God.checkProcess = function(pid) {\n    if (!pid) return false;\n\n    try {\n      // Sending 0 signal do not kill the process\n      process.kill(pid, 0);\n      return true;\n    }\n    catch (err) {\n      return false;\n    }\n  };\n\n  /**\n   * Description\n   * @method processIsDead\n   * @param {} pid\n   * @param {} cb\n   * @return Literal\n   */\n  God.processIsDead = function(pid, pm2_env, cb, sigkill) {\n    if (!pid) return cb({type : 'param:missing', msg : 'no pid passed'});\n\n    var timeout      = null;\n    var kill_timeout = (pm2_env && pm2_env.kill_timeout) ? pm2_env.kill_timeout : cst.KILL_TIMEOUT;\n    var mode         = pm2_env.exec_mode;\n\n    var timer = setInterval(function() {\n      if (God.checkProcess(pid) === false) {\n        console.log('pid=%d msg=process killed', pid);\n        clearTimeout(timeout);\n        clearInterval(timer);\n        return cb(null, true);\n      }\n      console.log('pid=%d msg=failed to kill - retrying in %dms', pid, pm2_env.kill_retry_time);\n      return false;\n    }, pm2_env.kill_retry_time);\n\n    timeout = setTimeout(function() {\n      clearInterval(timer);\n      if (sigkill) {\n        console.log('Process with pid %d could not be killed', pid);\n        return cb({type : 'timeout', msg : 'timeout'});\n      }\n      else {\n        console.log('Process with pid %d still alive after %sms, sending it SIGKILL now...', pid, kill_timeout);\n\n        if (pm2_env.treekill !== true) {\n          try {\n            process.kill(parseInt(pid), 'SIGKILL');\n          } catch(e) {\n            console.error('[SimpleKill][SIGKILL] %s pid can not be killed', pid, e.stack, e.message);\n          }\n          return God.processIsDead(pid, pm2_env, cb, true);\n        }\n        else {\n          treekill(parseInt(pid), 'SIGKILL', function(err) {\n            return God.processIsDead(pid, pm2_env, cb, true);\n          });\n        }\n      }\n    }, kill_timeout);\n    return false;\n  };\n\n  /**\n   * Description\n   * @method killProcess\n   * @param int pid\n   * @param Object pm2_env\n   * @param function cb\n   * @return CallExpression\n   */\n  God.killProcess = function(pid, pm2_env, cb) {\n    if (!pid) return cb({msg : 'no pid passed or null'});\n\n    if (typeof(pm2_env.pm_id) === 'number' &&\n        (cst.KILL_USE_MESSAGE || pm2_env.shutdown_with_message == true)) {\n      var proc = God.clusters_db[pm2_env.pm_id];\n\n      if (proc && proc.send) {\n        try {\n          proc.send('shutdown');\n        } catch (e) {\n          console.error(`[AppKill] Cannot send \"shutdown\" message to ${pid}`)\n          console.error(e.stack, e.message)\n        }\n        return God.processIsDead(pid, pm2_env, cb);\n      }\n      else {\n        console.log(`[AppKill] ${pid} pid cannot be notified with send()`)\n      }\n    }\n\n    if (pm2_env.treekill !== true) {\n      try {\n        process.kill(parseInt(pid), cst.KILL_SIGNAL);\n      } catch(e) {\n        console.error('[SimpleKill] %s pid can not be killed', pid, e.stack, e.message);\n      }\n      return God.processIsDead(pid, pm2_env, cb);\n    }\n    else {\n      treekill(parseInt(pid), cst.KILL_SIGNAL, function(err) {\n        return God.processIsDead(pid, pm2_env, cb);\n      });\n    }\n  };\n\n  /**\n   * Description\n   * @method getNewId\n   * @return UpdateExpression\n   */\n  God.getNewId = function() {\n    return God.next_id++;\n  };\n\n  /**\n   * When a process is restarted or reloaded reset fields\n   * to monitor unstable starts\n   * @method resetState\n   * @param {} pm2_env\n   * @return\n   */\n  God.resetState = function(pm2_env) {\n    pm2_env.created_at = Date.now();\n    pm2_env.unstable_restarts = 0;\n    pm2_env.prev_restart_delay = 0;\n  };\n\n};\n"]},"metadata":{},"sourceType":"script"}