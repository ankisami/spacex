{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// cpu.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 4. CPU\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\n\nconst exec = require('child_process').exec;\n\nconst fs = require('fs');\n\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = _platform === 'linux';\n\nconst _darwin = _platform === 'darwin';\n\nconst _windows = _platform === 'win32';\n\nconst _freebsd = _platform === 'freebsd';\n\nconst _openbsd = _platform === 'openbsd';\n\nconst _netbsd = _platform === 'netbsd';\n\nconst _sunos = _platform === 'sunos';\n\nlet _cpu_speed = '0.00';\nlet _current_cpu = {\n  user: 0,\n  nice: 0,\n  system: 0,\n  idle: 0,\n  irq: 0,\n  load: 0,\n  tick: 0,\n  ms: 0,\n  currentload: 0,\n  currentload_user: 0,\n  currentload_system: 0,\n  currentload_nice: 0,\n  currentload_idle: 0,\n  currentload_irq: 0,\n  raw_currentload: 0,\n  raw_currentload_user: 0,\n  raw_currentload_system: 0,\n  raw_currentload_nice: 0,\n  raw_currentload_idle: 0,\n  raw_currentload_irq: 0\n};\nlet _cpus = [];\nlet _corecount = 0;\nconst AMDBaseFrequencies = {\n  '8346': '1.8',\n  '8347': '1.9',\n  '8350': '2.0',\n  '8354': '2.2',\n  '8356|SE': '2.4',\n  '8356': '2.3',\n  '8360': '2.5',\n  '2372': '2.1',\n  '2373': '2.1',\n  '2374': '2.2',\n  '2376': '2.3',\n  '2377': '2.3',\n  '2378': '2.4',\n  '2379': '2.4',\n  '2380': '2.5',\n  '2381': '2.5',\n  '2382': '2.6',\n  '2384': '2.7',\n  '2386': '2.8',\n  '2387': '2.8',\n  '2389': '2.9',\n  '2393': '3.1',\n  '8374': '2.2',\n  '8376': '2.3',\n  '8378': '2.4',\n  '8379': '2.4',\n  '8380': '2.5',\n  '8381': '2.5',\n  '8382': '2.6',\n  '8384': '2.7',\n  '8386': '2.8',\n  '8387': '2.8',\n  '8389': '2.9',\n  '8393': '3.1',\n  '2419EE': '1.8',\n  '2423HE': '2.0',\n  '2425HE': '2.1',\n  '2427': '2.2',\n  '2431': '2.4',\n  '2435': '2.6',\n  '2439SE': '2.8',\n  '8425HE': '2.1',\n  '8431': '2.4',\n  '8435': '2.6',\n  '8439SE': '2.8',\n  '4122': '2.2',\n  '4130': '2.6',\n  '4162EE': '1.7',\n  '4164EE': '1.8',\n  '4170HE': '2.1',\n  '4174HE': '2.3',\n  '4176HE': '2.4',\n  '4180': '2.6',\n  '4184': '2.8',\n  '6124HE': '1.8',\n  '6128HE': '2.0',\n  '6132HE': '2.2',\n  '6128': '2.0',\n  '6134': '2.3',\n  '6136': '2.4',\n  '6140': '2.6',\n  '6164HE': '1.7',\n  '6166HE': '1.8',\n  '6168': '1.9',\n  '6172': '2.1',\n  '6174': '2.2',\n  '6176': '2.3',\n  '6176SE': '2.3',\n  '6180SE': '2.5',\n  '3250': '2.5',\n  '3260': '2.7',\n  '3280': '2.4',\n  '4226': '2.7',\n  '4228': '2.8',\n  '4230': '2.9',\n  '4234': '3.1',\n  '4238': '3.3',\n  '4240': '3.4',\n  '4256': '1.6',\n  '4274': '2.5',\n  '4276': '2.6',\n  '4280': '2.8',\n  '4284': '3.0',\n  '6204': '3.3',\n  '6212': '2.6',\n  '6220': '3.0',\n  '6234': '2.4',\n  '6238': '2.6',\n  '6262HE': '1.6',\n  '6272': '2.1',\n  '6274': '2.2',\n  '6276': '2.3',\n  '6278': '2.4',\n  '6282SE': '2.6',\n  '6284SE': '2.7',\n  '6308': '3.5',\n  '6320': '2.8',\n  '6328': '3.2',\n  '6338P': '2.3',\n  '6344': '2.6',\n  '6348': '2.8',\n  '6366': '1.8',\n  '6370P': '2.0',\n  '6376': '2.3',\n  '6378': '2.4',\n  '6380': '2.5',\n  '6386': '2.8',\n  'FX|4100': '3.6',\n  'FX|4120': '3.9',\n  'FX|4130': '3.8',\n  'FX|4150': '3.8',\n  'FX|4170': '4.2',\n  'FX|6100': '3.3',\n  'FX|6120': '3.6',\n  'FX|6130': '3.6',\n  'FX|6200': '3.8',\n  'FX|8100': '2.8',\n  'FX|8120': '3.1',\n  'FX|8140': '3.2',\n  'FX|8150': '3.6',\n  'FX|8170': '3.9',\n  'FX|4300': '3.8',\n  'FX|4320': '4.0',\n  'FX|4350': '4.2',\n  'FX|6300': '3.5',\n  'FX|6350': '3.9',\n  'FX|8300': '3.3',\n  'FX|8310': '3.4',\n  'FX|8320': '3.5',\n  'FX|8350': '4.0',\n  'FX|8370': '4.0',\n  'FX|9370': '4.4',\n  'FX|9590': '4.7',\n  'FX|8320E': '3.2',\n  'FX|8370E': '3.3',\n  '1950X': '3.4',\n  '1920X': '3.5',\n  '1920': '3.2',\n  '1900X': '3.8',\n  '1800X': '3.6',\n  '1700X': '3.4',\n  'Pro 1700X': '3.5',\n  '1700': '3.0',\n  'Pro 1700': '3.0',\n  '1600X': '3.6',\n  '1600': '3.2',\n  'Pro 1600': '3.2',\n  '1500X': '3.5',\n  'Pro 1500': '3.5',\n  '1400': '3.2',\n  '1300X': '3.5',\n  'Pro 1300': '3.5',\n  '1200': '3.1',\n  'Pro 1200': '3.1',\n  '2200U': '2.5',\n  '2300U': '2.0',\n  'Pro 2300U': '2.0',\n  '2500U': '2.0',\n  'Pro 2500U': '2.2',\n  '2700U': '2.0',\n  'Pro 2700U': '2.2',\n  '2600H': '3.2',\n  '2800H': '3.3',\n  '7601': '2.2',\n  '7551': '2.0',\n  '7501': '2.0',\n  '74501': '2.3',\n  '7401': '2.0',\n  '7351': '2.4',\n  '7301': '2.2',\n  '7281': '2.1',\n  '7251': '2.1',\n  '7551P': '2.0',\n  '7401P': '2.0',\n  '7351P': '2.4',\n  '2300X': '3.5',\n  '2500X': '3.6',\n  '2600': '3.4',\n  '2600E': '3.1',\n  '2600X': '3.6',\n  '2700': '3.2',\n  '2700E': '2.8',\n  '2700X': '3.7',\n  'Pro 2700X': '3.6',\n  '2920': '3.5',\n  '2950': '3.5',\n  '2970WX': '3.0',\n  '2990WX': '3.0',\n  '3200U': '2.6',\n  '3300U': '2.1',\n  '3500U': '2.1',\n  '3550H': '2.1',\n  '3580U': '2.1',\n  '3700U': '2.3',\n  '3750H': '2.3',\n  '3780U': '2.3',\n  '3500X': '3.6',\n  '3600': '3.6',\n  'Pro 3600': '3.6',\n  '3600X': '3.8',\n  'Pro 3700': '3.6',\n  '3700X': '3.6',\n  '3800X': '3.9',\n  '3900': '3.1',\n  'Pro 3900': '3.1',\n  '3900X': '3.8',\n  '3950X': '3.5',\n  '3960X': '3.8',\n  '3970X': '3.7',\n  '7232P': '3.1',\n  '7302P': '3.0',\n  '7402P': '2.8',\n  '7502P': '2.5',\n  '7702P': '2.0',\n  '7252': '3.1',\n  '7262': '3.2',\n  '7272': '2.9',\n  '7282': '2.8',\n  '7302': '3.0',\n  '7352': '2.3',\n  '7402': '2.8',\n  '7452': '2.35',\n  '7502': '2.5',\n  '7542': '2.9',\n  '7552': '2.2',\n  '7642': '2.3',\n  '7702': '2.0',\n  '7742': '2.25',\n  '7H12': '2.6'\n};\nconst socketTypes = {\n  1: 'Other',\n  2: 'Unknown',\n  3: 'Daughter Board',\n  4: 'ZIF Socket',\n  5: 'Replacement/Piggy Back',\n  6: 'None',\n  7: 'LIF Socket',\n  8: 'Slot 1',\n  9: 'Slot 2',\n  10: '370 Pin Socket',\n  11: 'Slot A',\n  12: 'Slot M',\n  13: '423',\n  14: 'A (Socket 462)',\n  15: '478',\n  16: '754',\n  17: '940',\n  18: '939',\n  19: 'mPGA604',\n  20: 'LGA771',\n  21: 'LGA775',\n  22: 'S1',\n  23: 'AM2',\n  24: 'F (1207)',\n  25: 'LGA1366',\n  26: 'G34',\n  27: 'AM3',\n  28: 'C32',\n  29: 'LGA1156',\n  30: 'LGA1567',\n  31: 'PGA988A',\n  32: 'BGA1288',\n  33: 'rPGA988B',\n  34: 'BGA1023',\n  35: 'BGA1224',\n  36: 'LGA1155',\n  37: 'LGA1356',\n  38: 'LGA2011',\n  39: 'FS1',\n  40: 'FS2',\n  41: 'FM1',\n  42: 'FM2',\n  43: 'LGA2011-3',\n  44: 'LGA1356-3',\n  45: 'LGA1150',\n  46: 'BGA1168',\n  47: 'BGA1234',\n  48: 'BGA1364',\n  49: 'AM4',\n  50: 'LGA1151',\n  51: 'BGA1356',\n  52: 'BGA1440',\n  53: 'BGA1515',\n  54: 'LGA3647-1',\n  55: 'SP3',\n  56: 'SP3r2',\n  57: 'LGA2066',\n  58: 'BGA1392',\n  59: 'BGA1510',\n  60: 'BGA1528'\n};\n\nfunction cpuBrandManufacturer(res) {\n  res.brand = res.brand.replace(/\\(R\\)+/g, '®').replace(/\\s+/g, ' ').trim();\n  res.brand = res.brand.replace(/\\(TM\\)+/g, '™').replace(/\\s+/g, ' ').trim();\n  res.brand = res.brand.replace(/\\(C\\)+/g, '©').replace(/\\s+/g, ' ').trim();\n  res.brand = res.brand.replace(/CPU+/g, '').replace(/\\s+/g, ' ').trim();\n  res.manufacturer = res.brand.split(' ')[0];\n  let parts = res.brand.split(' ');\n  parts.shift();\n  res.brand = parts.join(' ');\n  return res;\n}\n\nfunction getAMDSpeed(brand) {\n  let result = '0.00';\n\n  for (let key in AMDBaseFrequencies) {\n    if ({}.hasOwnProperty.call(AMDBaseFrequencies, key)) {\n      let parts = key.split('|');\n      let found = 0;\n      parts.forEach(item => {\n        if (brand.indexOf(item) > -1) {\n          found++;\n        }\n      });\n\n      if (found === parts.length) {\n        result = AMDBaseFrequencies[key];\n      }\n    }\n  }\n\n  return result;\n} // --------------------------\n// CPU - brand, speed\n\n\nfunction getCpu() {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      const UNKNOWN = 'unknown';\n      let result = {\n        manufacturer: UNKNOWN,\n        brand: UNKNOWN,\n        vendor: '',\n        family: '',\n        model: '',\n        stepping: '',\n        revision: '',\n        voltage: '',\n        speed: '0.00',\n        speedmin: '',\n        speedmax: '',\n        governor: '',\n        cores: util.cores(),\n        physicalCores: util.cores(),\n        processors: 1,\n        socket: '',\n        cache: {}\n      };\n\n      if (_darwin) {\n        exec('sysctl machdep.cpu hw.cpufrequency_max hw.cpufrequency_min hw.packages hw.physicalcpu_max hw.ncpu', function (error, stdout) {\n          // if (!error) {\n          let lines = stdout.toString().split('\\n');\n          const modelline = util.getValue(lines, 'machdep.cpu.brand_string');\n          result.brand = modelline.split('@')[0].trim();\n          result.speed = modelline.split('@')[1].trim();\n          result.speed = parseFloat(result.speed.replace(/GHz+/g, '')).toFixed(2);\n          _cpu_speed = result.speed;\n          result = cpuBrandManufacturer(result);\n          result.speedmin = (util.getValue(lines, 'hw.cpufrequency_min') / 1000000000.0).toFixed(2);\n          result.speedmax = (util.getValue(lines, 'hw.cpufrequency_max') / 1000000000.0).toFixed(2);\n          result.vendor = util.getValue(lines, 'machdep.cpu.vendor');\n          result.family = util.getValue(lines, 'machdep.cpu.family');\n          result.model = util.getValue(lines, 'machdep.cpu.model');\n          result.stepping = util.getValue(lines, 'machdep.cpu.stepping');\n          const countProcessors = util.getValue(lines, 'hw.packages');\n          const countCores = util.getValue(lines, 'hw.physicalcpu_max');\n          const countThreads = util.getValue(lines, 'hw.ncpu');\n\n          if (countProcessors) {\n            result.processors = parseInt(countProcessors) || 1;\n          }\n\n          if (countCores && countThreads) {\n            result.cores = parseInt(countThreads) || util.cores();\n            result.physicalCores = parseInt(countCores) || util.cores();\n          } // }\n\n\n          cpuCache().then(res => {\n            result.cache = res;\n            resolve(result);\n          });\n        });\n      }\n\n      if (_linux) {\n        let modelline = '';\n        let lines = [];\n        if (os.cpus()[0] && os.cpus()[0].model) modelline = os.cpus()[0].model;\n        exec('export LC_ALL=C; lscpu; echo -n \"Governor: \"; cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 2>/dev/null; echo; unset LC_ALL', function (error, stdout) {\n          if (!error) {\n            lines = stdout.toString().split('\\n');\n          }\n\n          modelline = util.getValue(lines, 'model name') || modelline;\n          result.brand = modelline.split('@')[0].trim();\n          result.speed = modelline.split('@')[1] ? parseFloat(modelline.split('@')[1].trim()).toFixed(2) : '0.00';\n\n          if (result.speed === '0.00' && (result.brand.indexOf('AMD') > -1 || result.brand.toLowerCase().indexOf('ryzen') > -1)) {\n            result.speed = getAMDSpeed(result.brand);\n          }\n\n          if (result.speed === '0.00') {\n            let current = getCpuCurrentSpeedSync();\n            if (current.avg !== 0) result.speed = current.avg.toFixed(2);\n          }\n\n          _cpu_speed = result.speed;\n          result.speedmin = Math.round(parseFloat(util.getValue(lines, 'cpu min mhz').replace(/,/g, '.')) / 10.0) / 100;\n          result.speedmin = result.speedmin ? parseFloat(result.speedmin).toFixed(2) : '';\n          result.speedmax = Math.round(parseFloat(util.getValue(lines, 'cpu max mhz').replace(/,/g, '.')) / 10.0) / 100;\n          result.speedmax = result.speedmax ? parseFloat(result.speedmax).toFixed(2) : '';\n          result = cpuBrandManufacturer(result);\n          result.vendor = util.getValue(lines, 'vendor id'); // if (!result.vendor) { result.vendor = util.getValue(lines, 'anbieterkennung'); }\n\n          result.family = util.getValue(lines, 'cpu family'); // if (!result.family) { result.family = util.getValue(lines, 'prozessorfamilie'); }\n\n          result.model = util.getValue(lines, 'model:'); // if (!result.model) { result.model = util.getValue(lines, 'modell:'); }\n\n          result.stepping = util.getValue(lines, 'stepping');\n          result.revision = util.getValue(lines, 'cpu revision');\n          result.cache.l1d = util.getValue(lines, 'l1d cache');\n\n          if (result.cache.l1d) {\n            result.cache.l1d = parseInt(result.cache.l1d) * (result.cache.l1d.indexOf('K') !== -1 ? 1024 : 1);\n          }\n\n          result.cache.l1i = util.getValue(lines, 'l1i cache');\n\n          if (result.cache.l1i) {\n            result.cache.l1i = parseInt(result.cache.l1i) * (result.cache.l1i.indexOf('K') !== -1 ? 1024 : 1);\n          }\n\n          result.cache.l2 = util.getValue(lines, 'l2 cache');\n\n          if (result.cache.l2) {\n            result.cache.l2 = parseInt(result.cache.l2) * (result.cache.l2.indexOf('K') !== -1 ? 1024 : 1);\n          }\n\n          result.cache.l3 = util.getValue(lines, 'l3 cache');\n\n          if (result.cache.l3) {\n            result.cache.l3 = parseInt(result.cache.l3) * (result.cache.l3.indexOf('K') !== -1 ? 1024 : 1);\n          }\n\n          const threadsPerCore = util.getValue(lines, 'thread(s) per core') || '1'; // const coresPerSocketInt = parseInt(util.getValue(lines, 'cores(s) per socket') || '1', 10);\n\n          const processors = util.getValue(lines, 'socket(s)') || '1';\n          let threadsPerCoreInt = parseInt(threadsPerCore, 10);\n          let processorsInt = parseInt(processors, 10);\n          result.physicalCores = result.cores / threadsPerCoreInt;\n          result.processors = processorsInt;\n          result.governor = util.getValue(lines, 'governor') || ''; // Test Raspberry\n\n          if (result.vendor === 'ARM') {\n            const linesRpi = fs.readFileSync('/proc/cpuinfo').toString().split('\\n');\n            const rPIRevision = util.decodePiCpuinfo(linesRpi);\n\n            if (rPIRevision.model.toLowerCase().indexOf('raspberry') >= 0) {\n              result.family = result.manufacturer;\n              result.manufacturer = rPIRevision.manufacturer;\n              result.brand = rPIRevision.processor;\n              result.revision = rPIRevision.revisionCode;\n              result.socket = 'SOC';\n            }\n          } // socket type\n\n\n          let lines2 = [];\n          exec('export LC_ALL=C; dmidecode –t 4 2>/dev/null | grep \"Upgrade: Socket\"; unset LC_ALL', function (error2, stdout2) {\n            lines2 = stdout2.toString().split('\\n');\n\n            if (lines2 && lines2.length) {\n              result.socket = util.getValue(lines2, 'Upgrade').replace('Socket', '').trim() || result.socket;\n            }\n\n            resolve(result);\n          });\n        });\n      }\n\n      if (_freebsd || _openbsd || _netbsd) {\n        let modelline = '';\n        let lines = [];\n        if (os.cpus()[0] && os.cpus()[0].model) modelline = os.cpus()[0].model;\n        exec('export LC_ALL=C; dmidecode -t 4; dmidecode -t 7 unset LC_ALL', function (error, stdout) {\n          let cache = [];\n\n          if (!error) {\n            const data = stdout.toString().split('# dmidecode');\n            const processor = data.length > 1 ? data[1] : '';\n            cache = data.length > 2 ? data[2].split('Cache Information') : [];\n            lines = processor.split('\\n');\n          }\n\n          result.brand = modelline.split('@')[0].trim();\n          result.speed = modelline.split('@')[1] ? parseFloat(modelline.split('@')[1].trim()).toFixed(2) : '0.00';\n\n          if (result.speed === '0.00' && (result.brand.indexOf('AMD') > -1 || result.brand.toLowerCase().indexOf('ryzen') > -1)) {\n            result.speed = getAMDSpeed(result.brand);\n          }\n\n          if (result.speed === '0.00') {\n            let current = getCpuCurrentSpeedSync();\n            if (current.avg !== 0) result.speed = current.avg.toFixed(2);\n          }\n\n          _cpu_speed = result.speed;\n          result.speedmin = '';\n          result.speedmax = Math.round(parseFloat(util.getValue(lines, 'max speed').replace(/Mhz/g, '')) / 10.0) / 100;\n          result.speedmax = result.speedmax ? parseFloat(result.speedmax).toFixed(2) : '';\n          result = cpuBrandManufacturer(result);\n          result.vendor = util.getValue(lines, 'manufacturer');\n          let sig = util.getValue(lines, 'signature');\n          sig = sig.split(',');\n\n          for (var i = 0; i < sig.length; i++) {\n            sig[i] = sig[i].trim();\n          }\n\n          result.family = util.getValue(sig, 'Family', ' ', true);\n          result.model = util.getValue(sig, 'Model', ' ', true);\n          result.stepping = util.getValue(sig, 'Stepping', ' ', true);\n          result.revision = '';\n          const voltage = parseFloat(util.getValue(lines, 'voltage'));\n          result.voltage = isNaN(voltage) ? '' : voltage.toFixed(2);\n\n          for (let i = 0; i < cache.length; i++) {\n            lines = cache[i].split('\\n');\n            let cacheType = util.getValue(lines, 'Socket Designation').toLowerCase().replace(' ', '-').split('-');\n            cacheType = cacheType.length ? cacheType[0] : '';\n            const sizeParts = util.getValue(lines, 'Installed Size').split(' ');\n            let size = parseInt(sizeParts[0], 10);\n            const unit = sizeParts.length > 1 ? sizeParts[1] : 'kb';\n            size = size * (unit === 'kb' ? 1024 : unit === 'mb' ? 1024 * 1024 : unit === 'gb' ? 1024 * 1024 * 1024 : 1);\n\n            if (cacheType) {\n              if (cacheType === 'l1') {\n                result.cache[cacheType + 'd'] = size / 2;\n                result.cache[cacheType + 'i'] = size / 2;\n              } else {\n                result.cache[cacheType] = size;\n              }\n            }\n          } // socket type\n\n\n          result.socket = util.getValue(lines, 'Upgrade').replace('Socket', '').trim(); // # threads / # cores\n\n          const threadCount = util.getValue(lines, 'thread count').trim();\n          const coreCount = util.getValue(lines, 'core count').trim();\n\n          if (coreCount && threadCount) {\n            result.cores = threadCount;\n            result.physicalCores = coreCount;\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        resolve(result);\n      }\n\n      if (_windows) {\n        try {\n          util.wmic('cpu get /value').then((stdout, error) => {\n            if (!error) {\n              let lines = stdout.split('\\r\\n');\n              let name = util.getValue(lines, 'name', '=') || '';\n\n              if (name.indexOf('@') >= 0) {\n                result.brand = name.split('@')[0].trim();\n                result.speed = name.split('@')[1] ? parseFloat(name.split('@')[1].trim()).toFixed(2) : '0.00';\n                _cpu_speed = result.speed;\n              } else {\n                result.brand = name.trim();\n                result.speed = '0.00';\n              }\n\n              result = cpuBrandManufacturer(result);\n              result.revision = util.getValue(lines, 'revision', '=');\n              result.cache.l1d = 0;\n              result.cache.l1i = 0;\n              result.cache.l2 = util.getValue(lines, 'l2cachesize', '=');\n              result.cache.l3 = util.getValue(lines, 'l3cachesize', '=');\n\n              if (result.cache.l2) {\n                result.cache.l2 = parseInt(result.cache.l2, 10) * 1024;\n              }\n\n              if (result.cache.l3) {\n                result.cache.l3 = parseInt(result.cache.l3, 10) * 1024;\n              }\n\n              result.vendor = util.getValue(lines, 'manufacturer', '=');\n              result.speedmax = Math.round(parseFloat(util.getValue(lines, 'maxclockspeed', '=').replace(/,/g, '.')) / 10.0) / 100;\n              result.speedmax = result.speedmax ? parseFloat(result.speedmax).toFixed(2) : '';\n\n              if (result.speed === '0.00' && (result.brand.indexOf('AMD') > -1 || result.brand.toLowerCase().indexOf('ryzen') > -1)) {\n                result.speed = getAMDSpeed(result.brand);\n              }\n\n              if (result.speed === '0.00') {\n                result.speed = result.speedmax;\n              }\n\n              let description = util.getValue(lines, 'description', '=').split(' ');\n\n              for (let i = 0; i < description.length; i++) {\n                if (description[i].toLowerCase().startsWith('family') && i + 1 < description.length && description[i + 1]) {\n                  result.family = description[i + 1];\n                }\n\n                if (description[i].toLowerCase().startsWith('model') && i + 1 < description.length && description[i + 1]) {\n                  result.model = description[i + 1];\n                }\n\n                if (description[i].toLowerCase().startsWith('stepping') && i + 1 < description.length && description[i + 1]) {\n                  result.stepping = description[i + 1];\n                }\n              } // socket type\n\n\n              const socketId = util.getValue(lines, 'UpgradeMethod', '=');\n\n              if (socketTypes[socketId]) {\n                result.socket = socketTypes[socketId];\n              } // # threads / # cores\n\n\n              const countProcessors = util.countLines(lines, 'Caption');\n              const countThreads = util.getValue(lines, 'NumberOfLogicalProcessors', '=');\n              const countCores = util.getValue(lines, 'NumberOfCores', '=');\n\n              if (countProcessors) {\n                result.processors = parseInt(countProcessors) || 1;\n              }\n\n              if (countCores && countThreads) {\n                result.cores = parseInt(countThreads) || util.cores();\n                result.physicalCores = parseInt(countCores) || util.cores();\n              }\n\n              if (countProcessors > 1) {\n                result.cores = result.cores * countProcessors;\n                result.physicalCores = result.physicalCores * countProcessors;\n              }\n            }\n\n            util.wmic('path Win32_CacheMemory get CacheType,InstalledSize,Purpose').then((stdout, error) => {\n              if (!error) {\n                let lines = stdout.split('\\r\\n').filter(line => line.trim() !== '').filter((line, idx) => idx > 0);\n                lines.forEach(function (line) {\n                  if (line !== '') {\n                    line = line.trim().split(/\\s\\s+/); // L1 Instructions\n\n                    if (line[2] === 'L1 Cache' && line[0] === '3') {\n                      result.cache.l1i = parseInt(line[1], 10);\n                    } // L1 Data\n\n\n                    if (line[2] === 'L1 Cache' && line[0] === '4') {\n                      result.cache.l1d = parseInt(line[1], 10);\n                    }\n                  }\n                });\n              }\n\n              resolve(result);\n            });\n          });\n        } catch (e) {\n          resolve(result);\n        }\n      }\n    });\n  });\n} // --------------------------\n// CPU - Processor Data\n\n\nfunction cpu(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      getCpu().then(result => {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      });\n    });\n  });\n}\n\nexports.cpu = cpu; // --------------------------\n// CPU - current speed - in GHz\n\nfunction getCpuCurrentSpeedSync() {\n  let cpus = os.cpus();\n  let minFreq = 999999999;\n  let maxFreq = 0;\n  let avgFreq = 0;\n  let cores = [];\n\n  if (cpus && cpus.length) {\n    for (let i in cpus) {\n      if ({}.hasOwnProperty.call(cpus, i)) {\n        avgFreq = avgFreq + cpus[i].speed;\n        if (cpus[i].speed > maxFreq) maxFreq = cpus[i].speed;\n        if (cpus[i].speed < minFreq) minFreq = cpus[i].speed;\n      }\n\n      cores.push(parseFloat(((cpus[i].speed + 1) / 1000).toFixed(2)));\n    }\n\n    avgFreq = avgFreq / cpus.length;\n    return {\n      min: parseFloat(((minFreq + 1) / 1000).toFixed(2)),\n      max: parseFloat(((maxFreq + 1) / 1000).toFixed(2)),\n      avg: parseFloat(((avgFreq + 1) / 1000).toFixed(2)),\n      cores: cores\n    };\n  } else {\n    return {\n      min: 0,\n      max: 0,\n      avg: 0,\n      cores: cores\n    };\n  }\n}\n\nfunction cpuCurrentspeed(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = getCpuCurrentSpeedSync();\n\n      if (result.avg === 0 && _cpu_speed !== '0.00') {\n        const currCpuSpeed = parseFloat(_cpu_speed);\n        result = {\n          min: currCpuSpeed,\n          max: currCpuSpeed,\n          avg: currCpuSpeed,\n          cores: []\n        };\n      }\n\n      if (callback) {\n        callback(result);\n      }\n\n      resolve(result);\n    });\n  });\n}\n\nexports.cpuCurrentspeed = cpuCurrentspeed; // --------------------------\n// CPU - temperature\n// if sensors are installed\n\nfunction cpuTemperature(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = {\n        main: -1.0,\n        cores: [],\n        max: -1.0\n      };\n\n      if (_linux) {\n        const cmd = 'cat /sys/class/hwmon/hwmon1/temp*_la*;echo \"---\";cat /sys/class/hwmon/hwmon1/temp*_i*';\n\n        try {\n          exec(cmd, function (error, stdout) {\n            if (!error) {\n              let parts = stdout.toString().split('---');\n              let labels = parts[0].split('\\n');\n              let temps = parts[1].split('\\n');\n              temps.shift();\n\n              for (let i = 0; i < temps.length; i++) {\n                if (temps[i] && (labels[i] === undefined || labels[i] && labels[i].toLowerCase().startsWith('core'))) {\n                  result.cores.push(Math.round(parseInt(temps[i], 10) / 100) / 10);\n                } else if (temps[i] && labels[i] && result.main === -1) {\n                  result.main = Math.round(parseInt(temps[i], 10) / 100) / 10;\n                }\n              }\n\n              if (result.cores.length > 0) {\n                if (result.main === -1) {\n                  result.main = Math.round(result.cores.reduce((a, b) => a + b, 0) / result.cores.length);\n                }\n\n                let maxtmp = Math.max.apply(Math, result.cores);\n                result.max = maxtmp > result.main ? maxtmp : result.main;\n              }\n\n              if (result.main !== -1) {\n                if (result.max === -1) {\n                  result.max = result.main;\n                }\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n                return;\n              }\n            }\n\n            exec('sensors', function (error, stdout) {\n              if (!error) {\n                let lines = stdout.toString().split('\\n');\n                let tdieTemp = -1;\n                lines.forEach(function (line) {\n                  let regex = /[+-]([^°]*)/g;\n                  let temps = line.match(regex);\n                  let firstPart = line.split(':')[0].toUpperCase();\n\n                  if (firstPart.indexOf('PHYSICAL') !== -1 || firstPart.indexOf('PACKAGE') !== -1) {\n                    result.main = parseFloat(temps);\n                  }\n\n                  if (firstPart.indexOf('CORE ') !== -1) {\n                    result.cores.push(parseFloat(temps));\n                  }\n\n                  if (firstPart.indexOf('TDIE') !== -1 && tdieTemp === -1) {\n                    tdieTemp = parseFloat(temps);\n                  }\n                });\n\n                if (result.cores.length > 0) {\n                  if (result.main === -1) {\n                    result.main = Math.round(result.cores.reduce((a, b) => a + b, 0) / result.cores.length);\n                  }\n\n                  let maxtmp = Math.max.apply(Math, result.cores);\n                  result.max = maxtmp > result.main ? maxtmp : result.main;\n                } else {\n                  if (result.main === -1 && tdieTemp !== -1) {\n                    result.main = tdieTemp;\n                    result.max = tdieTemp;\n                  }\n                }\n\n                if (result.main !== -1.0 || result.max !== -1.0) {\n                  if (callback) {\n                    callback(result);\n                  }\n\n                  resolve(result);\n                  return;\n                }\n              }\n\n              fs.stat('/sys/class/thermal/thermal_zone0/temp', function (err) {\n                if (err === null) {\n                  fs.readFile('/sys/class/thermal/thermal_zone0/temp', function (error, stdout) {\n                    if (!error) {\n                      let lines = stdout.toString().split('\\n');\n\n                      if (lines.length > 0) {\n                        result.main = parseFloat(lines[0]) / 1000.0;\n                        result.max = result.main;\n                      }\n                    }\n\n                    if (callback) {\n                      callback(result);\n                    }\n\n                    resolve(result);\n                  });\n                } else {\n                  exec('/opt/vc/bin/vcgencmd measure_temp', function (error, stdout) {\n                    if (!error) {\n                      let lines = stdout.toString().split('\\n');\n\n                      if (lines.length > 0 && lines[0].indexOf('=')) {\n                        result.main = parseFloat(lines[0].split('=')[1]);\n                        result.max = result.main;\n                      }\n                    }\n\n                    if (callback) {\n                      callback(result);\n                    }\n\n                    resolve(result);\n                  });\n                }\n              });\n            });\n          });\n        } catch (er) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('sysctl dev.cpu | grep temp', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            let sum = 0;\n            lines.forEach(function (line) {\n              const parts = line.split(':');\n\n              if (parts.length > 1) {\n                const temp = parseFloat(parts[1].replace(',', '.'));\n                if (temp > result.max) result.max = temp;\n                sum = sum + temp;\n                result.cores.push(temp);\n              }\n            });\n\n            if (result.cores.length) {\n              result.main = Math.round(sum / result.cores.length * 100) / 100;\n            }\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        let osxTemp = null;\n\n        try {\n          osxTemp = require('osx-temperature-sensor');\n        } catch (er) {\n          osxTemp = null;\n        }\n\n        if (osxTemp) {\n          result = osxTemp.cpuTemperature();\n        }\n\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        try {\n          util.wmic('/namespace:\\\\\\\\root\\\\wmi PATH MSAcpi_ThermalZoneTemperature get CurrentTemperature').then((stdout, error) => {\n            if (!error) {\n              let sum = 0;\n              let lines = stdout.split('\\r\\n').filter(line => line.trim() !== '').filter((line, idx) => idx > 0);\n              lines.forEach(function (line) {\n                let value = (parseInt(line, 10) - 2732) / 10;\n                sum = sum + value;\n                if (value > result.max) result.max = value;\n                result.cores.push(value);\n              });\n\n              if (result.cores.length) {\n                result.main = sum / result.cores.length;\n              }\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.cpuTemperature = cpuTemperature; // --------------------------\n// CPU Flags\n\nfunction cpuFlags(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = '';\n\n      if (_windows) {\n        try {\n          exec('reg query \"HKEY_LOCAL_MACHINE\\\\HARDWARE\\\\DESCRIPTION\\\\System\\\\CentralProcessor\\\\0\" /v FeatureSet', util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              let flag_hex = stdout.split('0x').pop().trim();\n              let flag_bin_unpadded = parseInt(flag_hex, 16).toString(2);\n              let flag_bin = '0'.repeat(32 - flag_bin_unpadded.length) + flag_bin_unpadded; // empty flags are the reserved fields in the CPUID feature bit list\n              // as found on wikipedia:\n              // https://en.wikipedia.org/wiki/CPUID\n\n              let all_flags = ['fpu', 'vme', 'de', 'pse', 'tsc', 'msr', 'pae', 'mce', 'cx8', 'apic', '', 'sep', 'mtrr', 'pge', 'mca', 'cmov', 'pat', 'pse-36', 'psn', 'clfsh', '', 'ds', 'acpi', 'mmx', 'fxsr', 'sse', 'sse2', 'ss', 'htt', 'tm', 'ia64', 'pbe'];\n\n              for (let f = 0; f < all_flags.length; f++) {\n                if (flag_bin[f] === '1' && all_flags[f] !== '') {\n                  result += ' ' + all_flags[f];\n                }\n              }\n\n              result = result.trim();\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n\n      if (_linux) {\n        try {\n          exec('export LC_ALL=C; lscpu; unset LC_ALL', function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              lines.forEach(function (line) {\n                if (line.split(':')[0].toUpperCase().indexOf('FLAGS') !== -1) {\n                  result = line.split(':')[1].trim().toLowerCase();\n                }\n              });\n            }\n\n            if (!result) {\n              fs.readFile('/proc/cpuinfo', function (error, stdout) {\n                if (!error) {\n                  let lines = stdout.toString().split('\\n');\n                  result = util.getValue(lines, 'features', ':', true).toLowerCase();\n                }\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              });\n            } else {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('export LC_ALL=C; dmidecode -t 4 2>/dev/null; unset LC_ALL', function (error, stdout) {\n          let flags = [];\n\n          if (!error) {\n            let parts = stdout.toString().split('\\tFlags:');\n            const lines = parts.length > 1 ? parts[1].split('\\tVersion:')[0].split['\\n'] : [];\n            lines.forEach(function (line) {\n              let flag = (line.indexOf('(') ? line.split('(')[0].toLowerCase() : '').trim().replace(/\\t/g, '');\n\n              if (flag) {\n                flags.push(flag);\n              }\n            });\n          }\n\n          result = flags.join(' ').trim();\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('sysctl machdep.cpu.features', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n\n            if (lines.length > 0 && lines[0].indexOf('machdep.cpu.features:') !== -1) {\n              result = lines[0].split(':')[1].trim().toLowerCase();\n            }\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.cpuFlags = cpuFlags; // --------------------------\n// CPU Cache\n\nfunction cpuCache(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = {\n        l1d: -1,\n        l1i: -1,\n        l2: -1,\n        l3: -1\n      };\n\n      if (_linux) {\n        try {\n          exec('export LC_ALL=C; lscpu; unset LC_ALL', function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              lines.forEach(function (line) {\n                let parts = line.split(':');\n\n                if (parts[0].toUpperCase().indexOf('L1D CACHE') !== -1) {\n                  result.l1d = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n                }\n\n                if (parts[0].toUpperCase().indexOf('L1I CACHE') !== -1) {\n                  result.l1i = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n                }\n\n                if (parts[0].toUpperCase().indexOf('L2 CACHE') !== -1) {\n                  result.l2 = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n                }\n\n                if (parts[0].toUpperCase().indexOf('L3 CACHE') !== -1) {\n                  result.l3 = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n                }\n              });\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('export LC_ALL=C; dmidecode -t 7 2>/dev/null; unset LC_ALL', function (error, stdout) {\n          let cache = [];\n\n          if (!error) {\n            const data = stdout.toString();\n            cache = data.split('Cache Information');\n            cache.shift();\n          }\n\n          for (let i = 0; i < cache.length; i++) {\n            const lines = cache[i].split('\\n');\n            let cacheType = util.getValue(lines, 'Socket Designation').toLowerCase().replace(' ', '-').split('-');\n            cacheType = cacheType.length ? cacheType[0] : '';\n            const sizeParts = util.getValue(lines, 'Installed Size').split(' ');\n            let size = parseInt(sizeParts[0], 10);\n            const unit = sizeParts.length > 1 ? sizeParts[1] : 'kb';\n            size = size * (unit === 'kb' ? 1024 : unit === 'mb' ? 1024 * 1024 : unit === 'gb' ? 1024 * 1024 * 1024 : 1);\n\n            if (cacheType) {\n              if (cacheType === 'l1') {\n                result.cache[cacheType + 'd'] = size / 2;\n                result.cache[cacheType + 'i'] = size / 2;\n              } else {\n                result.cache[cacheType] = size;\n              }\n            }\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_darwin) {\n        exec('sysctl hw.l1icachesize hw.l1dcachesize hw.l2cachesize hw.l3cachesize', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            lines.forEach(function (line) {\n              let parts = line.split(':');\n\n              if (parts[0].toLowerCase().indexOf('hw.l1icachesize') !== -1) {\n                result.l1d = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n              }\n\n              if (parts[0].toLowerCase().indexOf('hw.l1dcachesize') !== -1) {\n                result.l1i = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n              }\n\n              if (parts[0].toLowerCase().indexOf('hw.l2cachesize') !== -1) {\n                result.l2 = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n              }\n\n              if (parts[0].toLowerCase().indexOf('hw.l3cachesize') !== -1) {\n                result.l3 = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n              }\n            });\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        try {\n          util.wmic('cpu get l2cachesize, l3cachesize /value').then((stdout, error) => {\n            if (!error) {\n              let lines = stdout.split('\\r\\n');\n              result.l1d = 0;\n              result.l1i = 0;\n              result.l2 = util.getValue(lines, 'l2cachesize', '=');\n              result.l3 = util.getValue(lines, 'l3cachesize', '=');\n\n              if (result.l2) {\n                result.l2 = parseInt(result.l2, 10) * 1024;\n              }\n\n              if (result.l3) {\n                result.l3 = parseInt(result.l3, 10) * 1024;\n              }\n            }\n\n            util.wmic('path Win32_CacheMemory get CacheType,InstalledSize,Purpose').then((stdout, error) => {\n              if (!error) {\n                let lines = stdout.split('\\r\\n').filter(line => line.trim() !== '').filter((line, idx) => idx > 0);\n                lines.forEach(function (line) {\n                  if (line !== '') {\n                    line = line.trim().split(/\\s\\s+/); // L1 Instructions\n\n                    if (line[2] === 'L1 Cache' && line[0] === '3') {\n                      result.l1i = parseInt(line[1], 10);\n                    } // L1 Data\n\n\n                    if (line[2] === 'L1 Cache' && line[0] === '4') {\n                      result.l1d = parseInt(line[1], 10);\n                    }\n                  }\n                });\n              }\n\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            });\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.cpuCache = cpuCache; // --------------------------\n// CPU - current load - in %\n\nfunction getLoad() {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let loads = os.loadavg().map(function (x) {\n        return x / util.cores();\n      });\n      let avgload = parseFloat(Math.max.apply(Math, loads).toFixed(2));\n      let result = {};\n\n      let now = Date.now() - _current_cpu.ms;\n\n      if (now >= 200) {\n        _current_cpu.ms = Date.now();\n        const cpus = os.cpus();\n        let totalUser = 0;\n        let totalSystem = 0;\n        let totalNice = 0;\n        let totalIrq = 0;\n        let totalIdle = 0;\n        let cores = [];\n        _corecount = cpus && cpus.length ? cpus.length : 0;\n\n        for (let i = 0; i < _corecount; i++) {\n          const cpu = cpus[i].times;\n          totalUser += cpu.user;\n          totalSystem += cpu.sys;\n          totalNice += cpu.nice;\n          totalIdle += cpu.idle;\n          totalIrq += cpu.irq;\n          let tmp_tick = _cpus && _cpus[i] && _cpus[i].totalTick ? _cpus[i].totalTick : 0;\n          let tmp_load = _cpus && _cpus[i] && _cpus[i].totalLoad ? _cpus[i].totalLoad : 0;\n          let tmp_user = _cpus && _cpus[i] && _cpus[i].user ? _cpus[i].user : 0;\n          let tmp_system = _cpus && _cpus[i] && _cpus[i].sys ? _cpus[i].sys : 0;\n          let tmp_nice = _cpus && _cpus[i] && _cpus[i].nice ? _cpus[i].nice : 0;\n          let tmp_idle = _cpus && _cpus[i] && _cpus[i].idle ? _cpus[i].idle : 0;\n          let tmp_irq = _cpus && _cpus[i] && _cpus[i].irq ? _cpus[i].irq : 0;\n          _cpus[i] = cpu;\n          _cpus[i].totalTick = _cpus[i].user + _cpus[i].sys + _cpus[i].nice + _cpus[i].irq + _cpus[i].idle;\n          _cpus[i].totalLoad = _cpus[i].user + _cpus[i].sys + _cpus[i].nice + _cpus[i].irq;\n          _cpus[i].currentTick = _cpus[i].totalTick - tmp_tick;\n          _cpus[i].load = _cpus[i].totalLoad - tmp_load;\n          _cpus[i].load_user = _cpus[i].user - tmp_user;\n          _cpus[i].load_system = _cpus[i].sys - tmp_system;\n          _cpus[i].load_nice = _cpus[i].nice - tmp_nice;\n          _cpus[i].load_idle = _cpus[i].idle - tmp_idle;\n          _cpus[i].load_irq = _cpus[i].irq - tmp_irq;\n          cores[i] = {};\n          cores[i].load = _cpus[i].load / _cpus[i].currentTick * 100;\n          cores[i].load_user = _cpus[i].load_user / _cpus[i].currentTick * 100;\n          cores[i].load_system = _cpus[i].load_system / _cpus[i].currentTick * 100;\n          cores[i].load_nice = _cpus[i].load_nice / _cpus[i].currentTick * 100;\n          cores[i].load_idle = _cpus[i].load_idle / _cpus[i].currentTick * 100;\n          cores[i].load_irq = _cpus[i].load_irq / _cpus[i].currentTick * 100;\n          cores[i].raw_load = _cpus[i].load;\n          cores[i].raw_load_user = _cpus[i].load_user;\n          cores[i].raw_load_system = _cpus[i].load_system;\n          cores[i].raw_load_nice = _cpus[i].load_nice;\n          cores[i].raw_load_idle = _cpus[i].load_idle;\n          cores[i].raw_load_irq = _cpus[i].load_irq;\n        }\n\n        let totalTick = totalUser + totalSystem + totalNice + totalIrq + totalIdle;\n        let totalLoad = totalUser + totalSystem + totalNice + totalIrq;\n        let currentTick = totalTick - _current_cpu.tick;\n        result = {\n          avgload: avgload,\n          currentload: (totalLoad - _current_cpu.load) / currentTick * 100,\n          currentload_user: (totalUser - _current_cpu.user) / currentTick * 100,\n          currentload_system: (totalSystem - _current_cpu.system) / currentTick * 100,\n          currentload_nice: (totalNice - _current_cpu.nice) / currentTick * 100,\n          currentload_idle: (totalIdle - _current_cpu.idle) / currentTick * 100,\n          currentload_irq: (totalIrq - _current_cpu.irq) / currentTick * 100,\n          raw_currentload: totalLoad - _current_cpu.load,\n          raw_currentload_user: totalUser - _current_cpu.user,\n          raw_currentload_system: totalSystem - _current_cpu.system,\n          raw_currentload_nice: totalNice - _current_cpu.nice,\n          raw_currentload_idle: totalIdle - _current_cpu.idle,\n          raw_currentload_irq: totalIrq - _current_cpu.irq,\n          cpus: cores\n        };\n        _current_cpu = {\n          user: totalUser,\n          nice: totalNice,\n          system: totalSystem,\n          idle: totalIdle,\n          irq: totalIrq,\n          tick: totalTick,\n          load: totalLoad,\n          ms: _current_cpu.ms,\n          currentload: result.currentload,\n          currentload_user: result.currentload_user,\n          currentload_system: result.currentload_system,\n          currentload_nice: result.currentload_nice,\n          currentload_idle: result.currentload_idle,\n          currentload_irq: result.currentload_irq,\n          raw_currentload: result.raw_currentload,\n          raw_currentload_user: result.raw_currentload_user,\n          raw_currentload_system: result.raw_currentload_system,\n          raw_currentload_nice: result.raw_currentload_nice,\n          raw_currentload_idle: result.raw_currentload_idle,\n          raw_currentload_irq: result.raw_currentload_irq\n        };\n      } else {\n        let cores = [];\n\n        for (let i = 0; i < _corecount; i++) {\n          cores[i] = {};\n          cores[i].load = _cpus[i].load / _cpus[i].currentTick * 100;\n          cores[i].load_user = _cpus[i].load_user / _cpus[i].currentTick * 100;\n          cores[i].load_system = _cpus[i].load_system / _cpus[i].currentTick * 100;\n          cores[i].load_nice = _cpus[i].load_nice / _cpus[i].currentTick * 100;\n          cores[i].load_idle = _cpus[i].load_idle / _cpus[i].currentTick * 100;\n          cores[i].load_irq = _cpus[i].load_irq / _cpus[i].currentTick * 100;\n          cores[i].raw_load = _cpus[i].load;\n          cores[i].raw_load_user = _cpus[i].load_user;\n          cores[i].raw_load_system = _cpus[i].load_system;\n          cores[i].raw_load_nice = _cpus[i].load_nice;\n          cores[i].raw_load_idle = _cpus[i].load_idle;\n          cores[i].raw_load_irq = _cpus[i].load_irq;\n        }\n\n        result = {\n          avgload: avgload,\n          currentload: _current_cpu.currentload,\n          currentload_user: _current_cpu.currentload_user,\n          currentload_system: _current_cpu.currentload_system,\n          currentload_nice: _current_cpu.currentload_nice,\n          currentload_idle: _current_cpu.currentload_idle,\n          currentload_irq: _current_cpu.currentload_irq,\n          raw_currentload: _current_cpu.raw_currentload,\n          raw_currentload_user: _current_cpu.raw_currentload_user,\n          raw_currentload_system: _current_cpu.raw_currentload_system,\n          raw_currentload_nice: _current_cpu.raw_currentload_nice,\n          raw_currentload_idle: _current_cpu.raw_currentload_idle,\n          raw_currentload_irq: _current_cpu.raw_currentload_irq,\n          cpus: cores\n        };\n      }\n\n      resolve(result);\n    });\n  });\n}\n\nfunction currentLoad(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      getLoad().then(result => {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      });\n    });\n  });\n}\n\nexports.currentLoad = currentLoad; // --------------------------\n// PS - full load\n// since bootup\n\nfunction getFullLoad() {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      const cpus = os.cpus();\n      let totalUser = 0;\n      let totalSystem = 0;\n      let totalNice = 0;\n      let totalIrq = 0;\n      let totalIdle = 0;\n      let result = 0;\n\n      if (cpus && cpus.length) {\n        for (let i = 0, len = cpus.length; i < len; i++) {\n          const cpu = cpus[i].times;\n          totalUser += cpu.user;\n          totalSystem += cpu.sys;\n          totalNice += cpu.nice;\n          totalIrq += cpu.irq;\n          totalIdle += cpu.idle;\n        }\n\n        let totalTicks = totalIdle + totalIrq + totalNice + totalSystem + totalUser;\n        result = (totalTicks - totalIdle) / totalTicks * 100.0;\n      } else {\n        result = 0;\n      }\n\n      resolve(result);\n    });\n  });\n}\n\nfunction fullLoad(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      getFullLoad().then(result => {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      });\n    });\n  });\n}\n\nexports.fullLoad = fullLoad;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/cpu.js"],"names":["os","require","exec","fs","util","_platform","process","platform","_linux","_darwin","_windows","_freebsd","_openbsd","_netbsd","_sunos","_cpu_speed","_current_cpu","user","nice","system","idle","irq","load","tick","ms","currentload","currentload_user","currentload_system","currentload_nice","currentload_idle","currentload_irq","raw_currentload","raw_currentload_user","raw_currentload_system","raw_currentload_nice","raw_currentload_idle","raw_currentload_irq","_cpus","_corecount","AMDBaseFrequencies","socketTypes","cpuBrandManufacturer","res","brand","replace","trim","manufacturer","split","parts","shift","join","getAMDSpeed","result","key","hasOwnProperty","call","found","forEach","item","indexOf","length","getCpu","Promise","resolve","nextTick","UNKNOWN","vendor","family","model","stepping","revision","voltage","speed","speedmin","speedmax","governor","cores","physicalCores","processors","socket","cache","error","stdout","lines","toString","modelline","getValue","parseFloat","toFixed","countProcessors","countCores","countThreads","parseInt","cpuCache","then","cpus","toLowerCase","current","getCpuCurrentSpeedSync","avg","Math","round","l1d","l1i","l2","l3","threadsPerCore","threadsPerCoreInt","processorsInt","linesRpi","readFileSync","rPIRevision","decodePiCpuinfo","processor","revisionCode","lines2","error2","stdout2","data","sig","i","isNaN","cacheType","sizeParts","size","unit","threadCount","coreCount","wmic","name","description","startsWith","socketId","countLines","filter","line","idx","e","cpu","callback","exports","minFreq","maxFreq","avgFreq","push","min","max","cpuCurrentspeed","currCpuSpeed","cpuTemperature","main","cmd","labels","temps","undefined","reduce","a","b","maxtmp","apply","tdieTemp","regex","match","firstPart","toUpperCase","stat","err","readFile","er","sum","temp","osxTemp","value","cpuFlags","execOptsWin","flag_hex","pop","flag_bin_unpadded","flag_bin","repeat","all_flags","f","flags","flag","getLoad","loads","loadavg","map","x","avgload","now","Date","totalUser","totalSystem","totalNice","totalIrq","totalIdle","times","sys","tmp_tick","totalTick","tmp_load","totalLoad","tmp_user","tmp_system","tmp_nice","tmp_idle","tmp_irq","currentTick","load_user","load_system","load_nice","load_idle","load_irq","raw_load","raw_load_user","raw_load_system","raw_load_nice","raw_load_idle","raw_load_irq","currentLoad","getFullLoad","len","totalTicks","fullLoad"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// cpu.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 4. CPU\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst exec = require('child_process').exec;\nconst fs = require('fs');\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nlet _cpu_speed = '0.00';\nlet _current_cpu = {\n  user: 0,\n  nice: 0,\n  system: 0,\n  idle: 0,\n  irq: 0,\n  load: 0,\n  tick: 0,\n  ms: 0,\n  currentload: 0,\n  currentload_user: 0,\n  currentload_system: 0,\n  currentload_nice: 0,\n  currentload_idle: 0,\n  currentload_irq: 0,\n  raw_currentload: 0,\n  raw_currentload_user: 0,\n  raw_currentload_system: 0,\n  raw_currentload_nice: 0,\n  raw_currentload_idle: 0,\n  raw_currentload_irq: 0\n};\nlet _cpus = [];\nlet _corecount = 0;\n\nconst AMDBaseFrequencies = {\n  '8346': '1.8',\n  '8347': '1.9',\n  '8350': '2.0',\n  '8354': '2.2',\n  '8356|SE': '2.4',\n  '8356': '2.3',\n  '8360': '2.5',\n  '2372': '2.1',\n  '2373': '2.1',\n  '2374': '2.2',\n  '2376': '2.3',\n  '2377': '2.3',\n  '2378': '2.4',\n  '2379': '2.4',\n  '2380': '2.5',\n  '2381': '2.5',\n  '2382': '2.6',\n  '2384': '2.7',\n  '2386': '2.8',\n  '2387': '2.8',\n  '2389': '2.9',\n  '2393': '3.1',\n  '8374': '2.2',\n  '8376': '2.3',\n  '8378': '2.4',\n  '8379': '2.4',\n  '8380': '2.5',\n  '8381': '2.5',\n  '8382': '2.6',\n  '8384': '2.7',\n  '8386': '2.8',\n  '8387': '2.8',\n  '8389': '2.9',\n  '8393': '3.1',\n  '2419EE': '1.8',\n  '2423HE': '2.0',\n  '2425HE': '2.1',\n  '2427': '2.2',\n  '2431': '2.4',\n  '2435': '2.6',\n  '2439SE': '2.8',\n  '8425HE': '2.1',\n  '8431': '2.4',\n  '8435': '2.6',\n  '8439SE': '2.8',\n  '4122': '2.2',\n  '4130': '2.6',\n  '4162EE': '1.7',\n  '4164EE': '1.8',\n  '4170HE': '2.1',\n  '4174HE': '2.3',\n  '4176HE': '2.4',\n  '4180': '2.6',\n  '4184': '2.8',\n  '6124HE': '1.8',\n  '6128HE': '2.0',\n  '6132HE': '2.2',\n  '6128': '2.0',\n  '6134': '2.3',\n  '6136': '2.4',\n  '6140': '2.6',\n  '6164HE': '1.7',\n  '6166HE': '1.8',\n  '6168': '1.9',\n  '6172': '2.1',\n  '6174': '2.2',\n  '6176': '2.3',\n  '6176SE': '2.3',\n  '6180SE': '2.5',\n  '3250': '2.5',\n  '3260': '2.7',\n  '3280': '2.4',\n  '4226': '2.7',\n  '4228': '2.8',\n  '4230': '2.9',\n  '4234': '3.1',\n  '4238': '3.3',\n  '4240': '3.4',\n  '4256': '1.6',\n  '4274': '2.5',\n  '4276': '2.6',\n  '4280': '2.8',\n  '4284': '3.0',\n  '6204': '3.3',\n  '6212': '2.6',\n  '6220': '3.0',\n  '6234': '2.4',\n  '6238': '2.6',\n  '6262HE': '1.6',\n  '6272': '2.1',\n  '6274': '2.2',\n  '6276': '2.3',\n  '6278': '2.4',\n  '6282SE': '2.6',\n  '6284SE': '2.7',\n  '6308': '3.5',\n  '6320': '2.8',\n  '6328': '3.2',\n  '6338P': '2.3',\n  '6344': '2.6',\n  '6348': '2.8',\n  '6366': '1.8',\n  '6370P': '2.0',\n  '6376': '2.3',\n  '6378': '2.4',\n  '6380': '2.5',\n  '6386': '2.8',\n  'FX|4100': '3.6',\n  'FX|4120': '3.9',\n  'FX|4130': '3.8',\n  'FX|4150': '3.8',\n  'FX|4170': '4.2',\n  'FX|6100': '3.3',\n  'FX|6120': '3.6',\n  'FX|6130': '3.6',\n  'FX|6200': '3.8',\n  'FX|8100': '2.8',\n  'FX|8120': '3.1',\n  'FX|8140': '3.2',\n  'FX|8150': '3.6',\n  'FX|8170': '3.9',\n  'FX|4300': '3.8',\n  'FX|4320': '4.0',\n  'FX|4350': '4.2',\n  'FX|6300': '3.5',\n  'FX|6350': '3.9',\n  'FX|8300': '3.3',\n  'FX|8310': '3.4',\n  'FX|8320': '3.5',\n  'FX|8350': '4.0',\n  'FX|8370': '4.0',\n  'FX|9370': '4.4',\n  'FX|9590': '4.7',\n  'FX|8320E': '3.2',\n  'FX|8370E': '3.3',\n  '1950X': '3.4',\n  '1920X': '3.5',\n  '1920': '3.2',\n  '1900X': '3.8',\n  '1800X': '3.6',\n  '1700X': '3.4',\n  'Pro 1700X': '3.5',\n  '1700': '3.0',\n  'Pro 1700': '3.0',\n  '1600X': '3.6',\n  '1600': '3.2',\n  'Pro 1600': '3.2',\n  '1500X': '3.5',\n  'Pro 1500': '3.5',\n  '1400': '3.2',\n  '1300X': '3.5',\n  'Pro 1300': '3.5',\n  '1200': '3.1',\n  'Pro 1200': '3.1',\n  '2200U': '2.5',\n  '2300U': '2.0',\n  'Pro 2300U': '2.0',\n  '2500U': '2.0',\n  'Pro 2500U': '2.2',\n  '2700U': '2.0',\n  'Pro 2700U': '2.2',\n  '2600H': '3.2',\n  '2800H': '3.3',\n  '7601': '2.2',\n  '7551': '2.0',\n  '7501': '2.0',\n  '74501': '2.3',\n  '7401': '2.0',\n  '7351': '2.4',\n  '7301': '2.2',\n  '7281': '2.1',\n  '7251': '2.1',\n  '7551P': '2.0',\n  '7401P': '2.0',\n  '7351P': '2.4',\n  '2300X': '3.5',\n  '2500X': '3.6',\n  '2600': '3.4',\n  '2600E': '3.1',\n  '2600X': '3.6',\n  '2700': '3.2',\n  '2700E': '2.8',\n  '2700X': '3.7',\n  'Pro 2700X': '3.6',\n  '2920': '3.5',\n  '2950': '3.5',\n  '2970WX': '3.0',\n  '2990WX': '3.0',\n  '3200U': '2.6',\n  '3300U': '2.1',\n  '3500U': '2.1',\n  '3550H': '2.1',\n  '3580U': '2.1',\n  '3700U': '2.3',\n  '3750H': '2.3',\n  '3780U': '2.3',\n  '3500X': '3.6',\n  '3600': '3.6',\n  'Pro 3600': '3.6',\n  '3600X': '3.8',\n  'Pro 3700': '3.6',\n  '3700X': '3.6',\n  '3800X': '3.9',\n  '3900': '3.1',\n  'Pro 3900': '3.1',\n  '3900X': '3.8',\n  '3950X': '3.5',\n  '3960X': '3.8',\n  '3970X': '3.7',\n  '7232P': '3.1',\n  '7302P': '3.0',\n  '7402P': '2.8',\n  '7502P': '2.5',\n  '7702P': '2.0',\n  '7252': '3.1',\n  '7262': '3.2',\n  '7272': '2.9',\n  '7282': '2.8',\n  '7302': '3.0',\n  '7352': '2.3',\n  '7402': '2.8',\n  '7452': '2.35',\n  '7502': '2.5',\n  '7542': '2.9',\n  '7552': '2.2',\n  '7642': '2.3',\n  '7702': '2.0',\n  '7742': '2.25',\n  '7H12': '2.6'\n};\n\nconst socketTypes = {\n  1: 'Other',\n  2: 'Unknown',\n  3: 'Daughter Board',\n  4: 'ZIF Socket',\n  5: 'Replacement/Piggy Back',\n  6: 'None',\n  7: 'LIF Socket',\n  8: 'Slot 1',\n  9: 'Slot 2',\n  10: '370 Pin Socket',\n  11: 'Slot A',\n  12: 'Slot M',\n  13: '423',\n  14: 'A (Socket 462)',\n  15: '478',\n  16: '754',\n  17: '940',\n  18: '939',\n  19: 'mPGA604',\n  20: 'LGA771',\n  21: 'LGA775',\n  22: 'S1',\n  23: 'AM2',\n  24: 'F (1207)',\n  25: 'LGA1366',\n  26: 'G34',\n  27: 'AM3',\n  28: 'C32',\n  29: 'LGA1156',\n  30: 'LGA1567',\n  31: 'PGA988A',\n  32: 'BGA1288',\n  33: 'rPGA988B',\n  34: 'BGA1023',\n  35: 'BGA1224',\n  36: 'LGA1155',\n  37: 'LGA1356',\n  38: 'LGA2011',\n  39: 'FS1',\n  40: 'FS2',\n  41: 'FM1',\n  42: 'FM2',\n  43: 'LGA2011-3',\n  44: 'LGA1356-3',\n  45: 'LGA1150',\n  46: 'BGA1168',\n  47: 'BGA1234',\n  48: 'BGA1364',\n  49: 'AM4',\n  50: 'LGA1151',\n  51: 'BGA1356',\n  52: 'BGA1440',\n  53: 'BGA1515',\n  54: 'LGA3647-1',\n  55: 'SP3',\n  56: 'SP3r2',\n  57: 'LGA2066',\n  58: 'BGA1392',\n  59: 'BGA1510',\n  60: 'BGA1528'\n};\n\nfunction cpuBrandManufacturer(res) {\n  res.brand = res.brand.replace(/\\(R\\)+/g, '®').replace(/\\s+/g, ' ').trim();\n  res.brand = res.brand.replace(/\\(TM\\)+/g, '™').replace(/\\s+/g, ' ').trim();\n  res.brand = res.brand.replace(/\\(C\\)+/g, '©').replace(/\\s+/g, ' ').trim();\n  res.brand = res.brand.replace(/CPU+/g, '').replace(/\\s+/g, ' ').trim();\n  res.manufacturer = res.brand.split(' ')[0];\n\n  let parts = res.brand.split(' ');\n  parts.shift();\n  res.brand = parts.join(' ');\n  return res;\n}\n\nfunction getAMDSpeed(brand) {\n  let result = '0.00';\n  for (let key in AMDBaseFrequencies) {\n    if ({}.hasOwnProperty.call(AMDBaseFrequencies, key)) {\n      let parts = key.split('|');\n      let found = 0;\n      parts.forEach(item => {\n        if (brand.indexOf(item) > -1) {\n          found++;\n        }\n      });\n      if (found === parts.length) {\n        result = AMDBaseFrequencies[key];\n      }\n    }\n  }\n  return result;\n}\n\n// --------------------------\n// CPU - brand, speed\n\nfunction getCpu() {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      const UNKNOWN = 'unknown';\n      let result = {\n        manufacturer: UNKNOWN,\n        brand: UNKNOWN,\n        vendor: '',\n        family: '',\n        model: '',\n        stepping: '',\n        revision: '',\n        voltage: '',\n        speed: '0.00',\n        speedmin: '',\n        speedmax: '',\n        governor: '',\n        cores: util.cores(),\n        physicalCores: util.cores(),\n        processors: 1,\n        socket: '',\n        cache: {}\n      };\n      if (_darwin) {\n        exec('sysctl machdep.cpu hw.cpufrequency_max hw.cpufrequency_min hw.packages hw.physicalcpu_max hw.ncpu', function (error, stdout) {\n          // if (!error) {\n          let lines = stdout.toString().split('\\n');\n          const modelline = util.getValue(lines, 'machdep.cpu.brand_string');\n          result.brand = modelline.split('@')[0].trim();\n          result.speed = modelline.split('@')[1].trim();\n          result.speed = parseFloat(result.speed.replace(/GHz+/g, '')).toFixed(2);\n          _cpu_speed = result.speed;\n          result = cpuBrandManufacturer(result);\n          result.speedmin = (util.getValue(lines, 'hw.cpufrequency_min') / 1000000000.0).toFixed(2);\n          result.speedmax = (util.getValue(lines, 'hw.cpufrequency_max') / 1000000000.0).toFixed(2);\n          result.vendor = util.getValue(lines, 'machdep.cpu.vendor');\n          result.family = util.getValue(lines, 'machdep.cpu.family');\n          result.model = util.getValue(lines, 'machdep.cpu.model');\n          result.stepping = util.getValue(lines, 'machdep.cpu.stepping');\n          const countProcessors = util.getValue(lines, 'hw.packages');\n          const countCores = util.getValue(lines, 'hw.physicalcpu_max');\n          const countThreads = util.getValue(lines, 'hw.ncpu');\n          if (countProcessors) {\n            result.processors = parseInt(countProcessors) || 1;\n          }\n          if (countCores && countThreads) {\n            result.cores = parseInt(countThreads) || util.cores();\n            result.physicalCores = parseInt(countCores) || util.cores();\n          }\n          // }\n          cpuCache().then(res => {\n            result.cache = res;\n            resolve(result);\n          });\n        });\n      }\n      if (_linux) {\n        let modelline = '';\n        let lines = [];\n        if (os.cpus()[0] && os.cpus()[0].model) modelline = os.cpus()[0].model;\n        exec('export LC_ALL=C; lscpu; echo -n \"Governor: \"; cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 2>/dev/null; echo; unset LC_ALL', function (error, stdout) {\n          if (!error) {\n            lines = stdout.toString().split('\\n');\n          }\n          modelline = util.getValue(lines, 'model name') || modelline;\n          result.brand = modelline.split('@')[0].trim();\n          result.speed = modelline.split('@')[1] ? parseFloat(modelline.split('@')[1].trim()).toFixed(2) : '0.00';\n          if (result.speed === '0.00' && (result.brand.indexOf('AMD') > -1 || result.brand.toLowerCase().indexOf('ryzen') > -1)) {\n            result.speed = getAMDSpeed(result.brand);\n          }\n          if (result.speed === '0.00') {\n            let current = getCpuCurrentSpeedSync();\n            if (current.avg !== 0) result.speed = current.avg.toFixed(2);\n          }\n          _cpu_speed = result.speed;\n          result.speedmin = Math.round(parseFloat(util.getValue(lines, 'cpu min mhz').replace(/,/g, '.')) / 10.0) / 100;\n          result.speedmin = result.speedmin ? parseFloat(result.speedmin).toFixed(2) : '';\n          result.speedmax = Math.round(parseFloat(util.getValue(lines, 'cpu max mhz').replace(/,/g, '.')) / 10.0) / 100;\n          result.speedmax = result.speedmax ? parseFloat(result.speedmax).toFixed(2) : '';\n\n          result = cpuBrandManufacturer(result);\n          result.vendor = util.getValue(lines, 'vendor id');\n          // if (!result.vendor) { result.vendor = util.getValue(lines, 'anbieterkennung'); }\n\n          result.family = util.getValue(lines, 'cpu family');\n          // if (!result.family) { result.family = util.getValue(lines, 'prozessorfamilie'); }\n          result.model = util.getValue(lines, 'model:');\n          // if (!result.model) { result.model = util.getValue(lines, 'modell:'); }\n          result.stepping = util.getValue(lines, 'stepping');\n          result.revision = util.getValue(lines, 'cpu revision');\n          result.cache.l1d = util.getValue(lines, 'l1d cache');\n          if (result.cache.l1d) { result.cache.l1d = parseInt(result.cache.l1d) * (result.cache.l1d.indexOf('K') !== -1 ? 1024 : 1); }\n          result.cache.l1i = util.getValue(lines, 'l1i cache');\n          if (result.cache.l1i) { result.cache.l1i = parseInt(result.cache.l1i) * (result.cache.l1i.indexOf('K') !== -1 ? 1024 : 1); }\n          result.cache.l2 = util.getValue(lines, 'l2 cache');\n          if (result.cache.l2) { result.cache.l2 = parseInt(result.cache.l2) * (result.cache.l2.indexOf('K') !== -1 ? 1024 : 1); }\n          result.cache.l3 = util.getValue(lines, 'l3 cache');\n          if (result.cache.l3) { result.cache.l3 = parseInt(result.cache.l3) * (result.cache.l3.indexOf('K') !== -1 ? 1024 : 1); }\n\n          const threadsPerCore = util.getValue(lines, 'thread(s) per core') || '1';\n          // const coresPerSocketInt = parseInt(util.getValue(lines, 'cores(s) per socket') || '1', 10);\n          const processors = util.getValue(lines, 'socket(s)') || '1';\n          let threadsPerCoreInt = parseInt(threadsPerCore, 10);\n          let processorsInt = parseInt(processors, 10);\n          result.physicalCores = result.cores / threadsPerCoreInt;\n          result.processors = processorsInt;\n          result.governor = util.getValue(lines, 'governor') || '';\n\n          // Test Raspberry\n          if (result.vendor === 'ARM') {\n            const linesRpi = fs.readFileSync('/proc/cpuinfo').toString().split('\\n');\n            const rPIRevision = util.decodePiCpuinfo(linesRpi);\n            if (rPIRevision.model.toLowerCase().indexOf('raspberry') >= 0) {\n              result.family = result.manufacturer;\n              result.manufacturer = rPIRevision.manufacturer;\n              result.brand = rPIRevision.processor;\n              result.revision = rPIRevision.revisionCode;\n              result.socket = 'SOC';\n            }\n          }\n\n          // socket type\n          let lines2 = [];\n          exec('export LC_ALL=C; dmidecode –t 4 2>/dev/null | grep \"Upgrade: Socket\"; unset LC_ALL', function (error2, stdout2) {\n            lines2 = stdout2.toString().split('\\n');\n            if (lines2 && lines2.length) {\n              result.socket = util.getValue(lines2, 'Upgrade').replace('Socket', '').trim() || result.socket;\n            }\n            resolve(result);\n          });\n        });\n      }\n      if (_freebsd || _openbsd || _netbsd) {\n        let modelline = '';\n        let lines = [];\n        if (os.cpus()[0] && os.cpus()[0].model) modelline = os.cpus()[0].model;\n        exec('export LC_ALL=C; dmidecode -t 4; dmidecode -t 7 unset LC_ALL', function (error, stdout) {\n          let cache = [];\n          if (!error) {\n            const data = stdout.toString().split('# dmidecode');\n            const processor = data.length > 1 ? data[1] : '';\n            cache = data.length > 2 ? data[2].split('Cache Information') : [];\n\n            lines = processor.split('\\n');\n          }\n          result.brand = modelline.split('@')[0].trim();\n          result.speed = modelline.split('@')[1] ? parseFloat(modelline.split('@')[1].trim()).toFixed(2) : '0.00';\n          if (result.speed === '0.00' && (result.brand.indexOf('AMD') > -1 || result.brand.toLowerCase().indexOf('ryzen') > -1)) {\n            result.speed = getAMDSpeed(result.brand);\n          }\n          if (result.speed === '0.00') {\n            let current = getCpuCurrentSpeedSync();\n            if (current.avg !== 0) result.speed = current.avg.toFixed(2);\n          }\n          _cpu_speed = result.speed;\n          result.speedmin = '';\n          result.speedmax = Math.round(parseFloat(util.getValue(lines, 'max speed').replace(/Mhz/g, '')) / 10.0) / 100;\n          result.speedmax = result.speedmax ? parseFloat(result.speedmax).toFixed(2) : '';\n\n          result = cpuBrandManufacturer(result);\n          result.vendor = util.getValue(lines, 'manufacturer');\n          let sig = util.getValue(lines, 'signature');\n          sig = sig.split(',');\n          for (var i = 0; i < sig.length; i++) {\n            sig[i] = sig[i].trim();\n          }\n          result.family = util.getValue(sig, 'Family', ' ', true);\n          result.model = util.getValue(sig, 'Model', ' ', true);\n          result.stepping = util.getValue(sig, 'Stepping', ' ', true);\n          result.revision = '';\n          const voltage = parseFloat(util.getValue(lines, 'voltage'));\n          result.voltage = isNaN(voltage) ? '' : voltage.toFixed(2);\n          for (let i = 0; i < cache.length; i++) {\n            lines = cache[i].split('\\n');\n            let cacheType = util.getValue(lines, 'Socket Designation').toLowerCase().replace(' ', '-').split('-');\n            cacheType = cacheType.length ? cacheType[0] : '';\n            const sizeParts = util.getValue(lines, 'Installed Size').split(' ');\n            let size = parseInt(sizeParts[0], 10);\n            const unit = sizeParts.length > 1 ? sizeParts[1] : 'kb';\n            size = size * (unit === 'kb' ? 1024 : (unit === 'mb' ? 1024 * 1024 : (unit === 'gb' ? 1024 * 1024 * 1024 : 1)));\n            if (cacheType) {\n              if (cacheType === 'l1') {\n                result.cache[cacheType + 'd'] = size / 2;\n                result.cache[cacheType + 'i'] = size / 2;\n              } else {\n                result.cache[cacheType] = size;\n              }\n            }\n          }\n          // socket type\n          result.socket = util.getValue(lines, 'Upgrade').replace('Socket', '').trim();\n          // # threads / # cores\n          const threadCount = util.getValue(lines, 'thread count').trim();\n          const coreCount = util.getValue(lines, 'core count').trim();\n          if (coreCount && threadCount) {\n            result.cores = threadCount;\n            result.physicalCores = coreCount;\n          }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        resolve(result);\n      }\n      if (_windows) {\n        try {\n          util.wmic('cpu get /value').then((stdout, error) => {\n            if (!error) {\n              let lines = stdout.split('\\r\\n');\n              let name = util.getValue(lines, 'name', '=') || '';\n              if (name.indexOf('@') >= 0) {\n                result.brand = name.split('@')[0].trim();\n                result.speed = name.split('@')[1] ? parseFloat(name.split('@')[1].trim()).toFixed(2) : '0.00';\n                _cpu_speed = result.speed;\n              } else {\n                result.brand = name.trim();\n                result.speed = '0.00';\n              }\n              result = cpuBrandManufacturer(result);\n              result.revision = util.getValue(lines, 'revision', '=');\n              result.cache.l1d = 0;\n              result.cache.l1i = 0;\n              result.cache.l2 = util.getValue(lines, 'l2cachesize', '=');\n              result.cache.l3 = util.getValue(lines, 'l3cachesize', '=');\n              if (result.cache.l2) { result.cache.l2 = parseInt(result.cache.l2, 10) * 1024; }\n              if (result.cache.l3) { result.cache.l3 = parseInt(result.cache.l3, 10) * 1024; }\n              result.vendor = util.getValue(lines, 'manufacturer', '=');\n              result.speedmax = Math.round(parseFloat(util.getValue(lines, 'maxclockspeed', '=').replace(/,/g, '.')) / 10.0) / 100;\n              result.speedmax = result.speedmax ? parseFloat(result.speedmax).toFixed(2) : '';\n              if (result.speed === '0.00' && (result.brand.indexOf('AMD') > -1 || result.brand.toLowerCase().indexOf('ryzen') > -1)) {\n                result.speed = getAMDSpeed(result.brand);\n              }\n              if (result.speed === '0.00') {\n                result.speed = result.speedmax;\n              }\n\n              let description = util.getValue(lines, 'description', '=').split(' ');\n              for (let i = 0; i < description.length; i++) {\n                if (description[i].toLowerCase().startsWith('family') && (i + 1) < description.length && description[i + 1]) {\n                  result.family = description[i + 1];\n                }\n                if (description[i].toLowerCase().startsWith('model') && (i + 1) < description.length && description[i + 1]) {\n                  result.model = description[i + 1];\n                }\n                if (description[i].toLowerCase().startsWith('stepping') && (i + 1) < description.length && description[i + 1]) {\n                  result.stepping = description[i + 1];\n                }\n              }\n              // socket type\n              const socketId = util.getValue(lines, 'UpgradeMethod', '=');\n              if (socketTypes[socketId]) {\n                result.socket = socketTypes[socketId];\n              }\n              // # threads / # cores\n              const countProcessors = util.countLines(lines, 'Caption');\n              const countThreads = util.getValue(lines, 'NumberOfLogicalProcessors', '=');\n              const countCores = util.getValue(lines, 'NumberOfCores', '=');\n              if (countProcessors) {\n                result.processors = parseInt(countProcessors) || 1;\n              }\n              if (countCores && countThreads) {\n                result.cores = parseInt(countThreads) || util.cores();\n                result.physicalCores = parseInt(countCores) || util.cores();\n              }\n              if (countProcessors > 1) {\n                result.cores = result.cores * countProcessors;\n                result.physicalCores = result.physicalCores * countProcessors;\n              }\n            }\n            util.wmic('path Win32_CacheMemory get CacheType,InstalledSize,Purpose').then((stdout, error) => {\n              if (!error) {\n                let lines = stdout.split('\\r\\n').filter(line => line.trim() !== '').filter((line, idx) => idx > 0);\n                lines.forEach(function (line) {\n                  if (line !== '') {\n                    line = line.trim().split(/\\s\\s+/);\n                    // L1 Instructions\n                    if (line[2] === 'L1 Cache' && line[0] === '3') {\n                      result.cache.l1i = parseInt(line[1], 10);\n                    }\n                    // L1 Data\n                    if (line[2] === 'L1 Cache' && line[0] === '4') {\n                      result.cache.l1d = parseInt(line[1], 10);\n                    }\n                  }\n                });\n              }\n              resolve(result);\n            });\n          });\n        } catch (e) {\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\n// --------------------------\n// CPU - Processor Data\n\nfunction cpu(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      getCpu().then(result => {\n        if (callback) { callback(result); }\n        resolve(result);\n      });\n    });\n  });\n}\n\nexports.cpu = cpu;\n\n// --------------------------\n// CPU - current speed - in GHz\n\nfunction getCpuCurrentSpeedSync() {\n\n  let cpus = os.cpus();\n  let minFreq = 999999999;\n  let maxFreq = 0;\n  let avgFreq = 0;\n  let cores = [];\n\n  if (cpus && cpus.length) {\n    for (let i in cpus) {\n      if ({}.hasOwnProperty.call(cpus, i)) {\n        avgFreq = avgFreq + cpus[i].speed;\n        if (cpus[i].speed > maxFreq) maxFreq = cpus[i].speed;\n        if (cpus[i].speed < minFreq) minFreq = cpus[i].speed;\n      }\n      cores.push(parseFloat(((cpus[i].speed + 1) / 1000).toFixed(2)));\n    }\n    avgFreq = avgFreq / cpus.length;\n    return {\n      min: parseFloat(((minFreq + 1) / 1000).toFixed(2)),\n      max: parseFloat(((maxFreq + 1) / 1000).toFixed(2)),\n      avg: parseFloat(((avgFreq + 1) / 1000).toFixed(2)),\n      cores: cores\n    };\n  } else {\n    return {\n      min: 0,\n      max: 0,\n      avg: 0,\n      cores: cores\n    };\n  }\n}\n\nfunction cpuCurrentspeed(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = getCpuCurrentSpeedSync();\n      if (result.avg === 0 && _cpu_speed !== '0.00') {\n        const currCpuSpeed = parseFloat(_cpu_speed);\n        result = {\n          min: currCpuSpeed,\n          max: currCpuSpeed,\n          avg: currCpuSpeed,\n          cores: []\n        };\n      }\n      if (callback) { callback(result); }\n      resolve(result);\n    });\n  });\n}\n\nexports.cpuCurrentspeed = cpuCurrentspeed;\n\n// --------------------------\n// CPU - temperature\n// if sensors are installed\n\nfunction cpuTemperature(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = {\n        main: -1.0,\n        cores: [],\n        max: -1.0\n      };\n      if (_linux) {\n        const cmd = 'cat /sys/class/hwmon/hwmon1/temp*_la*;echo \"---\";cat /sys/class/hwmon/hwmon1/temp*_i*';\n        try {\n          exec(cmd, function (error, stdout) {\n            if (!error) {\n              let parts = stdout.toString().split('---');\n              let labels = parts[0].split('\\n');\n              let temps = parts[1].split('\\n');\n              temps.shift();\n              for (let i = 0; i < temps.length; i++) {\n                if (temps[i] && (labels[i] === undefined || (labels[i] && labels[i].toLowerCase().startsWith('core')))) {\n                  result.cores.push(Math.round(parseInt(temps[i], 10) / 100) / 10);\n                } else if (temps[i] && labels[i] && result.main === -1) {\n                  result.main = Math.round(parseInt(temps[i], 10) / 100) / 10;\n                }\n              }\n              if (result.cores.length > 0) {\n                if (result.main === -1) {\n                  result.main = Math.round(result.cores.reduce((a, b) => a + b, 0) / result.cores.length);\n                }\n                let maxtmp = Math.max.apply(Math, result.cores);\n                result.max = (maxtmp > result.main) ? maxtmp : result.main;\n              }\n              if (result.main !== -1) {\n                if (result.max === -1) {\n                  result.max = result.main;\n                }\n                if (callback) { callback(result); }\n                resolve(result);\n                return;\n              }\n            }\n            exec('sensors', function (error, stdout) {\n              if (!error) {\n                let lines = stdout.toString().split('\\n');\n                let tdieTemp = -1;\n                lines.forEach(function (line) {\n                  let regex = /[+-]([^°]*)/g;\n                  let temps = line.match(regex);\n                  let firstPart = line.split(':')[0].toUpperCase();\n                  if (firstPart.indexOf('PHYSICAL') !== -1 || firstPart.indexOf('PACKAGE') !== -1) {\n                    result.main = parseFloat(temps);\n                  }\n                  if (firstPart.indexOf('CORE ') !== -1) {\n                    result.cores.push(parseFloat(temps));\n                  }\n                  if (firstPart.indexOf('TDIE') !== -1 && tdieTemp === -1) {\n                    tdieTemp = parseFloat(temps);\n                  }\n                });\n                if (result.cores.length > 0) {\n                  if (result.main === -1) {\n                    result.main = Math.round(result.cores.reduce((a, b) => a + b, 0) / result.cores.length);\n                  }\n                  let maxtmp = Math.max.apply(Math, result.cores);\n                  result.max = (maxtmp > result.main) ? maxtmp : result.main;\n                } else {\n                  if (result.main === -1 && tdieTemp !== -1) {\n                    result.main = tdieTemp;\n                    result.max = tdieTemp;\n                  }\n                }\n                if (result.main !== -1.0 || result.max !== -1.0) {\n                  if (callback) { callback(result); }\n                  resolve(result);\n                  return;\n                }\n              }\n              fs.stat('/sys/class/thermal/thermal_zone0/temp', function (err) {\n                if (err === null) {\n                  fs.readFile('/sys/class/thermal/thermal_zone0/temp', function (error, stdout) {\n                    if (!error) {\n                      let lines = stdout.toString().split('\\n');\n                      if (lines.length > 0) {\n                        result.main = parseFloat(lines[0]) / 1000.0;\n                        result.max = result.main;\n                      }\n                    }\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  });\n                } else {\n                  exec('/opt/vc/bin/vcgencmd measure_temp', function (error, stdout) {\n                    if (!error) {\n                      let lines = stdout.toString().split('\\n');\n                      if (lines.length > 0 && lines[0].indexOf('=')) {\n                        result.main = parseFloat(lines[0].split('=')[1]);\n                        result.max = result.main;\n                      }\n                    }\n                    if (callback) { callback(result); }\n                    resolve(result);\n                  });\n                }\n              });\n            });\n          });\n        } catch (er) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('sysctl dev.cpu | grep temp', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            let sum = 0;\n            lines.forEach(function (line) {\n              const parts = line.split(':');\n              if (parts.length > 1) {\n                const temp = parseFloat(parts[1].replace(',', '.'));\n                if (temp > result.max) result.max = temp;\n                sum = sum + temp;\n                result.cores.push(temp);\n              }\n            });\n            if (result.cores.length) {\n              result.main = Math.round(sum / result.cores.length * 100) / 100;\n            }\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_darwin) {\n        let osxTemp = null;\n        try {\n          osxTemp = require('osx-temperature-sensor');\n        } catch (er) {\n          osxTemp = null;\n        }\n        if (osxTemp) {\n          result = osxTemp.cpuTemperature();\n        }\n\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_sunos) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_windows) {\n        try {\n          util.wmic('/namespace:\\\\\\\\root\\\\wmi PATH MSAcpi_ThermalZoneTemperature get CurrentTemperature').then((stdout, error) => {\n            if (!error) {\n              let sum = 0;\n              let lines = stdout.split('\\r\\n').filter(line => line.trim() !== '').filter((line, idx) => idx > 0);\n              lines.forEach(function (line) {\n                let value = (parseInt(line, 10) - 2732) / 10;\n                sum = sum + value;\n                if (value > result.max) result.max = value;\n                result.cores.push(value);\n              });\n              if (result.cores.length) {\n                result.main = sum / result.cores.length;\n              }\n            }\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.cpuTemperature = cpuTemperature;\n\n// --------------------------\n// CPU Flags\n\nfunction cpuFlags(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = '';\n      if (_windows) {\n        try {\n          exec('reg query \"HKEY_LOCAL_MACHINE\\\\HARDWARE\\\\DESCRIPTION\\\\System\\\\CentralProcessor\\\\0\" /v FeatureSet', util.execOptsWin, function (error, stdout) {\n            if (!error) {\n              let flag_hex = stdout.split('0x').pop().trim();\n              let flag_bin_unpadded = parseInt(flag_hex, 16).toString(2);\n              let flag_bin = '0'.repeat(32 - flag_bin_unpadded.length) + flag_bin_unpadded;\n              // empty flags are the reserved fields in the CPUID feature bit list\n              // as found on wikipedia:\n              // https://en.wikipedia.org/wiki/CPUID\n              let all_flags = [\n                'fpu', 'vme', 'de', 'pse', 'tsc', 'msr', 'pae', 'mce', 'cx8', 'apic',\n                '', 'sep', 'mtrr', 'pge', 'mca', 'cmov', 'pat', 'pse-36', 'psn', 'clfsh',\n                '', 'ds', 'acpi', 'mmx', 'fxsr', 'sse', 'sse2', 'ss', 'htt', 'tm', 'ia64', 'pbe'\n              ];\n              for (let f = 0; f < all_flags.length; f++) {\n                if (flag_bin[f] === '1' && all_flags[f] !== '') {\n                  result += ' ' + all_flags[f];\n                }\n              }\n              result = result.trim();\n            }\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n      if (_linux) {\n        try {\n\n          exec('export LC_ALL=C; lscpu; unset LC_ALL', function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              lines.forEach(function (line) {\n                if (line.split(':')[0].toUpperCase().indexOf('FLAGS') !== -1) {\n                  result = line.split(':')[1].trim().toLowerCase();\n                }\n              });\n            }\n            if (!result) {\n              fs.readFile('/proc/cpuinfo', function (error, stdout) {\n                if (!error) {\n                  let lines = stdout.toString().split('\\n');\n                  result = util.getValue(lines, 'features', ':', true).toLowerCase();\n                }\n                if (callback) { callback(result); }\n                resolve(result);\n              });\n            } else {\n              if (callback) { callback(result); }\n              resolve(result);\n            }\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('export LC_ALL=C; dmidecode -t 4 2>/dev/null; unset LC_ALL', function (error, stdout) {\n          let flags = [];\n          if (!error) {\n            let parts = stdout.toString().split('\\tFlags:');\n            const lines = parts.length > 1 ? parts[1].split('\\tVersion:')[0].split['\\n'] : [];\n            lines.forEach(function (line) {\n              let flag = (line.indexOf('(') ? line.split('(')[0].toLowerCase() : '').trim().replace(/\\t/g, '');\n              if (flag) {\n                flags.push(flag);\n              }\n            });\n          }\n          result = flags.join(' ').trim();\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_darwin) {\n        exec('sysctl machdep.cpu.features', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            if (lines.length > 0 && lines[0].indexOf('machdep.cpu.features:') !== -1) {\n              result = lines[0].split(':')[1].trim().toLowerCase();\n            }\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.cpuFlags = cpuFlags;\n\n// --------------------------\n// CPU Cache\n\nfunction cpuCache(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      let result = {\n        l1d: -1,\n        l1i: -1,\n        l2: -1,\n        l3: -1,\n      };\n      if (_linux) {\n        try {\n          exec('export LC_ALL=C; lscpu; unset LC_ALL', function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              lines.forEach(function (line) {\n                let parts = line.split(':');\n                if (parts[0].toUpperCase().indexOf('L1D CACHE') !== -1) {\n                  result.l1d = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n                }\n                if (parts[0].toUpperCase().indexOf('L1I CACHE') !== -1) {\n                  result.l1i = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n                }\n                if (parts[0].toUpperCase().indexOf('L2 CACHE') !== -1) {\n                  result.l2 = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n                }\n                if (parts[0].toUpperCase().indexOf('L3 CACHE') !== -1) {\n                  result.l3 = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n                }\n              });\n            }\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n      if (_freebsd || _openbsd || _netbsd) {\n        exec('export LC_ALL=C; dmidecode -t 7 2>/dev/null; unset LC_ALL', function (error, stdout) {\n          let cache = [];\n          if (!error) {\n            const data = stdout.toString();\n            cache = data.split('Cache Information');\n            cache.shift();\n          }\n          for (let i = 0; i < cache.length; i++) {\n            const lines = cache[i].split('\\n');\n            let cacheType = util.getValue(lines, 'Socket Designation').toLowerCase().replace(' ', '-').split('-');\n            cacheType = cacheType.length ? cacheType[0] : '';\n            const sizeParts = util.getValue(lines, 'Installed Size').split(' ');\n            let size = parseInt(sizeParts[0], 10);\n            const unit = sizeParts.length > 1 ? sizeParts[1] : 'kb';\n            size = size * (unit === 'kb' ? 1024 : (unit === 'mb' ? 1024 * 1024 : (unit === 'gb' ? 1024 * 1024 * 1024 : 1)));\n            if (cacheType) {\n              if (cacheType === 'l1') {\n                result.cache[cacheType + 'd'] = size / 2;\n                result.cache[cacheType + 'i'] = size / 2;\n              } else {\n                result.cache[cacheType] = size;\n              }\n            }\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_darwin) {\n        exec('sysctl hw.l1icachesize hw.l1dcachesize hw.l2cachesize hw.l3cachesize', function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            lines.forEach(function (line) {\n              let parts = line.split(':');\n              if (parts[0].toLowerCase().indexOf('hw.l1icachesize') !== -1) {\n                result.l1d = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n              }\n              if (parts[0].toLowerCase().indexOf('hw.l1dcachesize') !== -1) {\n                result.l1i = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n              }\n              if (parts[0].toLowerCase().indexOf('hw.l2cachesize') !== -1) {\n                result.l2 = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n              }\n              if (parts[0].toLowerCase().indexOf('hw.l3cachesize') !== -1) {\n                result.l3 = parseInt(parts[1].trim()) * (parts[1].indexOf('K') !== -1 ? 1024 : 1);\n              }\n            });\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      }\n      if (_sunos) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_windows) {\n        try {\n          util.wmic('cpu get l2cachesize, l3cachesize /value').then((stdout, error) => {\n            if (!error) {\n              let lines = stdout.split('\\r\\n');\n              result.l1d = 0;\n              result.l1i = 0;\n              result.l2 = util.getValue(lines, 'l2cachesize', '=');\n              result.l3 = util.getValue(lines, 'l3cachesize', '=');\n              if (result.l2) { result.l2 = parseInt(result.l2, 10) * 1024; }\n              if (result.l3) { result.l3 = parseInt(result.l3, 10) * 1024; }\n            }\n            util.wmic('path Win32_CacheMemory get CacheType,InstalledSize,Purpose').then((stdout, error) => {\n              if (!error) {\n                let lines = stdout.split('\\r\\n').filter(line => line.trim() !== '').filter((line, idx) => idx > 0);\n                lines.forEach(function (line) {\n                  if (line !== '') {\n                    line = line.trim().split(/\\s\\s+/);\n                    // L1 Instructions\n                    if (line[2] === 'L1 Cache' && line[0] === '3') {\n                      result.l1i = parseInt(line[1], 10);\n                    }\n                    // L1 Data\n                    if (line[2] === 'L1 Cache' && line[0] === '4') {\n                      result.l1d = parseInt(line[1], 10);\n                    }\n                  }\n                });\n              }\n              if (callback) { callback(result); }\n              resolve(result);\n            });\n          });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\nexports.cpuCache = cpuCache;\n\n// --------------------------\n// CPU - current load - in %\n\nfunction getLoad() {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let loads = os.loadavg().map(function (x) { return x / util.cores(); });\n      let avgload = parseFloat((Math.max.apply(Math, loads)).toFixed(2));\n      let result = {};\n\n      let now = Date.now() - _current_cpu.ms;\n      if (now >= 200) {\n        _current_cpu.ms = Date.now();\n        const cpus = os.cpus();\n        let totalUser = 0;\n        let totalSystem = 0;\n        let totalNice = 0;\n        let totalIrq = 0;\n        let totalIdle = 0;\n        let cores = [];\n        _corecount = (cpus && cpus.length) ? cpus.length : 0;\n\n        for (let i = 0; i < _corecount; i++) {\n          const cpu = cpus[i].times;\n          totalUser += cpu.user;\n          totalSystem += cpu.sys;\n          totalNice += cpu.nice;\n          totalIdle += cpu.idle;\n          totalIrq += cpu.irq;\n          let tmp_tick = (_cpus && _cpus[i] && _cpus[i].totalTick ? _cpus[i].totalTick : 0);\n          let tmp_load = (_cpus && _cpus[i] && _cpus[i].totalLoad ? _cpus[i].totalLoad : 0);\n          let tmp_user = (_cpus && _cpus[i] && _cpus[i].user ? _cpus[i].user : 0);\n          let tmp_system = (_cpus && _cpus[i] && _cpus[i].sys ? _cpus[i].sys : 0);\n          let tmp_nice = (_cpus && _cpus[i] && _cpus[i].nice ? _cpus[i].nice : 0);\n          let tmp_idle = (_cpus && _cpus[i] && _cpus[i].idle ? _cpus[i].idle : 0);\n          let tmp_irq = (_cpus && _cpus[i] && _cpus[i].irq ? _cpus[i].irq : 0);\n          _cpus[i] = cpu;\n          _cpus[i].totalTick = _cpus[i].user + _cpus[i].sys + _cpus[i].nice + _cpus[i].irq + _cpus[i].idle;\n          _cpus[i].totalLoad = _cpus[i].user + _cpus[i].sys + _cpus[i].nice + _cpus[i].irq;\n          _cpus[i].currentTick = _cpus[i].totalTick - tmp_tick;\n          _cpus[i].load = (_cpus[i].totalLoad - tmp_load);\n          _cpus[i].load_user = (_cpus[i].user - tmp_user);\n          _cpus[i].load_system = (_cpus[i].sys - tmp_system);\n          _cpus[i].load_nice = (_cpus[i].nice - tmp_nice);\n          _cpus[i].load_idle = (_cpus[i].idle - tmp_idle);\n          _cpus[i].load_irq = (_cpus[i].irq - tmp_irq);\n          cores[i] = {};\n          cores[i].load = _cpus[i].load / _cpus[i].currentTick * 100;\n          cores[i].load_user = _cpus[i].load_user / _cpus[i].currentTick * 100;\n          cores[i].load_system = _cpus[i].load_system / _cpus[i].currentTick * 100;\n          cores[i].load_nice = _cpus[i].load_nice / _cpus[i].currentTick * 100;\n          cores[i].load_idle = _cpus[i].load_idle / _cpus[i].currentTick * 100;\n          cores[i].load_irq = _cpus[i].load_irq / _cpus[i].currentTick * 100;\n          cores[i].raw_load = _cpus[i].load;\n          cores[i].raw_load_user = _cpus[i].load_user;\n          cores[i].raw_load_system = _cpus[i].load_system;\n          cores[i].raw_load_nice = _cpus[i].load_nice;\n          cores[i].raw_load_idle = _cpus[i].load_idle;\n          cores[i].raw_load_irq = _cpus[i].load_irq;\n        }\n        let totalTick = totalUser + totalSystem + totalNice + totalIrq + totalIdle;\n        let totalLoad = totalUser + totalSystem + totalNice + totalIrq;\n        let currentTick = totalTick - _current_cpu.tick;\n        result = {\n          avgload: avgload,\n          currentload: (totalLoad - _current_cpu.load) / currentTick * 100,\n          currentload_user: (totalUser - _current_cpu.user) / currentTick * 100,\n          currentload_system: (totalSystem - _current_cpu.system) / currentTick * 100,\n          currentload_nice: (totalNice - _current_cpu.nice) / currentTick * 100,\n          currentload_idle: (totalIdle - _current_cpu.idle) / currentTick * 100,\n          currentload_irq: (totalIrq - _current_cpu.irq) / currentTick * 100,\n          raw_currentload: (totalLoad - _current_cpu.load),\n          raw_currentload_user: (totalUser - _current_cpu.user),\n          raw_currentload_system: (totalSystem - _current_cpu.system),\n          raw_currentload_nice: (totalNice - _current_cpu.nice),\n          raw_currentload_idle: (totalIdle - _current_cpu.idle),\n          raw_currentload_irq: (totalIrq - _current_cpu.irq),\n          cpus: cores\n        };\n        _current_cpu = {\n          user: totalUser,\n          nice: totalNice,\n          system: totalSystem,\n          idle: totalIdle,\n          irq: totalIrq,\n          tick: totalTick,\n          load: totalLoad,\n          ms: _current_cpu.ms,\n          currentload: result.currentload,\n          currentload_user: result.currentload_user,\n          currentload_system: result.currentload_system,\n          currentload_nice: result.currentload_nice,\n          currentload_idle: result.currentload_idle,\n          currentload_irq: result.currentload_irq,\n          raw_currentload: result.raw_currentload,\n          raw_currentload_user: result.raw_currentload_user,\n          raw_currentload_system: result.raw_currentload_system,\n          raw_currentload_nice: result.raw_currentload_nice,\n          raw_currentload_idle: result.raw_currentload_idle,\n          raw_currentload_irq: result.raw_currentload_irq,\n        };\n      } else {\n        let cores = [];\n        for (let i = 0; i < _corecount; i++) {\n          cores[i] = {};\n          cores[i].load = _cpus[i].load / _cpus[i].currentTick * 100;\n          cores[i].load_user = _cpus[i].load_user / _cpus[i].currentTick * 100;\n          cores[i].load_system = _cpus[i].load_system / _cpus[i].currentTick * 100;\n          cores[i].load_nice = _cpus[i].load_nice / _cpus[i].currentTick * 100;\n          cores[i].load_idle = _cpus[i].load_idle / _cpus[i].currentTick * 100;\n          cores[i].load_irq = _cpus[i].load_irq / _cpus[i].currentTick * 100;\n          cores[i].raw_load = _cpus[i].load;\n          cores[i].raw_load_user = _cpus[i].load_user;\n          cores[i].raw_load_system = _cpus[i].load_system;\n          cores[i].raw_load_nice = _cpus[i].load_nice;\n          cores[i].raw_load_idle = _cpus[i].load_idle;\n          cores[i].raw_load_irq = _cpus[i].load_irq;\n        }\n        result = {\n          avgload: avgload,\n          currentload: _current_cpu.currentload,\n          currentload_user: _current_cpu.currentload_user,\n          currentload_system: _current_cpu.currentload_system,\n          currentload_nice: _current_cpu.currentload_nice,\n          currentload_idle: _current_cpu.currentload_idle,\n          currentload_irq: _current_cpu.currentload_irq,\n          raw_currentload: _current_cpu.raw_currentload,\n          raw_currentload_user: _current_cpu.raw_currentload_user,\n          raw_currentload_system: _current_cpu.raw_currentload_system,\n          raw_currentload_nice: _current_cpu.raw_currentload_nice,\n          raw_currentload_idle: _current_cpu.raw_currentload_idle,\n          raw_currentload_irq: _current_cpu.raw_currentload_irq,\n          cpus: cores\n        };\n      }\n      resolve(result);\n    });\n  });\n}\n\nfunction currentLoad(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      getLoad().then(result => {\n        if (callback) { callback(result); }\n        resolve(result);\n      });\n    });\n  });\n}\n\nexports.currentLoad = currentLoad;\n\n// --------------------------\n// PS - full load\n// since bootup\n\nfunction getFullLoad() {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      const cpus = os.cpus();\n      let totalUser = 0;\n      let totalSystem = 0;\n      let totalNice = 0;\n      let totalIrq = 0;\n      let totalIdle = 0;\n\n      let result = 0;\n\n      if (cpus && cpus.length) {\n        for (let i = 0, len = cpus.length; i < len; i++) {\n          const cpu = cpus[i].times;\n          totalUser += cpu.user;\n          totalSystem += cpu.sys;\n          totalNice += cpu.nice;\n          totalIrq += cpu.irq;\n          totalIdle += cpu.idle;\n        }\n        let totalTicks = totalIdle + totalIrq + totalNice + totalSystem + totalUser;\n        result = (totalTicks - totalIdle) / totalTicks * 100.0;\n\n      } else {\n        result = 0;\n      }\n      resolve(result);\n    });\n  });\n}\n\nfunction fullLoad(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      getFullLoad().then(result => {\n        if (callback) { callback(result); }\n        resolve(result);\n      });\n    });\n  });\n}\n\nexports.fullLoad = fullLoad;\n\n"]},"metadata":{},"sourceType":"script"}