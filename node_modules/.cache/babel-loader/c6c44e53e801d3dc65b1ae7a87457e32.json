{"ast":null,"code":"'use strict';\n\nconst ArrayPrompt = require('../types/array');\n\nclass Survey extends ArrayPrompt {\n  constructor(options = {}) {\n    super(options);\n    this.emptyError = options.emptyError || 'No items were selected';\n    this.term = process.env.TERM_PROGRAM;\n\n    if (!this.options.header) {\n      let header = ['', '4 - Strongly Agree', '3 - Agree', '2 - Neutral', '1 - Disagree', '0 - Strongly Disagree', ''];\n      header = header.map(ele => this.styles.muted(ele));\n      this.state.header = header.join('\\n   ');\n    }\n  }\n\n  async toChoices(...args) {\n    if (this.createdScales) return false;\n    this.createdScales = true;\n    let choices = await super.toChoices(...args);\n\n    for (let choice of choices) {\n      choice.scale = createScale(5, this.options);\n      choice.scaleIdx = 2;\n    }\n\n    return choices;\n  }\n\n  dispatch() {\n    this.alert();\n  }\n\n  space() {\n    let choice = this.focused;\n    let ele = choice.scale[choice.scaleIdx];\n    let selected = ele.selected;\n    choice.scale.forEach(e => e.selected = false);\n    ele.selected = !selected;\n    return this.render();\n  }\n\n  indicator() {\n    return '';\n  }\n\n  pointer() {\n    return '';\n  }\n\n  separator() {\n    return this.styles.muted(this.symbols.ellipsis);\n  }\n\n  right() {\n    let choice = this.focused;\n    if (choice.scaleIdx >= choice.scale.length - 1) return this.alert();\n    choice.scaleIdx++;\n    return this.render();\n  }\n\n  left() {\n    let choice = this.focused;\n    if (choice.scaleIdx <= 0) return this.alert();\n    choice.scaleIdx--;\n    return this.render();\n  }\n\n  indent() {\n    return '   ';\n  }\n\n  async renderChoice(item, i) {\n    await this.onChoice(item, i);\n    let focused = this.index === i;\n    let isHyper = this.term === 'Hyper';\n    let n = !isHyper ? 8 : 9;\n    let s = !isHyper ? ' ' : '';\n    let ln = this.symbols.line.repeat(n);\n    let sp = ' '.repeat(n + (isHyper ? 0 : 1));\n\n    let dot = enabled => (enabled ? this.styles.success('◉') : '◯') + s;\n\n    let num = i + 1 + '.';\n    let color = focused ? this.styles.heading : this.styles.noop;\n    let msg = await this.resolve(item.message, this.state, item, i);\n    let indent = this.indent(item);\n    let scale = indent + item.scale.map((e, i) => dot(i === item.scaleIdx)).join(ln);\n\n    let val = i => i === item.scaleIdx ? color(i) : i;\n\n    let next = indent + item.scale.map((e, i) => val(i)).join(sp);\n\n    let line = () => [num, msg].filter(Boolean).join(' ');\n\n    let lines = () => [line(), scale, next, ' '].filter(Boolean).join('\\n');\n\n    if (focused) {\n      scale = this.styles.cyan(scale);\n      next = this.styles.cyan(next);\n    }\n\n    return lines();\n  }\n\n  async renderChoices() {\n    if (this.state.submitted) return '';\n    let choices = this.visible.map(async (ch, i) => await this.renderChoice(ch, i));\n    let visible = await Promise.all(choices);\n    if (!visible.length) visible.push(this.styles.danger('No matching choices'));\n    return visible.join('\\n');\n  }\n\n  format() {\n    if (this.state.submitted) {\n      let values = this.choices.map(ch => this.styles.info(ch.scaleIdx));\n      return values.join(', ');\n    }\n\n    return '';\n  }\n\n  async render() {\n    let {\n      submitted,\n      size\n    } = this.state;\n    let prefix = await this.prefix();\n    let separator = await this.separator();\n    let message = await this.message();\n    let prompt = [prefix, message, separator].filter(Boolean).join(' ');\n    this.state.prompt = prompt;\n    let header = await this.header();\n    let output = await this.format();\n    let help = (await this.error()) || (await this.hint());\n    let body = await this.renderChoices();\n    let footer = await this.footer();\n    if (output || !help) prompt += ' ' + output;\n    if (help && !prompt.includes(help)) prompt += ' ' + help;\n\n    if (submitted && !output && !body && this.multiple && this.type !== 'form') {\n      prompt += this.styles.danger(this.emptyError);\n    }\n\n    this.clear(size);\n    this.write([prompt, header, body, footer].filter(Boolean).join('\\n'));\n    this.restore();\n  }\n\n  submit() {\n    this.value = {};\n\n    for (let choice of this.choices) {\n      this.value[choice.name] = choice.scaleIdx;\n    }\n\n    return this.base.submit.call(this);\n  }\n\n}\n\nfunction createScale(n, options = {}) {\n  if (Array.isArray(options.scale)) {\n    return options.scale.map(ele => ({ ...ele\n    }));\n  }\n\n  let scale = [];\n\n  for (let i = 1; i < n + 1; i++) scale.push({\n    i,\n    selected: false\n  });\n\n  return scale;\n}\n\nmodule.exports = Survey;","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/lib/prompts/survey.js"],"names":["ArrayPrompt","require","Survey","constructor","options","emptyError","term","process","env","TERM_PROGRAM","header","map","ele","styles","muted","state","join","toChoices","args","createdScales","choices","choice","scale","createScale","scaleIdx","dispatch","alert","space","focused","selected","forEach","e","render","indicator","pointer","separator","symbols","ellipsis","right","length","left","indent","renderChoice","item","i","onChoice","index","isHyper","n","s","ln","line","repeat","sp","dot","enabled","success","num","color","heading","noop","msg","resolve","message","val","next","filter","Boolean","lines","cyan","renderChoices","submitted","visible","ch","Promise","all","push","danger","format","values","info","size","prefix","prompt","output","help","error","hint","body","footer","includes","multiple","type","clear","write","restore","submit","value","name","base","call","Array","isArray","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AAEA,MAAMC,MAAN,SAAqBF,WAArB,CAAiC;AAC/BG,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACxB,UAAMA,OAAN;AACA,SAAKC,UAAL,GAAkBD,OAAO,CAACC,UAAR,IAAsB,wBAAxC;AACA,SAAKC,IAAL,GAAYC,OAAO,CAACC,GAAR,CAAYC,YAAxB;;AAEA,QAAI,CAAC,KAAKL,OAAL,CAAaM,MAAlB,EAA0B;AACxB,UAAIA,MAAM,GAAG,CAAC,EAAD,EAAK,oBAAL,EAA2B,WAA3B,EAAwC,aAAxC,EAAuD,cAAvD,EAAuE,uBAAvE,EAAgG,EAAhG,CAAb;AACAA,MAAAA,MAAM,GAAGA,MAAM,CAACC,GAAP,CAAWC,GAAG,IAAI,KAAKC,MAAL,CAAYC,KAAZ,CAAkBF,GAAlB,CAAlB,CAAT;AACA,WAAKG,KAAL,CAAWL,MAAX,GAAoBA,MAAM,CAACM,IAAP,CAAY,OAAZ,CAApB;AACD;AACF;;AAEc,QAATC,SAAS,CAAC,GAAGC,IAAJ,EAAU;AACvB,QAAI,KAAKC,aAAT,EAAwB,OAAO,KAAP;AACxB,SAAKA,aAAL,GAAqB,IAArB;AACA,QAAIC,OAAO,GAAG,MAAM,MAAMH,SAAN,CAAgB,GAAGC,IAAnB,CAApB;;AACA,SAAK,IAAIG,MAAT,IAAmBD,OAAnB,EAA4B;AAC1BC,MAAAA,MAAM,CAACC,KAAP,GAAeC,WAAW,CAAC,CAAD,EAAI,KAAKnB,OAAT,CAA1B;AACAiB,MAAAA,MAAM,CAACG,QAAP,GAAkB,CAAlB;AACD;;AACD,WAAOJ,OAAP;AACD;;AAEDK,EAAAA,QAAQ,GAAG;AACT,SAAKC,KAAL;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,QAAIN,MAAM,GAAG,KAAKO,OAAlB;AACA,QAAIhB,GAAG,GAAGS,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACG,QAApB,CAAV;AACA,QAAIK,QAAQ,GAAGjB,GAAG,CAACiB,QAAnB;AACAR,IAAAA,MAAM,CAACC,KAAP,CAAaQ,OAAb,CAAqBC,CAAC,IAAKA,CAAC,CAACF,QAAF,GAAa,KAAxC;AACAjB,IAAAA,GAAG,CAACiB,QAAJ,GAAe,CAACA,QAAhB;AACA,WAAO,KAAKG,MAAL,EAAP;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,WAAO,EAAP;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,EAAP;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKtB,MAAL,CAAYC,KAAZ,CAAkB,KAAKsB,OAAL,CAAaC,QAA/B,CAAP;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,QAAIjB,MAAM,GAAG,KAAKO,OAAlB;AACA,QAAIP,MAAM,CAACG,QAAP,IAAmBH,MAAM,CAACC,KAAP,CAAaiB,MAAb,GAAsB,CAA7C,EAAgD,OAAO,KAAKb,KAAL,EAAP;AAChDL,IAAAA,MAAM,CAACG,QAAP;AACA,WAAO,KAAKQ,MAAL,EAAP;AACD;;AAEDQ,EAAAA,IAAI,GAAG;AACL,QAAInB,MAAM,GAAG,KAAKO,OAAlB;AACA,QAAIP,MAAM,CAACG,QAAP,IAAmB,CAAvB,EAA0B,OAAO,KAAKE,KAAL,EAAP;AAC1BL,IAAAA,MAAM,CAACG,QAAP;AACA,WAAO,KAAKQ,MAAL,EAAP;AACD;;AAEDS,EAAAA,MAAM,GAAG;AACP,WAAO,KAAP;AACD;;AAEiB,QAAZC,YAAY,CAACC,IAAD,EAAOC,CAAP,EAAU;AAC1B,UAAM,KAAKC,QAAL,CAAcF,IAAd,EAAoBC,CAApB,CAAN;AACA,QAAIhB,OAAO,GAAG,KAAKkB,KAAL,KAAeF,CAA7B;AACA,QAAIG,OAAO,GAAG,KAAKzC,IAAL,KAAc,OAA5B;AACA,QAAI0C,CAAC,GAAG,CAACD,OAAD,GAAW,CAAX,GAAe,CAAvB;AACA,QAAIE,CAAC,GAAG,CAACF,OAAD,GAAW,GAAX,GAAiB,EAAzB;AACA,QAAIG,EAAE,GAAG,KAAKd,OAAL,CAAae,IAAb,CAAkBC,MAAlB,CAAyBJ,CAAzB,CAAT;AACA,QAAIK,EAAE,GAAG,IAAID,MAAJ,CAAWJ,CAAC,IAAID,OAAO,GAAG,CAAH,GAAO,CAAlB,CAAZ,CAAT;;AACA,QAAIO,GAAG,GAAGC,OAAO,IAAI,CAACA,OAAO,GAAG,KAAK1C,MAAL,CAAY2C,OAAZ,CAAoB,GAApB,CAAH,GAA8B,GAAtC,IAA6CP,CAAlE;;AAEA,QAAIQ,GAAG,GAAGb,CAAC,GAAG,CAAJ,GAAQ,GAAlB;AACA,QAAIc,KAAK,GAAG9B,OAAO,GAAG,KAAKf,MAAL,CAAY8C,OAAf,GAAyB,KAAK9C,MAAL,CAAY+C,IAAxD;AACA,QAAIC,GAAG,GAAG,MAAM,KAAKC,OAAL,CAAanB,IAAI,CAACoB,OAAlB,EAA2B,KAAKhD,KAAhC,EAAuC4B,IAAvC,EAA6CC,CAA7C,CAAhB;AACA,QAAIH,MAAM,GAAG,KAAKA,MAAL,CAAYE,IAAZ,CAAb;AACA,QAAIrB,KAAK,GAAGmB,MAAM,GAAGE,IAAI,CAACrB,KAAL,CAAWX,GAAX,CAAe,CAACoB,CAAD,EAAIa,CAAJ,KAAUU,GAAG,CAACV,CAAC,KAAKD,IAAI,CAACnB,QAAZ,CAA5B,EAAmDR,IAAnD,CAAwDkC,EAAxD,CAArB;;AACA,QAAIc,GAAG,GAAGpB,CAAC,IAAIA,CAAC,KAAKD,IAAI,CAACnB,QAAX,GAAsBkC,KAAK,CAACd,CAAD,CAA3B,GAAiCA,CAAhD;;AACA,QAAIqB,IAAI,GAAGxB,MAAM,GAAGE,IAAI,CAACrB,KAAL,CAAWX,GAAX,CAAe,CAACoB,CAAD,EAAIa,CAAJ,KAAUoB,GAAG,CAACpB,CAAD,CAA5B,EAAiC5B,IAAjC,CAAsCqC,EAAtC,CAApB;;AAEA,QAAIF,IAAI,GAAG,MAAM,CAACM,GAAD,EAAMI,GAAN,EAAWK,MAAX,CAAkBC,OAAlB,EAA2BnD,IAA3B,CAAgC,GAAhC,CAAjB;;AACA,QAAIoD,KAAK,GAAG,MAAM,CAACjB,IAAI,EAAL,EAAS7B,KAAT,EAAgB2C,IAAhB,EAAsB,GAAtB,EAA2BC,MAA3B,CAAkCC,OAAlC,EAA2CnD,IAA3C,CAAgD,IAAhD,CAAlB;;AAEA,QAAIY,OAAJ,EAAa;AACXN,MAAAA,KAAK,GAAG,KAAKT,MAAL,CAAYwD,IAAZ,CAAiB/C,KAAjB,CAAR;AACA2C,MAAAA,IAAI,GAAG,KAAKpD,MAAL,CAAYwD,IAAZ,CAAiBJ,IAAjB,CAAP;AACD;;AAED,WAAOG,KAAK,EAAZ;AACD;;AAEkB,QAAbE,aAAa,GAAG;AACpB,QAAI,KAAKvD,KAAL,CAAWwD,SAAf,EAA0B,OAAO,EAAP;AAC1B,QAAInD,OAAO,GAAG,KAAKoD,OAAL,CAAa7D,GAAb,CAAiB,OAAM8D,EAAN,EAAU7B,CAAV,KAAgB,MAAM,KAAKF,YAAL,CAAkB+B,EAAlB,EAAsB7B,CAAtB,CAAvC,CAAd;AACA,QAAI4B,OAAO,GAAG,MAAME,OAAO,CAACC,GAAR,CAAYvD,OAAZ,CAApB;AACA,QAAI,CAACoD,OAAO,CAACjC,MAAb,EAAqBiC,OAAO,CAACI,IAAR,CAAa,KAAK/D,MAAL,CAAYgE,MAAZ,CAAmB,qBAAnB,CAAb;AACrB,WAAOL,OAAO,CAACxD,IAAR,CAAa,IAAb,CAAP;AACD;;AAED8D,EAAAA,MAAM,GAAG;AACP,QAAI,KAAK/D,KAAL,CAAWwD,SAAf,EAA0B;AACxB,UAAIQ,MAAM,GAAG,KAAK3D,OAAL,CAAaT,GAAb,CAAiB8D,EAAE,IAAI,KAAK5D,MAAL,CAAYmE,IAAZ,CAAiBP,EAAE,CAACjD,QAApB,CAAvB,CAAb;AACA,aAAOuD,MAAM,CAAC/D,IAAP,CAAY,IAAZ,CAAP;AACD;;AACD,WAAO,EAAP;AACD;;AAEW,QAANgB,MAAM,GAAG;AACb,QAAI;AAAEuC,MAAAA,SAAF;AAAaU,MAAAA;AAAb,QAAsB,KAAKlE,KAA/B;AAEA,QAAImE,MAAM,GAAG,MAAM,KAAKA,MAAL,EAAnB;AACA,QAAI/C,SAAS,GAAG,MAAM,KAAKA,SAAL,EAAtB;AACA,QAAI4B,OAAO,GAAG,MAAM,KAAKA,OAAL,EAApB;AAEA,QAAIoB,MAAM,GAAG,CAACD,MAAD,EAASnB,OAAT,EAAkB5B,SAAlB,EAA6B+B,MAA7B,CAAoCC,OAApC,EAA6CnD,IAA7C,CAAkD,GAAlD,CAAb;AACA,SAAKD,KAAL,CAAWoE,MAAX,GAAoBA,MAApB;AAEA,QAAIzE,MAAM,GAAG,MAAM,KAAKA,MAAL,EAAnB;AACA,QAAI0E,MAAM,GAAG,MAAM,KAAKN,MAAL,EAAnB;AACA,QAAIO,IAAI,GAAG,OAAM,KAAKC,KAAL,EAAN,MAAsB,MAAM,KAAKC,IAAL,EAA5B,CAAX;AACA,QAAIC,IAAI,GAAG,MAAM,KAAKlB,aAAL,EAAjB;AACA,QAAImB,MAAM,GAAG,MAAM,KAAKA,MAAL,EAAnB;AAEA,QAAIL,MAAM,IAAI,CAACC,IAAf,EAAqBF,MAAM,IAAI,MAAMC,MAAhB;AACrB,QAAIC,IAAI,IAAI,CAACF,MAAM,CAACO,QAAP,CAAgBL,IAAhB,CAAb,EAAoCF,MAAM,IAAI,MAAME,IAAhB;;AAEpC,QAAId,SAAS,IAAI,CAACa,MAAd,IAAwB,CAACI,IAAzB,IAAiC,KAAKG,QAAtC,IAAkD,KAAKC,IAAL,KAAc,MAApE,EAA4E;AAC1ET,MAAAA,MAAM,IAAI,KAAKtE,MAAL,CAAYgE,MAAZ,CAAmB,KAAKxE,UAAxB,CAAV;AACD;;AAED,SAAKwF,KAAL,CAAWZ,IAAX;AACA,SAAKa,KAAL,CAAW,CAACX,MAAD,EAASzE,MAAT,EAAiB8E,IAAjB,EAAuBC,MAAvB,EAA+BvB,MAA/B,CAAsCC,OAAtC,EAA+CnD,IAA/C,CAAoD,IAApD,CAAX;AACA,SAAK+E,OAAL;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,SAAKC,KAAL,GAAa,EAAb;;AACA,SAAK,IAAI5E,MAAT,IAAmB,KAAKD,OAAxB,EAAiC;AAC/B,WAAK6E,KAAL,CAAW5E,MAAM,CAAC6E,IAAlB,IAA0B7E,MAAM,CAACG,QAAjC;AACD;;AACD,WAAO,KAAK2E,IAAL,CAAUH,MAAV,CAAiBI,IAAjB,CAAsB,IAAtB,CAAP;AACD;;AAlJ8B;;AAqJjC,SAAS7E,WAAT,CAAqByB,CAArB,EAAwB5C,OAAO,GAAG,EAAlC,EAAsC;AACpC,MAAIiG,KAAK,CAACC,OAAN,CAAclG,OAAO,CAACkB,KAAtB,CAAJ,EAAkC;AAChC,WAAOlB,OAAO,CAACkB,KAAR,CAAcX,GAAd,CAAkBC,GAAG,KAAK,EAAE,GAAGA;AAAL,KAAL,CAArB,CAAP;AACD;;AACD,MAAIU,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,CAAC,GAAG,CAAxB,EAA2BJ,CAAC,EAA5B,EAAgCtB,KAAK,CAACsD,IAAN,CAAW;AAAEhC,IAAAA,CAAF;AAAKf,IAAAA,QAAQ,EAAE;AAAf,GAAX;;AAChC,SAAOP,KAAP;AACD;;AAEDiF,MAAM,CAACC,OAAP,GAAiBtG,MAAjB","sourcesContent":["'use strict';\n\nconst ArrayPrompt = require('../types/array');\n\nclass Survey extends ArrayPrompt {\n  constructor(options = {}) {\n    super(options);\n    this.emptyError = options.emptyError || 'No items were selected';\n    this.term = process.env.TERM_PROGRAM;\n\n    if (!this.options.header) {\n      let header = ['', '4 - Strongly Agree', '3 - Agree', '2 - Neutral', '1 - Disagree', '0 - Strongly Disagree', ''];\n      header = header.map(ele => this.styles.muted(ele));\n      this.state.header = header.join('\\n   ');\n    }\n  }\n\n  async toChoices(...args) {\n    if (this.createdScales) return false;\n    this.createdScales = true;\n    let choices = await super.toChoices(...args);\n    for (let choice of choices) {\n      choice.scale = createScale(5, this.options);\n      choice.scaleIdx = 2;\n    }\n    return choices;\n  }\n\n  dispatch() {\n    this.alert();\n  }\n\n  space() {\n    let choice = this.focused;\n    let ele = choice.scale[choice.scaleIdx];\n    let selected = ele.selected;\n    choice.scale.forEach(e => (e.selected = false));\n    ele.selected = !selected;\n    return this.render();\n  }\n\n  indicator() {\n    return '';\n  }\n\n  pointer() {\n    return '';\n  }\n\n  separator() {\n    return this.styles.muted(this.symbols.ellipsis);\n  }\n\n  right() {\n    let choice = this.focused;\n    if (choice.scaleIdx >= choice.scale.length - 1) return this.alert();\n    choice.scaleIdx++;\n    return this.render();\n  }\n\n  left() {\n    let choice = this.focused;\n    if (choice.scaleIdx <= 0) return this.alert();\n    choice.scaleIdx--;\n    return this.render();\n  }\n\n  indent() {\n    return '   ';\n  }\n\n  async renderChoice(item, i) {\n    await this.onChoice(item, i);\n    let focused = this.index === i;\n    let isHyper = this.term === 'Hyper';\n    let n = !isHyper ? 8 : 9;\n    let s = !isHyper ? ' ' : '';\n    let ln = this.symbols.line.repeat(n);\n    let sp = ' '.repeat(n + (isHyper ? 0 : 1));\n    let dot = enabled => (enabled ? this.styles.success('◉') : '◯') + s;\n\n    let num = i + 1 + '.';\n    let color = focused ? this.styles.heading : this.styles.noop;\n    let msg = await this.resolve(item.message, this.state, item, i);\n    let indent = this.indent(item);\n    let scale = indent + item.scale.map((e, i) => dot(i === item.scaleIdx)).join(ln);\n    let val = i => i === item.scaleIdx ? color(i) : i;\n    let next = indent + item.scale.map((e, i) => val(i)).join(sp);\n\n    let line = () => [num, msg].filter(Boolean).join(' ');\n    let lines = () => [line(), scale, next, ' '].filter(Boolean).join('\\n');\n\n    if (focused) {\n      scale = this.styles.cyan(scale);\n      next = this.styles.cyan(next);\n    }\n\n    return lines();\n  }\n\n  async renderChoices() {\n    if (this.state.submitted) return '';\n    let choices = this.visible.map(async(ch, i) => await this.renderChoice(ch, i));\n    let visible = await Promise.all(choices);\n    if (!visible.length) visible.push(this.styles.danger('No matching choices'));\n    return visible.join('\\n');\n  }\n\n  format() {\n    if (this.state.submitted) {\n      let values = this.choices.map(ch => this.styles.info(ch.scaleIdx));\n      return values.join(', ');\n    }\n    return '';\n  }\n\n  async render() {\n    let { submitted, size } = this.state;\n\n    let prefix = await this.prefix();\n    let separator = await this.separator();\n    let message = await this.message();\n\n    let prompt = [prefix, message, separator].filter(Boolean).join(' ');\n    this.state.prompt = prompt;\n\n    let header = await this.header();\n    let output = await this.format();\n    let help = await this.error() || await this.hint();\n    let body = await this.renderChoices();\n    let footer = await this.footer();\n\n    if (output || !help) prompt += ' ' + output;\n    if (help && !prompt.includes(help)) prompt += ' ' + help;\n\n    if (submitted && !output && !body && this.multiple && this.type !== 'form') {\n      prompt += this.styles.danger(this.emptyError);\n    }\n\n    this.clear(size);\n    this.write([prompt, header, body, footer].filter(Boolean).join('\\n'));\n    this.restore();\n  }\n\n  submit() {\n    this.value = {};\n    for (let choice of this.choices) {\n      this.value[choice.name] = choice.scaleIdx;\n    }\n    return this.base.submit.call(this);\n  }\n}\n\nfunction createScale(n, options = {}) {\n  if (Array.isArray(options.scale)) {\n    return options.scale.map(ele => ({ ...ele }));\n  }\n  let scale = [];\n  for (let i = 1; i < n + 1; i++) scale.push({ i, selected: false });\n  return scale;\n}\n\nmodule.exports = Survey;\n"]},"metadata":{},"sourceType":"script"}