{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\n\nconst Events = require('events');\n\nconst utils = require('./lib/utils');\n/**\n * Create an instance of `Enquirer`.\n *\n * ```js\n * const Enquirer = require('enquirer');\n * const enquirer = new Enquirer();\n * ```\n * @name Enquirer\n * @param {Object} `options` (optional) Options to use with all prompts.\n * @param {Object} `answers` (optional) Answers object to initialize with.\n * @api public\n */\n\n\nclass Enquirer extends Events {\n  constructor(options, answers) {\n    super();\n    this.options = utils.merge({}, options);\n    this.answers = { ...answers\n    };\n  }\n  /**\n   * Register a custom prompt type.\n   *\n   * ```js\n   * const Enquirer = require('enquirer');\n   * const enquirer = new Enquirer();\n   * enquirer.register('customType', require('./custom-prompt'));\n   * ```\n   * @name register()\n   * @param {String} `type`\n   * @param {Function|Prompt} `fn` `Prompt` class, or a function that returns a `Prompt` class.\n   * @return {Object} Returns the Enquirer instance\n   * @api public\n   */\n\n\n  register(type, fn) {\n    if (utils.isObject(type)) {\n      for (let key of Object.keys(type)) this.register(key, type[key]);\n\n      return this;\n    }\n\n    assert.equal(typeof fn, 'function', 'expected a function');\n    let name = type.toLowerCase();\n\n    if (fn.prototype instanceof this.Prompt) {\n      this.prompts[name] = fn;\n    } else {\n      this.prompts[name] = fn(this.Prompt, this);\n    }\n\n    return this;\n  }\n  /**\n   * Prompt function that takes a \"question\" object or array of question objects,\n   * and returns an object with responses from the user.\n   *\n   * ```js\n   * const Enquirer = require('enquirer');\n   * const enquirer = new Enquirer();\n   *\n   * const response = await enquirer.prompt({\n   *   type: 'input',\n   *   name: 'username',\n   *   message: 'What is your username?'\n   * });\n   * console.log(response);\n   * ```\n   * @name prompt()\n   * @param {Array|Object} `questions` Options objects for one or more prompts to run.\n   * @return {Promise} Promise that returns an \"answers\" object with the user's responses.\n   * @api public\n   */\n\n\n  async prompt(questions = []) {\n    for (let question of [].concat(questions)) {\n      try {\n        if (typeof question === 'function') question = await question.call(this);\n        await this.ask(utils.merge({}, this.options, question));\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n\n    return this.answers;\n  }\n\n  async ask(question) {\n    if (typeof question === 'function') {\n      question = await question.call(this);\n    }\n\n    let opts = utils.merge({}, this.options, question);\n    let {\n      type,\n      name\n    } = question;\n    let {\n      set,\n      get\n    } = utils;\n\n    if (typeof type === 'function') {\n      type = await type.call(this, question, this.answers);\n    }\n\n    if (!type) return this.answers[name];\n    assert(this.prompts[type], `Prompt \"${type}\" is not registered`);\n    let prompt = new this.prompts[type](opts);\n    let value = get(this.answers, name);\n    prompt.state.answers = this.answers;\n    prompt.enquirer = this;\n\n    if (name) {\n      prompt.on('submit', value => {\n        this.emit('answer', name, value, prompt);\n        set(this.answers, name, value);\n      });\n    } // bubble events\n\n\n    let emit = prompt.emit.bind(prompt);\n\n    prompt.emit = (...args) => {\n      this.emit.call(this, ...args);\n      return emit(...args);\n    };\n\n    this.emit('prompt', prompt, this);\n\n    if (opts.autofill && value != null) {\n      prompt.value = prompt.input = value; // if \"autofill=show\" render the prompt, otherwise stay \"silent\"\n\n      if (opts.autofill === 'show') {\n        await prompt.submit();\n      }\n    } else {\n      value = prompt.value = await prompt.run();\n    }\n\n    return value;\n  }\n  /**\n   * Use an enquirer plugin.\n   *\n   * ```js\n   * const Enquirer = require('enquirer');\n   * const enquirer = new Enquirer();\n   * const plugin = enquirer => {\n   *   // do stuff to enquire instance\n   * };\n   * enquirer.use(plugin);\n   * ```\n   * @name use()\n   * @param {Function} `plugin` Plugin function that takes an instance of Enquirer.\n   * @return {Object} Returns the Enquirer instance.\n   * @api public\n   */\n\n\n  use(plugin) {\n    plugin.call(this, this);\n    return this;\n  }\n\n  set Prompt(value) {\n    this._Prompt = value;\n  }\n\n  get Prompt() {\n    return this._Prompt || this.constructor.Prompt;\n  }\n\n  get prompts() {\n    return this.constructor.prompts;\n  }\n\n  static set Prompt(value) {\n    this._Prompt = value;\n  }\n\n  static get Prompt() {\n    return this._Prompt || require('./lib/prompt');\n  }\n\n  static get prompts() {\n    return require('./lib/prompts');\n  }\n\n  static get types() {\n    return require('./lib/types');\n  }\n  /**\n   * Prompt function that takes a \"question\" object or array of question objects,\n   * and returns an object with responses from the user.\n   *\n   * ```js\n   * const { prompt } = require('enquirer');\n   * const response = await prompt({\n   *   type: 'input',\n   *   name: 'username',\n   *   message: 'What is your username?'\n   * });\n   * console.log(response);\n   * ```\n   * @name Enquirer#prompt\n   * @param {Array|Object} `questions` Options objects for one or more prompts to run.\n   * @return {Promise} Promise that returns an \"answers\" object with the user's responses.\n   * @api public\n   */\n\n\n  static get prompt() {\n    const fn = (questions, ...rest) => {\n      let enquirer = new this(...rest);\n      let emit = enquirer.emit.bind(enquirer);\n\n      enquirer.emit = (...args) => {\n        fn.emit(...args);\n        return emit(...args);\n      };\n\n      return enquirer.prompt(questions);\n    };\n\n    utils.mixinEmitter(fn, new Events());\n    return fn;\n  }\n\n}\n\nutils.mixinEmitter(Enquirer, new Events());\nconst prompts = Enquirer.prompts;\n\nfor (let name of Object.keys(prompts)) {\n  let key = name.toLowerCase();\n\n  let run = options => new prompts[name](options).run();\n\n  Enquirer.prompt[key] = run;\n  Enquirer[key] = run;\n\n  if (!Enquirer[name]) {\n    Reflect.defineProperty(Enquirer, name, {\n      get: () => prompts[name]\n    });\n  }\n}\n\nconst exp = name => {\n  utils.defineExport(Enquirer, name, () => Enquirer.types[name]);\n};\n\nexp('ArrayPrompt');\nexp('AuthPrompt');\nexp('BooleanPrompt');\nexp('NumberPrompt');\nexp('StringPrompt');\nmodule.exports = Enquirer;","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/index.js"],"names":["assert","require","Events","utils","Enquirer","constructor","options","answers","merge","register","type","fn","isObject","key","Object","keys","equal","name","toLowerCase","prototype","Prompt","prompts","prompt","questions","question","concat","call","ask","err","Promise","reject","opts","set","get","value","state","enquirer","on","emit","bind","args","autofill","input","submit","run","use","plugin","_Prompt","types","rest","mixinEmitter","Reflect","defineProperty","exp","defineExport","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst assert = require('assert');\nconst Events = require('events');\nconst utils = require('./lib/utils');\n\n/**\n * Create an instance of `Enquirer`.\n *\n * ```js\n * const Enquirer = require('enquirer');\n * const enquirer = new Enquirer();\n * ```\n * @name Enquirer\n * @param {Object} `options` (optional) Options to use with all prompts.\n * @param {Object} `answers` (optional) Answers object to initialize with.\n * @api public\n */\n\nclass Enquirer extends Events {\n  constructor(options, answers) {\n    super();\n    this.options = utils.merge({}, options);\n    this.answers = { ...answers };\n  }\n\n  /**\n   * Register a custom prompt type.\n   *\n   * ```js\n   * const Enquirer = require('enquirer');\n   * const enquirer = new Enquirer();\n   * enquirer.register('customType', require('./custom-prompt'));\n   * ```\n   * @name register()\n   * @param {String} `type`\n   * @param {Function|Prompt} `fn` `Prompt` class, or a function that returns a `Prompt` class.\n   * @return {Object} Returns the Enquirer instance\n   * @api public\n   */\n\n  register(type, fn) {\n    if (utils.isObject(type)) {\n      for (let key of Object.keys(type)) this.register(key, type[key]);\n      return this;\n    }\n    assert.equal(typeof fn, 'function', 'expected a function');\n    let name = type.toLowerCase();\n    if (fn.prototype instanceof this.Prompt) {\n      this.prompts[name] = fn;\n    } else {\n      this.prompts[name] = fn(this.Prompt, this);\n    }\n    return this;\n  }\n\n  /**\n   * Prompt function that takes a \"question\" object or array of question objects,\n   * and returns an object with responses from the user.\n   *\n   * ```js\n   * const Enquirer = require('enquirer');\n   * const enquirer = new Enquirer();\n   *\n   * const response = await enquirer.prompt({\n   *   type: 'input',\n   *   name: 'username',\n   *   message: 'What is your username?'\n   * });\n   * console.log(response);\n   * ```\n   * @name prompt()\n   * @param {Array|Object} `questions` Options objects for one or more prompts to run.\n   * @return {Promise} Promise that returns an \"answers\" object with the user's responses.\n   * @api public\n   */\n\n  async prompt(questions = []) {\n    for (let question of [].concat(questions)) {\n      try {\n        if (typeof question === 'function') question = await question.call(this);\n        await this.ask(utils.merge({}, this.options, question));\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n    return this.answers;\n  }\n\n  async ask(question) {\n    if (typeof question === 'function') {\n      question = await question.call(this);\n    }\n\n    let opts = utils.merge({}, this.options, question);\n    let { type, name } = question;\n    let { set, get } = utils;\n\n    if (typeof type === 'function') {\n      type = await type.call(this, question, this.answers);\n    }\n\n    if (!type) return this.answers[name];\n\n    assert(this.prompts[type], `Prompt \"${type}\" is not registered`);\n\n    let prompt = new this.prompts[type](opts);\n    let value = get(this.answers, name);\n\n    prompt.state.answers = this.answers;\n    prompt.enquirer = this;\n\n    if (name) {\n      prompt.on('submit', value => {\n        this.emit('answer', name, value, prompt);\n        set(this.answers, name, value);\n      });\n    }\n\n    // bubble events\n    let emit = prompt.emit.bind(prompt);\n    prompt.emit = (...args) => {\n      this.emit.call(this, ...args);\n      return emit(...args);\n    };\n\n    this.emit('prompt', prompt, this);\n\n    if (opts.autofill && value != null) {\n      prompt.value = prompt.input = value;\n\n      // if \"autofill=show\" render the prompt, otherwise stay \"silent\"\n      if (opts.autofill === 'show') {\n        await prompt.submit();\n      }\n    } else {\n      value = prompt.value = await prompt.run();\n    }\n\n    return value;\n  }\n\n  /**\n   * Use an enquirer plugin.\n   *\n   * ```js\n   * const Enquirer = require('enquirer');\n   * const enquirer = new Enquirer();\n   * const plugin = enquirer => {\n   *   // do stuff to enquire instance\n   * };\n   * enquirer.use(plugin);\n   * ```\n   * @name use()\n   * @param {Function} `plugin` Plugin function that takes an instance of Enquirer.\n   * @return {Object} Returns the Enquirer instance.\n   * @api public\n   */\n\n  use(plugin) {\n    plugin.call(this, this);\n    return this;\n  }\n\n  set Prompt(value) {\n    this._Prompt = value;\n  }\n  get Prompt() {\n    return this._Prompt || this.constructor.Prompt;\n  }\n\n  get prompts() {\n    return this.constructor.prompts;\n  }\n\n  static set Prompt(value) {\n    this._Prompt = value;\n  }\n  static get Prompt() {\n    return this._Prompt || require('./lib/prompt');\n  }\n\n  static get prompts() {\n    return require('./lib/prompts');\n  }\n\n  static get types() {\n    return require('./lib/types');\n  }\n\n  /**\n   * Prompt function that takes a \"question\" object or array of question objects,\n   * and returns an object with responses from the user.\n   *\n   * ```js\n   * const { prompt } = require('enquirer');\n   * const response = await prompt({\n   *   type: 'input',\n   *   name: 'username',\n   *   message: 'What is your username?'\n   * });\n   * console.log(response);\n   * ```\n   * @name Enquirer#prompt\n   * @param {Array|Object} `questions` Options objects for one or more prompts to run.\n   * @return {Promise} Promise that returns an \"answers\" object with the user's responses.\n   * @api public\n   */\n\n  static get prompt() {\n    const fn = (questions, ...rest) => {\n      let enquirer = new this(...rest);\n      let emit = enquirer.emit.bind(enquirer);\n      enquirer.emit = (...args) => {\n        fn.emit(...args);\n        return emit(...args);\n      };\n      return enquirer.prompt(questions);\n    };\n    utils.mixinEmitter(fn, new Events());\n    return fn;\n  }\n}\n\nutils.mixinEmitter(Enquirer, new Events());\nconst prompts = Enquirer.prompts;\n\nfor (let name of Object.keys(prompts)) {\n  let key = name.toLowerCase();\n\n  let run = options => new prompts[name](options).run();\n  Enquirer.prompt[key] = run;\n  Enquirer[key] = run;\n\n  if (!Enquirer[name]) {\n    Reflect.defineProperty(Enquirer, name, { get: () => prompts[name] });\n  }\n}\n\nconst exp = name => {\n  utils.defineExport(Enquirer, name, () => Enquirer.types[name]);\n};\n\nexp('ArrayPrompt');\nexp('AuthPrompt');\nexp('BooleanPrompt');\nexp('NumberPrompt');\nexp('StringPrompt');\n\nmodule.exports = Enquirer;\n"]},"metadata":{},"sourceType":"script"}