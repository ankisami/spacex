{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// docker.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 13. Docker\n// ----------------------------------------------------------------------------------\n\nconst util = require('./util');\n\nconst DockerSocket = require('./dockerSocket');\n\nlet _platform = process.platform;\n\nconst _windows = _platform === 'win32';\n\nlet _docker_container_stats = {};\n\nlet _docker_socket;\n\nlet _docker_last_read = 0; // --------------------------\n// get containers (parameter all: get also inactive/exited containers)\n\nfunction dockerInfo(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      if (!_docker_socket) {\n        _docker_socket = new DockerSocket();\n      }\n\n      const result = {};\n\n      _docker_socket.getInfo(data => {\n        result.id = data.ID;\n        result.containers = data.Containers;\n        result.containersRunning = data.ContainersRunning;\n        result.containersPaused = data.ContainersPaused;\n        result.containersStopped = data.ContainersStopped;\n        result.images = data.Images;\n        result.driver = data.Driver;\n        result.memoryLimit = data.MemoryLimit;\n        result.swapLimit = data.SwapLimit;\n        result.kernelMemory = data.KernelMemory;\n        result.cpuCfsPeriod = data.CpuCfsPeriod;\n        result.cpuCfsQuota = data.CpuCfsQuota;\n        result.cpuShares = data.CPUShares;\n        result.cpuSet = data.CPUSet;\n        result.ipv4Forwarding = data.IPv4Forwarding;\n        result.bridgeNfIptables = data.BridgeNfIptables;\n        result.bridgeNfIp6tables = data.BridgeNfIp6tables;\n        result.debug = data.Debug;\n        result.nfd = data.NFd;\n        result.oomKillDisable = data.OomKillDisable;\n        result.ngoroutines = data.NGoroutines;\n        result.systemTime = data.SystemTime;\n        result.loggingDriver = data.LoggingDriver;\n        result.cgroupDriver = data.CgroupDriver;\n        result.nEventsListener = data.NEventsListener;\n        result.kernelVersion = data.KernelVersion;\n        result.operatingSystem = data.OperatingSystem;\n        result.osType = data.OSType;\n        result.architecture = data.Architecture;\n        result.ncpu = data.NCPU;\n        result.memTotal = data.MemTotal;\n        result.dockerRootDir = data.DockerRootDir;\n        result.httpProxy = data.HttpProxy;\n        result.httpsProxy = data.HttpsProxy;\n        result.noProxy = data.NoProxy;\n        result.name = data.Name;\n        result.labels = data.Labels;\n        result.experimentalBuild = data.ExperimentalBuild;\n        result.serverVersion = data.ServerVersion;\n        result.clusterStore = data.ClusterStore;\n        result.clusterAdvertise = data.ClusterAdvertise;\n        result.defaultRuntime = data.DefaultRuntime;\n        result.liveRestoreEnabled = data.LiveRestoreEnabled;\n        result.isolation = data.Isolation;\n        result.initBinary = data.InitBinary;\n        result.productLicense = data.ProductLicense;\n\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      });\n    });\n  });\n}\n\nexports.dockerInfo = dockerInfo;\n\nfunction dockerContainers(all, callback) {\n  function inContainers(containers, id) {\n    let filtered = containers.filter(obj => {\n      /**\n       * @namespace\n       * @property {string}  Id\n       */\n      return obj.Id && obj.Id === id;\n    });\n    return filtered.length > 0;\n  } // fallback - if only callback is given\n\n\n  if (util.isFunction(all) && !callback) {\n    callback = all;\n    all = false;\n  }\n\n  all = all || false;\n  let result = [];\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      if (!_docker_socket) {\n        _docker_socket = new DockerSocket();\n      }\n\n      const workload = [];\n\n      _docker_socket.listContainers(all, data => {\n        let docker_containers = {};\n\n        try {\n          docker_containers = data;\n\n          if (docker_containers && Object.prototype.toString.call(docker_containers) === '[object Array]' && docker_containers.length > 0) {\n            // GC in _docker_container_stats\n            for (let key in _docker_container_stats) {\n              if ({}.hasOwnProperty.call(_docker_container_stats, key)) {\n                if (!inContainers(docker_containers, key)) delete _docker_container_stats[key];\n              }\n            }\n\n            docker_containers.forEach(function (element) {\n              if (element.Names && Object.prototype.toString.call(element.Names) === '[object Array]' && element.Names.length > 0) {\n                element.Name = element.Names[0].replace(/^\\/|\\/$/g, '');\n              }\n\n              workload.push(dockerContainerInspect(element.Id.trim(), element)); // result.push({\n              //   id: element.Id,\n              //   name: element.Name,\n              //   image: element.Image,\n              //   imageID: element.ImageID,\n              //   command: element.Command,\n              //   created: element.Created,\n              //   state: element.State,\n              //   ports: element.Ports,\n              //   mounts: element.Mounts,\n              //   // hostconfig: element.HostConfig,\n              //   // network: element.NetworkSettings\n              // });\n            });\n\n            if (workload.length) {\n              Promise.all(workload).then(data => {\n                if (callback) {\n                  callback(data);\n                }\n\n                resolve(data);\n              });\n            } else {\n              if (callback) {\n                callback(result);\n              }\n\n              resolve(result);\n            }\n          } else {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }\n        } catch (err) {\n          // GC in _docker_container_stats\n          for (let key in _docker_container_stats) {\n            if ({}.hasOwnProperty.call(_docker_container_stats, key)) {\n              if (!inContainers(docker_containers, key)) delete _docker_container_stats[key];\n            }\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      });\n    });\n  });\n} // --------------------------\n// container inspect (for one container)\n\n\nfunction dockerContainerInspect(containerID, payload) {\n  containerID = containerID || '';\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      if (containerID) {\n        if (!_docker_socket) {\n          _docker_socket = new DockerSocket();\n        }\n\n        _docker_socket.getInspect(containerID.trim(), data => {\n          try {\n            resolve({\n              id: payload.Id,\n              name: payload.Name,\n              image: payload.Image,\n              imageID: payload.ImageID,\n              command: payload.Command,\n              created: payload.Created,\n              started: data.State && data.State.StartedAt ? Math.round(new Date(data.State.StartedAt).getTime() / 1000) : 0,\n              finished: data.State && data.State.FinishedAt && !data.State.FinishedAt.startsWith('0001-01-01') ? Math.round(new Date(data.State.FinishedAt).getTime() / 1000) : 0,\n              createdAt: data.Created ? data.Created : '',\n              startedAt: data.State && data.State.StartedAt ? data.State.StartedAt : '',\n              finishedAt: data.State && data.State.FinishedAt && !data.State.FinishedAt.startsWith('0001-01-01') ? data.State.FinishedAt : '',\n              state: payload.State,\n              restartCount: data.RestartCount || 0,\n              platform: data.Platform || '',\n              driver: data.Driver || '',\n              ports: payload.Ports,\n              mounts: payload.Mounts // hostconfig: payload.HostConfig,\n              // network: payload.NetworkSettings\n\n            });\n          } catch (err) {\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nexports.dockerContainers = dockerContainers; // --------------------------\n// helper functions for calculation of docker stats\n\nfunction docker_calcCPUPercent(cpu_stats, precpu_stats) {\n  /**\n   * @namespace\n   * @property {object}  cpu_usage\n   * @property {number}  cpu_usage.total_usage\n   * @property {number}  system_cpu_usage\n   * @property {object}  cpu_usage\n   * @property {Array}  cpu_usage.percpu_usage\n   */\n  if (!_windows) {\n    let cpuPercent = 0.0; // calculate the change for the cpu usage of the container in between readings\n\n    let cpuDelta = cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage; // calculate the change for the entire system between readings\n\n    let systemDelta = cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage;\n\n    if (systemDelta > 0.0 && cpuDelta > 0.0) {\n      // calculate the change for the cpu usage of the container in between readings\n      cpuPercent = cpuDelta / systemDelta * cpu_stats.cpu_usage.percpu_usage.length * 100.0;\n    }\n\n    return cpuPercent;\n  } else {\n    let nanoSecNow = util.nanoSeconds();\n    let cpuPercent = 0.0;\n\n    if (_docker_last_read > 0) {\n      let possIntervals = nanoSecNow - _docker_last_read; //  / 100 * os.cpus().length;\n\n      let intervalsUsed = cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage;\n\n      if (possIntervals > 0) {\n        cpuPercent = 100.0 * intervalsUsed / possIntervals;\n      }\n    }\n\n    _docker_last_read = nanoSecNow;\n    return cpuPercent;\n  }\n}\n\nfunction docker_calcNetworkIO(networks) {\n  let rx;\n  let tx;\n\n  for (let key in networks) {\n    // skip loop if the property is from prototype\n    if (!{}.hasOwnProperty.call(networks, key)) continue;\n    /**\n     * @namespace\n     * @property {number}  rx_bytes\n     * @property {number}  tx_bytes\n     */\n\n    let obj = networks[key];\n    rx = +obj.rx_bytes;\n    tx = +obj.tx_bytes;\n  }\n\n  return {\n    rx: rx,\n    tx: tx\n  };\n}\n\nfunction docker_calcBlockIO(blkio_stats) {\n  let result = {\n    r: 0,\n    w: 0\n  };\n  /**\n   * @namespace\n   * @property {Array}  io_service_bytes_recursive\n   */\n\n  if (blkio_stats && blkio_stats.io_service_bytes_recursive && Object.prototype.toString.call(blkio_stats.io_service_bytes_recursive) === '[object Array]' && blkio_stats.io_service_bytes_recursive.length > 0) {\n    blkio_stats.io_service_bytes_recursive.forEach(function (element) {\n      /**\n       * @namespace\n       * @property {string}  op\n       * @property {number}  value\n       */\n      if (element.op && element.op.toLowerCase() === 'read' && element.value) {\n        result.r += element.value;\n      }\n\n      if (element.op && element.op.toLowerCase() === 'write' && element.value) {\n        result.w += element.value;\n      }\n    });\n  }\n\n  return result;\n}\n\nfunction dockerContainerStats(containerIDs, callback) {\n  let containerArray = []; // fallback - if only callback is given\n\n  if (util.isFunction(containerIDs) && !callback) {\n    callback = containerIDs;\n    containerArray = ['*'];\n  } else {\n    containerIDs = containerIDs || '*';\n    containerIDs = containerIDs.trim().toLowerCase().replace(/,+/g, '|');\n    containerArray = containerIDs.split('|');\n  }\n\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      const result = [];\n      const workload = [];\n\n      if (containerArray.length && containerArray[0].trim() === '*') {\n        containerArray = [];\n        dockerContainers().then(allContainers => {\n          for (let container of allContainers) {\n            containerArray.push(container.id);\n          }\n\n          dockerContainerStats(containerArray.join(',')).then(result => {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        });\n      } else {\n        for (let containerID of containerArray) {\n          workload.push(dockerContainerStatsSingle(containerID.trim()));\n        }\n\n        if (workload.length) {\n          Promise.all(workload).then(data => {\n            if (callback) {\n              callback(data);\n            }\n\n            resolve(data);\n          });\n        } else {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n} // --------------------------\n// container stats (for one container)\n\n\nfunction dockerContainerStatsSingle(containerID) {\n  containerID = containerID || '';\n  let result = {\n    id: containerID,\n    mem_usage: 0,\n    mem_limit: 0,\n    mem_percent: 0,\n    cpu_percent: 0,\n    pids: 0,\n    netIO: {\n      rx: 0,\n      wx: 0\n    },\n    blockIO: {\n      r: 0,\n      w: 0\n    }\n  };\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      if (containerID) {\n        if (!_docker_socket) {\n          _docker_socket = new DockerSocket();\n        }\n\n        _docker_socket.getInspect(containerID, dataInspect => {\n          try {\n            _docker_socket.getStats(containerID, data => {\n              try {\n                let stats = data;\n                /**\n                 * @namespace\n                 * @property {Object}  memory_stats\n                 * @property {number}  memory_stats.usage\n                 * @property {number}  memory_stats.limit\n                 * @property {Object}  cpu_stats\n                 * @property {Object}  pids_stats\n                 * @property {number}  pids_stats.current\n                 * @property {Object}  networks\n                 * @property {Object}  blkio_stats\n                 */\n\n                if (!stats.message) {\n                  result.mem_usage = stats.memory_stats && stats.memory_stats.usage ? stats.memory_stats.usage : 0;\n                  result.mem_limit = stats.memory_stats && stats.memory_stats.limit ? stats.memory_stats.limit : 0;\n                  result.mem_percent = stats.memory_stats && stats.memory_stats.usage && stats.memory_stats.limit ? stats.memory_stats.usage / stats.memory_stats.limit * 100.0 : 0;\n                  result.cpu_percent = stats.cpu_stats && stats.precpu_stats ? docker_calcCPUPercent(stats.cpu_stats, stats.precpu_stats) : 0;\n                  result.pids = stats.pids_stats && stats.pids_stats.current ? stats.pids_stats.current : 0;\n                  result.restartCount = dataInspect.RestartCount ? dataInspect.RestartCount : 0;\n                  if (stats.networks) result.netIO = docker_calcNetworkIO(stats.networks);\n                  if (stats.blkio_stats) result.blockIO = docker_calcBlockIO(stats.blkio_stats);\n                  result.cpu_stats = stats.cpu_stats ? stats.cpu_stats : {};\n                  result.precpu_stats = stats.precpu_stats ? stats.precpu_stats : {};\n                  result.memory_stats = stats.memory_stats ? stats.memory_stats : {};\n                  result.networks = stats.networks ? stats.networks : {};\n                }\n              } catch (err) {\n                util.noop();\n              } // }\n\n\n              resolve(result);\n            });\n          } catch (err) {\n            util.noop();\n          }\n        });\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.dockerContainerStats = dockerContainerStats; // --------------------------\n// container processes (for one container)\n\nfunction dockerContainerProcesses(containerID, callback) {\n  containerID = containerID || '';\n  let result = [];\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      if (containerID) {\n        if (!_docker_socket) {\n          _docker_socket = new DockerSocket();\n        }\n\n        _docker_socket.getProcesses(containerID, data => {\n          /**\n           * @namespace\n           * @property {Array}  Titles\n           * @property {Array}  Processes\n           **/\n          try {\n            if (data && data.Titles && data.Processes) {\n              let titles = data.Titles.map(function (value) {\n                return value.toUpperCase();\n              });\n              let pos_pid = titles.indexOf('PID');\n              let pos_ppid = titles.indexOf('PPID');\n              let pos_pgid = titles.indexOf('PGID');\n              let pos_vsz = titles.indexOf('VSZ');\n              let pos_time = titles.indexOf('TIME');\n              let pos_elapsed = titles.indexOf('ELAPSED');\n              let pos_ni = titles.indexOf('NI');\n              let pos_ruser = titles.indexOf('RUSER');\n              let pos_user = titles.indexOf('USER');\n              let pos_rgroup = titles.indexOf('RGROUP');\n              let pos_group = titles.indexOf('GROUP');\n              let pos_stat = titles.indexOf('STAT');\n              let pos_rss = titles.indexOf('RSS');\n              let pos_command = titles.indexOf('COMMAND');\n              data.Processes.forEach(process => {\n                result.push({\n                  pid_host: pos_pid >= 0 ? process[pos_pid] : '',\n                  ppid: pos_ppid >= 0 ? process[pos_ppid] : '',\n                  pgid: pos_pgid >= 0 ? process[pos_pgid] : '',\n                  user: pos_user >= 0 ? process[pos_user] : '',\n                  ruser: pos_ruser >= 0 ? process[pos_ruser] : '',\n                  group: pos_group >= 0 ? process[pos_group] : '',\n                  rgroup: pos_rgroup >= 0 ? process[pos_rgroup] : '',\n                  stat: pos_stat >= 0 ? process[pos_stat] : '',\n                  time: pos_time >= 0 ? process[pos_time] : '',\n                  elapsed: pos_elapsed >= 0 ? process[pos_elapsed] : '',\n                  nice: pos_ni >= 0 ? process[pos_ni] : '',\n                  rss: pos_rss >= 0 ? process[pos_rss] : '',\n                  vsz: pos_vsz >= 0 ? process[pos_vsz] : '',\n                  command: pos_command >= 0 ? process[pos_command] : ''\n                });\n              });\n            }\n          } catch (err) {\n            util.noop();\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      } else {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.dockerContainerProcesses = dockerContainerProcesses;\n\nfunction dockerAll(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      dockerContainers(true).then(result => {\n        if (result && Object.prototype.toString.call(result) === '[object Array]' && result.length > 0) {\n          let l = result.length;\n          result.forEach(function (element) {\n            dockerContainerStats(element.id).then(res => {\n              // include stats in array\n              element.mem_usage = res[0].mem_usage;\n              element.mem_limit = res[0].mem_limit;\n              element.mem_percent = res[0].mem_percent;\n              element.cpu_percent = res[0].cpu_percent;\n              element.pids = res[0].pids;\n              element.netIO = res[0].netIO;\n              element.blockIO = res[0].blockIO;\n              element.cpu_stats = res[0].cpu_stats;\n              element.precpu_stats = res[0].precpu_stats;\n              element.memory_stats = res[0].memory_stats;\n              element.networks = res[0].networks;\n              dockerContainerProcesses(element.id).then(processes => {\n                element.processes = processes;\n                l -= 1;\n\n                if (l === 0) {\n                  if (callback) {\n                    callback(result);\n                  }\n\n                  resolve(result);\n                }\n              }); // all done??\n            });\n          });\n        } else {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      });\n    });\n  });\n}\n\nexports.dockerAll = dockerAll;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/docker.js"],"names":["util","require","DockerSocket","_platform","process","platform","_windows","_docker_container_stats","_docker_socket","_docker_last_read","dockerInfo","callback","Promise","resolve","nextTick","result","getInfo","data","id","ID","containers","Containers","containersRunning","ContainersRunning","containersPaused","ContainersPaused","containersStopped","ContainersStopped","images","Images","driver","Driver","memoryLimit","MemoryLimit","swapLimit","SwapLimit","kernelMemory","KernelMemory","cpuCfsPeriod","CpuCfsPeriod","cpuCfsQuota","CpuCfsQuota","cpuShares","CPUShares","cpuSet","CPUSet","ipv4Forwarding","IPv4Forwarding","bridgeNfIptables","BridgeNfIptables","bridgeNfIp6tables","BridgeNfIp6tables","debug","Debug","nfd","NFd","oomKillDisable","OomKillDisable","ngoroutines","NGoroutines","systemTime","SystemTime","loggingDriver","LoggingDriver","cgroupDriver","CgroupDriver","nEventsListener","NEventsListener","kernelVersion","KernelVersion","operatingSystem","OperatingSystem","osType","OSType","architecture","Architecture","ncpu","NCPU","memTotal","MemTotal","dockerRootDir","DockerRootDir","httpProxy","HttpProxy","httpsProxy","HttpsProxy","noProxy","NoProxy","name","Name","labels","Labels","experimentalBuild","ExperimentalBuild","serverVersion","ServerVersion","clusterStore","ClusterStore","clusterAdvertise","ClusterAdvertise","defaultRuntime","DefaultRuntime","liveRestoreEnabled","LiveRestoreEnabled","isolation","Isolation","initBinary","InitBinary","productLicense","ProductLicense","exports","dockerContainers","all","inContainers","filtered","filter","obj","Id","length","isFunction","workload","listContainers","docker_containers","Object","prototype","toString","call","key","hasOwnProperty","forEach","element","Names","replace","push","dockerContainerInspect","trim","then","err","containerID","payload","getInspect","image","Image","imageID","ImageID","command","Command","created","Created","started","State","StartedAt","Math","round","Date","getTime","finished","FinishedAt","startsWith","createdAt","startedAt","finishedAt","state","restartCount","RestartCount","Platform","ports","Ports","mounts","Mounts","docker_calcCPUPercent","cpu_stats","precpu_stats","cpuPercent","cpuDelta","cpu_usage","total_usage","systemDelta","system_cpu_usage","percpu_usage","nanoSecNow","nanoSeconds","possIntervals","intervalsUsed","docker_calcNetworkIO","networks","rx","tx","rx_bytes","tx_bytes","docker_calcBlockIO","blkio_stats","r","w","io_service_bytes_recursive","op","toLowerCase","value","dockerContainerStats","containerIDs","containerArray","split","allContainers","container","join","dockerContainerStatsSingle","mem_usage","mem_limit","mem_percent","cpu_percent","pids","netIO","wx","blockIO","dataInspect","getStats","stats","message","memory_stats","usage","limit","pids_stats","current","noop","dockerContainerProcesses","getProcesses","Titles","Processes","titles","map","toUpperCase","pos_pid","indexOf","pos_ppid","pos_pgid","pos_vsz","pos_time","pos_elapsed","pos_ni","pos_ruser","pos_user","pos_rgroup","pos_group","pos_stat","pos_rss","pos_command","pid_host","ppid","pgid","user","ruser","group","rgroup","stat","time","elapsed","nice","rss","vsz","dockerAll","l","res","processes"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// docker.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 13. Docker\n// ----------------------------------------------------------------------------------\n\nconst util = require('./util');\nconst DockerSocket = require('./dockerSocket');\n\nlet _platform = process.platform;\nconst _windows = (_platform === 'win32');\n\nlet _docker_container_stats = {};\nlet _docker_socket;\nlet _docker_last_read = 0;\n\n\n// --------------------------\n// get containers (parameter all: get also inactive/exited containers)\n\nfunction dockerInfo(callback) {\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      if (!_docker_socket) {\n        _docker_socket = new DockerSocket();\n      }\n      const result = {};\n\n      _docker_socket.getInfo(data => {\n        result.id = data.ID;\n        result.containers = data.Containers;\n        result.containersRunning = data.ContainersRunning;\n        result.containersPaused = data.ContainersPaused;\n        result.containersStopped = data.ContainersStopped;\n        result.images = data.Images;\n        result.driver = data.Driver;\n        result.memoryLimit = data.MemoryLimit;\n        result.swapLimit = data.SwapLimit;\n        result.kernelMemory = data.KernelMemory;\n        result.cpuCfsPeriod = data.CpuCfsPeriod;\n        result.cpuCfsQuota = data.CpuCfsQuota;\n        result.cpuShares = data.CPUShares;\n        result.cpuSet = data.CPUSet;\n        result.ipv4Forwarding = data.IPv4Forwarding;\n        result.bridgeNfIptables = data.BridgeNfIptables;\n        result.bridgeNfIp6tables = data.BridgeNfIp6tables;\n        result.debug = data.Debug;\n        result.nfd = data.NFd;\n        result.oomKillDisable = data.OomKillDisable;\n        result.ngoroutines = data.NGoroutines;\n        result.systemTime = data.SystemTime;\n        result.loggingDriver = data.LoggingDriver;\n        result.cgroupDriver = data.CgroupDriver;\n        result.nEventsListener = data.NEventsListener;\n        result.kernelVersion = data.KernelVersion;\n        result.operatingSystem = data.OperatingSystem;\n        result.osType = data.OSType;\n        result.architecture = data.Architecture;\n        result.ncpu = data.NCPU;\n        result.memTotal = data.MemTotal;\n        result.dockerRootDir = data.DockerRootDir;\n        result.httpProxy = data.HttpProxy;\n        result.httpsProxy = data.HttpsProxy;\n        result.noProxy = data.NoProxy;\n        result.name = data.Name;\n        result.labels = data.Labels;\n        result.experimentalBuild = data.ExperimentalBuild;\n        result.serverVersion = data.ServerVersion;\n        result.clusterStore = data.ClusterStore;\n        result.clusterAdvertise = data.ClusterAdvertise;\n        result.defaultRuntime = data.DefaultRuntime;\n        result.liveRestoreEnabled = data.LiveRestoreEnabled;\n        result.isolation = data.Isolation;\n        result.initBinary = data.InitBinary;\n        result.productLicense = data.ProductLicense;\n        if (callback) { callback(result); }\n        resolve(result);\n      });\n    });\n  });\n}\n\nexports.dockerInfo = dockerInfo;\n\nfunction dockerContainers(all, callback) {\n\n  function inContainers(containers, id) {\n    let filtered = containers.filter(obj => {\n      /**\n       * @namespace\n       * @property {string}  Id\n       */\n      return (obj.Id && (obj.Id === id));\n    });\n    return (filtered.length > 0);\n  }\n\n  // fallback - if only callback is given\n  if (util.isFunction(all) && !callback) {\n    callback = all;\n    all = false;\n  }\n\n  all = all || false;\n  let result = [];\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      if (!_docker_socket) {\n        _docker_socket = new DockerSocket();\n      }\n      const workload = [];\n\n      _docker_socket.listContainers(all, data => {\n        let docker_containers = {};\n        try {\n          docker_containers = data;\n          if (docker_containers && Object.prototype.toString.call(docker_containers) === '[object Array]' && docker_containers.length > 0) {\n            // GC in _docker_container_stats\n            for (let key in _docker_container_stats) {\n              if ({}.hasOwnProperty.call(_docker_container_stats, key)) {\n                if (!inContainers(docker_containers, key)) delete _docker_container_stats[key];\n              }\n            }\n\n            docker_containers.forEach(function (element) {\n\n              if (element.Names && Object.prototype.toString.call(element.Names) === '[object Array]' && element.Names.length > 0) {\n                element.Name = element.Names[0].replace(/^\\/|\\/$/g, '');\n              }\n              workload.push(dockerContainerInspect(element.Id.trim(), element));\n              // result.push({\n              //   id: element.Id,\n              //   name: element.Name,\n              //   image: element.Image,\n              //   imageID: element.ImageID,\n              //   command: element.Command,\n              //   created: element.Created,\n              //   state: element.State,\n              //   ports: element.Ports,\n              //   mounts: element.Mounts,\n              //   // hostconfig: element.HostConfig,\n              //   // network: element.NetworkSettings\n              // });\n            });\n            if (workload.length) {\n              Promise.all(\n                workload\n              ).then(data => {\n                if (callback) { callback(data); }\n                resolve(data);\n              });\n            } else {\n              if (callback) { callback(result); }\n              resolve(result);\n            }\n          } else {\n            if (callback) { callback(result); }\n            resolve(result);\n          }\n        } catch (err) {\n          // GC in _docker_container_stats\n          for (let key in _docker_container_stats) {\n            if ({}.hasOwnProperty.call(_docker_container_stats, key)) {\n              if (!inContainers(docker_containers, key)) delete _docker_container_stats[key];\n            }\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      });\n    });\n  });\n}\n\n// --------------------------\n// container inspect (for one container)\n\nfunction dockerContainerInspect(containerID, payload) {\n  containerID = containerID || '';\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      if (containerID) {\n\n        if (!_docker_socket) {\n          _docker_socket = new DockerSocket();\n        }\n\n        _docker_socket.getInspect(containerID.trim(), data => {\n          try {\n            resolve({\n              id: payload.Id,\n              name: payload.Name,\n              image: payload.Image,\n              imageID: payload.ImageID,\n              command: payload.Command,\n              created: payload.Created,\n              started: data.State && data.State.StartedAt ? Math.round(new Date(data.State.StartedAt).getTime() / 1000) : 0,\n              finished: data.State && data.State.FinishedAt && !data.State.FinishedAt.startsWith('0001-01-01') ? Math.round(new Date(data.State.FinishedAt).getTime() / 1000) : 0,\n              createdAt: data.Created ? data.Created : '',\n              startedAt: data.State && data.State.StartedAt ? data.State.StartedAt : '',\n              finishedAt: data.State && data.State.FinishedAt && !data.State.FinishedAt.startsWith('0001-01-01') ? data.State.FinishedAt : '',\n              state: payload.State,\n              restartCount: data.RestartCount || 0,\n              platform: data.Platform || '',\n              driver: data.Driver || '',\n              ports: payload.Ports,\n              mounts: payload.Mounts,\n              // hostconfig: payload.HostConfig,\n              // network: payload.NetworkSettings\n            });\n          } catch (err) {\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nexports.dockerContainers = dockerContainers;\n\n// --------------------------\n// helper functions for calculation of docker stats\n\nfunction docker_calcCPUPercent(cpu_stats, precpu_stats) {\n  /**\n   * @namespace\n   * @property {object}  cpu_usage\n   * @property {number}  cpu_usage.total_usage\n   * @property {number}  system_cpu_usage\n   * @property {object}  cpu_usage\n   * @property {Array}  cpu_usage.percpu_usage\n   */\n\n  if (!_windows) {\n    let cpuPercent = 0.0;\n    // calculate the change for the cpu usage of the container in between readings\n    let cpuDelta = cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage;\n    // calculate the change for the entire system between readings\n    let systemDelta = cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage;\n\n    if (systemDelta > 0.0 && cpuDelta > 0.0) {\n      // calculate the change for the cpu usage of the container in between readings\n      cpuPercent = (cpuDelta / systemDelta) * cpu_stats.cpu_usage.percpu_usage.length * 100.0;\n    }\n\n    return cpuPercent;\n  } else {\n    let nanoSecNow = util.nanoSeconds();\n    let cpuPercent = 0.0;\n    if (_docker_last_read > 0) {\n      let possIntervals = (nanoSecNow - _docker_last_read); //  / 100 * os.cpus().length;\n      let intervalsUsed = cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage;\n      if (possIntervals > 0) {\n        cpuPercent = 100.0 * intervalsUsed / possIntervals;\n      }\n    }\n    _docker_last_read = nanoSecNow;\n    return cpuPercent;\n  }\n}\n\nfunction docker_calcNetworkIO(networks) {\n  let rx;\n  let tx;\n  for (let key in networks) {\n    // skip loop if the property is from prototype\n    if (!{}.hasOwnProperty.call(networks, key)) continue;\n\n    /**\n     * @namespace\n     * @property {number}  rx_bytes\n     * @property {number}  tx_bytes\n     */\n    let obj = networks[key];\n    rx = +obj.rx_bytes;\n    tx = +obj.tx_bytes;\n  }\n  return {\n    rx: rx,\n    tx: tx\n  };\n}\n\nfunction docker_calcBlockIO(blkio_stats) {\n  let result = {\n    r: 0,\n    w: 0\n  };\n\n  /**\n   * @namespace\n   * @property {Array}  io_service_bytes_recursive\n   */\n  if (blkio_stats && blkio_stats.io_service_bytes_recursive && Object.prototype.toString.call(blkio_stats.io_service_bytes_recursive) === '[object Array]' && blkio_stats.io_service_bytes_recursive.length > 0) {\n    blkio_stats.io_service_bytes_recursive.forEach(function (element) {\n      /**\n       * @namespace\n       * @property {string}  op\n       * @property {number}  value\n       */\n\n      if (element.op && element.op.toLowerCase() === 'read' && element.value) {\n        result.r += element.value;\n      }\n      if (element.op && element.op.toLowerCase() === 'write' && element.value) {\n        result.w += element.value;\n      }\n    });\n  }\n  return result;\n}\n\nfunction dockerContainerStats(containerIDs, callback) {\n\n  let containerArray = [];\n  // fallback - if only callback is given\n  if (util.isFunction(containerIDs) && !callback) {\n    callback = containerIDs;\n    containerArray = ['*'];\n  } else {\n    containerIDs = containerIDs || '*';\n    containerIDs = containerIDs.trim().toLowerCase().replace(/,+/g, '|');\n    containerArray = containerIDs.split('|');\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      const result = [];\n\n      const workload = [];\n      if (containerArray.length && containerArray[0].trim() === '*') {\n        containerArray = [];\n        dockerContainers().then(allContainers => {\n          for (let container of allContainers) {\n            containerArray.push(container.id);\n          }\n          dockerContainerStats(containerArray.join(',')).then(result => {\n            if (callback) { callback(result); }\n            resolve(result);\n          });\n        });\n      } else {\n        for (let containerID of containerArray) {\n          workload.push(dockerContainerStatsSingle(containerID.trim()));\n        }\n        if (workload.length) {\n          Promise.all(\n            workload\n          ).then(data => {\n            if (callback) { callback(data); }\n            resolve(data);\n          });\n        } else {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n}\n\n// --------------------------\n// container stats (for one container)\n\nfunction dockerContainerStatsSingle(containerID) {\n  containerID = containerID || '';\n  let result = {\n    id: containerID,\n    mem_usage: 0,\n    mem_limit: 0,\n    mem_percent: 0,\n    cpu_percent: 0,\n    pids: 0,\n    netIO: {\n      rx: 0,\n      wx: 0\n    },\n    blockIO: {\n      r: 0,\n      w: 0\n    }\n  };\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      if (containerID) {\n\n        if (!_docker_socket) {\n          _docker_socket = new DockerSocket();\n        }\n\n        _docker_socket.getInspect(containerID, dataInspect => {\n          try {\n            _docker_socket.getStats(containerID, data => {\n              try {\n                let stats = data;\n                /**\n                 * @namespace\n                 * @property {Object}  memory_stats\n                 * @property {number}  memory_stats.usage\n                 * @property {number}  memory_stats.limit\n                 * @property {Object}  cpu_stats\n                 * @property {Object}  pids_stats\n                 * @property {number}  pids_stats.current\n                 * @property {Object}  networks\n                 * @property {Object}  blkio_stats\n                 */\n\n                if (!stats.message) {\n                  result.mem_usage = (stats.memory_stats && stats.memory_stats.usage ? stats.memory_stats.usage : 0);\n                  result.mem_limit = (stats.memory_stats && stats.memory_stats.limit ? stats.memory_stats.limit : 0);\n                  result.mem_percent = (stats.memory_stats && stats.memory_stats.usage && stats.memory_stats.limit ? stats.memory_stats.usage / stats.memory_stats.limit * 100.0 : 0);\n                  result.cpu_percent = (stats.cpu_stats && stats.precpu_stats ? docker_calcCPUPercent(stats.cpu_stats, stats.precpu_stats) : 0);\n                  result.pids = (stats.pids_stats && stats.pids_stats.current ? stats.pids_stats.current : 0);\n                  result.restartCount = (dataInspect.RestartCount ? dataInspect.RestartCount : 0);\n                  if (stats.networks) result.netIO = docker_calcNetworkIO(stats.networks);\n                  if (stats.blkio_stats) result.blockIO = docker_calcBlockIO(stats.blkio_stats);\n                  result.cpu_stats = (stats.cpu_stats ? stats.cpu_stats : {});\n                  result.precpu_stats = (stats.precpu_stats ? stats.precpu_stats : {});\n                  result.memory_stats = (stats.memory_stats ? stats.memory_stats : {});\n                  result.networks = (stats.networks ? stats.networks : {});\n                }\n              } catch (err) {\n                util.noop();\n              }\n              // }\n              resolve(result);\n            });\n          } catch (err) {\n            util.noop();\n          }\n        });\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.dockerContainerStats = dockerContainerStats;\n\n// --------------------------\n// container processes (for one container)\n\nfunction dockerContainerProcesses(containerID, callback) {\n  containerID = containerID || '';\n  let result = [];\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      if (containerID) {\n\n        if (!_docker_socket) {\n          _docker_socket = new DockerSocket();\n        }\n\n        _docker_socket.getProcesses(containerID, data => {\n          /**\n           * @namespace\n           * @property {Array}  Titles\n           * @property {Array}  Processes\n           **/\n          try {\n            if (data && data.Titles && data.Processes) {\n              let titles = data.Titles.map(function (value) {\n                return value.toUpperCase();\n              });\n              let pos_pid = titles.indexOf('PID');\n              let pos_ppid = titles.indexOf('PPID');\n              let pos_pgid = titles.indexOf('PGID');\n              let pos_vsz = titles.indexOf('VSZ');\n              let pos_time = titles.indexOf('TIME');\n              let pos_elapsed = titles.indexOf('ELAPSED');\n              let pos_ni = titles.indexOf('NI');\n              let pos_ruser = titles.indexOf('RUSER');\n              let pos_user = titles.indexOf('USER');\n              let pos_rgroup = titles.indexOf('RGROUP');\n              let pos_group = titles.indexOf('GROUP');\n              let pos_stat = titles.indexOf('STAT');\n              let pos_rss = titles.indexOf('RSS');\n              let pos_command = titles.indexOf('COMMAND');\n\n              data.Processes.forEach(process => {\n                result.push({\n                  pid_host: (pos_pid >= 0 ? process[pos_pid] : ''),\n                  ppid: (pos_ppid >= 0 ? process[pos_ppid] : ''),\n                  pgid: (pos_pgid >= 0 ? process[pos_pgid] : ''),\n                  user: (pos_user >= 0 ? process[pos_user] : ''),\n                  ruser: (pos_ruser >= 0 ? process[pos_ruser] : ''),\n                  group: (pos_group >= 0 ? process[pos_group] : ''),\n                  rgroup: (pos_rgroup >= 0 ? process[pos_rgroup] : ''),\n                  stat: (pos_stat >= 0 ? process[pos_stat] : ''),\n                  time: (pos_time >= 0 ? process[pos_time] : ''),\n                  elapsed: (pos_elapsed >= 0 ? process[pos_elapsed] : ''),\n                  nice: (pos_ni >= 0 ? process[pos_ni] : ''),\n                  rss: (pos_rss >= 0 ? process[pos_rss] : ''),\n                  vsz: (pos_vsz >= 0 ? process[pos_vsz] : ''),\n                  command: (pos_command >= 0 ? process[pos_command] : '')\n                });\n              });\n            }\n          } catch (err) {\n            util.noop();\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n        });\n      } else {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n    });\n  });\n}\n\nexports.dockerContainerProcesses = dockerContainerProcesses;\n\nfunction dockerAll(callback) {\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      dockerContainers(true).then(result => {\n        if (result && Object.prototype.toString.call(result) === '[object Array]' && result.length > 0) {\n          let l = result.length;\n          result.forEach(function (element) {\n            dockerContainerStats(element.id).then(res => {\n              // include stats in array\n              element.mem_usage = res[0].mem_usage;\n              element.mem_limit = res[0].mem_limit;\n              element.mem_percent = res[0].mem_percent;\n              element.cpu_percent = res[0].cpu_percent;\n              element.pids = res[0].pids;\n              element.netIO = res[0].netIO;\n              element.blockIO = res[0].blockIO;\n              element.cpu_stats = res[0].cpu_stats;\n              element.precpu_stats = res[0].precpu_stats;\n              element.memory_stats = res[0].memory_stats;\n              element.networks = res[0].networks;\n\n              dockerContainerProcesses(element.id).then(processes => {\n                element.processes = processes;\n\n                l -= 1;\n                if (l === 0) {\n                  if (callback) { callback(result); }\n                  resolve(result);\n                }\n              });\n              // all done??\n            });\n          });\n        } else {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      });\n    });\n  });\n}\n\nexports.dockerAll = dockerAll;\n"]},"metadata":{},"sourceType":"script"}