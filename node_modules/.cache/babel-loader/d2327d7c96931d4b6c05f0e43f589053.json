{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\nvar chokidar = require('chokidar');\n\nvar util = require('util');\n\nvar log = require('debug')('pm2:watch');\n\nmodule.exports = function ClusterMode(God) {\n  /**\n   * Watch folder for changes and restart\n   * @method watch\n   * @param {Object} pm2_env pm2 app environnement\n   * @return MemberExpression\n   */\n  God.watch = {};\n  God.watch._watchers = {};\n  God.watch.enable = function (pm2_env) {\n    if (God.watch._watchers[pm2_env.pm_id]) {\n      God.watch._watchers[pm2_env.pm_id].close();\n\n      God.watch._watchers[pm2_env.pm_id] = null;\n      delete God.watch._watchers[pm2_env.pm_id];\n    }\n\n    log('Initial watch ', pm2_env.watch);\n    var watch = pm2_env.watch;\n    if (typeof watch == 'boolean' || util.isArray(watch) && watch.length === 0) watch = pm2_env.pm_cwd;\n    log('Watching %s', watch);\n    var watch_options = {\n      ignored: pm2_env.ignore_watch || /[\\/\\\\]\\.|node_modules/,\n      persistent: true,\n      ignoreInitial: true,\n      cwd: pm2_env.pm_cwd\n    };\n\n    if (pm2_env.watch_options) {\n      watch_options = util._extend(watch_options, pm2_env.watch_options);\n    }\n\n    log('Watch opts', watch_options);\n    var watcher = chokidar.watch(watch, watch_options);\n    console.log('[Watch] Start watching', pm2_env.name);\n    watcher.on('all', function (event, path) {\n      var self = this;\n\n      if (self.restarting === true) {\n        log('Already restarting, skipping');\n        return false;\n      }\n\n      self.restarting = true;\n      console.log('Change detected on path %s for app %s - restarting', path, pm2_env.name);\n      setTimeout(function () {\n        God.restartProcessName(pm2_env.name, function (err, list) {\n          self.restarting = false;\n\n          if (err) {\n            log('Error while restarting', err);\n            return false;\n          }\n\n          return log('Process restarted');\n        });\n      }, pm2_env.watch_delay || 0);\n      return false;\n    });\n    watcher.on('error', function (e) {\n      console.error(e.stack || e);\n    });\n    God.watch._watchers[pm2_env.pm_id] = watcher; //return God.watch._watchers[pm2_env.name];\n  },\n  /**\n   * Description\n   * @method close\n   * @param {} id\n   * @return\n   */\n  God.watch.disableAll = function () {\n    var watchers = God.watch._watchers;\n    console.log('[Watch] PM2 is being killed. Watch is disabled to avoid conflicts');\n\n    for (var i in watchers) {\n      watchers[i].close && watchers[i].close();\n      watchers.splice(i, 1);\n    }\n  }, God.watch.disable = function (pm2_env) {\n    var watcher = God.watch._watchers[pm2_env.pm_id];\n\n    if (watcher) {\n      console.log('[Watch] Stop watching', pm2_env.name);\n      watcher.close();\n      delete God.watch._watchers[pm2_env.pm_id];\n      return true;\n    } else {\n      return false;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/Watcher.js"],"names":["chokidar","require","util","log","module","exports","ClusterMode","God","watch","_watchers","enable","pm2_env","pm_id","close","isArray","length","pm_cwd","watch_options","ignored","ignore_watch","persistent","ignoreInitial","cwd","_extend","watcher","console","name","on","event","path","self","restarting","setTimeout","restartProcessName","err","list","watch_delay","e","error","stack","disableAll","watchers","i","splice","disable"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\nvar chokidar = require('chokidar');\nvar util     = require('util');\nvar log      = require('debug')('pm2:watch');\n\nmodule.exports = function ClusterMode(God) {\n  /**\n   * Watch folder for changes and restart\n   * @method watch\n   * @param {Object} pm2_env pm2 app environnement\n   * @return MemberExpression\n   */\n  God.watch = {};\n\n  God.watch._watchers = {};\n\n  God.watch.enable = function(pm2_env) {\n    if (God.watch._watchers[pm2_env.pm_id]) {\n      God.watch._watchers[pm2_env.pm_id].close();\n      God.watch._watchers[pm2_env.pm_id] = null;\n      delete God.watch._watchers[pm2_env.pm_id];\n    }\n\n    log('Initial watch ', pm2_env.watch)\n\n    var watch = pm2_env.watch\n\n    if(typeof watch == 'boolean' || util.isArray(watch) && watch.length === 0)\n      watch = pm2_env.pm_cwd;\n\n    log('Watching %s', watch);\n\n    var watch_options = {\n      ignored       : pm2_env.ignore_watch || /[\\/\\\\]\\.|node_modules/,\n      persistent    : true,\n      ignoreInitial : true,\n      cwd: pm2_env.pm_cwd\n    };\n\n    if (pm2_env.watch_options) {\n      watch_options = util._extend(watch_options, pm2_env.watch_options);\n    }\n\n    log('Watch opts', watch_options);\n\n    var watcher = chokidar.watch(watch, watch_options);\n\n    console.log('[Watch] Start watching', pm2_env.name);\n\n    watcher.on('all', function(event, path) {\n      var self = this;\n\n      if (self.restarting === true) {\n        log('Already restarting, skipping');\n        return false;\n      }\n\n      self.restarting = true;\n\n      console.log('Change detected on path %s for app %s - restarting', path, pm2_env.name);\n\n      setTimeout(function() {\n        God.restartProcessName(pm2_env.name, function(err, list) {\n          self.restarting = false;\n\n          if (err) {\n            log('Error while restarting', err);\n            return false;\n          }\n\n          return log('Process restarted');\n        });\n      }, (pm2_env.watch_delay || 0));\n\n      return false;\n    });\n\n    watcher.on('error', function(e) {\n      console.error(e.stack || e);\n    });\n\n    God.watch._watchers[pm2_env.pm_id] = watcher;\n\n    //return God.watch._watchers[pm2_env.name];\n  },\n  /**\n   * Description\n   * @method close\n   * @param {} id\n   * @return\n   */\n  God.watch.disableAll = function() {\n    var watchers = God.watch._watchers;\n\n    console.log('[Watch] PM2 is being killed. Watch is disabled to avoid conflicts');\n    for (var i in watchers) {\n      watchers[i].close && watchers[i].close();\n      watchers.splice(i, 1);\n    }\n  },\n\n  God.watch.disable = function(pm2_env) {\n    var watcher = God.watch._watchers[pm2_env.pm_id]\n    if (watcher) {\n      console.log('[Watch] Stop watching', pm2_env.name);\n      watcher.close();\n      delete God.watch._watchers[pm2_env.pm_id];\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}