{"ast":null,"code":"'use strict';\n\nconst ArrayPrompt = require('../types/array');\n\nconst utils = require('../utils');\n\nclass SelectPrompt extends ArrayPrompt {\n  constructor(options) {\n    super(options);\n    this.emptyError = this.options.emptyError || 'No items were selected';\n  }\n\n  async dispatch(s, key) {\n    if (this.multiple) {\n      return this[key.name] ? await this[key.name](s, key) : await super.dispatch(s, key);\n    }\n\n    this.alert();\n  }\n\n  separator() {\n    if (this.options.separator) return super.separator();\n    let sep = this.styles.muted(this.symbols.ellipsis);\n    return this.state.submitted ? super.separator() : sep;\n  }\n\n  pointer(choice, i) {\n    return !this.multiple || this.options.pointer ? super.pointer(choice, i) : '';\n  }\n\n  indicator(choice, i) {\n    return this.multiple ? super.indicator(choice, i) : '';\n  }\n\n  choiceMessage(choice, i) {\n    let message = this.resolve(choice.message, this.state, choice, i);\n\n    if (choice.role === 'heading' && !utils.hasColor(message)) {\n      message = this.styles.strong(message);\n    }\n\n    return this.resolve(message, this.state, choice, i);\n  }\n\n  choiceSeparator() {\n    return ':';\n  }\n\n  async renderChoice(choice, i) {\n    await this.onChoice(choice, i);\n    let focused = this.index === i;\n    let pointer = await this.pointer(choice, i);\n    let check = (await this.indicator(choice, i)) + (choice.pad || '');\n    let hint = await this.resolve(choice.hint, this.state, choice, i);\n\n    if (hint && !utils.hasColor(hint)) {\n      hint = this.styles.muted(hint);\n    }\n\n    let ind = this.indent(choice);\n    let msg = await this.choiceMessage(choice, i);\n\n    let line = () => [this.margin[3], ind + pointer + check, msg, this.margin[1], hint].filter(Boolean).join(' ');\n\n    if (choice.role === 'heading') {\n      return line();\n    }\n\n    if (choice.disabled) {\n      if (!utils.hasColor(msg)) {\n        msg = this.styles.disabled(msg);\n      }\n\n      return line();\n    }\n\n    if (focused) {\n      msg = this.styles.em(msg);\n    }\n\n    return line();\n  }\n\n  async renderChoices() {\n    if (this.state.loading === 'choices') {\n      return this.styles.warning('Loading choices');\n    }\n\n    if (this.state.submitted) return '';\n    let choices = this.visible.map(async (ch, i) => await this.renderChoice(ch, i));\n    let visible = await Promise.all(choices);\n    if (!visible.length) visible.push(this.styles.danger('No matching choices'));\n    let result = this.margin[0] + visible.join('\\n');\n    let header;\n\n    if (this.options.choicesHeader) {\n      header = await this.resolve(this.options.choicesHeader, this.state);\n    }\n\n    return [header, result].filter(Boolean).join('\\n');\n  }\n\n  format() {\n    if (!this.state.submitted || this.state.cancelled) return '';\n\n    if (Array.isArray(this.selected)) {\n      return this.selected.map(choice => this.styles.primary(choice.name)).join(', ');\n    }\n\n    return this.styles.primary(this.selected.name);\n  }\n\n  async render() {\n    let {\n      submitted,\n      size\n    } = this.state;\n    let prompt = '';\n    let header = await this.header();\n    let prefix = await this.prefix();\n    let separator = await this.separator();\n    let message = await this.message();\n\n    if (this.options.promptLine !== false) {\n      prompt = [prefix, message, separator, ''].join(' ');\n      this.state.prompt = prompt;\n    }\n\n    let output = await this.format();\n    let help = (await this.error()) || (await this.hint());\n    let body = await this.renderChoices();\n    let footer = await this.footer();\n    if (output) prompt += output;\n    if (help && !prompt.includes(help)) prompt += ' ' + help;\n\n    if (submitted && !output && !body.trim() && this.multiple && this.emptyError != null) {\n      prompt += this.styles.danger(this.emptyError);\n    }\n\n    this.clear(size);\n    this.write([header, prompt, body, footer].filter(Boolean).join('\\n'));\n    this.write(this.margin[2]);\n    this.restore();\n  }\n\n}\n\nmodule.exports = SelectPrompt;","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/lib/prompts/select.js"],"names":["ArrayPrompt","require","utils","SelectPrompt","constructor","options","emptyError","dispatch","s","key","multiple","name","alert","separator","sep","styles","muted","symbols","ellipsis","state","submitted","pointer","choice","i","indicator","choiceMessage","message","resolve","role","hasColor","strong","choiceSeparator","renderChoice","onChoice","focused","index","check","pad","hint","ind","indent","msg","line","margin","filter","Boolean","join","disabled","em","renderChoices","loading","warning","choices","visible","map","ch","Promise","all","length","push","danger","result","header","choicesHeader","format","cancelled","Array","isArray","selected","primary","render","size","prompt","prefix","promptLine","output","help","error","body","footer","includes","trim","clear","write","restore","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst ArrayPrompt = require('../types/array');\nconst utils = require('../utils');\n\nclass SelectPrompt extends ArrayPrompt {\n  constructor(options) {\n    super(options);\n    this.emptyError = this.options.emptyError || 'No items were selected';\n  }\n\n  async dispatch(s, key) {\n    if (this.multiple) {\n      return this[key.name] ? await this[key.name](s, key) : await super.dispatch(s, key);\n    }\n    this.alert();\n  }\n\n  separator() {\n    if (this.options.separator) return super.separator();\n    let sep = this.styles.muted(this.symbols.ellipsis);\n    return this.state.submitted ? super.separator() : sep;\n  }\n\n  pointer(choice, i) {\n    return (!this.multiple || this.options.pointer) ? super.pointer(choice, i) : '';\n  }\n\n  indicator(choice, i) {\n    return this.multiple ? super.indicator(choice, i) : '';\n  }\n\n  choiceMessage(choice, i) {\n    let message = this.resolve(choice.message, this.state, choice, i);\n    if (choice.role === 'heading' && !utils.hasColor(message)) {\n      message = this.styles.strong(message);\n    }\n    return this.resolve(message, this.state, choice, i);\n  }\n\n  choiceSeparator() {\n    return ':';\n  }\n\n  async renderChoice(choice, i) {\n    await this.onChoice(choice, i);\n\n    let focused = this.index === i;\n    let pointer = await this.pointer(choice, i);\n    let check = await this.indicator(choice, i) + (choice.pad || '');\n    let hint = await this.resolve(choice.hint, this.state, choice, i);\n\n    if (hint && !utils.hasColor(hint)) {\n      hint = this.styles.muted(hint);\n    }\n\n    let ind = this.indent(choice);\n    let msg = await this.choiceMessage(choice, i);\n    let line = () => [this.margin[3], ind + pointer + check, msg, this.margin[1], hint].filter(Boolean).join(' ');\n\n    if (choice.role === 'heading') {\n      return line();\n    }\n\n    if (choice.disabled) {\n      if (!utils.hasColor(msg)) {\n        msg = this.styles.disabled(msg);\n      }\n      return line();\n    }\n\n    if (focused) {\n      msg = this.styles.em(msg);\n    }\n\n    return line();\n  }\n\n  async renderChoices() {\n    if (this.state.loading === 'choices') {\n      return this.styles.warning('Loading choices');\n    }\n\n    if (this.state.submitted) return '';\n    let choices = this.visible.map(async(ch, i) => await this.renderChoice(ch, i));\n    let visible = await Promise.all(choices);\n    if (!visible.length) visible.push(this.styles.danger('No matching choices'));\n    let result = this.margin[0] + visible.join('\\n');\n    let header;\n\n    if (this.options.choicesHeader) {\n      header = await this.resolve(this.options.choicesHeader, this.state);\n    }\n\n    return [header, result].filter(Boolean).join('\\n');\n  }\n\n  format() {\n    if (!this.state.submitted || this.state.cancelled) return '';\n    if (Array.isArray(this.selected)) {\n      return this.selected.map(choice => this.styles.primary(choice.name)).join(', ');\n    }\n    return this.styles.primary(this.selected.name);\n  }\n\n  async render() {\n    let { submitted, size } = this.state;\n\n    let prompt = '';\n    let header = await this.header();\n    let prefix = await this.prefix();\n    let separator = await this.separator();\n    let message = await this.message();\n\n    if (this.options.promptLine !== false) {\n      prompt = [prefix, message, separator, ''].join(' ');\n      this.state.prompt = prompt;\n    }\n\n    let output = await this.format();\n    let help = (await this.error()) || (await this.hint());\n    let body = await this.renderChoices();\n    let footer = await this.footer();\n\n    if (output) prompt += output;\n    if (help && !prompt.includes(help)) prompt += ' ' + help;\n\n    if (submitted && !output && !body.trim() && this.multiple && this.emptyError != null) {\n      prompt += this.styles.danger(this.emptyError);\n    }\n\n    this.clear(size);\n    this.write([header, prompt, body, footer].filter(Boolean).join('\\n'));\n    this.write(this.margin[2]);\n    this.restore();\n  }\n}\n\nmodule.exports = SelectPrompt;\n"]},"metadata":{},"sourceType":"script"}