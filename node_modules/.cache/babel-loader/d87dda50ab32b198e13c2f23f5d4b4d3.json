{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// dockerSockets.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 13. DockerSockets\n// ----------------------------------------------------------------------------------\n\nconst net = require('net');\n\nconst isWin = require('os').type() === 'Windows_NT';\nconst socketPath = isWin ? '//./pipe/docker_engine' : '/var/run/docker.sock';\n\nclass DockerSocket {\n  getInfo(callback) {\n    try {\n      let socket = net.createConnection({\n        path: socketPath\n      });\n      let alldata = '';\n      let data;\n      socket.on('connect', () => {\n        socket.write('GET http:/info HTTP/1.0\\r\\n\\r\\n');\n      });\n      socket.on('data', data => {\n        alldata = alldata + data.toString();\n      });\n      socket.on('error', () => {\n        socket = false;\n        callback({});\n      });\n      socket.on('end', () => {\n        let startbody = alldata.indexOf('\\r\\n\\r\\n');\n        alldata = alldata.substring(startbody + 4);\n        socket = false;\n\n        try {\n          data = JSON.parse(alldata);\n          callback(data);\n        } catch (err) {\n          callback({});\n        }\n      });\n    } catch (err) {\n      callback({});\n    }\n  }\n\n  listContainers(all, callback) {\n    try {\n      let socket = net.createConnection({\n        path: socketPath\n      });\n      let alldata = '';\n      let data;\n      socket.on('connect', () => {\n        socket.write('GET http:/containers/json' + (all ? '?all=1' : '') + ' HTTP/1.0\\r\\n\\r\\n');\n      });\n      socket.on('data', data => {\n        alldata = alldata + data.toString();\n      });\n      socket.on('error', () => {\n        socket = false;\n        callback({});\n      });\n      socket.on('end', () => {\n        let startbody = alldata.indexOf('\\r\\n\\r\\n');\n        alldata = alldata.substring(startbody + 4);\n        socket = false;\n\n        try {\n          data = JSON.parse(alldata);\n          callback(data);\n        } catch (err) {\n          callback({});\n        }\n      });\n    } catch (err) {\n      callback({});\n    }\n  }\n\n  getStats(id, callback) {\n    id = id || '';\n\n    if (id) {\n      try {\n        let socket = net.createConnection({\n          path: socketPath\n        });\n        let alldata = '';\n        let data;\n        socket.on('connect', () => {\n          socket.write('GET http:/containers/' + id + '/stats?stream=0 HTTP/1.0\\r\\n\\r\\n');\n        });\n        socket.on('data', data => {\n          alldata = alldata + data.toString();\n        });\n        socket.on('error', () => {\n          socket = false;\n          callback({});\n        });\n        socket.on('end', () => {\n          let startbody = alldata.indexOf('\\r\\n\\r\\n');\n          alldata = alldata.substring(startbody + 4);\n          socket = false;\n\n          try {\n            data = JSON.parse(alldata);\n            callback(data);\n          } catch (err) {\n            callback({});\n          }\n        });\n      } catch (err) {\n        callback({});\n      }\n    } else {\n      callback({});\n    }\n  }\n\n  getInspect(id, callback) {\n    id = id || '';\n\n    if (id) {\n      try {\n        let socket = net.createConnection({\n          path: socketPath\n        });\n        let alldata = '';\n        let data;\n        socket.on('connect', () => {\n          socket.write('GET http:/containers/' + id + '/json?stream=0 HTTP/1.0\\r\\n\\r\\n');\n        });\n        socket.on('data', data => {\n          alldata = alldata + data.toString();\n        });\n        socket.on('error', () => {\n          socket = false;\n          callback({});\n        });\n        socket.on('end', () => {\n          let startbody = alldata.indexOf('\\r\\n\\r\\n');\n          alldata = alldata.substring(startbody + 4);\n          socket = false;\n\n          try {\n            data = JSON.parse(alldata);\n            callback(data);\n          } catch (err) {\n            callback({});\n          }\n        });\n      } catch (err) {\n        callback({});\n      }\n    } else {\n      callback({});\n    }\n  }\n\n  getProcesses(id, callback) {\n    id = id || '';\n\n    if (id) {\n      try {\n        let socket = net.createConnection({\n          path: socketPath\n        });\n        let alldata = '';\n        let data;\n        socket.on('connect', () => {\n          socket.write('GET http:/containers/' + id + '/top?ps_args=-opid,ppid,pgid,vsz,time,etime,nice,ruser,user,rgroup,group,stat,rss,args HTTP/1.0\\r\\n\\r\\n');\n        });\n        socket.on('data', data => {\n          alldata = alldata + data.toString();\n        });\n        socket.on('error', () => {\n          socket = false;\n          callback({});\n        });\n        socket.on('end', () => {\n          let startbody = alldata.indexOf('\\r\\n\\r\\n');\n          alldata = alldata.substring(startbody + 4);\n          socket = false;\n\n          try {\n            data = JSON.parse(alldata);\n            callback(data);\n          } catch (err) {\n            callback({});\n          }\n        });\n      } catch (err) {\n        callback({});\n      }\n    } else {\n      callback({});\n    }\n  }\n\n}\n\nmodule.exports = DockerSocket;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/dockerSocket.js"],"names":["net","require","isWin","type","socketPath","DockerSocket","getInfo","callback","socket","createConnection","path","alldata","data","on","write","toString","startbody","indexOf","substring","JSON","parse","err","listContainers","all","getStats","id","getInspect","getProcesses","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// dockerSockets.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 13. DockerSockets\n// ----------------------------------------------------------------------------------\n\nconst net = require('net');\nconst isWin = require('os').type() === 'Windows_NT';\nconst socketPath = isWin ? '//./pipe/docker_engine' : '/var/run/docker.sock';\n\nclass DockerSocket {\n\n  getInfo(callback) {\n    try {\n\n      let socket = net.createConnection({ path: socketPath });\n      let alldata = '';\n      let data;\n\n      socket.on('connect', () => {\n        socket.write('GET http:/info HTTP/1.0\\r\\n\\r\\n');\n      });\n\n      socket.on('data', data => {\n        alldata = alldata + data.toString();\n      });\n\n      socket.on('error', () => {\n        socket = false;\n        callback({});\n      });\n\n      socket.on('end', () => {\n        let startbody = alldata.indexOf('\\r\\n\\r\\n');\n        alldata = alldata.substring(startbody + 4);\n        socket = false;\n        try {\n          data = JSON.parse(alldata);\n          callback(data);\n        } catch (err) {\n          callback({});\n        }\n      });\n    } catch (err) {\n      callback({});\n    }\n  }\n\n  listContainers(all, callback) {\n    try {\n\n      let socket = net.createConnection({ path: socketPath });\n      let alldata = '';\n      let data;\n\n      socket.on('connect', () => {\n        socket.write('GET http:/containers/json' + (all ? '?all=1' : '') + ' HTTP/1.0\\r\\n\\r\\n');\n      });\n\n      socket.on('data', data => {\n        alldata = alldata + data.toString();\n      });\n\n      socket.on('error', () => {\n        socket = false;\n        callback({});\n      });\n\n      socket.on('end', () => {\n        let startbody = alldata.indexOf('\\r\\n\\r\\n');\n        alldata = alldata.substring(startbody + 4);\n        socket = false;\n        try {\n          data = JSON.parse(alldata);\n          callback(data);\n        } catch (err) {\n          callback({});\n        }\n      });\n    } catch (err) {\n      callback({});\n    }\n  }\n\n  getStats(id, callback) {\n    id = id || '';\n    if (id) {\n      try {\n        let socket = net.createConnection({ path: socketPath });\n        let alldata = '';\n        let data;\n\n        socket.on('connect', () => {\n          socket.write('GET http:/containers/' + id + '/stats?stream=0 HTTP/1.0\\r\\n\\r\\n');\n        });\n\n        socket.on('data', data => {\n          alldata = alldata + data.toString();\n        });\n\n        socket.on('error', () => {\n          socket = false;\n          callback({});\n        });\n\n        socket.on('end', () => {\n          let startbody = alldata.indexOf('\\r\\n\\r\\n');\n          alldata = alldata.substring(startbody + 4);\n          socket = false;\n          try {\n            data = JSON.parse(alldata);\n            callback(data);\n          } catch (err) {\n            callback({});\n          }\n        });\n      } catch (err) {\n        callback({});\n      }\n    } else {\n      callback({});\n    }\n  }\n\n  getInspect(id, callback) {\n    id = id || '';\n    if (id) {\n      try {\n        let socket = net.createConnection({ path: socketPath });\n        let alldata = '';\n        let data;\n\n        socket.on('connect', () => {\n          socket.write('GET http:/containers/' + id + '/json?stream=0 HTTP/1.0\\r\\n\\r\\n');\n        });\n\n        socket.on('data', data => {\n          alldata = alldata + data.toString();\n        });\n\n        socket.on('error', () => {\n          socket = false;\n          callback({});\n        });\n\n        socket.on('end', () => {\n          let startbody = alldata.indexOf('\\r\\n\\r\\n');\n          alldata = alldata.substring(startbody + 4);\n          socket = false;\n          try {\n            data = JSON.parse(alldata);\n            callback(data);\n          } catch (err) {\n            callback({});\n          }\n        });\n      } catch (err) {\n        callback({});\n      }\n    } else {\n      callback({});\n    }\n  }\n\n  getProcesses(id, callback) {\n    id = id || '';\n    if (id) {\n      try {\n        let socket = net.createConnection({ path: socketPath });\n        let alldata = '';\n        let data;\n\n        socket.on('connect', () => {\n          socket.write('GET http:/containers/' + id + '/top?ps_args=-opid,ppid,pgid,vsz,time,etime,nice,ruser,user,rgroup,group,stat,rss,args HTTP/1.0\\r\\n\\r\\n');\n        });\n\n        socket.on('data', data => {\n          alldata = alldata + data.toString();\n        });\n\n        socket.on('error', () => {\n          socket = false;\n          callback({});\n        });\n\n        socket.on('end', () => {\n          let startbody = alldata.indexOf('\\r\\n\\r\\n');\n          alldata = alldata.substring(startbody + 4);\n          socket = false;\n          try {\n            data = JSON.parse(alldata);\n            callback(data);\n          } catch (err) {\n            callback({});\n          }\n        });\n      } catch (err) {\n        callback({});\n      }\n    } else {\n      callback({});\n    }\n  }\n}\n\nmodule.exports = DockerSocket;\n"]},"metadata":{},"sourceType":"script"}