{"ast":null,"code":"var cst = require('../../constants.js');\n\nvar Common = require('../Common.js');\n\nvar fs = require('fs');\n\nvar eachSeries = require('async/eachSeries');\n\nvar child = require('child_process');\n\nvar printError = Common.printError;\nvar printOut = Common.printOut;\n\nmodule.exports = function (CLI) {\n  var EXEC_TIMEOUT = 60000; // Default: 1 min\n\n  CLI.prototype._pull = function (opts, cb) {\n    var that = this;\n    var process_name = opts.process_name;\n    var reload_type = opts.action;\n    printOut(cst.PREFIX_MSG + 'Updating repository for process name %s', process_name);\n    that.Client.getProcessByNameOrId(process_name, function (err, processes) {\n      if (err || processes.length === 0) {\n        printError('No processes with this name or id : %s', process_name);\n        return cb ? cb({\n          msg: 'Process not found: ' + process_name\n        }) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      var proc = processes[0];\n\n      if (!proc.pm2_env.versioning) {\n        printOut(cst.PREFIX_MSG + 'No versioning system found for process %s', process_name);\n        return cb ? cb({\n          success: false,\n          msg: 'No versioning system found for process'\n        }) : that.exitCli(cst.SUCCESS_EXIT);\n      }\n\n      require('vizion').update({\n        folder: proc.pm2_env.versioning.repo_path\n      }, function (err, meta) {\n        if (err !== null) {\n          return cb ? cb({\n            msg: err\n          }) : that.exitCli(cst.ERROR_EXIT);\n        }\n\n        if (meta.success === true) {\n          getPostUpdateCmds(proc.pm2_env.versioning.repo_path, process_name, function (command_list) {\n            execCommands(proc.pm2_env.versioning.repo_path, command_list, function (err, res) {\n              if (err !== null) {\n                printError(err);\n                return cb ? cb({\n                  msg: meta.output + err\n                }) : that.exitCli(cst.ERROR_EXIT);\n              } else {\n                printOut(cst.PREFIX_MSG + 'Process successfully updated %s', process_name);\n                printOut(cst.PREFIX_MSG + 'Current commit %s', meta.current_revision);\n                return that[reload_type](process_name, function (err, procs) {\n                  if (err && cb) return cb(err);\n                  if (err) console.error(err);\n                  return cb ? cb(null, meta.output + res) : that.exitCli(cst.SUCCESS_EXIT);\n                });\n              }\n            });\n          });\n        } else {\n          printOut(cst.PREFIX_MSG + 'Already up-to-date or an error occured for app: %s', process_name);\n          return cb ? cb({\n            success: false,\n            msg: 'Already up to date'\n          }) : that.exitCli(cst.SUCCESS_EXIT);\n        }\n\n        return false;\n      });\n\n      return false;\n    });\n  };\n  /**\n   * CLI method for updating a repository to a specific commit id\n   * @method pullCommitId\n   * @param {string} process_name\n   * @param {string} commit_id\n   * @return\n   */\n\n\n  CLI.prototype.pullCommitId = function (process_name, commit_id, cb) {\n    var reload_type = 'reload';\n    var that = this;\n    printOut(cst.PREFIX_MSG + 'Updating repository for process name %s', process_name);\n    that.Client.getProcessByNameOrId(process_name, function (err, processes) {\n      if (err || processes.length === 0) {\n        printError('No processes with this name or id : %s', process_name);\n        return cb ? cb({\n          msg: 'Process not found: ' + process_name\n        }) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      var proc = processes[0];\n\n      if (proc.pm2_env.versioning) {\n        require('vizion').isUpToDate({\n          folder: proc.pm2_env.versioning.repo_path\n        }, function (err, meta) {\n          if (err !== null) return cb ? cb({\n            msg: err\n          }) : that.exitCli(cst.ERROR_EXIT);\n\n          require('vizion').revertTo({\n            revision: commit_id,\n            folder: proc.pm2_env.versioning.repo_path\n          }, function (err2, meta2) {\n            if (!err2 && meta2.success) {\n              getPostUpdateCmds(proc.pm2_env.versioning.repo_path, process_name, function (command_list) {\n                execCommands(proc.pm2_env.versioning.repo_path, command_list, function (err, res) {\n                  if (err !== null) {\n                    printError(err);\n                    return cb ? cb({\n                      msg: err\n                    }) : that.exitCli(cst.ERROR_EXIT);\n                  } else {\n                    printOut(cst.PREFIX_MSG + 'Process successfully updated %s', process_name);\n                    printOut(cst.PREFIX_MSG + 'Current commit %s', commit_id);\n                    return that[reload_type](process_name, cb);\n                  }\n                });\n              });\n            } else {\n              printOut(cst.PREFIX_MSG + 'Already up-to-date or an error occured: %s', process_name);\n              return cb ? cb(null, {\n                success: meta.success\n              }) : that.exitCli(cst.SUCCESS_EXIT);\n            }\n          });\n        });\n      } else {\n        printOut(cst.PREFIX_MSG + 'No versioning system found for process %s', process_name);\n        return cb ? cb(null, {\n          success: false\n        }) : that.exitCli(cst.SUCCESS_EXIT);\n      }\n    });\n  };\n  /**\n   * CLI method for downgrading a repository to the previous commit (older)\n   * @method backward\n   * @param {string} process_name\n   * @return\n   */\n\n\n  CLI.prototype.backward = function (process_name, cb) {\n    var that = this;\n    printOut(cst.PREFIX_MSG + 'Downgrading to previous commit repository for process name %s', process_name);\n    that.Client.getProcessByNameOrId(process_name, function (err, processes) {\n      if (err || processes.length === 0) {\n        printError('No processes with this name or id : %s', process_name);\n        return cb ? cb({\n          msg: 'Process not found: ' + process_name\n        }) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      var proc = processes[0]; // in case user searched by id/pid\n\n      process_name = proc.name;\n      if (proc.pm2_env.versioning === undefined || proc.pm2_env.versioning === null) return cb({\n        msg: 'Versioning unknown'\n      });\n\n      require('vizion').prev({\n        folder: proc.pm2_env.versioning.repo_path\n      }, function (err, meta) {\n        if (err) return cb ? cb({\n          msg: err,\n          data: meta\n        }) : that.exitCli(cst.ERROR_EXIT);\n\n        if (meta.success !== true) {\n          printOut(cst.PREFIX_MSG + 'No versioning system found for process %s', process_name);\n          return cb ? cb({\n            msg: err,\n            data: meta\n          }) : that.exitCli(cst.ERROR_EXIT);\n        }\n\n        getPostUpdateCmds(proc.pm2_env.versioning.repo_path, process_name, function (command_list) {\n          execCommands(proc.pm2_env.versioning.repo_path, command_list, function (err, res) {\n            if (err !== null) {\n              require('vizion').next({\n                folder: proc.pm2_env.versioning.repo_path\n              }, function (err2, meta2) {\n                printError(err);\n                return cb ? cb({\n                  msg: meta.output + err\n                }) : that.exitCli(cst.ERROR_EXIT);\n              });\n\n              return false;\n            }\n\n            printOut(cst.PREFIX_MSG + 'Process successfully updated %s', process_name);\n            printOut(cst.PREFIX_MSG + 'Current commit %s', meta.current_revision);\n            that.reload(process_name, function (err, procs) {\n              if (err) return cb(err);\n              return cb ? cb(null, meta.output + res) : that.exitCli(cst.SUCCESS_EXIT);\n            });\n          });\n        });\n      });\n    });\n  };\n  /**\n   * CLI method for updating a repository to the next commit (more recent)\n   * @method forward\n   * @param {string} process_name\n   * @return\n   */\n\n\n  CLI.prototype.forward = function (process_name, cb) {\n    var that = this;\n    printOut(cst.PREFIX_MSG + 'Updating to next commit repository for process name %s', process_name);\n    that.Client.getProcessByNameOrId(process_name, function (err, processes) {\n      if (err || processes.length === 0) {\n        printError('No processes with this name or id: %s', process_name);\n        return cb ? cb({\n          msg: 'Process not found: ' + process_name\n        }) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      var proc = processes[0]; // in case user searched by id/pid\n\n      process_name = proc.name;\n\n      if (proc.pm2_env.versioning) {\n        require('vizion').next({\n          folder: proc.pm2_env.versioning.repo_path\n        }, function (err, meta) {\n          if (err !== null) return cb ? cb({\n            msg: err\n          }) : that.exitCli(cst.ERROR_EXIT);\n\n          if (meta.success === true) {\n            getPostUpdateCmds(proc.pm2_env.versioning.repo_path, process_name, function (command_list) {\n              execCommands(proc.pm2_env.versioning.repo_path, command_list, function (err, res) {\n                if (err !== null) {\n                  require('vizion').prev({\n                    folder: proc.pm2_env.versioning.repo_path\n                  }, function (err2, meta2) {\n                    printError(err);\n                    return cb ? cb({\n                      msg: meta.output + err\n                    }) : that.exitCli(cst.ERROR_EXIT);\n                  });\n                } else {\n                  printOut(cst.PREFIX_MSG + 'Process successfully updated %s', process_name);\n                  printOut(cst.PREFIX_MSG + 'Current commit %s', meta.current_revision);\n                  that.reload(process_name, function (err, procs) {\n                    if (err) return cb(err);\n                    return cb ? cb(null, meta.output + res) : that.exitCli(cst.SUCCESS_EXIT);\n                  });\n                }\n              });\n            });\n          } else {\n            printOut(cst.PREFIX_MSG + 'Already up-to-date or an error occured: %s', process_name);\n            return cb ? cb(null, {\n              success: meta.success\n            }) : that.exitCli(cst.SUCCESS_EXIT);\n          }\n        });\n      } else {\n        printOut(cst.PREFIX_MSG + 'No versioning system found for process %s', process_name);\n        return cb ? cb({\n          success: false,\n          msg: 'No versioning system found'\n        }) : that.exitCli(cst.SUCCESS_EXIT);\n      }\n    });\n  };\n\n  var exec = function (cmd, callback) {\n    var output = '';\n    var c = child.exec(cmd, {\n      env: process.env,\n      maxBuffer: 3 * 1024 * 1024,\n      timeout: EXEC_TIMEOUT\n    }, function (err) {\n      if (callback) callback(err ? err.code : 0, output);\n    });\n    c.stdout.on('data', function (data) {\n      output += data;\n    });\n    c.stderr.on('data', function (data) {\n      output += data;\n    });\n  };\n  /**\n   *\n   * @method execCommands\n   * @param {string} repo_path\n   * @param {object} command_list\n   * @return\n   */\n\n\n  var execCommands = function (repo_path, command_list, cb) {\n    var stdout = '';\n    eachSeries(command_list, function (command, callback) {\n      stdout += '\\n' + command;\n      exec('cd ' + repo_path + ';' + command, function (code, output) {\n        stdout += '\\n' + output;\n        if (code === 0) callback();else callback('`' + command + '` failed');\n      });\n    }, function (err) {\n      if (err) return cb(stdout + '\\n' + err);\n      return cb(null, stdout);\n    });\n  };\n  /**\n   * Description Search process.json for post-update commands\n   * @method getPostUpdateCmds\n   * @param {string} repo_path\n   * @param {string} proc_name\n   * @return\n   */\n\n\n  var getPostUpdateCmds = function (repo_path, proc_name, cb) {\n    if (typeof repo_path !== 'string') return cb([]);\n    if (repo_path[repo_path.length - 1] !== '/') repo_path += '/';\n\n    var searchForCommands = function (file, callback) {\n      fs.exists(repo_path + file, function (exists) {\n        if (exists) {\n          try {\n            var conf_string = fs.readFileSync(repo_path + file);\n            var data = Common.parseConfig(conf_string, repo_path + file);\n          } catch (e) {\n            console.error(e.message || e);\n          }\n\n          if (data && data.apps) {\n            eachSeries(data.apps, function (item, callb) {\n              if (item.name && item.name === proc_name) {\n                if (item.post_update && typeof item.post_update === 'object') {\n                  if (item.exec_timeout) EXEC_TIMEOUT = parseInt(item.exec_timeout);\n                  return callb(item.post_update);\n                } else {\n                  return callb();\n                }\n              } else return callb();\n            }, function (final) {\n              return callback(final);\n            });\n          } else {\n            return callback();\n          }\n        } else {\n          return callback();\n        }\n      });\n    };\n\n    eachSeries(['ecosystem.json', 'process.json', 'package.json'], searchForCommands, function (final) {\n      return cb(final ? final : []);\n    });\n  };\n  /**\n   * CLI method for updating a repository\n   * @method pullAndRestart\n   * @param {string} process_name name of processes to pull\n   * @return\n   */\n\n\n  CLI.prototype.pullAndRestart = function (process_name, cb) {\n    this._pull({\n      process_name: process_name,\n      action: 'reload'\n    }, cb);\n  };\n  /**\n   * CLI method for updating a repository\n   * @method pullAndReload\n   * @param {string} process_name name of processes to pull\n   * @return\n   */\n\n\n  CLI.prototype.pullAndReload = function (process_name, cb) {\n    this._pull({\n      process_name: process_name,\n      action: 'reload'\n    }, cb);\n  };\n  /**\n   * CLI method for updating a repository to a specific commit id\n   * @method pullCommitId\n   * @param {object} opts\n   * @return\n   */\n\n\n  CLI.prototype._pullCommitId = function (opts, cb) {\n    this.pullCommitId(opts.pm2_name, opts.commit_id, cb);\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/API/Version.js"],"names":["cst","require","Common","fs","eachSeries","child","printError","printOut","module","exports","CLI","EXEC_TIMEOUT","prototype","_pull","opts","cb","that","process_name","reload_type","action","PREFIX_MSG","Client","getProcessByNameOrId","err","processes","length","msg","exitCli","ERROR_EXIT","proc","pm2_env","versioning","success","SUCCESS_EXIT","update","folder","repo_path","meta","getPostUpdateCmds","command_list","execCommands","res","output","current_revision","procs","console","error","pullCommitId","commit_id","isUpToDate","revertTo","revision","err2","meta2","backward","name","undefined","prev","data","next","reload","forward","exec","cmd","callback","c","env","process","maxBuffer","timeout","code","stdout","on","stderr","command","proc_name","searchForCommands","file","exists","conf_string","readFileSync","parseConfig","e","message","apps","item","callb","post_update","exec_timeout","parseInt","final","pullAndRestart","pullAndReload","_pullCommitId","pm2_name"],"mappings":"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","sourcesContent":["\nvar cst        = require('../../constants.js');\nvar Common     = require('../Common.js');\nvar fs         = require('fs');\nvar eachSeries = require('async/eachSeries');\nvar child      = require('child_process');\n\nvar printError = Common.printError;\nvar printOut = Common.printOut;\n\nmodule.exports = function(CLI) {\n\n  var EXEC_TIMEOUT = 60000; // Default: 1 min\n\n  CLI.prototype._pull = function(opts, cb) {\n    var that = this;\n\n    var process_name = opts.process_name;\n    var reload_type = opts.action;\n\n    printOut(cst.PREFIX_MSG + 'Updating repository for process name %s', process_name);\n\n    that.Client.getProcessByNameOrId(process_name, function (err, processes) {\n\n      if (err || processes.length === 0) {\n        printError('No processes with this name or id : %s', process_name);\n        return cb ? cb({msg: 'Process not found: ' + process_name}) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      var proc = processes[0];\n      if (!proc.pm2_env.versioning) {\n        printOut(cst.PREFIX_MSG + 'No versioning system found for process %s', process_name);\n        return cb ? cb({success:false, msg: 'No versioning system found for process'}) : that.exitCli(cst.SUCCESS_EXIT);\n      }\n      require('vizion').update({\n        folder: proc.pm2_env.versioning.repo_path\n      }, function(err, meta) {\n        if (err !== null) {\n          return cb ? cb({msg:err}) : that.exitCli(cst.ERROR_EXIT);\n        }\n\n        if (meta.success === true) {\n          getPostUpdateCmds(proc.pm2_env.versioning.repo_path, process_name, function (command_list) {\n            execCommands(proc.pm2_env.versioning.repo_path, command_list, function(err, res) {\n              if (err !== null) {\n                printError(err);\n                return cb ? cb({msg: meta.output + err}) : that.exitCli(cst.ERROR_EXIT);\n              }\n              else {\n                printOut(cst.PREFIX_MSG + 'Process successfully updated %s', process_name);\n                printOut(cst.PREFIX_MSG + 'Current commit %s', meta.current_revision);\n                return that[reload_type](process_name, function(err, procs) {\n                  if (err && cb) return cb(err);\n                  if (err) console.error(err);\n                  return cb ? cb(null, meta.output + res) : that.exitCli(cst.SUCCESS_EXIT);\n                });\n              }\n            });\n          });\n        }\n        else {\n          printOut(cst.PREFIX_MSG + 'Already up-to-date or an error occured for app: %s', process_name);\n          return cb ? cb({success:false, msg : 'Already up to date'}) : that.exitCli(cst.SUCCESS_EXIT);\n        }\n        return false;\n      });\n      return false;\n    });\n  };\n\n  /**\n   * CLI method for updating a repository to a specific commit id\n   * @method pullCommitId\n   * @param {string} process_name\n   * @param {string} commit_id\n   * @return\n   */\n  CLI.prototype.pullCommitId = function(process_name, commit_id, cb) {\n    var reload_type = 'reload';\n    var that = this;\n\n    printOut(cst.PREFIX_MSG + 'Updating repository for process name %s', process_name);\n\n    that.Client.getProcessByNameOrId(process_name, function (err, processes) {\n\n      if (err || processes.length === 0) {\n        printError('No processes with this name or id : %s', process_name);\n        return cb ? cb({msg: 'Process not found: ' + process_name}) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      var proc = processes[0];\n      if (proc.pm2_env.versioning) {\n        require('vizion').isUpToDate({folder: proc.pm2_env.versioning.repo_path}, function(err, meta) {\n          if (err !== null)\n            return cb ? cb({msg:err}) : that.exitCli(cst.ERROR_EXIT);\n          require('vizion').revertTo(\n            {revision: commit_id,\n             folder: proc.pm2_env.versioning.repo_path},\n            function(err2, meta2) {\n              if (!err2 && meta2.success) {\n                getPostUpdateCmds(proc.pm2_env.versioning.repo_path, process_name, function (command_list) {\n                  execCommands(proc.pm2_env.versioning.repo_path, command_list, function(err, res) {\n                    if (err !== null)\n                    {\n                      printError(err);\n                      return cb ? cb({msg:err}) : that.exitCli(cst.ERROR_EXIT);\n                    }\n                    else {\n                      printOut(cst.PREFIX_MSG + 'Process successfully updated %s', process_name);\n                      printOut(cst.PREFIX_MSG + 'Current commit %s', commit_id);\n                      return that[reload_type](process_name, cb);\n                    }\n                  });\n                });\n              }\n              else {\n                printOut(cst.PREFIX_MSG + 'Already up-to-date or an error occured: %s', process_name);\n                return cb ? cb(null, {success:meta.success}) : that.exitCli(cst.SUCCESS_EXIT);\n              }\n            });\n        });\n      }\n      else {\n        printOut(cst.PREFIX_MSG + 'No versioning system found for process %s', process_name);\n        return cb ? cb(null, {success:false}) : that.exitCli(cst.SUCCESS_EXIT);\n      }\n    });\n  };\n\n  /**\n   * CLI method for downgrading a repository to the previous commit (older)\n   * @method backward\n   * @param {string} process_name\n   * @return\n   */\n  CLI.prototype.backward = function(process_name, cb) {\n    var that = this;\n    printOut(cst.PREFIX_MSG + 'Downgrading to previous commit repository for process name %s', process_name);\n\n    that.Client.getProcessByNameOrId(process_name, function (err, processes) {\n\n      if (err || processes.length === 0) {\n        printError('No processes with this name or id : %s', process_name);\n        return cb ? cb({msg: 'Process not found: ' + process_name}) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      var proc = processes[0];\n      // in case user searched by id/pid\n      process_name = proc.name;\n\n      if (proc.pm2_env.versioning === undefined ||\n          proc.pm2_env.versioning === null)\n        return cb({msg : 'Versioning unknown'});\n\n      require('vizion').prev({\n        folder: proc.pm2_env.versioning.repo_path\n      }, function(err, meta) {\n        if (err)\n          return cb ? cb({msg:err, data : meta}) : that.exitCli(cst.ERROR_EXIT);\n\n        if (meta.success !== true) {\n          printOut(cst.PREFIX_MSG + 'No versioning system found for process %s', process_name);\n          return cb ? cb({msg:err, data : meta}) : that.exitCli(cst.ERROR_EXIT);\n        }\n\n        getPostUpdateCmds(proc.pm2_env.versioning.repo_path, process_name, function (command_list) {\n          execCommands(proc.pm2_env.versioning.repo_path, command_list, function(err, res) {\n            if (err !== null) {\n              require('vizion').next({folder: proc.pm2_env.versioning.repo_path}, function(err2, meta2) {\n                printError(err);\n                return cb ? cb({msg: meta.output + err}) : that.exitCli(cst.ERROR_EXIT);\n              });\n              return false;\n            }\n\n            printOut(cst.PREFIX_MSG + 'Process successfully updated %s', process_name);\n            printOut(cst.PREFIX_MSG + 'Current commit %s', meta.current_revision);\n            that.reload(process_name, function(err, procs) {\n              if (err) return cb(err);\n              return cb ? cb(null, meta.output + res) : that.exitCli(cst.SUCCESS_EXIT);\n            });\n          });\n        });\n      });\n    });\n  };\n\n  /**\n   * CLI method for updating a repository to the next commit (more recent)\n   * @method forward\n   * @param {string} process_name\n   * @return\n   */\n  CLI.prototype.forward = function(process_name, cb) {\n    var that = this;\n    printOut(cst.PREFIX_MSG + 'Updating to next commit repository for process name %s', process_name);\n\n    that.Client.getProcessByNameOrId(process_name, function (err, processes) {\n\n      if (err || processes.length === 0) {\n        printError('No processes with this name or id: %s', process_name);\n        return cb ? cb({msg: 'Process not found: ' + process_name}) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      var proc = processes[0];\n      // in case user searched by id/pid\n      process_name = proc.name;\n      if (proc.pm2_env.versioning) {\n        require('vizion').next({folder: proc.pm2_env.versioning.repo_path}, function(err, meta) {\n          if (err !== null)\n            return cb ? cb({msg:err}) : that.exitCli(cst.ERROR_EXIT);\n          if (meta.success === true) {\n            getPostUpdateCmds(proc.pm2_env.versioning.repo_path, process_name, function (command_list) {\n              execCommands(proc.pm2_env.versioning.repo_path, command_list, function(err, res) {\n                if (err !== null)\n                {\n                  require('vizion').prev({folder: proc.pm2_env.versioning.repo_path}, function(err2, meta2) {\n                    printError(err);\n                    return cb ? cb({msg:meta.output + err}) : that.exitCli(cst.ERROR_EXIT);\n                  });\n                }\n                else {\n                  printOut(cst.PREFIX_MSG + 'Process successfully updated %s', process_name);\n                  printOut(cst.PREFIX_MSG + 'Current commit %s', meta.current_revision);\n                  that.reload(process_name, function(err, procs) {\n                    if (err) return cb(err);\n                    return cb ? cb(null, meta.output + res) : that.exitCli(cst.SUCCESS_EXIT);\n                  });\n                }\n              });\n            });\n          }\n          else {\n            printOut(cst.PREFIX_MSG + 'Already up-to-date or an error occured: %s', process_name);\n            return cb ? cb(null, {success:meta.success}) : that.exitCli(cst.SUCCESS_EXIT);\n          }\n        });\n      }\n      else {\n        printOut(cst.PREFIX_MSG + 'No versioning system found for process %s', process_name);\n        return cb ? cb({success:false, msg: 'No versioning system found'}) : that.exitCli(cst.SUCCESS_EXIT);\n      }\n    });\n  };\n\n  var exec = function (cmd, callback) {\n    var output = '';\n\n    var c = child.exec(cmd, {\n      env: process.env,\n      maxBuffer: 3*1024*1024,\n      timeout: EXEC_TIMEOUT\n    }, function(err) {\n      if (callback)\n        callback(err ? err.code : 0, output);\n    });\n\n    c.stdout.on('data', function(data) {\n      output += data;\n    });\n\n    c.stderr.on('data', function(data) {\n      output += data;\n    });\n  };\n\n  /**\n   *\n   * @method execCommands\n   * @param {string} repo_path\n   * @param {object} command_list\n   * @return\n   */\n  var execCommands = function(repo_path, command_list, cb) {\n    var stdout = '';\n\n    eachSeries(command_list, function(command, callback) {\n      stdout += '\\n' + command;\n      exec('cd '+repo_path+';'+command,\n           function(code, output) {\n             stdout += '\\n' + output;\n             if (code === 0)\n               callback();\n             else\n               callback('`'+command+'` failed');\n           });\n    }, function(err) {\n      if (err)\n        return cb(stdout + '\\n' + err);\n      return cb(null, stdout);\n    });\n  }\n\n  /**\n   * Description Search process.json for post-update commands\n   * @method getPostUpdateCmds\n   * @param {string} repo_path\n   * @param {string} proc_name\n   * @return\n   */\n  var getPostUpdateCmds = function(repo_path, proc_name, cb) {\n    if (typeof repo_path !== 'string')\n      return cb([]);\n    if (repo_path[repo_path.length - 1] !== '/')\n      repo_path += '/';\n\n    var searchForCommands = function(file, callback) {\n      fs.exists(repo_path+file, function(exists) {\n        if (exists) {\n          try {\n            var conf_string = fs.readFileSync(repo_path + file);\n            var data = Common.parseConfig(conf_string, repo_path + file);\n          } catch (e) {\n            console.error(e.message || e);\n          }\n\n          if (data && data.apps) {\n            eachSeries(data.apps, function(item, callb) {\n              if (item.name && item.name === proc_name) {\n                if (item.post_update && typeof(item.post_update) === 'object') {\n                  if (item.exec_timeout)\n                    EXEC_TIMEOUT = parseInt(item.exec_timeout);\n                  return callb(item.post_update);\n                }\n                else {\n                  return callb();\n                }\n              }\n              else\n                return callb();\n            }, function(final) {\n              return callback(final);\n            });\n          }\n          else {\n            return callback();\n          }\n        }\n        else {\n          return callback();\n        }\n      });\n    };\n\n    eachSeries(['ecosystem.json', 'process.json', 'package.json'], searchForCommands,\n                     function(final) {\n                       return cb(final ? final : []);\n                     });\n  };\n\n\n  /**\n   * CLI method for updating a repository\n   * @method pullAndRestart\n   * @param {string} process_name name of processes to pull\n   * @return\n   */\n  CLI.prototype.pullAndRestart = function (process_name, cb) {\n    this._pull({process_name: process_name, action: 'reload'}, cb);\n  };\n\n  /**\n   * CLI method for updating a repository\n   * @method pullAndReload\n   * @param {string} process_name name of processes to pull\n   * @return\n   */\n  CLI.prototype.pullAndReload = function (process_name, cb) {\n    this._pull({process_name: process_name, action: 'reload'}, cb);\n  };\n\n  /**\n   * CLI method for updating a repository to a specific commit id\n   * @method pullCommitId\n   * @param {object} opts\n   * @return\n   */\n  CLI.prototype._pullCommitId = function (opts, cb) {\n    this.pullCommitId(opts.pm2_name, opts.commit_id, cb);\n  };\n\n}\n"]},"metadata":{},"sourceType":"script"}