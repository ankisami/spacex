{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// index.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// Contributors:  Guillaume Legrain (https://github.com/glegrain)\n//                Riccardo Novaglia (https://github.com/richy24)\n//                Quentin Busuttil (https://github.com/Buzut)\n//                Lapsio (https://github.com/lapsio)\n//                csy (https://github.com/csy1983)\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// ----------------------------------------------------------------------------------\n// Dependencies\n// ----------------------------------------------------------------------------------\n\nconst lib_version = require('../package.json').version;\n\nconst util = require('./util');\n\nconst system = require('./system');\n\nconst osInfo = require('./osinfo');\n\nconst cpu = require('./cpu');\n\nconst memory = require('./memory');\n\nconst battery = require('./battery');\n\nconst graphics = require('./graphics');\n\nconst filesystem = require('./filesystem');\n\nconst network = require('./network');\n\nconst wifi = require('./wifi');\n\nconst processes = require('./processes');\n\nconst users = require('./users');\n\nconst internet = require('./internet');\n\nconst docker = require('./docker');\n\nconst vbox = require('./virtualbox');\n\nlet _platform = process.platform;\n\nconst _windows = _platform === 'win32';\n\nconst _freebsd = _platform === 'freebsd';\n\nconst _openbsd = _platform === 'openbsd';\n\nconst _netbsd = _platform === 'netbsd';\n\nconst _sunos = _platform === 'sunos'; // ----------------------------------------------------------------------------------\n// init\n// ----------------------------------------------------------------------------------\n\n\nif (_windows) {\n  util.getCodepage();\n} // ----------------------------------------------------------------------------------\n// General\n// ----------------------------------------------------------------------------------\n\n\nfunction version() {\n  return lib_version;\n} // ----------------------------------------------------------------------------------\n// Get static and dynamic data (all)\n// ----------------------------------------------------------------------------------\n// --------------------------\n// get static data - they should not change until restarted\n\n\nfunction getStaticData(callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let data = {};\n      data.version = version();\n      Promise.all([system.system(), system.bios(), system.baseboard(), system.chassis(), osInfo.osInfo(), osInfo.uuid(), osInfo.versions(), cpu.cpu(), cpu.cpuFlags(), graphics.graphics(), network.networkInterfaces(), memory.memLayout(), filesystem.diskLayout()]).then(res => {\n        data.system = res[0];\n        data.bios = res[1];\n        data.baseboard = res[2];\n        data.chassis = res[3];\n        data.os = res[4];\n        data.uuid = res[5];\n        data.versions = res[6];\n        data.cpu = res[7];\n        data.cpu.flags = res[8];\n        data.graphics = res[9];\n        data.net = res[10];\n        data.memLayout = res[11];\n        data.diskLayout = res[12];\n\n        if (callback) {\n          callback(data);\n        }\n\n        resolve(data);\n      });\n    });\n  });\n} // --------------------------\n// get all dynamic data - e.g. for monitoring agents\n// may take some seconds to get all data\n// --------------------------\n// 2 additional parameters needed\n// - srv: \t\tcomma separated list of services to monitor e.g. \"mysql, apache, postgresql\"\n// - iface:\tdefine network interface for which you like to monitor network speed e.g. \"eth0\"\n\n\nfunction getDynamicData(srv, iface, callback) {\n  if (util.isFunction(iface)) {\n    callback = iface;\n    iface = '';\n  }\n\n  if (util.isFunction(srv)) {\n    callback = srv;\n    srv = '';\n  }\n\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      iface = iface || network.getDefaultNetworkInterface();\n      srv = srv || ''; // use closure to track Æ’ completion\n\n      let functionProcessed = function () {\n        let totalFunctions = 15;\n        if (_windows) totalFunctions = 11;\n        if (_freebsd || _openbsd || _netbsd) totalFunctions = 11;\n        if (_sunos) totalFunctions = 6;\n        return function () {\n          if (--totalFunctions === 0) {\n            if (callback) {\n              callback(data);\n            }\n\n            resolve(data);\n          }\n        };\n      }(); // var totalFunctions = 14;\n      // function functionProcessed() {\n      //   if (--totalFunctions === 0) {\n      //     if (callback) { callback(data) }\n      //     resolve(data);\n      //   }\n      // }\n\n\n      let data = {}; // get time\n\n      data.time = osInfo.time();\n      /**\n       * @namespace\n       * @property {Object}  versions\n       * @property {string}  versions.node\n       * @property {string}  versions.v8\n       */\n\n      data.node = process.versions.node;\n      data.v8 = process.versions.v8;\n      cpu.cpuCurrentspeed().then(res => {\n        data.cpuCurrentspeed = res;\n        functionProcessed();\n      });\n      users.users().then(res => {\n        data.users = res;\n        functionProcessed();\n      });\n\n      if (!_windows) {\n        processes.processes().then(res => {\n          data.processes = res;\n          functionProcessed();\n        });\n      }\n\n      cpu.currentLoad().then(res => {\n        data.currentLoad = res;\n        functionProcessed();\n      });\n\n      if (!_sunos) {\n        cpu.cpuTemperature().then(res => {\n          data.temp = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        network.networkStats(iface).then(res => {\n          data.networkStats = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_sunos) {\n        network.networkConnections().then(res => {\n          data.networkConnections = res;\n          functionProcessed();\n        });\n      }\n\n      memory.mem().then(res => {\n        data.mem = res;\n        functionProcessed();\n      });\n\n      if (!_sunos) {\n        battery().then(res => {\n          data.battery = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_sunos) {\n        processes.services(srv).then(res => {\n          data.services = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_sunos) {\n        filesystem.fsSize().then(res => {\n          data.fsSize = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        filesystem.fsStats().then(res => {\n          data.fsStats = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        filesystem.disksIO().then(res => {\n          data.disksIO = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        wifi.wifiNetworks().then(res => {\n          data.wifiNetworks = res;\n          functionProcessed();\n        });\n      }\n\n      internet.inetLatency().then(res => {\n        data.inetLatency = res;\n        functionProcessed();\n      });\n    });\n  });\n} // --------------------------\n// get all data at once\n// --------------------------\n// 2 additional parameters needed\n// - srv: \t\tcomma separated list of services to monitor e.g. \"mysql, apache, postgresql\"\n// - iface:\tdefine network interface for which you like to monitor network speed e.g. \"eth0\"\n\n\nfunction getAllData(srv, iface, callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let data = {};\n\n      if (iface && util.isFunction(iface) && !callback) {\n        callback = iface;\n        iface = '';\n      }\n\n      if (srv && util.isFunction(srv) && !iface && !callback) {\n        callback = srv;\n        srv = '';\n        iface = '';\n      }\n\n      getStaticData().then(res => {\n        data = res;\n        getDynamicData(srv, iface).then(res => {\n          for (let key in res) {\n            if ({}.hasOwnProperty.call(res, key)) {\n              data[key] = res[key];\n            }\n          }\n\n          if (callback) {\n            callback(data);\n          }\n\n          resolve(data);\n        });\n      });\n    });\n  });\n}\n\nfunction get(valueObject, callback) {\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      const allPromises = Object.keys(valueObject).filter(func => ({}).hasOwnProperty.call(exports, func)).map(func => {\n        const params = valueObject[func].substring(valueObject[func].lastIndexOf('(') + 1, valueObject[func].lastIndexOf(')'));\n        const funcWithoutParams = func.split('(')[0];\n\n        if (params) {\n          return exports[funcWithoutParams](params);\n        } else {\n          return exports[funcWithoutParams]('');\n        }\n      });\n      Promise.all(allPromises).then(data => {\n        const result = {};\n        let i = 0;\n\n        for (let key in valueObject) {\n          if ({}.hasOwnProperty.call(valueObject, key) && {}.hasOwnProperty.call(exports, key) && data.length > i) {\n            if (valueObject[key] === '*' || valueObject[key] === 'all') {\n              result[key] = data[i];\n            } else {\n              const keys = valueObject[key].replace(/,/g, ' ').replace(/ +/g, ' ').split(' ');\n\n              if (data[i]) {\n                if (Array.isArray(data[i])) {\n                  // result is in an array, go through all elements of array and pick only the right ones\n                  const partialArray = [];\n                  data[i].forEach(element => {\n                    const partialRes = {};\n                    keys.forEach(k => {\n                      if ({}.hasOwnProperty.call(element, k)) {\n                        partialRes[k] = element[k];\n                      }\n                    });\n                    partialArray.push(partialRes);\n                  });\n                  result[key] = partialArray;\n                } else {\n                  const partialRes = {};\n                  keys.forEach(k => {\n                    if ({}.hasOwnProperty.call(data[i], k)) {\n                      partialRes[k] = data[i][k];\n                    }\n                  });\n                  result[key] = partialRes;\n                }\n              } else {\n                result[key] = {};\n              }\n            }\n\n            i++;\n          }\n        }\n\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      });\n    });\n  });\n}\n\nfunction observe(valueObject, interval, callback) {\n  let _data = null;\n  const result = setInterval(() => {\n    get(valueObject).then(data => {\n      if (JSON.stringify(_data) !== JSON.stringify(data)) {\n        _data = Object.assign({}, data);\n        callback(data);\n      }\n    });\n  }, interval);\n  return result;\n} // ----------------------------------------------------------------------------------\n// export all libs\n// ----------------------------------------------------------------------------------\n\n\nexports.version = version;\nexports.system = system.system;\nexports.bios = system.bios;\nexports.baseboard = system.baseboard;\nexports.chassis = system.chassis;\nexports.time = osInfo.time;\nexports.osInfo = osInfo.osInfo;\nexports.versions = osInfo.versions;\nexports.shell = osInfo.shell;\nexports.uuid = osInfo.uuid;\nexports.cpu = cpu.cpu;\nexports.cpuFlags = cpu.cpuFlags;\nexports.cpuCache = cpu.cpuCache;\nexports.cpuCurrentspeed = cpu.cpuCurrentspeed;\nexports.cpuTemperature = cpu.cpuTemperature;\nexports.currentLoad = cpu.currentLoad;\nexports.fullLoad = cpu.fullLoad;\nexports.mem = memory.mem;\nexports.memLayout = memory.memLayout;\nexports.battery = battery;\nexports.graphics = graphics.graphics;\nexports.fsSize = filesystem.fsSize;\nexports.fsOpenFiles = filesystem.fsOpenFiles;\nexports.blockDevices = filesystem.blockDevices;\nexports.fsStats = filesystem.fsStats;\nexports.disksIO = filesystem.disksIO;\nexports.diskLayout = filesystem.diskLayout;\nexports.networkInterfaceDefault = network.networkInterfaceDefault;\nexports.networkGatewayDefault = network.networkGatewayDefault;\nexports.networkInterfaces = network.networkInterfaces;\nexports.networkStats = network.networkStats;\nexports.networkConnections = network.networkConnections;\nexports.wifiNetworks = wifi.wifiNetworks;\nexports.services = processes.services;\nexports.processes = processes.processes;\nexports.processLoad = processes.processLoad;\nexports.users = users.users;\nexports.inetChecksite = internet.inetChecksite;\nexports.inetLatency = internet.inetLatency;\nexports.dockerInfo = docker.dockerInfo;\nexports.dockerContainers = docker.dockerContainers;\nexports.dockerContainerStats = docker.dockerContainerStats;\nexports.dockerContainerProcesses = docker.dockerContainerProcesses;\nexports.dockerAll = docker.dockerAll;\nexports.vboxInfo = vbox.vboxInfo;\nexports.getStaticData = getStaticData;\nexports.getDynamicData = getDynamicData;\nexports.getAllData = getAllData;\nexports.get = get;\nexports.observe = observe;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/index.js"],"names":["lib_version","require","version","util","system","osInfo","cpu","memory","battery","graphics","filesystem","network","wifi","processes","users","internet","docker","vbox","_platform","process","platform","_windows","_freebsd","_openbsd","_netbsd","_sunos","getCodepage","getStaticData","callback","Promise","resolve","nextTick","data","all","bios","baseboard","chassis","uuid","versions","cpuFlags","networkInterfaces","memLayout","diskLayout","then","res","os","flags","net","getDynamicData","srv","iface","isFunction","getDefaultNetworkInterface","functionProcessed","totalFunctions","time","node","v8","cpuCurrentspeed","currentLoad","cpuTemperature","temp","networkStats","networkConnections","mem","services","fsSize","fsStats","disksIO","wifiNetworks","inetLatency","getAllData","key","hasOwnProperty","call","get","valueObject","allPromises","Object","keys","filter","func","exports","map","params","substring","lastIndexOf","funcWithoutParams","split","result","i","length","replace","Array","isArray","partialArray","forEach","element","partialRes","k","push","observe","interval","_data","setInterval","JSON","stringify","assign","shell","cpuCache","fullLoad","fsOpenFiles","blockDevices","networkInterfaceDefault","networkGatewayDefault","processLoad","inetChecksite","dockerInfo","dockerContainers","dockerContainerStats","dockerContainerProcesses","dockerAll","vboxInfo"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// index.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// Contributors:  Guillaume Legrain (https://github.com/glegrain)\n//                Riccardo Novaglia (https://github.com/richy24)\n//                Quentin Busuttil (https://github.com/Buzut)\n//                Lapsio (https://github.com/lapsio)\n//                csy (https://github.com/csy1983)\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n\n// ----------------------------------------------------------------------------------\n// Dependencies\n// ----------------------------------------------------------------------------------\n\nconst lib_version = require('../package.json').version;\nconst util = require('./util');\nconst system = require('./system');\nconst osInfo = require('./osinfo');\nconst cpu = require('./cpu');\nconst memory = require('./memory');\nconst battery = require('./battery');\nconst graphics = require('./graphics');\nconst filesystem = require('./filesystem');\nconst network = require('./network');\nconst wifi = require('./wifi');\nconst processes = require('./processes');\nconst users = require('./users');\nconst internet = require('./internet');\nconst docker = require('./docker');\nconst vbox = require('./virtualbox');\n\nlet _platform = process.platform;\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\n// ----------------------------------------------------------------------------------\n// init\n// ----------------------------------------------------------------------------------\n\nif (_windows) {\n  util.getCodepage();\n}\n\n// ----------------------------------------------------------------------------------\n// General\n// ----------------------------------------------------------------------------------\n\nfunction version() {\n  return lib_version;\n}\n\n// ----------------------------------------------------------------------------------\n// Get static and dynamic data (all)\n// ----------------------------------------------------------------------------------\n\n// --------------------------\n// get static data - they should not change until restarted\n\nfunction getStaticData(callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      let data = {};\n\n      data.version = version();\n\n      Promise.all([\n        system.system(),\n        system.bios(),\n        system.baseboard(),\n        system.chassis(),\n        osInfo.osInfo(),\n        osInfo.uuid(),\n        osInfo.versions(),\n        cpu.cpu(),\n        cpu.cpuFlags(),\n        graphics.graphics(),\n        network.networkInterfaces(),\n        memory.memLayout(),\n        filesystem.diskLayout()\n      ]).then(res => {\n        data.system = res[0];\n        data.bios = res[1];\n        data.baseboard = res[2];\n        data.chassis = res[3];\n        data.os = res[4];\n        data.uuid = res[5];\n        data.versions = res[6];\n        data.cpu = res[7];\n        data.cpu.flags = res[8];\n        data.graphics = res[9];\n        data.net = res[10];\n        data.memLayout = res[11];\n        data.diskLayout = res[12];\n        if (callback) { callback(data); }\n        resolve(data);\n      });\n    });\n  });\n}\n\n\n// --------------------------\n// get all dynamic data - e.g. for monitoring agents\n// may take some seconds to get all data\n// --------------------------\n// 2 additional parameters needed\n// - srv: \t\tcomma separated list of services to monitor e.g. \"mysql, apache, postgresql\"\n// - iface:\tdefine network interface for which you like to monitor network speed e.g. \"eth0\"\n\nfunction getDynamicData(srv, iface, callback) {\n\n  if (util.isFunction(iface)) {\n    callback = iface;\n    iface = '';\n  }\n  if (util.isFunction(srv)) {\n    callback = srv;\n    srv = '';\n  }\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n\n      iface = iface || network.getDefaultNetworkInterface();\n      srv = srv || '';\n\n      // use closure to track Æ’ completion\n      let functionProcessed = (function () {\n        let totalFunctions = 15;\n        if (_windows) totalFunctions = 11;\n        if (_freebsd || _openbsd || _netbsd) totalFunctions = 11;\n        if (_sunos) totalFunctions = 6;\n\n        return function () {\n          if (--totalFunctions === 0) {\n            if (callback) {\n              callback(data);\n            }\n            resolve(data);\n          }\n        };\n      })();\n\n      // var totalFunctions = 14;\n      // function functionProcessed() {\n      //   if (--totalFunctions === 0) {\n      //     if (callback) { callback(data) }\n      //     resolve(data);\n      //   }\n      // }\n\n      let data = {};\n\n      // get time\n      data.time = osInfo.time();\n\n      /**\n       * @namespace\n       * @property {Object}  versions\n       * @property {string}  versions.node\n       * @property {string}  versions.v8\n       */\n      data.node = process.versions.node;\n      data.v8 = process.versions.v8;\n\n      cpu.cpuCurrentspeed().then(res => {\n        data.cpuCurrentspeed = res;\n        functionProcessed();\n      });\n\n      users.users().then(res => {\n        data.users = res;\n        functionProcessed();\n      });\n\n      if (!_windows) {\n        processes.processes().then(res => {\n          data.processes = res;\n          functionProcessed();\n        });\n      }\n\n      cpu.currentLoad().then(res => {\n        data.currentLoad = res;\n        functionProcessed();\n      });\n\n      if (!_sunos) {\n        cpu.cpuTemperature().then(res => {\n          data.temp = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        network.networkStats(iface).then(res => {\n          data.networkStats = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_sunos) {\n        network.networkConnections().then(res => {\n          data.networkConnections = res;\n          functionProcessed();\n        });\n      }\n\n      memory.mem().then(res => {\n        data.mem = res;\n        functionProcessed();\n      });\n\n      if (!_sunos) {\n        battery().then(res => {\n          data.battery = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_sunos) {\n        processes.services(srv).then(res => {\n          data.services = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_sunos) {\n        filesystem.fsSize().then(res => {\n          data.fsSize = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        filesystem.fsStats().then(res => {\n          data.fsStats = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_windows && !_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        filesystem.disksIO().then(res => {\n          data.disksIO = res;\n          functionProcessed();\n        });\n      }\n\n      if (!_openbsd && !_freebsd && !_netbsd && !_sunos) {\n        wifi.wifiNetworks().then(res => {\n          data.wifiNetworks = res;\n          functionProcessed();\n        });\n      }\n\n      internet.inetLatency().then(res => {\n        data.inetLatency = res;\n        functionProcessed();\n      });\n    });\n  });\n}\n\n// --------------------------\n// get all data at once\n// --------------------------\n// 2 additional parameters needed\n// - srv: \t\tcomma separated list of services to monitor e.g. \"mysql, apache, postgresql\"\n// - iface:\tdefine network interface for which you like to monitor network speed e.g. \"eth0\"\n\nfunction getAllData(srv, iface, callback) {\n\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let data = {};\n\n      if (iface && util.isFunction(iface) && !callback) {\n        callback = iface;\n        iface = '';\n      }\n\n      if (srv && util.isFunction(srv) && !iface && !callback) {\n        callback = srv;\n        srv = '';\n        iface = '';\n      }\n\n      getStaticData().then(res => {\n        data = res;\n        getDynamicData(srv, iface).then(res => {\n          for (let key in res) {\n            if ({}.hasOwnProperty.call(res, key)) {\n              data[key] = res[key];\n            }\n          }\n          if (callback) { callback(data); }\n          resolve(data);\n        });\n      });\n    });\n  });\n}\n\nfunction get(valueObject, callback) {\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      const allPromises = Object.keys(valueObject)\n        .filter(func => ({}.hasOwnProperty.call(exports, func)))\n        .map(func => {\n          const params = valueObject[func].substring(valueObject[func].lastIndexOf('(') + 1, valueObject[func].lastIndexOf(')'));\n          const funcWithoutParams = func.split('(')[0];\n          if (params) {\n            return exports[funcWithoutParams](params)\n          } else {\n            return exports[funcWithoutParams]('')\n          }\n        });\n\n      Promise.all(allPromises).then(data => {\n        const result = {};\n        let i = 0;\n        for (let key in valueObject) {\n          if ({}.hasOwnProperty.call(valueObject, key) && {}.hasOwnProperty.call(exports, key) && data.length > i) {\n            if (valueObject[key] === '*' || valueObject[key] === 'all') {\n              result[key] = data[i];\n            } else {\n              const keys = valueObject[key].replace(/,/g, ' ').replace(/ +/g, ' ').split(' ');\n              if (data[i]) {\n                if (Array.isArray(data[i])) {\n                  // result is in an array, go through all elements of array and pick only the right ones\n                  const partialArray = [];\n                  data[i].forEach(element => {\n                    const partialRes = {};\n                    keys.forEach(k => {\n                      if ({}.hasOwnProperty.call(element, k)) {\n                        partialRes[k] = element[k];\n                      }\n                    });\n                    partialArray.push(partialRes);\n                  });\n                  result[key] = partialArray;\n                } else {\n                  const partialRes = {};\n                  keys.forEach(k => {\n                    if ({}.hasOwnProperty.call(data[i], k)) {\n                      partialRes[k] = data[i][k];\n                    }\n                  });\n                  result[key] = partialRes;\n                }\n              } else {\n                result[key] = {};\n              }\n            }\n            i++;\n          }\n        }\n        if (callback) { callback(result); }\n        resolve(result);\n      });\n    });\n  });\n}\n\nfunction observe(valueObject, interval, callback) {\n  let _data = null;\n\n  const result = setInterval(() => {\n    get(valueObject).then(data => {\n      if (JSON.stringify(_data) !== JSON.stringify(data)) {\n        _data = Object.assign({}, data);\n        callback(data);\n      }\n    });\n  }, interval);\n  return result;\n}\n\n// ----------------------------------------------------------------------------------\n// export all libs\n// ----------------------------------------------------------------------------------\n\nexports.version = version;\nexports.system = system.system;\nexports.bios = system.bios;\nexports.baseboard = system.baseboard;\nexports.chassis = system.chassis;\n\nexports.time = osInfo.time;\nexports.osInfo = osInfo.osInfo;\nexports.versions = osInfo.versions;\nexports.shell = osInfo.shell;\nexports.uuid = osInfo.uuid;\n\nexports.cpu = cpu.cpu;\nexports.cpuFlags = cpu.cpuFlags;\nexports.cpuCache = cpu.cpuCache;\nexports.cpuCurrentspeed = cpu.cpuCurrentspeed;\nexports.cpuTemperature = cpu.cpuTemperature;\nexports.currentLoad = cpu.currentLoad;\nexports.fullLoad = cpu.fullLoad;\n\nexports.mem = memory.mem;\nexports.memLayout = memory.memLayout;\n\nexports.battery = battery;\n\nexports.graphics = graphics.graphics;\n\nexports.fsSize = filesystem.fsSize;\nexports.fsOpenFiles = filesystem.fsOpenFiles;\nexports.blockDevices = filesystem.blockDevices;\nexports.fsStats = filesystem.fsStats;\nexports.disksIO = filesystem.disksIO;\nexports.diskLayout = filesystem.diskLayout;\n\nexports.networkInterfaceDefault = network.networkInterfaceDefault;\nexports.networkGatewayDefault = network.networkGatewayDefault;\nexports.networkInterfaces = network.networkInterfaces;\nexports.networkStats = network.networkStats;\nexports.networkConnections = network.networkConnections;\n\nexports.wifiNetworks = wifi.wifiNetworks;\n\nexports.services = processes.services;\nexports.processes = processes.processes;\nexports.processLoad = processes.processLoad;\n\nexports.users = users.users;\n\nexports.inetChecksite = internet.inetChecksite;\nexports.inetLatency = internet.inetLatency;\n\nexports.dockerInfo = docker.dockerInfo;\nexports.dockerContainers = docker.dockerContainers;\nexports.dockerContainerStats = docker.dockerContainerStats;\nexports.dockerContainerProcesses = docker.dockerContainerProcesses;\nexports.dockerAll = docker.dockerAll;\n\nexports.vboxInfo = vbox.vboxInfo;\n\nexports.getStaticData = getStaticData;\nexports.getDynamicData = getDynamicData;\nexports.getAllData = getAllData;\nexports.get = get;\nexports.observe = observe;\n\n"]},"metadata":{},"sourceType":"script"}