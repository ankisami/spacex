{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n\n/**\n * Common Utilities ONLY USED IN ->CLI<-\n */\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar os = require('os');\n\nvar util = require('util');\n\nvar chalk = require('chalk');\n\nvar fclone = require('fclone');\n\nvar semver = require('semver');\n\nvar dayjs = require('dayjs');\n\nvar execSync = require('child_process').execSync;\n\nvar isBinary = require('./tools/isbinaryfile.js');\n\nvar cst = require('../constants.js');\n\nvar extItps = require('./API/interpreter.json');\n\nvar Config = require('./tools/Config');\n\nvar pkg = require('../package.json');\n\nvar which = require('./tools/which.js');\n\nvar Common = module.exports;\n\nfunction homedir() {\n  var env = process.env;\n  var home = env.HOME;\n  var user = env.LOGNAME || env.USER || env.LNAME || env.USERNAME;\n\n  if (process.platform === 'win32') {\n    return env.USERPROFILE || env.HOMEDRIVE + env.HOMEPATH || home || null;\n  }\n\n  if (process.platform === 'darwin') {\n    return home || (user ? '/Users/' + user : null);\n  }\n\n  if (process.platform === 'linux') {\n    return home || (process.getuid() === 0 ? '/root' : user ? '/home/' + user : null);\n  }\n\n  return home || null;\n}\n\nfunction resolveHome(filepath) {\n  if (filepath[0] === '~') {\n    return path.join(homedir(), filepath.slice(1));\n  }\n\n  return filepath;\n}\n\nCommon.determineSilentCLI = function () {\n  // pm2 should ignore -s --silent -v if they are after '--'\n  var variadicArgsDashesPos = process.argv.indexOf('--');\n  var s1opt = process.argv.indexOf('--silent');\n  var s2opt = process.argv.indexOf('-s');\n\n  if (process.env.PM2_SILENT || variadicArgsDashesPos > -1 && s1opt != -1 && s1opt < variadicArgsDashesPos && s2opt != -1 != s2opt < variadicArgsDashesPos || variadicArgsDashesPos == -1 && (s1opt > -1 || s2opt > -1)) {\n    for (var key in console) {\n      var code = key.charCodeAt(0);\n\n      if (code >= 97 && code <= 122) {\n        console[key] = function () {};\n      }\n    }\n\n    process.env.PM2_DISCRETE_MODE = true;\n  }\n};\n\nCommon.printVersion = function () {\n  var variadicArgsDashesPos = process.argv.indexOf('--');\n\n  if (process.argv.indexOf('-v') > -1 && process.argv.indexOf('-v') < variadicArgsDashesPos) {\n    console.log(pkg.version);\n    process.exit(0);\n  }\n};\n\nCommon.lockReload = function () {\n  try {\n    var t1 = fs.readFileSync(cst.PM2_RELOAD_LOCKFILE).toString(); // Check if content and if time < 30 return locked\n    // Else if content detected (lock file staled), allow and rewritte\n\n    if (t1 && t1 != '') {\n      var diff = dayjs().diff(parseInt(t1));\n      if (diff < cst.RELOAD_LOCK_TIMEOUT) return diff;\n    }\n  } catch (e) {}\n\n  try {\n    // Write latest timestamp\n    fs.writeFileSync(cst.PM2_RELOAD_LOCKFILE, dayjs().valueOf().toString());\n    return 0;\n  } catch (e) {\n    console.error(e.message || e);\n  }\n};\n\nCommon.unlockReload = function () {\n  try {\n    fs.writeFileSync(cst.PM2_RELOAD_LOCKFILE, '');\n  } catch (e) {\n    console.error(e.message || e);\n  }\n};\n/**\n * Resolve app paths and replace missing values with defaults.\n * @method prepareAppConf\n * @param app {Object}\n * @param {} cwd\n * @param {} outputter\n * @return app\n */\n\n\nCommon.prepareAppConf = function (opts, app) {\n  /**\n   * Minimum validation\n   */\n  if (!app.script) return new Error('No script path - aborting');\n  var cwd = null;\n\n  if (app.cwd) {\n    cwd = path.resolve(app.cwd);\n    process.env.PWD = app.cwd;\n  }\n\n  if (!app.node_args) {\n    app.node_args = [];\n  }\n\n  if (app.port && app.env) {\n    app.env.PORT = app.port;\n  } // CWD option resolving\n\n\n  cwd && cwd[0] != '/' && (cwd = path.resolve(process.cwd(), cwd));\n  cwd = cwd || opts.cwd; // Full path script resolution\n\n  app.pm_exec_path = path.resolve(cwd, app.script); // If script does not exist after resolution\n\n  if (!fs.existsSync(app.pm_exec_path)) {\n    var ckd; // Try resolve command available in $PATH\n\n    if (ckd = which(app.script)) {\n      if (typeof ckd !== 'string') ckd = ckd.toString();\n      app.pm_exec_path = ckd;\n    } else // Throw critical error\n      return new Error(`Script not found: ${app.pm_exec_path}`);\n  }\n  /**\n   * Auto detect .map file and enable source map support automatically\n   */\n\n\n  if (app.disable_source_map_support != true) {\n    try {\n      fs.accessSync(app.pm_exec_path + '.map', fs.R_OK);\n      app.source_map_support = true;\n    } catch (e) {}\n\n    delete app.disable_source_map_support;\n  }\n\n  delete app.script; // Set current env by first adding the process environment and then extending/replacing it\n  // with env specified on command-line or JSON file.\n\n  var env = {};\n  /**\n   * Do not copy internal pm2 environment variables if acting on process\n   * is made from a programmatic script started by PM2 or if a pm_id is present in env\n   */\n\n  if (cst.PM2_PROGRAMMATIC || process.env.pm_id) Common.safeExtend(env, process.env);else env = process.env;\n\n  function filterEnv(envObj) {\n    if (app.filter_env == true) return {};\n\n    if (typeof app.filter_env === 'string') {\n      delete envObj[app.filter_env];\n      return envObj;\n    }\n\n    var new_env = {};\n    var allowedKeys = app.filter_env.reduce((acc, current) => acc.filter(item => !item.includes(current)), Object.keys(envObj));\n    allowedKeys.forEach(key => new_env[key] = envObj[key]);\n    return new_env;\n  }\n\n  app.env = [{}, app.filter_env && app.filter_env.length > 0 ? filterEnv(process.env) : env, app.env || {}].reduce(function (e1, e2) {\n    return util._extend(e1, e2);\n  });\n  app.pm_cwd = cwd; // Interpreter\n\n  try {\n    Common.sink.resolveInterpreter(app);\n  } catch (e) {\n    return e;\n  } // Exec mode and cluster stuff\n\n\n  Common.sink.determineExecMode(app);\n  /**\n   * Scary\n   */\n\n  var formated_app_name = app.name.replace(/[^a-zA-Z0-9\\\\.\\\\-]/g, '-');\n  ['log', 'out', 'error', 'pid'].forEach(function (f) {\n    var af = app[f + '_file'],\n        ps,\n        ext = f == 'pid' ? 'pid' : 'log',\n        isStd = !~['log', 'pid'].indexOf(f);\n    if (af) af = resolveHome(af);\n\n    if (f == 'log' && typeof af == 'boolean' && af || f != 'log' && !af) {\n      ps = [cst['DEFAULT_' + ext.toUpperCase() + '_PATH'], formated_app_name + (isStd ? '-' + f : '') + '.' + ext];\n    } else if ((f != 'log' || f == 'log' && af) && af !== 'NULL' && af !== '/dev/null') {\n      ps = [cwd, af];\n      var dir = path.dirname(path.resolve(cwd, af));\n\n      if (!fs.existsSync(dir)) {\n        Common.printError(cst.PREFIX_MSG_WARNING + 'Folder does not exist: ' + dir);\n        Common.printOut(cst.PREFIX_MSG + 'Creating folder: ' + dir);\n\n        try {\n          require('mkdirp').sync(dir);\n        } catch (err) {\n          Common.printError(cst.PREFIX_MSG_ERR + 'Could not create folder: ' + path.dirname(af));\n          throw new Error('Could not create folder');\n        }\n      }\n    } // PM2 paths\n\n\n    if (af !== 'NULL' && af !== '/dev/null') {\n      ps && (app['pm_' + (isStd ? f.substr(0, 3) + '_' : '') + ext + '_path'] = path.resolve.apply(null, ps));\n    } else if (path.sep === '\\\\') {\n      app['pm_' + (isStd ? f.substr(0, 3) + '_' : '') + ext + '_path'] = '\\\\\\\\.\\\\NUL';\n    } else {\n      app['pm_' + (isStd ? f.substr(0, 3) + '_' : '') + ext + '_path'] = '/dev/null';\n    }\n\n    delete app[f + '_file'];\n  });\n  return app;\n};\n/**\n * Check if filename is a configuration file\n * @param {string} filename\n * @return {mixed} null if not conf file, json or yaml if conf\n */\n\n\nCommon.isConfigFile = function (filename) {\n  if (typeof filename !== 'string') return null;\n  if (filename.indexOf('.json') !== -1) return 'json';\n  if (filename.indexOf('.yml') > -1 || filename.indexOf('.yaml') > -1) return 'yaml';\n  if (filename.indexOf('.config.js') !== -1) return 'js';\n  if (filename.indexOf('.config.cjs') !== -1) return 'js';\n  if (filename.indexOf('.config.mjs') !== -1) return 'mjs';\n  return null;\n};\n/**\n * Parses a config file like ecosystem.config.js. Supported formats: JS, JSON, JSON5, YAML.\n * @param {string} confString  contents of the config file\n * @param {string} filename    path to the config file\n * @return {Object} config object\n */\n\n\nCommon.parseConfig = function (confObj, filename) {\n  var yamljs = require('yamljs');\n\n  var vm = require('vm');\n\n  if (!filename || filename == 'pipe' || filename == 'none' || filename.indexOf('.json') > -1) {\n    var code = '(' + confObj + ')';\n    var sandbox = {};\n    return vm.runInThisContext(code, sandbox, {\n      filename: path.resolve(filename),\n      displayErrors: false,\n      timeout: 1000\n    });\n  } else if (filename.indexOf('.yml') > -1 || filename.indexOf('.yaml') > -1) {\n    return yamljs.parse(confObj.toString());\n  } else if (filename.indexOf('.config.js') > -1 || filename.indexOf('.config.cjs') > -1 || filename.indexOf('.config.mjs') > -1) {\n    var confPath = require.resolve(path.resolve(filename));\n\n    delete require.cache[confPath];\n    return require(confPath);\n  }\n};\n\nCommon.retErr = function (e) {\n  if (!e) return new Error('Unidentified error');\n  if (e instanceof Error) return e;\n  return new Error(e);\n};\n\nCommon.sink = {};\n\nCommon.sink.determineCron = function (app) {\n  var cronJob = require('cron').CronJob;\n\n  if (app.cron_restart) {\n    try {\n      Common.printOut(cst.PREFIX_MSG + 'cron restart at ' + app.cron_restart);\n      new cronJob(app.cron_restart, function () {\n        Common.printOut(cst.PREFIX_MSG + 'cron pattern for auto restart detected and valid');\n      });\n    } catch (ex) {\n      return new Error(`Cron pattern error: ${ex.message}`);\n    }\n  }\n};\n/**\n * Handle alias (fork <=> fork_mode, cluster <=> cluster_mode)\n */\n\n\nCommon.sink.determineExecMode = function (app) {\n  if (app.exec_mode) app.exec_mode = app.exec_mode.replace(/^(fork|cluster)$/, '$1_mode');\n  /**\n   * Here we put the default exec mode\n   */\n\n  if (!app.exec_mode && (app.instances >= 1 || app.instances === 0 || app.instances === -1) && app.exec_interpreter.indexOf('node') > -1) {\n    app.exec_mode = 'cluster_mode';\n  } else if (!app.exec_mode) {\n    app.exec_mode = 'fork_mode';\n  }\n\n  if (typeof app.instances == 'undefined') app.instances = 1;\n};\n\nvar resolveNodeInterpreter = function (app) {\n  if (app.exec_mode && app.exec_mode.indexOf('cluster') > -1) {\n    Common.printError(cst.PREFIX_MSG_WARNING + chalk.bold.yellow('Choosing the Node.js version in cluster mode is not supported'));\n    return false;\n  }\n\n  var nvm_path = cst.IS_WINDOWS ? process.env.NVM_HOME : process.env.NVM_DIR;\n\n  if (!nvm_path) {\n    Common.printError(cst.PREFIX_MSG_ERR + chalk.red('NVM is not available in PATH'));\n    Common.printError(cst.PREFIX_MSG_ERR + chalk.red('Fallback to node in PATH'));\n    var msg = cst.IS_WINDOWS ? 'https://github.com/coreybutler/nvm-windows/releases/' : '$ curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash';\n    Common.printOut(cst.PREFIX_MSG_ERR + chalk.bold('Install NVM:\\n' + msg));\n  } else {\n    var node_version = app.exec_interpreter.split('@')[1];\n    var path_to_node = cst.IS_WINDOWS ? '/v' + node_version + '/node.exe' : semver.satisfies(node_version, '>= 0.12.0') ? '/versions/node/v' + node_version + '/bin/node' : '/v' + node_version + '/bin/node';\n    var nvm_node_path = path.join(nvm_path, path_to_node);\n\n    try {\n      fs.accessSync(nvm_node_path);\n    } catch (e) {\n      Common.printOut(cst.PREFIX_MSG + 'Installing Node v%s', node_version);\n      var nvm_bin = path.join(nvm_path, 'nvm.' + (cst.IS_WINDOWS ? 'exe' : 'sh'));\n      var nvm_cmd = cst.IS_WINDOWS ? nvm_bin + ' install ' + node_version : '. ' + nvm_bin + ' ; nvm install ' + node_version;\n      Common.printOut(cst.PREFIX_MSG + 'Executing: %s', nvm_cmd);\n      execSync(nvm_cmd, {\n        cwd: path.resolve(process.cwd()),\n        env: process.env,\n        maxBuffer: 20 * 1024 * 1024\n      }); // in order to support both arch, nvm for Windows renames 'node.exe' to:\n      // 'node32.exe' for x32 arch\n      // 'node64.exe' for x64 arch\n\n      if (cst.IS_WINDOWS) nvm_node_path = nvm_node_path.replace(/node/, 'node' + process.arch.slice(1));\n    }\n\n    Common.printOut(cst.PREFIX_MSG + chalk.green.bold('Setting Node to v%s (path=%s)'), node_version, nvm_node_path);\n    app.exec_interpreter = nvm_node_path;\n  }\n};\n/**\n * Resolve interpreter\n */\n\n\nCommon.sink.resolveInterpreter = function (app) {\n  var noInterpreter = !app.exec_interpreter;\n  var extName = path.extname(app.pm_exec_path);\n  var betterInterpreter = extItps[extName]; // No interpreter defined and correspondance in schema hashmap\n\n  if (noInterpreter && betterInterpreter) {\n    app.exec_interpreter = betterInterpreter;\n  } // Else if no Interpreter detect if process is binary\n  else if (noInterpreter) app.exec_interpreter = isBinary(app.pm_exec_path) ? 'none' : 'node';else if (app.exec_interpreter.indexOf('node@') > -1) resolveNodeInterpreter(app);\n\n  if (app.exec_interpreter.indexOf('python') > -1) app.env.PYTHONUNBUFFERED = '1';\n  /**\n   * Specific installed JS transpilers\n   */\n\n  if (app.exec_interpreter == 'ts-node') {\n    app.exec_interpreter = path.resolve(__dirname, '../node_modules/.bin/ts-node');\n  }\n\n  if (app.exec_interpreter == 'lsc') {\n    app.exec_interpreter = path.resolve(__dirname, '../node_modules/.bin/lsc');\n  }\n\n  if (app.exec_interpreter == 'coffee') {\n    app.exec_interpreter = path.resolve(__dirname, '../node_modules/.bin/coffee');\n  }\n\n  if (app.exec_interpreter != 'none' && which(app.exec_interpreter) == null) {\n    // If node is not present\n    if (app.exec_interpreter == 'node') {\n      Common.warn(`Using builtin node.js version on version ${process.version}`);\n      app.exec_interpreter = cst.BUILTIN_NODE_PATH;\n    } else throw new Error(`Interpreter ${app.exec_interpreter} is NOT AVAILABLE in PATH. (type 'which ${app.exec_interpreter}' to double check.)`);\n  }\n\n  return app;\n};\n\nCommon.deepCopy = Common.serialize = Common.clone = function (obj) {\n  if (obj === null || obj === undefined) return {};\n  return fclone(obj);\n};\n\nCommon.errMod = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  if (msg instanceof Error) return console.error(msg.message);\n  return console.error(`${cst.PREFIX_MSG_MOD_ERR}${msg}`);\n};\n\nCommon.err = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  if (msg instanceof Error) return console.error(`${cst.PREFIX_MSG_ERR}${msg.message}`);\n  return console.error(`${cst.PREFIX_MSG_ERR}${msg}`);\n};\n\nCommon.printError = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  if (msg instanceof Error) return console.error(msg.message);\n  return console.error.apply(console, arguments);\n};\n\nCommon.log = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  return console.log(`${cst.PREFIX_MSG}${msg}`);\n};\n\nCommon.info = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  return console.log(`${cst.PREFIX_MSG_INFO}${msg}`);\n};\n\nCommon.warn = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  return console.log(`${cst.PREFIX_MSG_WARNING}${msg}`);\n};\n\nCommon.logMod = function (msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  return console.log(`${cst.PREFIX_MSG_MOD}${msg}`);\n};\n\nCommon.printOut = function () {\n  if (process.env.PM2_SILENT === 'true' || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  return console.log.apply(console, arguments);\n};\n/**\n * Raw extend\n */\n\n\nCommon.extend = function (destination, source) {\n  if (typeof destination !== 'object') {\n    destination = {};\n  }\n\n  if (!source || typeof source !== 'object') {\n    return destination;\n  }\n\n  Object.keys(source).forEach(function (new_key) {\n    if (source[new_key] != '[object Object]') destination[new_key] = source[new_key];\n  });\n  return destination;\n};\n/**\n * This is useful when starting script programmatically\n */\n\n\nCommon.safeExtend = function (origin, add) {\n  if (!add || typeof add != 'object') return origin; //Ignore PM2's set environment variables from the nested env\n\n  var keysToIgnore = ['name', 'exec_mode', 'env', 'args', 'pm_cwd', 'exec_interpreter', 'pm_exec_path', 'node_args', 'pm_out_log_path', 'pm_err_log_path', 'pm_pid_path', 'pm_id', 'status', 'pm_uptime', 'created_at', 'windowsHide', 'username', 'merge_logs', 'kill_retry_time', 'prev_restart_delay', 'instance_var', 'unstable_restarts', 'restart_time', 'axm_actions', 'pmx_module', 'command', 'watch', 'filter_env', 'versioning', 'vizion_runing', 'MODULE_DEBUG', 'pmx', 'axm_options', 'created_at', 'watch', 'vizion', 'axm_dynamic', 'axm_monitor', 'instances', 'automation', 'autorestart', 'unstable_restart', 'treekill', 'exit_code', 'vizion'];\n  var keys = Object.keys(add);\n  var i = keys.length;\n\n  while (i--) {\n    //Only copy stuff into the env that we don't have already.\n    if (keysToIgnore.indexOf(keys[i]) == -1 && add[keys[i]] != '[object Object]') origin[keys[i]] = add[keys[i]];\n  }\n\n  return origin;\n};\n/**\n * Extend the app.env object of with the properties taken from the\n * app.env_[envName] and deploy configuration.\n * Also update current json attributes\n *\n * Used only for Configuration file processing\n *\n * @param {Object} app The app object.\n * @param {string} envName The given environment name.\n * @param {Object} deployConf Deployment configuration object (from JSON file or whatever).\n * @returns {Object} The app.env variables object.\n */\n\n\nCommon.mergeEnvironmentVariables = function (app_env, env_name, deploy_conf) {\n  var app = fclone(app_env);\n  var new_conf = {\n    env: {}\n  }; // Stringify possible object\n\n  for (var key in app.env) {\n    if (typeof app.env[key] == 'object') {\n      app.env[key] = JSON.stringify(app.env[key]);\n    }\n  }\n  /**\n   * Extra configuration update\n   */\n\n\n  util._extend(new_conf, app);\n\n  if (env_name) {\n    // First merge variables from deploy.production.env object as least priority.\n    if (deploy_conf && deploy_conf[env_name] && deploy_conf[env_name]['env']) {\n      util._extend(new_conf.env, deploy_conf[env_name]['env']);\n    }\n\n    util._extend(new_conf.env, app.env); // Then, last and highest priority, merge the app.env_production object.\n\n\n    if ('env_' + env_name in app) {\n      util._extend(new_conf.env, app['env_' + env_name]);\n    } else {\n      Common.printOut(cst.PREFIX_MSG_WARNING + chalk.bold('Environment [%s] is not defined in process file'), env_name);\n    }\n  }\n\n  delete new_conf.exec_mode;\n  var res = {\n    current_conf: {}\n  };\n\n  util._extend(res, new_conf.env);\n\n  util._extend(res.current_conf, new_conf); // #2541 force resolution of node interpreter\n\n\n  if (app.exec_interpreter && app.exec_interpreter.indexOf('@') > -1) {\n    resolveNodeInterpreter(app);\n    res.current_conf.exec_interpreter = app.exec_interpreter;\n  }\n\n  return res;\n};\n/**\n * This function will resolve paths, option and environment\n * CALLED before 'prepare' God call (=> PROCESS INITIALIZATION)\n * @method resolveAppAttributes\n * @param {Object} opts\n * @param {Object} opts.cwd\n * @param {Object} opts.pm2_home\n * @param {Object} appConf application configuration\n * @return app\n */\n\n\nCommon.resolveAppAttributes = function (opts, conf) {\n  var conf_copy = fclone(conf);\n  var app = Common.prepareAppConf(opts, conf_copy);\n\n  if (app instanceof Error) {\n    throw new Error(app.message);\n  }\n\n  return app;\n};\n/**\n * Verify configurations\n * Called on EVERY Operation (start/restart/reload/stop...)\n * @param {Array} appConfs\n * @returns {Array}\n */\n\n\nCommon.verifyConfs = function (appConfs) {\n  if (!appConfs || appConfs.length == 0) {\n    return [];\n  } // Make sure it is an Array.\n\n\n  appConfs = [].concat(appConfs);\n  var verifiedConf = [];\n\n  for (var i = 0; i < appConfs.length; i++) {\n    var app = appConfs[i];\n    if (app.exec_mode) app.exec_mode = app.exec_mode.replace(/^(fork|cluster)$/, '$1_mode'); // JSON conf: alias cmd to script\n\n    if (app.cmd && !app.script) {\n      app.script = app.cmd;\n      delete app.cmd;\n    } // JSON conf: alias command to script\n\n\n    if (app.command && !app.script) {\n      app.script = app.command;\n      delete app.command;\n    }\n\n    if (!app.env) {\n      app.env = {};\n    } // Render an app name if not existing.\n\n\n    Common.renderApplicationName(app);\n\n    if (app.execute_command == true) {\n      app.exec_mode = 'fork';\n      delete app.execute_command;\n    }\n\n    app.username = Common.getCurrentUsername();\n    /**\n     * If command is like pm2 start \"python xx.py --ok\"\n     * Then automatically start the script with bash -c and set a name eq to command\n     */\n\n    if (app.script && app.script.indexOf(' ') > -1 && cst.IS_WINDOWS === false) {\n      var _script = app.script;\n\n      if (which('bash')) {\n        app.script = 'bash';\n        app.args = ['-c', _script];\n\n        if (!app.name) {\n          app.name = _script;\n        }\n      } else if (which('sh')) {\n        app.script = 'sh';\n        app.args = ['-c', _script];\n\n        if (!app.name) {\n          app.name = _script;\n        }\n      } else {\n        warn('bash or sh not available in $PATH, keeping script as is');\n      }\n    }\n    /**\n     * Add log_date_format by default\n     */\n\n\n    if (app.time) {\n      app.log_date_format = 'YYYY-MM-DDTHH:mm:ss';\n    }\n    /**\n     * Checks + Resolve UID/GID\n     * comes from pm2 --uid <> --gid <> or --user\n     */\n\n\n    if (app.uid || app.gid || app.user) {\n      // 1/ Check if windows\n      if (cst.IS_WINDOWS === true) {\n        Common.printError(cst.PREFIX_MSG_ERR + '--uid and --git does not works on windows');\n        return new Error('--uid and --git does not works on windows');\n      } // 2/ Verify that user is root (todo: verify if other has right)\n\n\n      if (process.env.NODE_ENV != 'test' && process.getuid && process.getuid() !== 0) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'To use --uid and --gid please run pm2 as root');\n        return new Error('To use UID and GID please run PM2 as root');\n      } // 3/ Resolve user info via /etc/password\n\n\n      var passwd = require('./tools/passwd.js');\n\n      var users;\n\n      try {\n        users = passwd.getUsers();\n      } catch (e) {\n        Common.printError(e);\n        return new Error(e);\n      }\n\n      var user_info = users[app.uid || app.user];\n\n      if (!user_info) {\n        Common.printError(`${cst.PREFIX_MSG_ERR} User ${app.uid || app.user} cannot be found`);\n        return new Error(`${cst.PREFIX_MSG_ERR} User ${app.uid || app.user} cannot be found`);\n      }\n\n      app.env.HOME = user_info.homedir;\n      app.uid = parseInt(user_info.userId); // 4/ Resolve group id if gid is specified\n\n      if (app.gid) {\n        var groups;\n\n        try {\n          groups = passwd.getGroups();\n        } catch (e) {\n          Common.printError(e);\n          return new Error(e);\n        }\n\n        var group_info = groups[app.gid];\n\n        if (!group_info) {\n          Common.printError(`${cst.PREFIX_MSG_ERR} Group ${app.gid} cannot be found`);\n          return new Error(`${cst.PREFIX_MSG_ERR} Group ${app.gid} cannot be found`);\n        }\n\n        app.gid = parseInt(group_info.id);\n      } else {\n        app.gid = parseInt(user_info.groupId);\n      }\n    }\n    /**\n     * Specific options of PM2.io\n     */\n\n\n    if (process.env.PM2_DEEP_MONITORING) {\n      app.deep_monitoring = true;\n    }\n\n    if (app.automation == false) {\n      app.pmx = false;\n    }\n\n    if (app.disable_trace) {\n      app.trace = false;\n      delete app.disable_trace;\n    }\n    /**\n     * Instances params\n     */\n\n\n    if (app.instances == 'max') {\n      app.instances = 0;\n    }\n\n    if (typeof app.instances === 'string') {\n      app.instances = parseInt(app.instances) || 0;\n    }\n\n    if (app.exec_mode != 'cluster_mode' && !app.instances && typeof app.merge_logs == 'undefined') {\n      app.merge_logs = true;\n    }\n\n    var ret;\n\n    if (app.cron_restart) {\n      if ((ret = Common.sink.determineCron(app)) instanceof Error) return ret;\n    }\n    /**\n     * Now validation configuration\n     */\n\n\n    var ret = Config.validateJSON(app);\n\n    if (ret.errors && ret.errors.length > 0) {\n      ret.errors.forEach(function (err) {\n        warn(err);\n      });\n      return new Error(ret.errors);\n    }\n\n    verifiedConf.push(ret.config);\n  }\n\n  return verifiedConf;\n};\n/**\n * Get current username\n * Called on EVERY starting app\n *\n * @returns {String}\n */\n\n\nCommon.getCurrentUsername = function () {\n  var current_user = '';\n\n  if (os.userInfo) {\n    try {\n      current_user = os.userInfo().username;\n    } catch (err) {// For the case of unhandled error for uv_os_get_passwd\n      // https://github.com/Unitech/pm2/issues/3184\n    }\n  }\n\n  if (current_user === '') {\n    current_user = process.env.USER || process.env.LNAME || process.env.USERNAME || process.env.SUDO_USER || process.env.C9_USER || process.env.LOGNAME;\n  }\n\n  return current_user;\n};\n/**\n * Render an app name if not existing.\n * @param {Object} conf\n */\n\n\nCommon.renderApplicationName = function (conf) {\n  if (!conf.name && conf.script) {\n    conf.name = conf.script !== undefined ? path.basename(conf.script) : 'undefined';\n    var lastDot = conf.name.lastIndexOf('.');\n\n    if (lastDot > 0) {\n      conf.name = conf.name.slice(0, lastDot);\n    }\n  }\n};\n/**\n * Show warnings\n * @param {String} warning\n */\n\n\nfunction warn(warning) {\n  Common.printOut(cst.PREFIX_MSG_WARNING + warning);\n}","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/Common.js"],"names":["fs","require","path","os","util","chalk","fclone","semver","dayjs","execSync","isBinary","cst","extItps","Config","pkg","which","Common","module","exports","homedir","env","process","home","HOME","user","LOGNAME","USER","LNAME","USERNAME","platform","USERPROFILE","HOMEDRIVE","HOMEPATH","getuid","resolveHome","filepath","join","slice","determineSilentCLI","variadicArgsDashesPos","argv","indexOf","s1opt","s2opt","PM2_SILENT","key","console","code","charCodeAt","PM2_DISCRETE_MODE","printVersion","log","version","exit","lockReload","t1","readFileSync","PM2_RELOAD_LOCKFILE","toString","diff","parseInt","RELOAD_LOCK_TIMEOUT","e","writeFileSync","valueOf","error","message","unlockReload","prepareAppConf","opts","app","script","Error","cwd","resolve","PWD","node_args","port","PORT","pm_exec_path","existsSync","ckd","disable_source_map_support","accessSync","R_OK","source_map_support","PM2_PROGRAMMATIC","pm_id","safeExtend","filterEnv","envObj","filter_env","new_env","allowedKeys","reduce","acc","current","filter","item","includes","Object","keys","forEach","length","e1","e2","_extend","pm_cwd","sink","resolveInterpreter","determineExecMode","formated_app_name","name","replace","f","af","ps","ext","isStd","toUpperCase","dir","dirname","printError","PREFIX_MSG_WARNING","printOut","PREFIX_MSG","sync","err","PREFIX_MSG_ERR","substr","apply","sep","isConfigFile","filename","parseConfig","confObj","yamljs","vm","sandbox","runInThisContext","displayErrors","timeout","parse","confPath","cache","retErr","determineCron","cronJob","CronJob","cron_restart","ex","exec_mode","instances","exec_interpreter","resolveNodeInterpreter","bold","yellow","nvm_path","IS_WINDOWS","NVM_HOME","NVM_DIR","red","msg","node_version","split","path_to_node","satisfies","nvm_node_path","nvm_bin","nvm_cmd","maxBuffer","arch","green","noInterpreter","extName","extname","betterInterpreter","PYTHONUNBUFFERED","__dirname","warn","BUILTIN_NODE_PATH","deepCopy","serialize","clone","obj","undefined","errMod","PREFIX_MSG_MOD_ERR","arguments","info","PREFIX_MSG_INFO","logMod","PREFIX_MSG_MOD","extend","destination","source","new_key","origin","add","keysToIgnore","i","mergeEnvironmentVariables","app_env","env_name","deploy_conf","new_conf","JSON","stringify","res","current_conf","resolveAppAttributes","conf","conf_copy","verifyConfs","appConfs","concat","verifiedConf","cmd","command","renderApplicationName","execute_command","username","getCurrentUsername","_script","args","time","log_date_format","uid","gid","NODE_ENV","passwd","users","getUsers","user_info","userId","groups","getGroups","group_info","id","groupId","PM2_DEEP_MONITORING","deep_monitoring","automation","pmx","disable_trace","trace","merge_logs","ret","validateJSON","errors","push","config","current_user","userInfo","SUDO_USER","C9_USER","basename","lastDot","lastIndexOf","warning"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\n\n/**\n * Common Utilities ONLY USED IN ->CLI<-\n */\n\nvar fs        = require('fs');\nvar path      = require('path');\nvar os        = require('os');\nvar util      = require('util');\nvar chalk     = require('chalk');\nvar fclone    = require('fclone');\nvar semver    = require('semver');\nvar dayjs     = require('dayjs');\nvar execSync  = require('child_process').execSync;\nvar isBinary  = require('./tools/isbinaryfile.js');\nvar cst       = require('../constants.js');\nvar extItps   = require('./API/interpreter.json');\nvar Config    = require('./tools/Config');\nvar pkg       = require('../package.json');\nvar which     = require('./tools/which.js');\nvar Common = module.exports;\n\nfunction homedir() {\n  var env = process.env;\n  var home = env.HOME;\n  var user = env.LOGNAME || env.USER || env.LNAME || env.USERNAME;\n\n  if (process.platform === 'win32') {\n    return env.USERPROFILE || env.HOMEDRIVE + env.HOMEPATH || home || null;\n  }\n\n  if (process.platform === 'darwin') {\n    return home || (user ? '/Users/' + user : null);\n  }\n\n  if (process.platform === 'linux') {\n    return home || (process.getuid() === 0 ? '/root' : (user ? '/home/' + user : null));\n  }\n\n  return home || null;\n}\n\nfunction resolveHome(filepath) {\n  if (filepath[0] === '~') {\n    return path.join(homedir(), filepath.slice(1));\n  }\n  return filepath;\n}\n\nCommon.determineSilentCLI = function() {\n  // pm2 should ignore -s --silent -v if they are after '--'\n  var variadicArgsDashesPos = process.argv.indexOf('--');\n  var s1opt = process.argv.indexOf('--silent')\n  var s2opt = process.argv.indexOf('-s')\n\n  if (process.env.PM2_SILENT || (variadicArgsDashesPos > -1 &&\n       (s1opt != -1 && s1opt < variadicArgsDashesPos) &&\n       (s2opt != -1 != s2opt < variadicArgsDashesPos)) ||\n      (variadicArgsDashesPos == -1 && (s1opt > -1 || s2opt > -1))) {\n    for (var key in console){\n      var code = key.charCodeAt(0);\n      if (code >= 97 && code <= 122){\n        console[key] = function(){};\n      }\n    }\n    process.env.PM2_DISCRETE_MODE = true;\n  }\n}\n\nCommon.printVersion = function() {\n  var variadicArgsDashesPos = process.argv.indexOf('--');\n\n  if (process.argv.indexOf('-v') > -1 && process.argv.indexOf('-v') < variadicArgsDashesPos) {\n    console.log(pkg.version);\n    process.exit(0);\n  }\n}\n\nCommon.lockReload = function() {\n  try {\n    var t1 = fs.readFileSync(cst.PM2_RELOAD_LOCKFILE).toString();\n\n    // Check if content and if time < 30 return locked\n    // Else if content detected (lock file staled), allow and rewritte\n    if (t1 && t1 != '') {\n      var diff = dayjs().diff(parseInt(t1));\n      if (diff < cst.RELOAD_LOCK_TIMEOUT)\n        return diff;\n    }\n  } catch(e) {}\n\n  try {\n    // Write latest timestamp\n    fs.writeFileSync(cst.PM2_RELOAD_LOCKFILE, dayjs().valueOf().toString());\n    return 0;\n  } catch(e) {\n    console.error(e.message || e);\n  }\n};\n\nCommon.unlockReload = function() {\n  try {\n    fs.writeFileSync(cst.PM2_RELOAD_LOCKFILE, '');\n  } catch(e) {\n    console.error(e.message || e);\n  }\n};\n\n/**\n * Resolve app paths and replace missing values with defaults.\n * @method prepareAppConf\n * @param app {Object}\n * @param {} cwd\n * @param {} outputter\n * @return app\n */\nCommon.prepareAppConf = function(opts, app) {\n  /**\n   * Minimum validation\n   */\n  if (!app.script)\n    return new Error('No script path - aborting');\n\n  var cwd = null;\n\n  if (app.cwd) {\n    cwd = path.resolve(app.cwd);\n    process.env.PWD = app.cwd;\n  }\n\n  if (!app.node_args) {\n    app.node_args = [];\n  }\n\n  if (app.port && app.env) {\n    app.env.PORT = app.port;\n  }\n\n  // CWD option resolving\n  cwd && (cwd[0] != '/') && (cwd = path.resolve(process.cwd(), cwd));\n  cwd = cwd || opts.cwd;\n\n  // Full path script resolution\n  app.pm_exec_path = path.resolve(cwd, app.script);\n\n  // If script does not exist after resolution\n  if (!fs.existsSync(app.pm_exec_path)) {\n    var ckd;\n    // Try resolve command available in $PATH\n    if ((ckd = which(app.script))) {\n      if (typeof(ckd) !== 'string')\n        ckd = ckd.toString();\n      app.pm_exec_path = ckd;\n    }\n    else\n      // Throw critical error\n      return new Error(`Script not found: ${app.pm_exec_path}`);\n  }\n\n  /**\n   * Auto detect .map file and enable source map support automatically\n   */\n  if (app.disable_source_map_support != true) {\n    try {\n      fs.accessSync(app.pm_exec_path + '.map', fs.R_OK);\n      app.source_map_support = true;\n    } catch(e) {}\n    delete app.disable_source_map_support;\n  }\n\n  delete app.script;\n\n  // Set current env by first adding the process environment and then extending/replacing it\n  // with env specified on command-line or JSON file.\n\n  var env = {};\n\n  /**\n   * Do not copy internal pm2 environment variables if acting on process\n   * is made from a programmatic script started by PM2 or if a pm_id is present in env\n   */\n  if (cst.PM2_PROGRAMMATIC || process.env.pm_id)\n    Common.safeExtend(env, process.env);\n  else\n    env = process.env;\n\n  function filterEnv (envObj) {\n    if (app.filter_env == true)\n      return {}\n\n    if (typeof app.filter_env === 'string') {\n      delete envObj[app.filter_env]\n      return envObj\n    }\n\n    var new_env = {};\n    var allowedKeys = app.filter_env.reduce((acc, current) =>\n                                            acc.filter( item => !item.includes(current)), Object.keys(envObj))\n    allowedKeys.forEach( key => new_env[key] = envObj[key]);\n    return new_env\n  }\n\n  app.env = [\n    {}, (app.filter_env && app.filter_env.length > 0) ? filterEnv(process.env) : env, app.env || {}\n  ].reduce(function(e1, e2){\n    return util._extend(e1, e2);\n  });\n\n  app.pm_cwd = cwd;\n  // Interpreter\n  try {\n    Common.sink.resolveInterpreter(app);\n  } catch(e) {\n    return e\n  }\n\n  // Exec mode and cluster stuff\n  Common.sink.determineExecMode(app);\n\n  /**\n   * Scary\n   */\n  var formated_app_name = app.name.replace(/[^a-zA-Z0-9\\\\.\\\\-]/g, '-');\n\n  ['log', 'out', 'error', 'pid'].forEach(function(f){\n    var af = app[f + '_file'], ps, ext = (f == 'pid' ? 'pid':'log'), isStd = !~['log', 'pid'].indexOf(f);\n    if (af) af = resolveHome(af);\n\n    if ((f == 'log' && typeof af == 'boolean' && af) || (f != 'log' && !af)) {\n      ps = [cst['DEFAULT_' + ext.toUpperCase() + '_PATH'], formated_app_name + (isStd ? '-' + f : '') + '.' + ext];\n    } else if ((f != 'log' || (f == 'log' && af)) && af !== 'NULL' && af !== '/dev/null') {\n      ps = [cwd, af];\n\n      var dir = path.dirname(path.resolve(cwd, af));\n      if (!fs.existsSync(dir)) {\n        Common.printError(cst.PREFIX_MSG_WARNING + 'Folder does not exist: ' + dir);\n        Common.printOut(cst.PREFIX_MSG + 'Creating folder: ' + dir);\n        try {\n          require('mkdirp').sync(dir);\n        } catch (err) {\n          Common.printError(cst.PREFIX_MSG_ERR + 'Could not create folder: ' + path.dirname(af));\n          throw new Error('Could not create folder');\n        }\n      }\n\n    }\n    // PM2 paths\n    if (af !== 'NULL' && af !== '/dev/null') {\n      ps && (app['pm_' + (isStd ? f.substr(0, 3) + '_' : '') + ext + '_path'] = path.resolve.apply(null, ps));\n    } else if (path.sep === '\\\\') {\n      app['pm_' + (isStd ? f.substr(0, 3) + '_' : '') + ext + '_path'] = '\\\\\\\\.\\\\NUL';\n    } else {\n      app['pm_' + (isStd ? f.substr(0, 3) + '_' : '') + ext + '_path'] = '/dev/null';\n    }\n    delete app[f + '_file'];\n  });\n\n  return app;\n};\n\n/**\n * Check if filename is a configuration file\n * @param {string} filename\n * @return {mixed} null if not conf file, json or yaml if conf\n */\nCommon.isConfigFile = function (filename) {\n  if (typeof (filename) !== 'string')\n    return null;\n  if (filename.indexOf('.json') !== -1)\n    return 'json';\n  if (filename.indexOf('.yml') > -1 || filename.indexOf('.yaml') > -1)\n    return 'yaml';\n  if (filename.indexOf('.config.js') !== -1)\n    return 'js';\n  if (filename.indexOf('.config.cjs') !== -1)\n    return 'js';\n  if (filename.indexOf('.config.mjs') !== -1)\n    return 'mjs';\n  return null;\n};\n\n/**\n * Parses a config file like ecosystem.config.js. Supported formats: JS, JSON, JSON5, YAML.\n * @param {string} confString  contents of the config file\n * @param {string} filename    path to the config file\n * @return {Object} config object\n */\nCommon.parseConfig = function(confObj, filename) {\n  var yamljs = require('yamljs');\n  var vm     = require('vm');\n\n  if (!filename ||\n      filename == 'pipe' ||\n      filename == 'none' ||\n      filename.indexOf('.json') > -1) {\n    var code = '(' + confObj + ')';\n    var sandbox = {};\n\n    return vm.runInThisContext(code, sandbox, {\n      filename: path.resolve(filename),\n      displayErrors: false,\n      timeout: 1000\n    });\n  }\n  else if (filename.indexOf('.yml') > -1 ||\n           filename.indexOf('.yaml') > -1) {\n    return yamljs.parse(confObj.toString());\n  }\n  else if (filename.indexOf('.config.js') > -1 || filename.indexOf('.config.cjs') > -1 || filename.indexOf('.config.mjs') > -1) {\n    var confPath = require.resolve(path.resolve(filename));\n    delete require.cache[confPath];\n    return require(confPath);\n  }\n};\n\nCommon.retErr = function(e) {\n  if (!e)\n    return new Error('Unidentified error');\n  if (e instanceof Error)\n    return e;\n  return new Error(e);\n}\n\nCommon.sink = {};\n\nCommon.sink.determineCron = function(app) {\n  var cronJob  = require('cron').CronJob;\n\n  if (app.cron_restart) {\n    try {\n      Common.printOut(cst.PREFIX_MSG + 'cron restart at ' + app.cron_restart);\n      new cronJob(app.cron_restart, function() {\n        Common.printOut(cst.PREFIX_MSG + 'cron pattern for auto restart detected and valid');\n      });\n    } catch(ex) {\n      return new Error(`Cron pattern error: ${ex.message}`);\n    }\n  }\n};\n\n/**\n * Handle alias (fork <=> fork_mode, cluster <=> cluster_mode)\n */\nCommon.sink.determineExecMode = function(app) {\n  if (app.exec_mode)\n    app.exec_mode = app.exec_mode.replace(/^(fork|cluster)$/, '$1_mode');\n\n  /**\n   * Here we put the default exec mode\n   */\n  if (!app.exec_mode &&\n      (app.instances >= 1 || app.instances === 0 || app.instances === -1) &&\n      app.exec_interpreter.indexOf('node') > -1) {\n    app.exec_mode = 'cluster_mode';\n  } else if (!app.exec_mode) {\n    app.exec_mode = 'fork_mode';\n  }\n  if (typeof app.instances == 'undefined')\n    app.instances = 1;\n};\n\nvar resolveNodeInterpreter = function(app) {\n  if (app.exec_mode && app.exec_mode.indexOf('cluster') > -1) {\n    Common.printError(cst.PREFIX_MSG_WARNING + chalk.bold.yellow('Choosing the Node.js version in cluster mode is not supported'));\n    return false;\n  }\n\n  var nvm_path = cst.IS_WINDOWS ? process.env.NVM_HOME : process.env.NVM_DIR;\n  if (!nvm_path) {\n    Common.printError(cst.PREFIX_MSG_ERR + chalk.red('NVM is not available in PATH'));\n    Common.printError(cst.PREFIX_MSG_ERR + chalk.red('Fallback to node in PATH'));\n    var msg = cst.IS_WINDOWS\n      ? 'https://github.com/coreybutler/nvm-windows/releases/'\n      : '$ curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash';\n    Common.printOut(cst.PREFIX_MSG_ERR + chalk.bold('Install NVM:\\n' + msg));\n  }\n  else {\n    var node_version  = app.exec_interpreter.split('@')[1];\n    var path_to_node  = cst.IS_WINDOWS\n      ? '/v' + node_version + '/node.exe'\n      : semver.satisfies(node_version, '>= 0.12.0')\n          ? '/versions/node/v' + node_version + '/bin/node'\n          : '/v' + node_version + '/bin/node';\n    var nvm_node_path  = path.join(nvm_path, path_to_node);\n    try {\n      fs.accessSync(nvm_node_path);\n    } catch(e) {\n      Common.printOut(cst.PREFIX_MSG + 'Installing Node v%s', node_version);\n      var nvm_bin = path.join(nvm_path, 'nvm.' + (cst.IS_WINDOWS ? 'exe' : 'sh'));\n      var nvm_cmd = cst.IS_WINDOWS\n        ? nvm_bin + ' install ' + node_version\n        : '. ' + nvm_bin + ' ; nvm install ' + node_version;\n\n      Common.printOut(cst.PREFIX_MSG + 'Executing: %s', nvm_cmd);\n\n      execSync(nvm_cmd, {\n        cwd: path.resolve(process.cwd()),\n        env: process.env,\n        maxBuffer: 20 * 1024 * 1024\n      });\n\n      // in order to support both arch, nvm for Windows renames 'node.exe' to:\n      // 'node32.exe' for x32 arch\n      // 'node64.exe' for x64 arch\n      if (cst.IS_WINDOWS)\n        nvm_node_path = nvm_node_path.replace(/node/, 'node' + process.arch.slice(1))\n    }\n\n    Common.printOut(cst.PREFIX_MSG + chalk.green.bold('Setting Node to v%s (path=%s)'),\n                    node_version,\n                    nvm_node_path);\n\n    app.exec_interpreter = nvm_node_path;\n  }\n};\n\n/**\n * Resolve interpreter\n */\nCommon.sink.resolveInterpreter = function(app) {\n  var noInterpreter = !app.exec_interpreter;\n  var extName = path.extname(app.pm_exec_path);\n  var betterInterpreter = extItps[extName];\n\n  // No interpreter defined and correspondance in schema hashmap\n  if (noInterpreter && betterInterpreter) {\n    app.exec_interpreter = betterInterpreter;\n  }\n  // Else if no Interpreter detect if process is binary\n  else if (noInterpreter)\n    app.exec_interpreter = isBinary(app.pm_exec_path) ? 'none' : 'node';\n  else if (app.exec_interpreter.indexOf('node@') > -1)\n    resolveNodeInterpreter(app);\n\n  if (app.exec_interpreter.indexOf('python') > -1)\n    app.env.PYTHONUNBUFFERED = '1'\n\n  /**\n   * Specific installed JS transpilers\n   */\n  if (app.exec_interpreter == 'ts-node') {\n    app.exec_interpreter = path.resolve(__dirname, '../node_modules/.bin/ts-node');\n  }\n\n  if (app.exec_interpreter == 'lsc') {\n    app.exec_interpreter = path.resolve(__dirname, '../node_modules/.bin/lsc');\n  }\n\n  if (app.exec_interpreter == 'coffee') {\n    app.exec_interpreter = path.resolve(__dirname, '../node_modules/.bin/coffee');\n  }\n\n  if (app.exec_interpreter != 'none' && which(app.exec_interpreter) == null) {\n    // If node is not present\n    if (app.exec_interpreter == 'node') {\n      Common.warn(`Using builtin node.js version on version ${process.version}`)\n      app.exec_interpreter = cst.BUILTIN_NODE_PATH\n    }\n    else\n      throw new Error(`Interpreter ${app.exec_interpreter} is NOT AVAILABLE in PATH. (type 'which ${app.exec_interpreter}' to double check.)`)\n  }\n\n  return app;\n};\n\nCommon.deepCopy = Common.serialize = Common.clone = function(obj) {\n  if (obj === null || obj === undefined) return {};\n  return fclone(obj);\n};\n\nCommon.errMod = function(msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  if (msg instanceof Error)\n    return console.error(msg.message);\n  return console.error(`${cst.PREFIX_MSG_MOD_ERR}${msg}`);\n}\n\nCommon.err = function(msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  if (msg instanceof Error)\n    return console.error(`${cst.PREFIX_MSG_ERR}${msg.message}`);\n  return console.error(`${cst.PREFIX_MSG_ERR}${msg}`);\n}\n\nCommon.printError = function(msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  if (msg instanceof Error)\n    return console.error(msg.message);\n  return console.error.apply(console, arguments);\n};\n\nCommon.log = function(msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  return console.log(`${cst.PREFIX_MSG}${msg}`);\n}\n\nCommon.info = function(msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  return console.log(`${cst.PREFIX_MSG_INFO}${msg}`);\n}\n\nCommon.warn = function(msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  return console.log(`${cst.PREFIX_MSG_WARNING}${msg}`);\n}\n\nCommon.logMod = function(msg) {\n  if (process.env.PM2_SILENT || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  return console.log(`${cst.PREFIX_MSG_MOD}${msg}`);\n}\n\nCommon.printOut = function() {\n  if (process.env.PM2_SILENT === 'true' || process.env.PM2_PROGRAMMATIC === 'true') return false;\n  return console.log.apply(console, arguments);\n};\n\n\n/**\n * Raw extend\n */\nCommon.extend = function(destination, source) {\n  if (typeof destination !== 'object') {\n    destination = {};\n  }\n  if (!source || typeof source !== 'object') {\n    return destination;\n  }\n\n  Object.keys(source).forEach(function(new_key) {\n    if (source[new_key] != '[object Object]')\n      destination[new_key] = source[new_key];\n  });\n\n  return destination;\n};\n\n/**\n * This is useful when starting script programmatically\n */\nCommon.safeExtend = function(origin, add){\n  if (!add || typeof add != 'object') return origin;\n\n  //Ignore PM2's set environment variables from the nested env\n  var keysToIgnore = ['name', 'exec_mode', 'env', 'args', 'pm_cwd', 'exec_interpreter', 'pm_exec_path', 'node_args', 'pm_out_log_path', 'pm_err_log_path', 'pm_pid_path', 'pm_id', 'status', 'pm_uptime', 'created_at', 'windowsHide', 'username', 'merge_logs', 'kill_retry_time', 'prev_restart_delay', 'instance_var', 'unstable_restarts', 'restart_time', 'axm_actions', 'pmx_module', 'command', 'watch', 'filter_env', 'versioning', 'vizion_runing', 'MODULE_DEBUG', 'pmx', 'axm_options', 'created_at', 'watch', 'vizion', 'axm_dynamic', 'axm_monitor', 'instances', 'automation', 'autorestart', 'unstable_restart', 'treekill', 'exit_code', 'vizion'];\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n  \t//Only copy stuff into the env that we don't have already.\n  \tif(keysToIgnore.indexOf(keys[i]) == -1 && add[keys[i]] != '[object Object]')\n      origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\n\n/**\n * Extend the app.env object of with the properties taken from the\n * app.env_[envName] and deploy configuration.\n * Also update current json attributes\n *\n * Used only for Configuration file processing\n *\n * @param {Object} app The app object.\n * @param {string} envName The given environment name.\n * @param {Object} deployConf Deployment configuration object (from JSON file or whatever).\n * @returns {Object} The app.env variables object.\n */\nCommon.mergeEnvironmentVariables = function(app_env, env_name, deploy_conf) {\n  var app = fclone(app_env);\n\n  var new_conf = {\n    env : {}\n  }\n\n  // Stringify possible object\n  for (var key in app.env) {\n    if (typeof app.env[key] == 'object') {\n      app.env[key] = JSON.stringify(app.env[key]);\n    }\n  }\n\n  /**\n   * Extra configuration update\n   */\n  util._extend(new_conf, app)\n\n  if (env_name) {\n    // First merge variables from deploy.production.env object as least priority.\n    if (deploy_conf && deploy_conf[env_name] && deploy_conf[env_name]['env']) {\n      util._extend(new_conf.env, deploy_conf[env_name]['env']);\n    }\n\n    util._extend(new_conf.env, app.env);\n\n    // Then, last and highest priority, merge the app.env_production object.\n    if ('env_' + env_name in app) {\n      util._extend(new_conf.env, app['env_' + env_name]);\n    }\n    else {\n      Common.printOut(cst.PREFIX_MSG_WARNING + chalk.bold('Environment [%s] is not defined in process file'), env_name);\n    }\n  }\n\n  delete new_conf.exec_mode\n\n  var res = {\n    current_conf: {}\n  }\n\n  util._extend(res, new_conf.env)\n  util._extend(res.current_conf, new_conf)\n\n  // #2541 force resolution of node interpreter\n  if (app.exec_interpreter &&\n      app.exec_interpreter.indexOf('@') > -1) {\n    resolveNodeInterpreter(app);\n    res.current_conf.exec_interpreter = app.exec_interpreter\n  }\n\n  return res\n}\n\n/**\n * This function will resolve paths, option and environment\n * CALLED before 'prepare' God call (=> PROCESS INITIALIZATION)\n * @method resolveAppAttributes\n * @param {Object} opts\n * @param {Object} opts.cwd\n * @param {Object} opts.pm2_home\n * @param {Object} appConf application configuration\n * @return app\n */\nCommon.resolveAppAttributes = function(opts, conf) {\n  var conf_copy = fclone(conf);\n\n  var app = Common.prepareAppConf(opts, conf_copy);\n  if (app instanceof Error) {\n    throw new Error(app.message);\n  }\n  return app;\n}\n\n/**\n * Verify configurations\n * Called on EVERY Operation (start/restart/reload/stop...)\n * @param {Array} appConfs\n * @returns {Array}\n */\nCommon.verifyConfs = function(appConfs) {\n  if (!appConfs || appConfs.length == 0) {\n    return [];\n  }\n\n  // Make sure it is an Array.\n  appConfs = [].concat(appConfs);\n\n  var verifiedConf = [];\n\n  for (var i = 0; i < appConfs.length; i++) {\n    var app = appConfs[i];\n\n    if (app.exec_mode)\n      app.exec_mode = app.exec_mode.replace(/^(fork|cluster)$/, '$1_mode');\n\n    // JSON conf: alias cmd to script\n    if (app.cmd && !app.script) {\n      app.script = app.cmd\n      delete app.cmd\n    }\n    // JSON conf: alias command to script\n    if (app.command && !app.script) {\n      app.script = app.command\n      delete app.command\n    }\n\n    if (!app.env) {\n      app.env = {}\n    }\n\n    // Render an app name if not existing.\n    Common.renderApplicationName(app);\n\n    if (app.execute_command == true) {\n      app.exec_mode = 'fork'\n      delete app.execute_command\n    }\n\n    app.username = Common.getCurrentUsername();\n\n    /**\n     * If command is like pm2 start \"python xx.py --ok\"\n     * Then automatically start the script with bash -c and set a name eq to command\n     */\n    if (app.script && app.script.indexOf(' ') > -1 && cst.IS_WINDOWS === false) {\n      var _script = app.script;\n\n      if (which('bash')) {\n        app.script = 'bash';\n        app.args = ['-c', _script];\n        if (!app.name) {\n          app.name = _script\n        }\n      }\n      else if (which('sh')) {\n        app.script = 'sh';\n        app.args = ['-c', _script];\n        if (!app.name) {\n          app.name = _script\n        }\n      }\n      else {\n        warn('bash or sh not available in $PATH, keeping script as is')\n      }\n    }\n\n    /**\n     * Add log_date_format by default\n     */\n    if (app.time) {\n      app.log_date_format = 'YYYY-MM-DDTHH:mm:ss'\n    }\n\n    /**\n     * Checks + Resolve UID/GID\n     * comes from pm2 --uid <> --gid <> or --user\n     */\n    if (app.uid || app.gid || app.user) {\n      // 1/ Check if windows\n      if (cst.IS_WINDOWS === true) {\n        Common.printError(cst.PREFIX_MSG_ERR + '--uid and --git does not works on windows');\n        return new Error('--uid and --git does not works on windows');\n      }\n\n      // 2/ Verify that user is root (todo: verify if other has right)\n      if (process.env.NODE_ENV != 'test' && process.getuid && process.getuid() !== 0) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'To use --uid and --gid please run pm2 as root');\n        return new Error('To use UID and GID please run PM2 as root');\n      }\n\n      // 3/ Resolve user info via /etc/password\n      var passwd = require('./tools/passwd.js')\n      var users\n      try {\n        users = passwd.getUsers()\n      } catch(e) {\n        Common.printError(e);\n        return new Error(e);\n      }\n\n      var user_info = users[app.uid || app.user]\n      if (!user_info) {\n        Common.printError(`${cst.PREFIX_MSG_ERR} User ${app.uid || app.user} cannot be found`);\n        return new Error(`${cst.PREFIX_MSG_ERR} User ${app.uid || app.user} cannot be found`);\n      }\n\n      app.env.HOME = user_info.homedir\n      app.uid = parseInt(user_info.userId)\n\n      // 4/ Resolve group id if gid is specified\n      if (app.gid) {\n        var groups\n        try {\n          groups = passwd.getGroups()\n        } catch(e) {\n          Common.printError(e);\n          return new Error(e);\n        }\n        var group_info = groups[app.gid]\n        if (!group_info) {\n          Common.printError(`${cst.PREFIX_MSG_ERR} Group ${app.gid} cannot be found`);\n          return new Error(`${cst.PREFIX_MSG_ERR} Group ${app.gid} cannot be found`);\n        }\n        app.gid = parseInt(group_info.id)\n      } else {\n        app.gid = parseInt(user_info.groupId)\n      }\n    }\n\n    /**\n     * Specific options of PM2.io\n     */\n    if (process.env.PM2_DEEP_MONITORING) {\n      app.deep_monitoring = true;\n    }\n\n    if (app.automation == false) {\n      app.pmx = false;\n    }\n\n    if (app.disable_trace) {\n      app.trace = false\n      delete app.disable_trace;\n    }\n\n    /**\n     * Instances params\n     */\n    if (app.instances == 'max') {\n      app.instances = 0;\n    }\n\n    if (typeof(app.instances) === 'string') {\n      app.instances = parseInt(app.instances) || 0;\n    }\n\n    if (app.exec_mode != 'cluster_mode' &&\n        !app.instances &&\n        typeof(app.merge_logs) == 'undefined') {\n      app.merge_logs = true;\n    }\n\n    var ret;\n\n    if (app.cron_restart) {\n      if ((ret = Common.sink.determineCron(app)) instanceof Error)\n        return ret;\n    }\n\n    /**\n     * Now validation configuration\n     */\n    var ret = Config.validateJSON(app);\n    if (ret.errors && ret.errors.length > 0){\n      ret.errors.forEach(function(err) { warn(err) });\n      return new Error(ret.errors);\n    }\n\n    verifiedConf.push(ret.config);\n  }\n\n  return verifiedConf;\n}\n\n/**\n * Get current username\n * Called on EVERY starting app\n *\n * @returns {String}\n */\nCommon.getCurrentUsername = function(){\n  var current_user = '';\n\n  if (os.userInfo) {\n    try {\n      current_user = os.userInfo().username;\n    } catch (err) {\n      // For the case of unhandled error for uv_os_get_passwd\n      // https://github.com/Unitech/pm2/issues/3184\n    }\n  }\n\n  if(current_user === '') {\n    current_user = process.env.USER || process.env.LNAME || process.env.USERNAME || process.env.SUDO_USER || process.env.C9_USER || process.env.LOGNAME;\n  }\n\n  return current_user;\n}\n\n/**\n * Render an app name if not existing.\n * @param {Object} conf\n */\nCommon.renderApplicationName = function(conf){\n  if (!conf.name && conf.script){\n    conf.name = conf.script !== undefined ? path.basename(conf.script) : 'undefined';\n    var lastDot = conf.name.lastIndexOf('.');\n    if (lastDot > 0){\n      conf.name = conf.name.slice(0, lastDot);\n    }\n  }\n}\n\n/**\n * Show warnings\n * @param {String} warning\n */\nfunction warn(warning){\n  Common.printOut(cst.PREFIX_MSG_WARNING + warning);\n}\n"]},"metadata":{},"sourceType":"script"}