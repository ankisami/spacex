{"ast":null,"code":"/**\n * tput.js - parse and compile terminfo caps to javascript.\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n// Resources:\n//   $ man term\n//   $ man terminfo\n//   http://invisible-island.net/ncurses/man/term.5.html\n//   https://en.wikipedia.org/wiki/Terminfo\n// Todo:\n// - xterm's XT (set-title capability?) value should\n//   be true (at least tmux thinks it should).\n//   It's not parsed as true. Investigate.\n// - Possibly switch to other method of finding the\n//   extended data string table: i += h.symOffsetCount * 2;\n\n/**\n * Modules\n */\nvar assert = require('assert'),\n    path = require('path'),\n    fs = require('fs'),\n    cp = require('child_process');\n/**\n * Tput\n */\n\n\nfunction Tput(options) {\n  if (!(this instanceof Tput)) {\n    return new Tput(options);\n  }\n\n  options = options || {};\n\n  if (typeof options === 'string') {\n    options = {\n      terminal: options\n    };\n  }\n\n  this.options = options;\n  this.terminal = options.terminal || options.term || process.env.TERM || (process.platform === 'win32' ? 'windows-ansi' : 'xterm');\n  this.terminal = this.terminal.toLowerCase();\n  this.debug = options.debug;\n  this.padding = options.padding;\n  this.extended = options.extended;\n  this.printf = options.printf;\n  this.termcap = options.termcap;\n  this.error = null;\n  this.terminfoPrefix = options.terminfoPrefix;\n  this.terminfoFile = options.terminfoFile;\n  this.termcapFile = options.termcapFile;\n\n  if (options.terminal || options.term) {\n    this.setup();\n  }\n}\n\nTput.prototype.setup = function () {\n  this.error = null;\n\n  try {\n    if (this.termcap) {\n      try {\n        this.injectTermcap();\n      } catch (e) {\n        if (this.debug) throw e;\n        this.error = new Error('Termcap parse error.');\n\n        this._useInternalCap(this.terminal);\n      }\n    } else {\n      try {\n        this.injectTerminfo();\n      } catch (e) {\n        if (this.debug) throw e;\n        this.error = new Error('Terminfo parse error.');\n\n        this._useInternalInfo(this.terminal);\n      }\n    }\n  } catch (e) {\n    // If there was an error, fallback\n    // to an internally stored terminfo/cap.\n    if (this.debug) throw e;\n    this.error = new Error('Terminfo not found.');\n\n    this._useXtermInfo();\n  }\n};\n\nTput.prototype.term = function (is) {\n  return this.terminal.indexOf(is) === 0;\n};\n\nTput.prototype._debug = function () {\n  if (!this.debug) return;\n  return console.log.apply(console, arguments);\n};\n/**\n * Fallback\n */\n\n\nTput.prototype._useVt102Cap = function () {\n  return this.injectTermcap('vt102');\n};\n\nTput.prototype._useXtermCap = function () {\n  return this.injectTermcap(__dirname + '/../usr/xterm.termcap');\n};\n\nTput.prototype._useXtermInfo = function () {\n  return this.injectTerminfo(__dirname + '/../usr/xterm');\n};\n\nTput.prototype._useInternalInfo = function (name) {\n  name = path.basename(name);\n  return this.injectTerminfo(__dirname + '/../usr/' + name);\n};\n\nTput.prototype._useInternalCap = function (name) {\n  name = path.basename(name);\n  return this.injectTermcap(__dirname + '/../usr/' + name + '.termcap');\n};\n/**\n * Terminfo\n */\n\n\nTput.ipaths = [process.env.TERMINFO || '', (process.env.TERMINFO_DIRS || '').split(':'), (process.env.HOME || '') + '/.terminfo', '/usr/share/terminfo', '/usr/share/lib/terminfo', '/usr/lib/terminfo', '/usr/local/share/terminfo', '/usr/local/share/lib/terminfo', '/usr/local/lib/terminfo', '/usr/local/ncurses/lib/terminfo', '/lib/terminfo'];\n\nTput.prototype.readTerminfo = function (term) {\n  var data, file, info;\n  term = term || this.terminal;\n  file = path.normalize(this._prefix(term));\n  data = fs.readFileSync(file);\n  info = this.parseTerminfo(data, file);\n\n  if (this.debug) {\n    this._terminfo = info;\n  }\n\n  return info;\n};\n\nTput._prefix = Tput.prototype._prefix = function (term) {\n  // If we have a terminfoFile, or our\n  // term looks like a filename, use it.\n  if (term) {\n    if (~term.indexOf(path.sep)) {\n      return term;\n    }\n\n    if (this.terminfoFile) {\n      return this.terminfoFile;\n    }\n  }\n\n  var paths = Tput.ipaths.slice(),\n      file;\n\n  if (this.terminfoPrefix) {\n    paths.unshift(this.terminfoPrefix);\n  } // Try exact matches.\n\n\n  file = this._tprefix(paths, term);\n  if (file) return file; // Try similar matches.\n\n  file = this._tprefix(paths, term, true);\n  if (file) return file; // Not found.\n\n  throw new Error('Terminfo directory not found.');\n};\n\nTput._tprefix = Tput.prototype._tprefix = function (prefix, term, soft) {\n  if (!prefix) return;\n  var file, dir, i, sdiff, sfile, list;\n\n  if (Array.isArray(prefix)) {\n    for (i = 0; i < prefix.length; i++) {\n      file = this._tprefix(prefix[i], term, soft);\n      if (file) return file;\n    }\n\n    return;\n  }\n\n  var find = function (word) {\n    var file, ch;\n    file = path.resolve(prefix, word[0]);\n\n    try {\n      fs.statSync(file);\n      return file;\n    } catch (e) {\n      ;\n    }\n\n    ch = word[0].charCodeAt(0).toString(16);\n    if (ch.length < 2) ch = '0' + ch;\n    file = path.resolve(prefix, ch);\n\n    try {\n      fs.statSync(file);\n      return file;\n    } catch (e) {\n      ;\n    }\n  };\n\n  if (!term) {\n    // Make sure the directory's sub-directories\n    // are all one-letter, or hex digits.\n    // return find('x') ? prefix : null;\n    try {\n      dir = fs.readdirSync(prefix).filter(function (file) {\n        return file.length !== 1 && !/^[0-9a-fA-F]{2}$/.test(file);\n      });\n\n      if (!dir.length) {\n        return prefix;\n      }\n    } catch (e) {\n      ;\n    }\n\n    return;\n  }\n\n  term = path.basename(term);\n  dir = find(term);\n  if (!dir) return;\n\n  if (soft) {\n    try {\n      list = fs.readdirSync(dir);\n    } catch (e) {\n      return;\n    }\n\n    list.forEach(function (file) {\n      if (file.indexOf(term) === 0) {\n        var diff = file.length - term.length;\n\n        if (!sfile || diff < sdiff) {\n          sdiff = diff;\n          sfile = file;\n        }\n      }\n    });\n    return sfile && (soft || sdiff === 0) ? path.resolve(dir, sfile) : null;\n  }\n\n  file = path.resolve(dir, term);\n\n  try {\n    fs.statSync(file);\n    return file;\n  } catch (e) {\n    ;\n  }\n};\n/**\n * Terminfo Parser\n * All shorts are little-endian\n */\n\n\nTput.prototype.parseTerminfo = function (data, file) {\n  var info = {},\n      extended,\n      l = data.length,\n      i = 0,\n      v,\n      o;\n  var h = info.header = {\n    dataSize: data.length,\n    headerSize: 12,\n    magicNumber: data[1] << 8 | data[0],\n    namesSize: data[3] << 8 | data[2],\n    boolCount: data[5] << 8 | data[4],\n    numCount: data[7] << 8 | data[6],\n    strCount: data[9] << 8 | data[8],\n    strTableSize: data[11] << 8 | data[10]\n  };\n  h.total = h.headerSize + h.namesSize + h.boolCount + h.numCount * 2 + h.strCount * 2 + h.strTableSize;\n  i += h.headerSize; // Names Section\n\n  var names = data.toString('ascii', i, i + h.namesSize - 1),\n      parts = names.split('|'),\n      name = parts[0],\n      desc = parts.pop();\n  info.name = name;\n  info.names = parts;\n  info.desc = desc;\n  info.dir = path.resolve(file, '..', '..');\n  info.file = file;\n  i += h.namesSize - 1; // Names is nul-terminated.\n\n  assert.equal(data[i], 0);\n  i++; // Booleans Section\n  // One byte for each flag\n  // Same order as <term.h>\n\n  info.bools = {};\n  l = i + h.boolCount;\n  o = 0;\n\n  for (; i < l; i++) {\n    v = Tput.bools[o++];\n    info.bools[v] = data[i] === 1;\n  } // Null byte in between to make sure numbers begin on an even byte.\n\n\n  if (i % 2) {\n    assert.equal(data[i], 0);\n    i++;\n  } // Numbers Section\n\n\n  info.numbers = {};\n  l = i + h.numCount * 2;\n  o = 0;\n\n  for (; i < l; i += 2) {\n    v = Tput.numbers[o++];\n\n    if (data[i + 1] === 0377 && data[i] === 0377) {\n      info.numbers[v] = -1;\n    } else {\n      info.numbers[v] = data[i + 1] << 8 | data[i];\n    }\n  } // Strings Section\n\n\n  info.strings = {};\n  l = i + h.strCount * 2;\n  o = 0;\n\n  for (; i < l; i += 2) {\n    v = Tput.strings[o++];\n\n    if (data[i + 1] === 0377 && data[i] === 0377) {\n      info.strings[v] = -1;\n    } else {\n      info.strings[v] = data[i + 1] << 8 | data[i];\n    }\n  } // String Table\n\n\n  Object.keys(info.strings).forEach(function (key) {\n    if (info.strings[key] === -1) {\n      delete info.strings[key];\n      return;\n    } // Workaround: fix an odd bug in the screen-256color terminfo where it tries\n    // to set -1, but it appears to have {0xfe, 0xff} instead of {0xff, 0xff}.\n    // TODO: Possibly handle errors gracefully below, as well as in the\n    // extended info. Also possibly do: `if (info.strings[key] >= data.length)`.\n\n\n    if (info.strings[key] === 65534) {\n      delete info.strings[key];\n      return;\n    }\n\n    var s = i + info.strings[key],\n        j = s;\n\n    while (data[j]) j++;\n\n    assert(j < data.length);\n    info.strings[key] = data.toString('ascii', s, j);\n  }); // Extended Header\n\n  if (this.extended !== false) {\n    i--;\n    i += h.strTableSize;\n\n    if (i % 2) {\n      assert.equal(data[i], 0);\n      i++;\n    }\n\n    l = data.length;\n\n    if (i < l - 1) {\n      try {\n        extended = this.parseExtended(data.slice(i));\n      } catch (e) {\n        if (this.debug) {\n          throw e;\n        }\n\n        return info;\n      }\n\n      info.header.extended = extended.header;\n      ['bools', 'numbers', 'strings'].forEach(function (key) {\n        merge(info[key], extended[key]);\n      });\n    }\n  }\n\n  return info;\n};\n/**\n * Extended Parsing\n */\n// Some data to help understand:\n// For xterm, non-extended header:\n// { dataSize: 3270,\n//   headerSize: 12,\n//   magicNumber: 282,\n//   namesSize: 48,\n//   boolCount: 38,\n//   numCount: 15,\n//   strCount: 413,\n//   strTableSize: 1388,\n//   total: 2342 }\n// For xterm, header:\n// Offset: 2342\n// { header:\n//    { dataSize: 928,\n//      headerSize: 10,\n//      boolCount: 2,\n//      numCount: 1,\n//      strCount: 57,\n//      strTableSize: 117,\n//      lastStrTableOffset: 680,\n//      total: 245 },\n// For xterm, layout:\n// { header: '0 - 10', // length: 10\n//   bools: '10 - 12', // length: 2\n//   numbers: '12 - 14', // length: 2\n//   strings: '14 - 128', // length: 114 (57 short)\n//   symoffsets: '128 - 248', // length: 120 (60 short)\n//   stringtable: '248 - 612', // length: 364\n//   sym: '612 - 928' } // length: 316\n//\n// How lastStrTableOffset works:\n//   data.length - h.lastStrTableOffset === 248\n//     (sym-offset end, string-table start)\n//   364 + 316 === 680 (lastStrTableOffset)\n// How strTableSize works:\n//   h.strCount + [symOffsetCount] === h.strTableSize\n//   57 + 60 === 117 (strTableSize)\n//   symOffsetCount doesn't actually exist in the header. it's just implied.\n// Getting the number of sym offsets:\n//   h.symOffsetCount = h.strTableSize - h.strCount;\n//   h.symOffsetSize = (h.strTableSize - h.strCount) * 2;\n\n\nTput.prototype.parseExtended = function (data) {\n  var info = {},\n      l = data.length,\n      i = 0;\n  var h = info.header = {\n    dataSize: data.length,\n    headerSize: 10,\n    boolCount: data[i + 1] << 8 | data[i + 0],\n    numCount: data[i + 3] << 8 | data[i + 2],\n    strCount: data[i + 5] << 8 | data[i + 4],\n    strTableSize: data[i + 7] << 8 | data[i + 6],\n    lastStrTableOffset: data[i + 9] << 8 | data[i + 8]\n  }; // h.symOffsetCount = h.strTableSize - h.strCount;\n\n  h.total = h.headerSize + h.boolCount + h.numCount * 2 + h.strCount * 2 + h.strTableSize;\n  i += h.headerSize; // Booleans Section\n  // One byte for each flag\n\n  var _bools = [];\n  l = i + h.boolCount;\n\n  for (; i < l; i++) {\n    _bools.push(data[i] === 1);\n  } // Null byte in between to make sure numbers begin on an even byte.\n\n\n  if (i % 2) {\n    assert.equal(data[i], 0);\n    i++;\n  } // Numbers Section\n\n\n  var _numbers = [];\n  l = i + h.numCount * 2;\n\n  for (; i < l; i += 2) {\n    if (data[i + 1] === 0377 && data[i] === 0377) {\n      _numbers.push(-1);\n    } else {\n      _numbers.push(data[i + 1] << 8 | data[i]);\n    }\n  } // Strings Section\n\n\n  var _strings = [];\n  l = i + h.strCount * 2;\n\n  for (; i < l; i += 2) {\n    if (data[i + 1] === 0377 && data[i] === 0377) {\n      _strings.push(-1);\n    } else {\n      _strings.push(data[i + 1] << 8 | data[i]);\n    }\n  } // Pass over the sym offsets and get to the string table.\n\n\n  i = data.length - h.lastStrTableOffset; // Might be better to do this instead if the file has trailing bytes:\n  // i += h.symOffsetCount * 2;\n  // String Table\n\n  var high = 0;\n\n  _strings.forEach(function (offset, k) {\n    if (offset === -1) {\n      _strings[k] = '';\n      return;\n    }\n\n    var s = i + offset,\n        j = s;\n\n    while (data[j]) j++;\n\n    assert(j < data.length); // Find out where the string table ends by\n    // getting the highest string length.\n\n    if (high < j - i) {\n      high = j - i;\n    }\n\n    _strings[k] = data.toString('ascii', s, j);\n  }); // Symbol Table\n  // Add one to the highest string length because we didn't count \\0.\n\n\n  i += high + 1;\n  l = data.length;\n  var sym = [],\n      j;\n\n  for (; i < l; i++) {\n    j = i;\n\n    while (data[j]) j++;\n\n    sym.push(data.toString('ascii', i, j));\n    i = j;\n  } // Identify by name\n\n\n  j = 0;\n  info.bools = {};\n\n  _bools.forEach(function (bool) {\n    info.bools[sym[j++]] = bool;\n  });\n\n  info.numbers = {};\n\n  _numbers.forEach(function (number) {\n    info.numbers[sym[j++]] = number;\n  });\n\n  info.strings = {};\n\n  _strings.forEach(function (string) {\n    info.strings[sym[j++]] = string;\n  }); // Should be the very last bit of data.\n\n\n  assert.equal(i, data.length);\n  return info;\n};\n\nTput.prototype.compileTerminfo = function (term) {\n  return this.compile(this.readTerminfo(term));\n};\n\nTput.prototype.injectTerminfo = function (term) {\n  return this.inject(this.compileTerminfo(term));\n};\n/**\n * Compiler - terminfo cap->javascript\n */\n\n\nTput.prototype.compile = function (info) {\n  var self = this;\n\n  if (!info) {\n    throw new Error('Terminal not found.');\n  }\n\n  this.detectFeatures(info);\n\n  this._debug(info);\n\n  info.all = {};\n  info.methods = {};\n  ['bools', 'numbers', 'strings'].forEach(function (type) {\n    Object.keys(info[type]).forEach(function (key) {\n      info.all[key] = info[type][key];\n      info.methods[key] = self._compile(info, key, info.all[key]);\n    });\n  });\n  Tput.bools.forEach(function (key) {\n    if (info.methods[key] == null) info.methods[key] = false;\n  });\n  Tput.numbers.forEach(function (key) {\n    if (info.methods[key] == null) info.methods[key] = -1;\n  });\n  Tput.strings.forEach(function (key) {\n    if (!info.methods[key]) info.methods[key] = noop;\n  });\n  Object.keys(info.methods).forEach(function (key) {\n    if (!Tput.alias[key]) return;\n    Tput.alias[key].forEach(function (alias) {\n      info.methods[alias] = info.methods[key];\n    }); // Could just use:\n    // Object.keys(Tput.aliasMap).forEach(function(key) {\n    //   info.methods[key] = info.methods[Tput.aliasMap[key]];\n    // });\n  });\n  return info;\n};\n\nTput.prototype.inject = function (info) {\n  var self = this,\n      methods = info.methods || info;\n  Object.keys(methods).forEach(function (key) {\n    if (typeof methods[key] !== 'function') {\n      self[key] = methods[key];\n      return;\n    }\n\n    self[key] = function () {\n      var args = Array.prototype.slice.call(arguments);\n      return methods[key].call(self, args);\n    };\n  });\n  this.info = info;\n  this.all = info.all;\n  this.methods = info.methods;\n  this.bools = info.bools;\n  this.numbers = info.numbers;\n  this.strings = info.strings;\n\n  if (!~info.names.indexOf(this.terminal)) {\n    this.terminal = info.name;\n  }\n\n  this.features = info.features;\n  Object.keys(info.features).forEach(function (key) {\n    if (key === 'padding') {\n      if (!info.features.padding && self.options.padding !== true) {\n        self.padding = false;\n      }\n\n      return;\n    }\n\n    self[key] = info.features[key];\n  });\n}; // See:\n// ~/ncurses/ncurses/tinfo/lib_tparm.c\n// ~/ncurses/ncurses/tinfo/comp_scan.c\n\n\nTput.prototype._compile = function (info, key, str) {\n  var v;\n\n  this._debug('Compiling %s: %s', key, JSON.stringify(str));\n\n  switch (typeof str) {\n    case 'boolean':\n      return str;\n\n    case 'number':\n      return str;\n\n    case 'string':\n      break;\n\n    default:\n      return noop;\n  }\n\n  if (!str) {\n    return noop;\n  } // See:\n  // ~/ncurses/progs/tput.c - tput() - L149\n  // ~/ncurses/progs/tset.c - set_init() - L992\n\n\n  if (key === 'init_file' || key === 'reset_file') {\n    try {\n      str = fs.readFileSync(str, 'utf8');\n\n      if (this.debug) {\n        v = ('return ' + JSON.stringify(str) + ';').replace(/\\x1b/g, '\\\\x1b').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n');\n        process.stdout.write(v + '\\n');\n      }\n\n      return function () {\n        return str;\n      };\n    } catch (e) {\n      return noop;\n    }\n  }\n\n  var tkey = info.name + '.' + key,\n      header = 'var v, dyn = {}, stat = {}, stack = [], out = [];',\n      footer = ';return out.join(\"\");',\n      code = header,\n      val = str,\n      buff = '',\n      cap,\n      ch,\n      fi,\n      then,\n      els,\n      end;\n\n  function read(regex, no) {\n    cap = regex.exec(val);\n    if (!cap) return;\n    val = val.substring(cap[0].length);\n    ch = cap[1];\n    if (!no) clear();\n    return cap;\n  }\n\n  function stmt(c) {\n    if (code[code.length - 1] === ',') {\n      code = code.slice(0, -1);\n    }\n\n    code += c;\n  }\n\n  function expr(c) {\n    code += c + ',';\n  }\n\n  function echo(c) {\n    if (c === '\"\"') return;\n    expr('out.push(' + c + ')');\n  }\n\n  function print(c) {\n    buff += c;\n  }\n\n  function clear() {\n    if (buff) {\n      echo(JSON.stringify(buff).replace(/\\\\u00([0-9a-fA-F]{2})/g, '\\\\x$1'));\n      buff = '';\n    }\n  }\n\n  while (val) {\n    // Ignore newlines\n    if (read(/^\\n /, true)) {\n      continue;\n    } // '^A' -> ^A\n\n\n    if (read(/^\\^(.)/i, true)) {\n      if (!(ch >= ' ' && ch <= '~')) {\n        this._debug('%s: bad caret char.', tkey); // NOTE: ncurses appears to simply\n        // continue in this situation, but\n        // I could be wrong.\n\n\n        print(cap[0]);\n        continue;\n      }\n\n      if (ch === '?') {\n        ch = '\\x7f';\n      } else {\n        ch = ch.charCodeAt(0) & 31;\n        if (ch === 0) ch = 128;\n        ch = String.fromCharCode(ch);\n      }\n\n      print(ch);\n      continue;\n    } // 3 octal digits -> character\n\n\n    if (read(/^\\\\([0-7]{3})/, true)) {\n      print(String.fromCharCode(parseInt(ch, 8)));\n      continue;\n    } // '\\e' -> ^[\n    // '\\n' -> \\n\n    // '\\r' -> \\r\n    // '\\0' -> \\200 (special case)\n\n\n    if (read(/^\\\\([eEnlrtbfs\\^\\\\,:0]|.)/, true)) {\n      switch (ch) {\n        case 'e':\n        case 'E':\n          ch = '\\x1b';\n          break;\n\n        case 'n':\n          ch = '\\n';\n          break;\n\n        case 'l':\n          ch = '\\x85';\n          break;\n\n        case 'r':\n          ch = '\\r';\n          break;\n\n        case 't':\n          ch = '\\t';\n          break;\n\n        case 'b':\n          ch = '\\x08';\n          break;\n\n        case 'f':\n          ch = '\\x0c';\n          break;\n\n        case 's':\n          ch = ' ';\n          break;\n\n        case '^':\n          ch = '^';\n          break;\n\n        case '\\\\':\n          ch = '\\\\';\n          break;\n\n        case ',':\n          ch = ',';\n          break;\n\n        case ':':\n          ch = ':';\n          break;\n\n        case '0':\n          ch = '\\200';\n          break;\n\n        case 'a':\n          ch = '\\x07';\n          break;\n\n        default:\n          this._debug('%s: bad backslash char.', tkey);\n\n          ch = cap[0];\n          break;\n      }\n\n      print(ch);\n      continue;\n    } // $<5> -> padding\n    // e.g. flash_screen: '\\u001b[?5h$<100/>\\u001b[?5l',\n\n\n    if (read(/^\\$<(\\d+)([*\\/]{0,2})>/, true)) {\n      if (this.padding) print(cap[0]);\n      continue;\n    } // %%   outputs `%'\n\n\n    if (read(/^%%/, true)) {\n      print('%');\n      continue;\n    } // %[[:]flags][width[.precision]][doxXs]\n    //   as in printf, flags are [-+#] and space.  Use a `:' to allow the\n    //   next character to be a `-' flag, avoiding interpreting \"%-\" as an\n    //   operator.\n    // %c   print pop() like %c in printf\n    // Example from screen terminfo:\n    //   S0: \"\\u001b(%p1%c\"\n    // %d   print pop()\n    // \"Print (e.g., \"%d\") is a special case.\"\n    // %s   print pop() like %s in printf\n\n\n    if (read(/^%((?::-|[+# ]){1,4})?(\\d+(?:\\.\\d+)?)?([doxXsc])/)) {\n      if (this.printf || cap[1] || cap[2] || ~'oxX'.indexOf(cap[3])) {\n        echo('sprintf(\"' + cap[0].replace(':-', '-') + '\", stack.pop())');\n      } else if (cap[3] === 'c') {\n        echo('(v = stack.pop(), isFinite(v) ' + '? String.fromCharCode(v || 0200) : \"\")');\n      } else {\n        echo('stack.pop()');\n      }\n\n      continue;\n    } // %p[1-9]\n    //   push i'th parameter\n\n\n    if (read(/^%p([1-9])/)) {\n      expr('(stack.push(v = params[' + (ch - 1) + ']), v)');\n      continue;\n    } // %P[a-z]\n    //   set dynamic variable [a-z] to pop()\n\n\n    if (read(/^%P([a-z])/)) {\n      expr('dyn.' + ch + ' = stack.pop()');\n      continue;\n    } // %g[a-z]\n    //   get dynamic variable [a-z] and push it\n\n\n    if (read(/^%g([a-z])/)) {\n      expr('(stack.push(dyn.' + ch + '), dyn.' + ch + ')');\n      continue;\n    } // %P[A-Z]\n    //   set static variable [a-z] to pop()\n\n\n    if (read(/^%P([A-Z])/)) {\n      expr('stat.' + ch + ' = stack.pop()');\n      continue;\n    } // %g[A-Z]\n    //   get static variable [a-z] and push it\n    //   The  terms  \"static\"  and  \"dynamic\" are misleading.  Historically,\n    //   these are simply two different sets of variables, whose values are\n    //   not reset between calls to tparm.  However, that fact is not\n    //   documented in other implementations.  Relying on it will adversely\n    //   impact portability to other implementations.\n\n\n    if (read(/^%g([A-Z])/)) {\n      expr('(stack.push(v = stat.' + ch + '), v)');\n      continue;\n    } // %'c' char constant c\n    // NOTE: These are stored as c chars, exemplified by:\n    // cursor_address: \"\\u001b=%p1%' '%+%c%p2%' '%+%c\"\n\n\n    if (read(/^%'(.)'/)) {\n      expr('(stack.push(v = ' + ch.charCodeAt(0) + '), v)');\n      continue;\n    } // %{nn}\n    //   integer constant nn\n\n\n    if (read(/^%\\{(\\d+)\\}/)) {\n      expr('(stack.push(v = ' + ch + '), v)');\n      continue;\n    } // %l   push strlen(pop)\n\n\n    if (read(/^%l/)) {\n      expr('(stack.push(v = (stack.pop() || \"\").length || 0), v)');\n      continue;\n    } // %+ %- %* %/ %m\n    //   arithmetic (%m is mod): push(pop() op pop())\n    // %& %| %^\n    //   bit operations (AND, OR and exclusive-OR): push(pop() op pop())\n    // %= %> %<\n    //   logical operations: push(pop() op pop())\n\n\n    if (read(/^%([+\\-*\\/m&|\\^=><])/)) {\n      if (ch === '=') ch = '===';else if (ch === 'm') ch = '%';\n      expr('(v = stack.pop(),' + ' stack.push(v = (stack.pop() ' + ch + ' v) || 0),' + ' v)');\n      continue;\n    } // %A, %O\n    //   logical AND and OR operations (for conditionals)\n\n\n    if (read(/^%([AO])/)) {\n      // Are we supposed to store the result on the stack?\n      expr('(stack.push(v = (stack.pop() ' + (ch === 'A' ? '&&' : '||') + ' stack.pop())), v)');\n      continue;\n    } // %! %~\n    //   unary operations (logical and bit complement): push(op pop())\n\n\n    if (read(/^%([!~])/)) {\n      expr('(stack.push(v = ' + ch + 'stack.pop()), v)');\n      continue;\n    } // %i   add 1 to first two parameters (for ANSI terminals)\n\n\n    if (read(/^%i/)) {\n      // Are these supposed to go on the stack in certain situations?\n      // ncurses doesn't seem to put them on the stack, but xterm.user6\n      // seems to assume they're on the stack for some reason. Could\n      // just be a bad terminfo string.\n      // user6: \"\\u001b[%i%d;%dR\" - possibly a termcap-style string.\n      // expr('(params[0] |= 0, params[1] |= 0, params[0]++, params[1]++)');\n      expr('(params[0]++, params[1]++)');\n      continue;\n    } // %? expr %t thenpart %e elsepart %;\n    //   This forms an if-then-else.  The %e elsepart is optional.  Usually\n    //   the %? expr part pushes a value onto the stack, and %t pops it from\n    //   the stack, testing if it is nonzero (true).  If it is zero (false),\n    //   control passes to the %e (else) part.\n    //   It is possible to form else-if's a la Algol 68:\n    //     %? c1 %t b1 %e c2 %t b2 %e c3 %t b3 %e c4 %t b4 %e %;\n    //   where ci are conditions, bi are bodies.\n\n\n    if (read(/^%\\?/)) {\n      end = -1;\n      stmt(';if (');\n      continue;\n    }\n\n    if (read(/^%t/)) {\n      end = -1; // Technically this is supposed to pop everything off the stack that was\n      // pushed onto the stack after the if statement, see man terminfo.\n      // Right now, we don't pop anything off. This could cause compat issues.\n      // Perhaps implement a \"pushed\" counter from the time the if statement\n      // is added, to the time the then statement is added, and pop off\n      // the appropriate number of elements.\n      // while (pushed--) expr('stack.pop()');\n\n      stmt(') {');\n      continue;\n    } // Terminfo does elseif's like\n    // this: %?[expr]%t...%e[expr]%t...%;\n\n\n    if (read(/^%e/)) {\n      fi = val.indexOf('%?');\n      then = val.indexOf('%t');\n      els = val.indexOf('%e');\n      end = val.indexOf('%;');\n      if (end === -1) end = Infinity;\n\n      if (then !== -1 && then < end && (fi === -1 || then < fi) && (els === -1 || then < els)) {\n        stmt('} else if (');\n      } else {\n        stmt('} else {');\n      }\n\n      continue;\n    }\n\n    if (read(/^%;/)) {\n      end = null;\n      stmt('}');\n      continue;\n    }\n\n    buff += val[0];\n    val = val.substring(1);\n  } // Clear the buffer of any remaining text.\n\n\n  clear(); // Some terminfos (I'm looking at you, atari-color), don't end an if\n  // statement. It's assumed terminfo will automatically end it for\n  // them, because they are a bunch of lazy bastards.\n\n  if (end != null) {\n    stmt('}');\n  } // Add the footer.\n\n\n  stmt(footer); // Optimize and cleanup generated code.\n\n  v = code.slice(header.length, -footer.length);\n\n  if (!v.length) {\n    code = 'return \"\";';\n  } else if (v = /^out\\.push\\((\"(?:[^\"]|\\\\\")+\")\\)$/.exec(v)) {\n    code = 'return ' + v[1] + ';';\n  } else {\n    // Turn `(stack.push(v = params[0]), v),out.push(stack.pop())`\n    // into `out.push(params[0])`.\n    code = code.replace(/\\(stack\\.push\\(v = params\\[(\\d+)\\]\\), v\\),out\\.push\\(stack\\.pop\\(\\)\\)/g, 'out.push(params[$1])'); // Remove unnecessary variable initializations.\n\n    v = code.slice(header.length, -footer.length);\n    if (!~v.indexOf('v = ')) code = code.replace('v, ', '');\n    if (!~v.indexOf('dyn')) code = code.replace('dyn = {}, ', '');\n    if (!~v.indexOf('stat')) code = code.replace('stat = {}, ', '');\n    if (!~v.indexOf('stack')) code = code.replace('stack = [], ', ''); // Turn `var out = [];out.push(\"foo\"),` into `var out = [\"foo\"];`.\n\n    code = code.replace(/out = \\[\\];out\\.push\\((\"(?:[^\"]|\\\\\")+\")\\),/, 'out = [$1];');\n  } // Terminfos `wyse350-vb`, and `wy350-w`\n  // seem to have a few broken strings.\n\n\n  if (str === '\\u001b%?') {\n    code = 'return \"\\\\x1b\";';\n  }\n\n  if (this.debug) {\n    v = code.replace(/\\x1b/g, '\\\\x1b').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n');\n    process.stdout.write(v + '\\n');\n  }\n\n  try {\n    if (this.options.stringify && code.indexOf('return ') === 0) {\n      return new Function('', code)();\n    }\n\n    return this.printf || ~code.indexOf('sprintf(') ? new Function('sprintf, params', code).bind(null, sprintf) : new Function('params', code);\n  } catch (e) {\n    console.error('');\n    console.error('Error on %s:', tkey);\n    console.error(JSON.stringify(str));\n    console.error('');\n    console.error(code.replace(/(,|;)/g, '$1\\n'));\n    e.stack = e.stack.replace(/\\x1b/g, '\\\\x1b');\n    throw e;\n  }\n}; // See: ~/ncurses/ncurses/tinfo/lib_tputs.c\n\n\nTput.prototype._print = function (code, print, done) {\n  var xon = !this.bools.needs_xon_xoff || this.bools.xon_xoff;\n  print = print || write;\n  done = done || noop;\n\n  if (!this.padding) {\n    print(code);\n    return done();\n  }\n\n  var parts = code.split(/(?=\\$<[\\d.]+[*\\/]{0,2}>)/),\n      i = 0;\n\n  (function next() {\n    if (i === parts.length) {\n      return done();\n    }\n\n    var part = parts[i++],\n        padding = /^\\$<([\\d.]+)([*\\/]{0,2})>/.exec(part),\n        amount,\n        suffix; // , affect;\n\n    if (!padding) {\n      print(part);\n      return next();\n    }\n\n    part = part.substring(padding[0].length);\n    amount = +padding[1];\n    suffix = padding[2]; // A `/'  suffix indicates  that  the  padding  is  mandatory and forces a\n    // delay of the given number of milliseconds even on devices for which xon\n    // is present to indicate flow control.\n\n    if (xon && !~suffix.indexOf('/')) {\n      print(part);\n      return next();\n    } // A `*' indicates that the padding required is proportional to the number\n    // of lines affected by the operation, and  the amount  given  is the\n    // per-affected-unit padding required.  (In the case of insert character,\n    // the factor is still the number of lines affected.) Normally, padding is\n    // advisory if the device has the xon capability; it is used for cost\n    // computation but does not trigger delays.\n\n\n    if (~suffix.indexOf('*')) {\n      // XXX Disable this for now.\n      amount = amount; // if (affect = /\\x1b\\[(\\d+)[LM]/.exec(part)) {\n      //   amount *= +affect[1];\n      // }\n      // The above is a huge workaround. In reality, we need to compile\n      // `_print` into the string functions and check the cap name and\n      // params.\n      // if (cap === 'insert_line' || cap === 'delete_line') {\n      //   amount *= params[0];\n      // }\n      // if (cap === 'clear_screen') {\n      //   amount *= process.stdout.rows;\n      // }\n    }\n\n    return setTimeout(function () {\n      print(part);\n      return next();\n    }, amount);\n  })();\n}; // A small helper function if we want\n// to easily output text with setTimeouts.\n\n\nTput.print = function () {\n  var fake = {\n    padding: true,\n    bools: {\n      needs_xon_xoff: true,\n      xon_xoff: false\n    }\n  };\n  return Tput.prototype._print.apply(fake, arguments);\n};\n/**\n * Termcap\n */\n\n\nTput.cpaths = [process.env.TERMCAP || '', (process.env.TERMPATH || '').split(/[: ]/), (process.env.HOME || '') + '/.termcap', '/usr/share/misc/termcap', '/etc/termcap'];\n\nTput.prototype.readTermcap = function (term) {\n  var self = this,\n      terms,\n      term_,\n      root,\n      paths;\n  term = term || this.terminal; // Termcap has a bunch of terminals usually stored in one file/string,\n  // so we need to find the one containing our desired terminal.\n\n  if (~term.indexOf(path.sep) && (terms = this._tryCap(path.resolve(term)))) {\n    term_ = path.basename(term).split('.')[0];\n\n    if (terms[process.env.TERM]) {\n      term = process.env.TERM;\n    } else if (terms[term_]) {\n      term = term_;\n    } else {\n      term = Object.keys(terms)[0];\n    }\n  } else {\n    paths = Tput.cpaths.slice();\n\n    if (this.termcapFile) {\n      paths.unshift(this.termcapFile);\n    }\n\n    paths.push(Tput.termcap);\n    terms = this._tryCap(paths, term);\n  }\n\n  if (!terms) {\n    throw new Error('Cannot find termcap for: ' + term);\n  }\n\n  root = terms[term];\n\n  if (this.debug) {\n    this._termcap = terms;\n  }\n\n  (function tc(term) {\n    if (term && term.strings.tc) {\n      root.inherits = root.inherits || [];\n      root.inherits.push(term.strings.tc);\n      var names = terms[term.strings.tc] ? terms[term.strings.tc].names : [term.strings.tc];\n\n      self._debug('%s inherits from %s.', term.names.join('/'), names.join('/'));\n\n      var inherit = tc(terms[term.strings.tc]);\n\n      if (inherit) {\n        ['bools', 'numbers', 'strings'].forEach(function (type) {\n          merge(term[type], inherit[type]);\n        });\n      }\n    }\n\n    return term;\n  })(root); // Translate termcap names to terminfo-style names.\n\n\n  root = this.translateTermcap(root);\n  return root;\n};\n\nTput.prototype._tryCap = function (file, term) {\n  if (!file) return;\n  var terms, data, i;\n\n  if (Array.isArray(file)) {\n    for (i = 0; i < file.length; i++) {\n      data = this._tryCap(file[i], term);\n      if (data) return data;\n    }\n\n    return;\n  } // If the termcap string starts with `/`,\n  // ncurses considers it a filename.\n\n\n  data = file[0] === '/' ? tryRead(file) : file;\n  if (!data) return;\n  terms = this.parseTermcap(data, file);\n\n  if (term && !terms[term]) {\n    return;\n  }\n\n  return terms;\n};\n/**\n * Termcap Parser\n *  http://en.wikipedia.org/wiki/Termcap\n *  http://www.gnu.org/software\n *    /termutils/manual/termcap-1.3/html_mono/termcap.html\n *  http://www.gnu.org/software\n *    /termutils/manual/termcap-1.3/html_mono/termcap.html#SEC17\n *  http://tldp.org/HOWTO/Text-Terminal-HOWTO.html#toc16\n *  man termcap\n */\n// Example:\n// vt102|dec vt102:\\\n//  :do=^J:co#80:li#24:cl=50\\E[;H\\E[2J:\\\n//  :le=^H:bs:cm=5\\E[%i%d;%dH:nd=2\\E[C:up=2\\E[A:\\\n//  :ce=3\\E[K:cd=50\\E[J:so=2\\E[7m:se=2\\E[m:us=2\\E[4m:ue=2\\E[m:\\\n//  :md=2\\E[1m:mr=2\\E[7m:mb=2\\E[5m:me=2\\E[m:is=\\E[1;24r\\E[24;1H:\\\n//  :rs=\\E>\\E[?3l\\E[?4l\\E[?5l\\E[?7h\\E[?8h:ks=\\E[?1h\\E=:ke=\\E[?1l\\E>:\\\n//  :ku=\\EOA:kd=\\EOB:kr=\\EOC:kl=\\EOD:kb=^H:\\\n//  :ho=\\E[H:k1=\\EOP:k2=\\EOQ:k3=\\EOR:k4=\\EOS:pt:sr=5\\EM:vt#3:\\\n//  :sc=\\E7:rc=\\E8:cs=\\E[%i%d;%dr:vs=\\E[?7l:ve=\\E[?7h:\\\n//  :mi:al=\\E[L:dc=\\E[P:dl=\\E[M:ei=\\E[4l:im=\\E[4h:\n\n\nTput.prototype.parseTermcap = function (data, file) {\n  var terms = {},\n      parts,\n      term,\n      entries,\n      fields,\n      field,\n      names,\n      i,\n      j,\n      k; // remove escaped newlines\n\n  data = data.replace(/\\\\\\n[ \\t]*/g, ''); // remove comments\n\n  data = data.replace(/^#[^\\n]+/gm, ''); // split entries\n\n  entries = data.trim().split(/\\n+/);\n\n  for (i = 0; i < entries.length; i++) {\n    fields = entries[i].split(/:+/);\n\n    for (j = 0; j < fields.length; j++) {\n      field = fields[j].trim();\n      if (!field) continue;\n\n      if (j === 0) {\n        names = field.split('|');\n        term = {\n          name: names[0],\n          names: names,\n          desc: names.pop(),\n          file: ~file.indexOf(path.sep) ? path.resolve(file) : file,\n          termcap: true\n        };\n\n        for (k = 0; k < names.length; k++) {\n          terms[names[k]] = term;\n        }\n\n        term.bools = {};\n        term.numbers = {};\n        term.strings = {};\n        continue;\n      }\n\n      if (~field.indexOf('=')) {\n        parts = field.split('=');\n        term.strings[parts[0]] = parts.slice(1).join('=');\n      } else if (~field.indexOf('#')) {\n        parts = field.split('#');\n        term.numbers[parts[0]] = +parts.slice(1).join('#');\n      } else {\n        term.bools[field] = true;\n      }\n    }\n  }\n\n  return terms;\n};\n/**\n * Termcap Compiler\n *  man termcap\n */\n\n\nTput.prototype.translateTermcap = function (info) {\n  var self = this,\n      out = {};\n  if (!info) return;\n\n  this._debug(info);\n\n  ['name', 'names', 'desc', 'file', 'termcap'].forEach(function (key) {\n    out[key] = info[key];\n  }); // Separate aliases for termcap\n\n  var map = function () {\n    var out = {};\n    Object.keys(Tput.alias).forEach(function (key) {\n      var aliases = Tput.alias[key];\n      out[aliases.termcap] = key;\n    });\n    return out;\n  }(); // Translate termcap cap names to terminfo cap names.\n  // e.g. `up` -> `cursor_up`\n\n\n  ['bools', 'numbers', 'strings'].forEach(function (key) {\n    out[key] = {};\n    Object.keys(info[key]).forEach(function (cap) {\n      if (key === 'strings') {\n        info.strings[cap] = self._captoinfo(cap, info.strings[cap], 1);\n      }\n\n      if (map[cap]) {\n        out[key][map[cap]] = info[key][cap];\n      } else {\n        // NOTE: Possibly include all termcap names\n        // in a separate alias.js file. Some are\n        // missing from the terminfo alias.js file\n        // which is why we have to do this:\n        // See: $ man termcap\n        out[key][cap] = info[key][cap];\n      }\n    });\n  });\n  return out;\n};\n\nTput.prototype.compileTermcap = function (term) {\n  return this.compile(this.readTermcap(term));\n};\n\nTput.prototype.injectTermcap = function (term) {\n  return this.inject(this.compileTermcap(term));\n};\n/**\n * _nc_captoinfo - ported to javascript directly from ncurses.\n * Copyright (c) 1998-2009,2010 Free Software Foundation, Inc.\n * See: ~/ncurses/ncurses/tinfo/captoinfo.c\n *\n * Convert a termcap string to terminfo format.\n * 'cap' is the relevant terminfo capability index.\n * 's' is the string value of the capability.\n * 'parameterized' tells what type of translations to do:\n *    % translations if 1\n *    pad translations if >=0\n */\n\n\nTput.prototype._captoinfo = function (cap, s, parameterized) {\n  var self = this;\n  var capstart;\n\n  if (parameterized == null) {\n    parameterized = 0;\n  }\n\n  var MAX_PUSHED = 16,\n      stack = [];\n  var stackptr = 0,\n      onstack = 0,\n      seenm = 0,\n      seenn = 0,\n      seenr = 0,\n      param = 1,\n      i = 0,\n      out = '';\n\n  function warn() {\n    var args = Array.prototype.slice.call(arguments);\n    args[0] = 'captoinfo: ' + (args[0] || '');\n    return self._debug.apply(self, args);\n  }\n\n  function isdigit(ch) {\n    return ch >= '0' && ch <= '9';\n  }\n\n  function isgraph(ch) {\n    return ch > ' ' && ch <= '~';\n  } // convert a character to a terminfo push\n\n\n  function cvtchar(sp) {\n    var c = '\\0',\n        len;\n    var j = i;\n\n    switch (sp[j]) {\n      case '\\\\':\n        switch (sp[++j]) {\n          case '\\'':\n          case '$':\n          case '\\\\':\n          case '%':\n            c = sp[j];\n            len = 2;\n            break;\n\n          case '\\0':\n            c = '\\\\';\n            len = 1;\n            break;\n\n          case '0':\n          case '1':\n          case '2':\n          case '3':\n            len = 1;\n\n            while (isdigit(sp[j])) {\n              c = String.fromCharCode(8 * c.charCodeAt(0) + (sp[j++].charCodeAt(0) - '0'.charCodeAt(0)));\n              len++;\n            }\n\n            break;\n\n          default:\n            c = sp[j];\n            len = 2;\n            break;\n        }\n\n        break;\n\n      case '^':\n        c = String.fromCharCode(sp[++j].charCodeAt(0) & 0x1f);\n        len = 2;\n        break;\n\n      default:\n        c = sp[j];\n        len = 1;\n    }\n\n    if (isgraph(c) && c !== ',' && c !== '\\'' && c !== '\\\\' && c !== ':') {\n      out += '%\\'';\n      out += c;\n      out += '\\'';\n    } else {\n      out += '%{';\n\n      if (c.charCodeAt(0) > 99) {\n        out += String.fromCharCode((c.charCodeAt(0) / 100 | 0) + '0'.charCodeAt(0));\n      }\n\n      if (c.charCodeAt(0) > 9) {\n        out += String.fromCharCode((c.charCodeAt(0) / 10 | 0) % 10 + '0'.charCodeAt(0));\n      }\n\n      out += String.fromCharCode(c.charCodeAt(0) % 10 + '0'.charCodeAt(0));\n      out += '}';\n    }\n\n    return len;\n  } // push n copies of param on the terminfo stack if not already there\n\n\n  function getparm(parm, n) {\n    if (seenr) {\n      if (parm === 1) {\n        parm = 2;\n      } else if (parm === 2) {\n        parm = 1;\n      }\n    }\n\n    if (onstack === parm) {\n      if (n > 1) {\n        warn('string may not be optimal');\n        out += '%Pa';\n\n        while (n--) {\n          out += '%ga';\n        }\n      }\n\n      return;\n    }\n\n    if (onstack !== 0) {\n      push();\n    }\n\n    onstack = parm;\n\n    while (n--) {\n      out += '%p';\n      out += String.fromCharCode('0'.charCodeAt(0) + parm);\n    }\n\n    if (seenn && parm < 3) {\n      out += '%{96}%^';\n    }\n\n    if (seenm && parm < 3) {\n      out += '%{127}%^';\n    }\n  } // push onstack on to the stack\n\n\n  function push() {\n    if (stackptr >= MAX_PUSHED) {\n      warn('string too complex to convert');\n    } else {\n      stack[stackptr++] = onstack;\n    }\n  } // pop the top of the stack into onstack\n\n\n  function pop() {\n    if (stackptr === 0) {\n      if (onstack === 0) {\n        warn('I\\'m confused');\n      } else {\n        onstack = 0;\n      }\n    } else {\n      onstack = stack[--stackptr];\n    }\n\n    param++;\n  }\n\n  function see03() {\n    getparm(param, 1);\n    out += '%3d';\n    pop();\n  }\n\n  function invalid() {\n    out += '%';\n    i--;\n    warn('unknown %% code %s (%#x) in %s', JSON.stringify(s[i]), s[i].charCodeAt(0), cap);\n  } // skip the initial padding (if we haven't been told not to)\n\n\n  capstart = null;\n  if (s == null) s = '';\n\n  if (parameterized >= 0 && isdigit(s[i])) {\n    for (capstart = i;; i++) {\n      if (!(isdigit(s[i]) || s[i] === '*' || s[i] === '.')) {\n        break;\n      }\n    }\n  }\n\n  while (s[i]) {\n    switch (s[i]) {\n      case '%':\n        i++;\n\n        if (parameterized < 1) {\n          out += '%';\n          break;\n        }\n\n        switch (s[i++]) {\n          case '%':\n            out += '%';\n            break;\n\n          case 'r':\n            if (seenr++ === 1) {\n              warn('saw %%r twice in %s', cap);\n            }\n\n            break;\n\n          case 'm':\n            if (seenm++ === 1) {\n              warn('saw %%m twice in %s', cap);\n            }\n\n            break;\n\n          case 'n':\n            if (seenn++ === 1) {\n              warn('saw %%n twice in %s', cap);\n            }\n\n            break;\n\n          case 'i':\n            out += '%i';\n            break;\n\n          case '6':\n          case 'B':\n            getparm(param, 1);\n            out += '%{10}%/%{16}%*';\n            getparm(param, 1);\n            out += '%{10}%m%+';\n            break;\n\n          case '8':\n          case 'D':\n            getparm(param, 2);\n            out += '%{2}%*%-';\n            break;\n\n          case '>':\n            getparm(param, 2); // %?%{x}%>%t%{y}%+%;\n\n            out += '%?';\n            i += cvtchar(s);\n            out += '%>%t';\n            i += cvtchar(s);\n            out += '%+%;';\n            break;\n\n          case 'a':\n            if ((s[i] === '=' || s[i] === '+' || s[i] === '-' || s[i] === '*' || s[i] === '/') && (s[i + 1] === 'p' || s[i + 1] === 'c') && s[i + 2] !== '\\0' && s[i + 2]) {\n              var l;\n              l = 2;\n\n              if (s[i] !== '=') {\n                getparm(param, 1);\n              }\n\n              if (s[i + 1] === 'p') {\n                getparm(param + s[i + 2].charCodeAt(0) - '@'.charCodeAt(0), 1);\n\n                if (param !== onstack) {\n                  pop();\n                  param--;\n                }\n\n                l++;\n              } else {\n                i += 2, l += cvtchar(s), i -= 2;\n              }\n\n              switch (s[i]) {\n                case '+':\n                  out += '%+';\n                  break;\n\n                case '-':\n                  out += '%-';\n                  break;\n\n                case '*':\n                  out += '%*';\n                  break;\n\n                case '/':\n                  out += '%/';\n                  break;\n\n                case '=':\n                  if (seenr) {\n                    if (param === 1) {\n                      onstack = 2;\n                    } else if (param === 2) {\n                      onstack = 1;\n                    } else {\n                      onstack = param;\n                    }\n                  } else {\n                    onstack = param;\n                  }\n\n                  break;\n              }\n\n              i += l;\n              break;\n            }\n\n            getparm(param, 1);\n            i += cvtchar(s);\n            out += '%+';\n            break;\n\n          case '+':\n            getparm(param, 1);\n            i += cvtchar(s);\n            out += '%+%c';\n            pop();\n            break;\n\n          case 's':\n            // #ifdef WATERLOO\n            //          i += cvtchar(s);\n            //          getparm(param, 1);\n            //          out += '%-';\n            // #else\n            getparm(param, 1);\n            out += '%s';\n            pop(); // #endif /* WATERLOO */\n\n            break;\n\n          case '-':\n            i += cvtchar(s);\n            getparm(param, 1);\n            out += '%-%c';\n            pop();\n            break;\n\n          case '.':\n            getparm(param, 1);\n            out += '%c';\n            pop();\n            break;\n\n          case '0':\n            // not clear any of the historical termcaps did this\n            if (s[i] === '3') {\n              see03(); // goto\n\n              break;\n            } else if (s[i] !== '2') {\n              invalid(); // goto\n\n              break;\n            }\n\n          // FALLTHRU\n\n          case '2':\n            getparm(param, 1);\n            out += '%2d';\n            pop();\n            break;\n\n          case '3':\n            see03();\n            break;\n\n          case 'd':\n            getparm(param, 1);\n            out += '%d';\n            pop();\n            break;\n\n          case 'f':\n            param++;\n            break;\n\n          case 'b':\n            param--;\n            break;\n\n          case '\\\\':\n            out += '%\\\\';\n            break;\n\n          default:\n            invalid();\n            break;\n        }\n\n        break;\n      // #ifdef REVISIBILIZE\n      //    case '\\\\':\n      //      out += s[i++];\n      //      out += s[i++];\n      //      break;\n      //    case '\\n':\n      //      out += '\\\\n';\n      //      i++;\n      //      break;\n      //    case '\\t':\n      //      out += '\\\\t';\n      //      i++;\n      //      break;\n      //    case '\\r':\n      //      out += '\\\\r';\n      //      i++;\n      //      break;\n      //    case '\\200':\n      //      out += '\\\\0';\n      //      i++;\n      //      break;\n      //    case '\\f':\n      //      out += '\\\\f';\n      //      i++;\n      //      break;\n      //    case '\\b':\n      //      out += '\\\\b';\n      //      i++;\n      //      break;\n      //    case ' ':\n      //      out += '\\\\s';\n      //      i++;\n      //      break;\n      //    case '^':\n      //      out += '\\\\^';\n      //      i++;\n      //      break;\n      //    case ':':\n      //      out += '\\\\:';\n      //      i++;\n      //      break;\n      //    case ',':\n      //      out += '\\\\,';\n      //      i++;\n      //      break;\n      //    default:\n      //      if (s[i] === '\\033') {\n      //        out += '\\\\E';\n      //        i++;\n      //      } else if (s[i].charCodeAt(0) > 0 && s[i].charCodeAt(0) < 32) {\n      //        out += '^';\n      //        out += String.fromCharCode(s[i].charCodeAt(0) + '@'.charCodeAt(0));\n      //        i++;\n      //      } else if (s[i].charCodeAt(0) <= 0 || s[i].charCodeAt(0) >= 127) {\n      //        out += '\\\\';\n      //        out += String.fromCharCode(\n      //          ((s[i].charCodeAt(0) & 0300) >> 6) + '0'.charCodeAt(0));\n      //        out += String.fromCharCode(\n      //          ((s[i].charCodeAt(0) & 0070) >> 3) + '0'.charCodeAt(0));\n      //        out += String.fromCharCode(\n      //          (s[i].charCodeAt(0) & 0007) + '0'.charCodeAt(0));\n      //        i++;\n      //      } else {\n      //        out += s[i++];\n      //      }\n      //      break;\n      // #else\n\n      default:\n        out += s[i++];\n        break;\n      // #endif\n    }\n  } // Now, if we stripped off some leading padding, add it at the end\n  // of the string as mandatory padding.\n\n\n  if (capstart != null) {\n    out += '$<';\n\n    for (i = capstart;; i++) {\n      if (isdigit(s[i]) || s[i] === '*' || s[i] === '.') {\n        out += s[i];\n      } else {\n        break;\n      }\n    }\n\n    out += '/>';\n  }\n\n  if (s !== out) {\n    warn('Translating %s from %s to %s.', cap, JSON.stringify(s), JSON.stringify(out));\n  }\n\n  return out;\n};\n/**\n * Compile All Terminfo\n */\n\n\nTput.prototype.getAll = function () {\n  var dir = this._prefix(),\n      list = asort(fs.readdirSync(dir)),\n      infos = [];\n\n  list.forEach(function (letter) {\n    var terms = asort(fs.readdirSync(path.resolve(dir, letter)));\n    infos.push.apply(infos, terms);\n  });\n\n  function asort(obj) {\n    return obj.sort(function (a, b) {\n      a = a.toLowerCase().charCodeAt(0);\n      b = b.toLowerCase().charCodeAt(0);\n      return a - b;\n    });\n  }\n\n  return infos;\n};\n\nTput.prototype.compileAll = function (start) {\n  var self = this,\n      all = {};\n  this.getAll().forEach(function (name) {\n    if (start && name !== start) {\n      return;\n    } else {\n      start = null;\n    }\n\n    all[name] = self.compileTerminfo(name);\n  });\n  return all;\n};\n/**\n * Detect Features / Quirks\n */\n\n\nTput.prototype.detectFeatures = function (info) {\n  var data = this.parseACS(info);\n  info.features = {\n    unicode: this.detectUnicode(info),\n    brokenACS: this.detectBrokenACS(info),\n    PCRomSet: this.detectPCRomSet(info),\n    magicCookie: this.detectMagicCookie(info),\n    padding: this.detectPadding(info),\n    setbuf: this.detectSetbuf(info),\n    acsc: data.acsc,\n    acscr: data.acscr\n  };\n  return info.features;\n};\n\nTput.prototype.detectUnicode = function () {\n  if (this.options.forceUnicode != null) {\n    return this.options.forceUnicode;\n  }\n\n  var LANG = process.env.LANG + ':' + process.env.LANGUAGE + ':' + process.env.LC_ALL + ':' + process.env.LC_CTYPE;\n  return /utf-?8/i.test(LANG) || this.GetConsoleCP() === 65001;\n}; // For some reason TERM=linux has smacs/rmacs, but it maps to `^[[11m`\n// and it does not switch to the DEC SCLD character set. What the hell?\n// xterm: \\x1b(0, screen: \\x0e, linux: \\x1b[11m (doesn't work)\n// `man console_codes` says:\n// 11  select null mapping, set display control flag, reset tog‐\n//     gle meta flag (ECMA-48 says \"first alternate font\").\n// See ncurses:\n// ~/ncurses/ncurses/base/lib_set_term.c\n// ~/ncurses/ncurses/tinfo/lib_acs.c\n// ~/ncurses/ncurses/tinfo/tinfo_driver.c\n// ~/ncurses/ncurses/tinfo/lib_setup.c\n\n\nTput.prototype.detectBrokenACS = function (info) {\n  // ncurses-compatible env variable.\n  if (process.env.NCURSES_NO_UTF8_ACS != null) {\n    return !!+process.env.NCURSES_NO_UTF8_ACS;\n  } // If the terminal supports unicode, we don't need ACS.\n\n\n  if (info.numbers.U8 >= 0) {\n    return !!info.numbers.U8;\n  } // The linux console is just broken for some reason.\n  // Apparently the Linux console does not support ACS,\n  // but it does support the PC ROM character set.\n\n\n  if (info.name === 'linux') {\n    return true;\n  } // PC alternate charset\n  // if (acsc.indexOf('+\\x10,\\x11-\\x18.\\x190') === 0) {\n\n\n  if (this.detectPCRomSet(info)) {\n    return true;\n  } // screen termcap is bugged?\n\n\n  if (this.termcap && info.name.indexOf('screen') === 0 && process.env.TERMCAP && ~process.env.TERMCAP.indexOf('screen') && ~process.env.TERMCAP.indexOf('hhII00')) {\n    if (~info.strings.enter_alt_charset_mode.indexOf('\\016') || ~info.strings.enter_alt_charset_mode.indexOf('\\017') || ~info.strings.set_attributes.indexOf('\\016') || ~info.strings.set_attributes.indexOf('\\017')) {\n      return true;\n    }\n  }\n\n  return false;\n}; // If enter_pc_charset is the same as enter_alt_charset,\n// the terminal does not support SCLD as ACS.\n// See: ~/ncurses/ncurses/tinfo/lib_acs.c\n\n\nTput.prototype.detectPCRomSet = function (info) {\n  var s = info.strings;\n\n  if (s.enter_pc_charset_mode && s.enter_alt_charset_mode && s.enter_pc_charset_mode === s.enter_alt_charset_mode && s.exit_pc_charset_mode === s.exit_alt_charset_mode) {\n    return true;\n  }\n\n  return false;\n};\n\nTput.prototype.detectMagicCookie = function () {\n  return process.env.NCURSES_NO_MAGIC_COOKIE == null;\n};\n\nTput.prototype.detectPadding = function () {\n  return process.env.NCURSES_NO_PADDING == null;\n};\n\nTput.prototype.detectSetbuf = function () {\n  return process.env.NCURSES_NO_SETBUF == null;\n};\n\nTput.prototype.parseACS = function (info) {\n  var data = {};\n  data.acsc = {};\n  data.acscr = {}; // Possibly just return an empty object, as done here, instead of\n  // specifically saying ACS is \"broken\" above. This would be more\n  // accurate to ncurses logic. But it doesn't really matter.\n\n  if (this.detectPCRomSet(info)) {\n    return data;\n  } // See: ~/ncurses/ncurses/tinfo/lib_acs.c: L208\n\n\n  Object.keys(Tput.acsc).forEach(function (ch) {\n    var acs_chars = info.strings.acs_chars || '',\n        i = acs_chars.indexOf(ch),\n        next = acs_chars[i + 1];\n\n    if (!next || i === -1 || !Tput.acsc[next]) {\n      return;\n    }\n\n    data.acsc[ch] = Tput.acsc[next];\n    data.acscr[Tput.acsc[next]] = ch;\n  });\n  return data;\n};\n\nTput.prototype.GetConsoleCP = function () {\n  var ccp;\n\n  if (process.platform !== 'win32') {\n    return -1;\n  } // Allow unicode on all windows consoles for now:\n\n\n  if (+process.env.NCURSES_UNICODE !== 0) {\n    return 65001;\n  } // cp.execSync('chcp 65001', { stdio: 'ignore', timeout: 1500 });\n\n\n  try {\n    // Produces something like: 'Active code page: 437\\n\\n'\n    ccp = cp.execFileSync(process.env.WINDIR + '\\\\system32\\\\chcp.com', [], {\n      stdio: ['ignore', 'pipe', 'ignore'],\n      encoding: 'ascii',\n      timeout: 1500\n    }); // ccp = cp.execSync('chcp', {\n    //   stdio: ['ignore', 'pipe', 'ignore'],\n    //   encoding: 'ascii',\n    //   timeout: 1500\n    // });\n  } catch (e) {\n    ;\n  }\n\n  ccp = /\\d+/.exec(ccp);\n\n  if (!ccp) {\n    return -1;\n  }\n\n  ccp = +ccp[0];\n  return ccp;\n};\n/**\n * Helpers\n */\n\n\nfunction noop() {\n  return '';\n}\n\nnoop.unsupported = true;\n\nfunction merge(a, b) {\n  Object.keys(b).forEach(function (key) {\n    a[key] = b[key];\n  });\n  return a;\n}\n\nfunction write(data) {\n  return process.stdout.write(data);\n}\n\nfunction tryRead(file) {\n  if (Array.isArray(file)) {\n    for (var i = 0; i < file.length; i++) {\n      var data = tryRead(file[i]);\n      if (data) return data;\n    }\n\n    return '';\n  }\n\n  if (!file) return '';\n  file = path.resolve.apply(path, arguments);\n\n  try {\n    return fs.readFileSync(file, 'utf8');\n  } catch (e) {\n    return '';\n  }\n}\n/**\n * sprintf\n *  http://www.cplusplus.com/reference/cstdio/printf/\n */\n\n\nfunction sprintf(src) {\n  var params = Array.prototype.slice.call(arguments, 1),\n      rule = /%([\\-+# ]{1,4})?(\\d+(?:\\.\\d+)?)?([doxXsc])/g,\n      i = 0;\n  return src.replace(rule, function (_, flag, width, type) {\n    var flags = (flag || '').split(''),\n        param = params[i] != null ? params[i] : '',\n        initial = param // , width = +width\n    ,\n        opt = {},\n        pre = '';\n    i++;\n\n    switch (type) {\n      case 'd':\n        // signed int\n        param = (+param).toString(10);\n        break;\n\n      case 'o':\n        // unsigned octal\n        param = (+param).toString(8);\n        break;\n\n      case 'x':\n        // unsigned hex int\n        param = (+param).toString(16);\n        break;\n\n      case 'X':\n        // unsigned hex int uppercase\n        param = (+param).toString(16).toUppercase();\n        break;\n\n      case 's':\n        // string\n        break;\n\n      case 'c':\n        // char\n        param = isFinite(param) ? String.fromCharCode(param || 0200) : '';\n        break;\n    }\n\n    flags.forEach(function (flag) {\n      switch (flag) {\n        // left-justify by width\n        case '-':\n          opt.left = true;\n          break;\n        // always precede numbers with their signs\n\n        case '+':\n          opt.signs = true;\n          break;\n        // used with o, x, X - value is preceded with 0, 0x, or 0X respectively.\n        // used with a, A, e, E, f, F, g, G - forces written output to contain\n        // a decimal point even if no more digits follow\n\n        case '#':\n          opt.hexpoint = true;\n          break;\n        // if no sign is going to be written, black space in front of the value\n\n        case ' ':\n          opt.space = true;\n          break;\n      }\n    });\n    width = +width.split('.')[0]; // Should this be for opt.left too?\n    // Example: %2.2X - turns 0 into 00\n\n    if (width && !opt.left) {\n      param = param + '';\n\n      while (param.length < width) {\n        param = '0' + param;\n      }\n    }\n\n    if (opt.signs) {\n      if (+initial >= 0) {\n        pre += '+';\n      }\n    }\n\n    if (opt.space) {\n      if (!opt.signs && +initial >= 0) {\n        pre += ' ';\n      }\n    }\n\n    if (opt.hexpoint) {\n      switch (type) {\n        case 'o':\n          // unsigned octal\n          pre += '0';\n          break;\n\n        case 'x':\n          // unsigned hex int\n          pre += '0x';\n          break;\n\n        case 'X':\n          // unsigned hex int uppercase\n          pre += '0X';\n          break;\n      }\n    }\n\n    if (opt.left) {\n      if (width > pre.length + param.length) {\n        width -= pre.length + param.length;\n        pre = Array(width + 1).join(' ') + pre;\n      }\n    }\n\n    return pre + param;\n  });\n}\n/**\n * Aliases\n */\n\n\nTput._alias = require('./alias');\nTput.alias = {};\n['bools', 'numbers', 'strings'].forEach(function (type) {\n  Object.keys(Tput._alias[type]).forEach(function (key) {\n    var aliases = Tput._alias[type][key];\n    Tput.alias[key] = [aliases[0]];\n    Tput.alias[key].terminfo = aliases[0];\n    Tput.alias[key].termcap = aliases[1];\n  });\n}); // Bools\n\nTput.alias.no_esc_ctlc.push('beehive_glitch');\nTput.alias.dest_tabs_magic_smso.push('teleray_glitch'); // Numbers\n\nTput.alias.micro_col_size.push('micro_char_size');\n/**\n * Feature Checking\n */\n\nTput.aliasMap = {};\nObject.keys(Tput.alias).forEach(function (key) {\n  Tput.aliasMap[key] = key;\n  Tput.alias[key].forEach(function (k) {\n    Tput.aliasMap[k] = key;\n  });\n});\n\nTput.prototype.has = function (name) {\n  name = Tput.aliasMap[name];\n  var val = this.all[name];\n  if (!name) return false;\n\n  if (typeof val === 'number') {\n    return val !== -1;\n  }\n\n  return !!val;\n};\n/**\n * Fallback Termcap Entry\n */\n\n\nTput.termcap = '' + 'vt102|dec vt102:' + ':do=^J:co#80:li#24:cl=50\\\\E[;H\\\\E[2J:' + ':le=^H:bs:cm=5\\\\E[%i%d;%dH:nd=2\\\\E[C:up=2\\\\E[A:' + ':ce=3\\\\E[K:cd=50\\\\E[J:so=2\\\\E[7m:se=2\\\\E[m:us=2\\\\E[4m:ue=2\\\\E[m:' + ':md=2\\\\E[1m:mr=2\\\\E[7m:mb=2\\\\E[5m:me=2\\\\E[m:is=\\\\E[1;24r\\\\E[24;1H:' + ':rs=\\\\E>\\\\E[?3l\\\\E[?4l\\\\E[?5l\\\\E[?7h\\\\E[?8h:ks=\\\\E[?1h\\\\E=:ke=\\\\E[?1l\\\\E>:' + ':ku=\\\\EOA:kd=\\\\EOB:kr=\\\\EOC:kl=\\\\EOD:kb=^H:\\\\\\n' + ':ho=\\\\E[H:k1=\\\\EOP:k2=\\\\EOQ:k3=\\\\EOR:k4=\\\\EOS:pt:sr=5\\\\EM:vt#3:' + ':sc=\\\\E7:rc=\\\\E8:cs=\\\\E[%i%d;%dr:vs=\\\\E[?7l:ve=\\\\E[?7h:' + ':mi:al=\\\\E[L:dc=\\\\E[P:dl=\\\\E[M:ei=\\\\E[4l:im=\\\\E[4h:';\n/**\n * Terminfo Data\n */\n\nTput.bools = ['auto_left_margin', 'auto_right_margin', 'no_esc_ctlc', 'ceol_standout_glitch', 'eat_newline_glitch', 'erase_overstrike', 'generic_type', 'hard_copy', 'has_meta_key', 'has_status_line', 'insert_null_glitch', 'memory_above', 'memory_below', 'move_insert_mode', 'move_standout_mode', 'over_strike', 'status_line_esc_ok', 'dest_tabs_magic_smso', 'tilde_glitch', 'transparent_underline', 'xon_xoff', 'needs_xon_xoff', 'prtr_silent', 'hard_cursor', 'non_rev_rmcup', 'no_pad_char', 'non_dest_scroll_region', 'can_change', 'back_color_erase', 'hue_lightness_saturation', 'col_addr_glitch', 'cr_cancels_micro_mode', 'has_print_wheel', 'row_addr_glitch', 'semi_auto_right_margin', 'cpi_changes_res', 'lpi_changes_res', // #ifdef __INTERNAL_CAPS_VISIBLE\n'backspaces_with_bs', 'crt_no_scrolling', 'no_correctly_working_cr', 'gnu_has_meta_key', 'linefeed_is_newline', 'has_hardware_tabs', 'return_does_clr_eol'];\nTput.numbers = ['columns', 'init_tabs', 'lines', 'lines_of_memory', 'magic_cookie_glitch', 'padding_baud_rate', 'virtual_terminal', 'width_status_line', 'num_labels', 'label_height', 'label_width', 'max_attributes', 'maximum_windows', 'max_colors', 'max_pairs', 'no_color_video', 'buffer_capacity', 'dot_vert_spacing', 'dot_horz_spacing', 'max_micro_address', 'max_micro_jump', 'micro_col_size', 'micro_line_size', 'number_of_pins', 'output_res_char', 'output_res_line', 'output_res_horz_inch', 'output_res_vert_inch', 'print_rate', 'wide_char_size', 'buttons', 'bit_image_entwining', 'bit_image_type', // #ifdef __INTERNAL_CAPS_VISIBLE\n'magic_cookie_glitch_ul', 'carriage_return_delay', 'new_line_delay', 'backspace_delay', 'horizontal_tab_delay', 'number_of_function_keys'];\nTput.strings = ['back_tab', 'bell', 'carriage_return', 'change_scroll_region', 'clear_all_tabs', 'clear_screen', 'clr_eol', 'clr_eos', 'column_address', 'command_character', 'cursor_address', 'cursor_down', 'cursor_home', 'cursor_invisible', 'cursor_left', 'cursor_mem_address', 'cursor_normal', 'cursor_right', 'cursor_to_ll', 'cursor_up', 'cursor_visible', 'delete_character', 'delete_line', 'dis_status_line', 'down_half_line', 'enter_alt_charset_mode', 'enter_blink_mode', 'enter_bold_mode', 'enter_ca_mode', 'enter_delete_mode', 'enter_dim_mode', 'enter_insert_mode', 'enter_secure_mode', 'enter_protected_mode', 'enter_reverse_mode', 'enter_standout_mode', 'enter_underline_mode', 'erase_chars', 'exit_alt_charset_mode', 'exit_attribute_mode', 'exit_ca_mode', 'exit_delete_mode', 'exit_insert_mode', 'exit_standout_mode', 'exit_underline_mode', 'flash_screen', 'form_feed', 'from_status_line', 'init_1string', 'init_2string', 'init_3string', 'init_file', 'insert_character', 'insert_line', 'insert_padding', 'key_backspace', 'key_catab', 'key_clear', 'key_ctab', 'key_dc', 'key_dl', 'key_down', 'key_eic', 'key_eol', 'key_eos', 'key_f0', 'key_f1', 'key_f10', 'key_f2', 'key_f3', 'key_f4', 'key_f5', 'key_f6', 'key_f7', 'key_f8', 'key_f9', 'key_home', 'key_ic', 'key_il', 'key_left', 'key_ll', 'key_npage', 'key_ppage', 'key_right', 'key_sf', 'key_sr', 'key_stab', 'key_up', 'keypad_local', 'keypad_xmit', 'lab_f0', 'lab_f1', 'lab_f10', 'lab_f2', 'lab_f3', 'lab_f4', 'lab_f5', 'lab_f6', 'lab_f7', 'lab_f8', 'lab_f9', 'meta_off', 'meta_on', 'newline', 'pad_char', 'parm_dch', 'parm_delete_line', 'parm_down_cursor', 'parm_ich', 'parm_index', 'parm_insert_line', 'parm_left_cursor', 'parm_right_cursor', 'parm_rindex', 'parm_up_cursor', 'pkey_key', 'pkey_local', 'pkey_xmit', 'print_screen', 'prtr_off', 'prtr_on', 'repeat_char', 'reset_1string', 'reset_2string', 'reset_3string', 'reset_file', 'restore_cursor', 'row_address', 'save_cursor', 'scroll_forward', 'scroll_reverse', 'set_attributes', 'set_tab', 'set_window', 'tab', 'to_status_line', 'underline_char', 'up_half_line', 'init_prog', 'key_a1', 'key_a3', 'key_b2', 'key_c1', 'key_c3', 'prtr_non', 'char_padding', 'acs_chars', 'plab_norm', 'key_btab', 'enter_xon_mode', 'exit_xon_mode', 'enter_am_mode', 'exit_am_mode', 'xon_character', 'xoff_character', 'ena_acs', 'label_on', 'label_off', 'key_beg', 'key_cancel', 'key_close', 'key_command', 'key_copy', 'key_create', 'key_end', 'key_enter', 'key_exit', 'key_find', 'key_help', 'key_mark', 'key_message', 'key_move', 'key_next', 'key_open', 'key_options', 'key_previous', 'key_print', 'key_redo', 'key_reference', 'key_refresh', 'key_replace', 'key_restart', 'key_resume', 'key_save', 'key_suspend', 'key_undo', 'key_sbeg', 'key_scancel', 'key_scommand', 'key_scopy', 'key_screate', 'key_sdc', 'key_sdl', 'key_select', 'key_send', 'key_seol', 'key_sexit', 'key_sfind', 'key_shelp', 'key_shome', 'key_sic', 'key_sleft', 'key_smessage', 'key_smove', 'key_snext', 'key_soptions', 'key_sprevious', 'key_sprint', 'key_sredo', 'key_sreplace', 'key_sright', 'key_srsume', 'key_ssave', 'key_ssuspend', 'key_sundo', 'req_for_input', 'key_f11', 'key_f12', 'key_f13', 'key_f14', 'key_f15', 'key_f16', 'key_f17', 'key_f18', 'key_f19', 'key_f20', 'key_f21', 'key_f22', 'key_f23', 'key_f24', 'key_f25', 'key_f26', 'key_f27', 'key_f28', 'key_f29', 'key_f30', 'key_f31', 'key_f32', 'key_f33', 'key_f34', 'key_f35', 'key_f36', 'key_f37', 'key_f38', 'key_f39', 'key_f40', 'key_f41', 'key_f42', 'key_f43', 'key_f44', 'key_f45', 'key_f46', 'key_f47', 'key_f48', 'key_f49', 'key_f50', 'key_f51', 'key_f52', 'key_f53', 'key_f54', 'key_f55', 'key_f56', 'key_f57', 'key_f58', 'key_f59', 'key_f60', 'key_f61', 'key_f62', 'key_f63', 'clr_bol', 'clear_margins', 'set_left_margin', 'set_right_margin', 'label_format', 'set_clock', 'display_clock', 'remove_clock', 'create_window', 'goto_window', 'hangup', 'dial_phone', 'quick_dial', 'tone', 'pulse', 'flash_hook', 'fixed_pause', 'wait_tone', 'user0', 'user1', 'user2', 'user3', 'user4', 'user5', 'user6', 'user7', 'user8', 'user9', 'orig_pair', 'orig_colors', 'initialize_color', 'initialize_pair', 'set_color_pair', 'set_foreground', 'set_background', 'change_char_pitch', 'change_line_pitch', 'change_res_horz', 'change_res_vert', 'define_char', 'enter_doublewide_mode', 'enter_draft_quality', 'enter_italics_mode', 'enter_leftward_mode', 'enter_micro_mode', 'enter_near_letter_quality', 'enter_normal_quality', 'enter_shadow_mode', 'enter_subscript_mode', 'enter_superscript_mode', 'enter_upward_mode', 'exit_doublewide_mode', 'exit_italics_mode', 'exit_leftward_mode', 'exit_micro_mode', 'exit_shadow_mode', 'exit_subscript_mode', 'exit_superscript_mode', 'exit_upward_mode', 'micro_column_address', 'micro_down', 'micro_left', 'micro_right', 'micro_row_address', 'micro_up', 'order_of_pins', 'parm_down_micro', 'parm_left_micro', 'parm_right_micro', 'parm_up_micro', 'select_char_set', 'set_bottom_margin', 'set_bottom_margin_parm', 'set_left_margin_parm', 'set_right_margin_parm', 'set_top_margin', 'set_top_margin_parm', 'start_bit_image', 'start_char_set_def', 'stop_bit_image', 'stop_char_set_def', 'subscript_characters', 'superscript_characters', 'these_cause_cr', 'zero_motion', 'char_set_names', 'key_mouse', 'mouse_info', 'req_mouse_pos', 'get_mouse', 'set_a_foreground', 'set_a_background', 'pkey_plab', 'device_type', 'code_set_init', 'set0_des_seq', 'set1_des_seq', 'set2_des_seq', 'set3_des_seq', 'set_lr_margin', 'set_tb_margin', 'bit_image_repeat', 'bit_image_newline', 'bit_image_carriage_return', 'color_names', 'define_bit_image_region', 'end_bit_image_region', 'set_color_band', 'set_page_length', 'display_pc_char', 'enter_pc_charset_mode', 'exit_pc_charset_mode', 'enter_scancode_mode', 'exit_scancode_mode', 'pc_term_options', 'scancode_escape', 'alt_scancode_esc', 'enter_horizontal_hl_mode', 'enter_left_hl_mode', 'enter_low_hl_mode', 'enter_right_hl_mode', 'enter_top_hl_mode', 'enter_vertical_hl_mode', 'set_a_attributes', 'set_pglen_inch', // #ifdef __INTERNAL_CAPS_VISIBLE\n'termcap_init2', 'termcap_reset', 'linefeed_if_not_lf', 'backspace_if_not_bs', 'other_non_function_keys', 'arrow_key_map', 'acs_ulcorner', 'acs_llcorner', 'acs_urcorner', 'acs_lrcorner', 'acs_ltee', 'acs_rtee', 'acs_btee', 'acs_ttee', 'acs_hline', 'acs_vline', 'acs_plus', 'memory_lock', 'memory_unlock', 'box_chars_1']; // DEC Special Character and Line Drawing Set.\n// Taken from tty.js.\n\nTput.acsc = {\n  // (0\n  '`': '\\u25c6',\n  // '◆'\n  'a': '\\u2592',\n  // '▒'\n  'b': '\\u0009',\n  // '\\t'\n  'c': '\\u000c',\n  // '\\f'\n  'd': '\\u000d',\n  // '\\r'\n  'e': '\\u000a',\n  // '\\n'\n  'f': '\\u00b0',\n  // '°'\n  'g': '\\u00b1',\n  // '±'\n  'h': '\\u2424',\n  // '\\u2424' (NL)\n  'i': '\\u000b',\n  // '\\v'\n  'j': '\\u2518',\n  // '┘'\n  'k': '\\u2510',\n  // '┐'\n  'l': '\\u250c',\n  // '┌'\n  'm': '\\u2514',\n  // '└'\n  'n': '\\u253c',\n  // '┼'\n  'o': '\\u23ba',\n  // '⎺'\n  'p': '\\u23bb',\n  // '⎻'\n  'q': '\\u2500',\n  // '─'\n  'r': '\\u23bc',\n  // '⎼'\n  's': '\\u23bd',\n  // '⎽'\n  't': '\\u251c',\n  // '├'\n  'u': '\\u2524',\n  // '┤'\n  'v': '\\u2534',\n  // '┴'\n  'w': '\\u252c',\n  // '┬'\n  'x': '\\u2502',\n  // '│'\n  'y': '\\u2264',\n  // '≤'\n  'z': '\\u2265',\n  // '≥'\n  '{': '\\u03c0',\n  // 'π'\n  '|': '\\u2260',\n  // '≠'\n  '}': '\\u00a3',\n  // '£'\n  '~': '\\u00b7' // '·'\n\n}; // Convert ACS unicode characters to the\n// most similar-looking ascii characters.\n\nTput.utoa = Tput.prototype.utoa = {\n  '\\u25c6': '*',\n  // '◆'\n  '\\u2592': ' ',\n  // '▒'\n  // '\\u0009': '\\t', // '\\t'\n  // '\\u000c': '\\f', // '\\f'\n  // '\\u000d': '\\r', // '\\r'\n  // '\\u000a': '\\n', // '\\n'\n  '\\u00b0': '*',\n  // '°'\n  '\\u00b1': '+',\n  // '±'\n  '\\u2424': '\\n',\n  // '\\u2424' (NL)\n  // '\\u000b': '\\v', // '\\v'\n  '\\u2518': '+',\n  // '┘'\n  '\\u2510': '+',\n  // '┐'\n  '\\u250c': '+',\n  // '┌'\n  '\\u2514': '+',\n  // '└'\n  '\\u253c': '+',\n  // '┼'\n  '\\u23ba': '-',\n  // '⎺'\n  '\\u23bb': '-',\n  // '⎻'\n  '\\u2500': '-',\n  // '─'\n  '\\u23bc': '-',\n  // '⎼'\n  '\\u23bd': '_',\n  // '⎽'\n  '\\u251c': '+',\n  // '├'\n  '\\u2524': '+',\n  // '┤'\n  '\\u2534': '+',\n  // '┴'\n  '\\u252c': '+',\n  // '┬'\n  '\\u2502': '|',\n  // '│'\n  '\\u2264': '<',\n  // '≤'\n  '\\u2265': '>',\n  // '≥'\n  '\\u03c0': '?',\n  // 'π'\n  '\\u2260': '=',\n  // '≠'\n  '\\u00a3': '?',\n  // '£'\n  '\\u00b7': '*' // '·'\n\n};\n/**\n * Expose\n */\n\nexports = Tput;\nexports.sprintf = sprintf;\nexports.tryRead = tryRead;\nmodule.exports = exports;","map":{"version":3,"sources":["/Users/samianki/node_modules/blessed/lib/tput.js"],"names":["assert","require","path","fs","cp","Tput","options","terminal","term","process","env","TERM","platform","toLowerCase","debug","padding","extended","printf","termcap","error","terminfoPrefix","terminfoFile","termcapFile","setup","prototype","injectTermcap","e","Error","_useInternalCap","injectTerminfo","_useInternalInfo","_useXtermInfo","is","indexOf","_debug","console","log","apply","arguments","_useVt102Cap","_useXtermCap","__dirname","name","basename","ipaths","TERMINFO","TERMINFO_DIRS","split","HOME","readTerminfo","data","file","info","normalize","_prefix","readFileSync","parseTerminfo","_terminfo","sep","paths","slice","unshift","_tprefix","prefix","soft","dir","i","sdiff","sfile","list","Array","isArray","length","find","word","ch","resolve","statSync","charCodeAt","toString","readdirSync","filter","test","forEach","diff","l","v","o","h","header","dataSize","headerSize","magicNumber","namesSize","boolCount","numCount","strCount","strTableSize","total","names","parts","desc","pop","equal","bools","numbers","strings","Object","keys","key","s","j","parseExtended","merge","lastStrTableOffset","_bools","push","_numbers","_strings","high","offset","k","sym","bool","number","string","compileTerminfo","compile","inject","self","detectFeatures","all","methods","type","_compile","noop","alias","args","call","features","str","JSON","stringify","replace","stdout","write","tkey","footer","code","val","buff","cap","fi","then","els","end","read","regex","no","exec","substring","clear","stmt","c","expr","echo","print","String","fromCharCode","parseInt","Infinity","Function","bind","sprintf","stack","_print","done","xon","needs_xon_xoff","xon_xoff","next","part","amount","suffix","setTimeout","fake","cpaths","TERMCAP","TERMPATH","readTermcap","terms","term_","root","_tryCap","_termcap","tc","inherits","join","inherit","translateTermcap","tryRead","parseTermcap","entries","fields","field","trim","out","map","aliases","_captoinfo","compileTermcap","parameterized","capstart","MAX_PUSHED","stackptr","onstack","seenm","seenn","seenr","param","warn","isdigit","isgraph","cvtchar","sp","len","getparm","parm","n","see03","invalid","getAll","asort","infos","letter","obj","sort","a","b","compileAll","start","parseACS","unicode","detectUnicode","brokenACS","detectBrokenACS","PCRomSet","detectPCRomSet","magicCookie","detectMagicCookie","detectPadding","setbuf","detectSetbuf","acsc","acscr","forceUnicode","LANG","LANGUAGE","LC_ALL","LC_CTYPE","GetConsoleCP","NCURSES_NO_UTF8_ACS","U8","enter_alt_charset_mode","set_attributes","enter_pc_charset_mode","exit_pc_charset_mode","exit_alt_charset_mode","NCURSES_NO_MAGIC_COOKIE","NCURSES_NO_PADDING","NCURSES_NO_SETBUF","acs_chars","ccp","NCURSES_UNICODE","execFileSync","WINDIR","stdio","encoding","timeout","unsupported","src","params","rule","_","flag","width","flags","initial","opt","pre","toUppercase","isFinite","left","signs","hexpoint","space","_alias","terminfo","no_esc_ctlc","dest_tabs_magic_smso","micro_col_size","aliasMap","has","utoa","exports","module"],"mappings":"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","sourcesContent":["/**\n * tput.js - parse and compile terminfo caps to javascript.\n * Copyright (c) 2013-2015, Christopher Jeffrey and contributors (MIT License).\n * https://github.com/chjj/blessed\n */\n\n// Resources:\n//   $ man term\n//   $ man terminfo\n//   http://invisible-island.net/ncurses/man/term.5.html\n//   https://en.wikipedia.org/wiki/Terminfo\n\n// Todo:\n// - xterm's XT (set-title capability?) value should\n//   be true (at least tmux thinks it should).\n//   It's not parsed as true. Investigate.\n// - Possibly switch to other method of finding the\n//   extended data string table: i += h.symOffsetCount * 2;\n\n/**\n * Modules\n */\n\nvar assert = require('assert')\n  , path = require('path')\n  , fs = require('fs')\n  , cp = require('child_process');\n\n/**\n * Tput\n */\n\nfunction Tput(options) {\n  if (!(this instanceof Tput)) {\n    return new Tput(options);\n  }\n\n  options = options || {};\n  if (typeof options === 'string') {\n    options = { terminal: options };\n  }\n\n  this.options = options;\n  this.terminal = options.terminal\n    || options.term\n    || process.env.TERM\n    || (process.platform === 'win32' ? 'windows-ansi' : 'xterm');\n\n  this.terminal = this.terminal.toLowerCase();\n\n  this.debug = options.debug;\n  this.padding = options.padding;\n  this.extended = options.extended;\n  this.printf = options.printf;\n  this.termcap = options.termcap;\n  this.error = null;\n\n  this.terminfoPrefix = options.terminfoPrefix;\n  this.terminfoFile = options.terminfoFile;\n  this.termcapFile = options.termcapFile;\n\n  if (options.terminal || options.term) {\n    this.setup();\n  }\n}\n\nTput.prototype.setup = function() {\n  this.error = null;\n  try {\n    if (this.termcap) {\n      try {\n        this.injectTermcap();\n      } catch (e) {\n        if (this.debug) throw e;\n        this.error = new Error('Termcap parse error.');\n        this._useInternalCap(this.terminal);\n      }\n    } else {\n      try {\n        this.injectTerminfo();\n      } catch (e) {\n        if (this.debug) throw e;\n        this.error = new Error('Terminfo parse error.');\n        this._useInternalInfo(this.terminal);\n      }\n    }\n  } catch (e) {\n    // If there was an error, fallback\n    // to an internally stored terminfo/cap.\n    if (this.debug) throw e;\n    this.error = new Error('Terminfo not found.');\n    this._useXtermInfo();\n  }\n};\n\nTput.prototype.term = function(is) {\n  return this.terminal.indexOf(is) === 0;\n};\n\nTput.prototype._debug = function() {\n  if (!this.debug) return;\n  return console.log.apply(console, arguments);\n};\n\n/**\n * Fallback\n */\n\nTput.prototype._useVt102Cap = function() {\n  return this.injectTermcap('vt102');\n};\n\nTput.prototype._useXtermCap = function() {\n  return this.injectTermcap(__dirname + '/../usr/xterm.termcap');\n};\n\nTput.prototype._useXtermInfo = function() {\n  return this.injectTerminfo(__dirname + '/../usr/xterm');\n};\n\nTput.prototype._useInternalInfo = function(name) {\n  name = path.basename(name);\n  return this.injectTerminfo(__dirname + '/../usr/' + name);\n};\n\nTput.prototype._useInternalCap = function(name) {\n  name = path.basename(name);\n  return this.injectTermcap(__dirname + '/../usr/' + name + '.termcap');\n};\n\n/**\n * Terminfo\n */\n\nTput.ipaths = [\n  process.env.TERMINFO || '',\n  (process.env.TERMINFO_DIRS || '').split(':'),\n  (process.env.HOME || '') + '/.terminfo',\n  '/usr/share/terminfo',\n  '/usr/share/lib/terminfo',\n  '/usr/lib/terminfo',\n  '/usr/local/share/terminfo',\n  '/usr/local/share/lib/terminfo',\n  '/usr/local/lib/terminfo',\n  '/usr/local/ncurses/lib/terminfo',\n  '/lib/terminfo'\n];\n\nTput.prototype.readTerminfo = function(term) {\n  var data\n    , file\n    , info;\n\n  term = term || this.terminal;\n\n  file = path.normalize(this._prefix(term));\n  data = fs.readFileSync(file);\n  info = this.parseTerminfo(data, file);\n\n  if (this.debug) {\n    this._terminfo = info;\n  }\n\n  return info;\n};\n\nTput._prefix =\nTput.prototype._prefix = function(term) {\n  // If we have a terminfoFile, or our\n  // term looks like a filename, use it.\n  if (term) {\n    if (~term.indexOf(path.sep)) {\n      return term;\n    }\n    if (this.terminfoFile) {\n      return this.terminfoFile;\n    }\n  }\n\n  var paths = Tput.ipaths.slice()\n    , file;\n\n  if (this.terminfoPrefix) {\n    paths.unshift(this.terminfoPrefix);\n  }\n\n  // Try exact matches.\n  file = this._tprefix(paths, term);\n  if (file) return file;\n\n  // Try similar matches.\n  file = this._tprefix(paths, term, true);\n  if (file) return file;\n\n  // Not found.\n  throw new Error('Terminfo directory not found.');\n};\n\nTput._tprefix =\nTput.prototype._tprefix = function(prefix, term, soft) {\n  if (!prefix) return;\n\n  var file\n    , dir\n    , i\n    , sdiff\n    , sfile\n    , list;\n\n  if (Array.isArray(prefix)) {\n    for (i = 0; i < prefix.length; i++) {\n      file = this._tprefix(prefix[i], term, soft);\n      if (file) return file;\n    }\n    return;\n  }\n\n  var find = function(word) {\n    var file, ch;\n\n    file = path.resolve(prefix, word[0]);\n    try {\n      fs.statSync(file);\n      return file;\n    } catch (e) {\n      ;\n    }\n\n    ch = word[0].charCodeAt(0).toString(16);\n    if (ch.length < 2) ch = '0' + ch;\n\n    file = path.resolve(prefix, ch);\n    try {\n      fs.statSync(file);\n      return file;\n    } catch (e) {\n      ;\n    }\n  };\n\n  if (!term) {\n    // Make sure the directory's sub-directories\n    // are all one-letter, or hex digits.\n    // return find('x') ? prefix : null;\n    try {\n      dir = fs.readdirSync(prefix).filter(function(file) {\n        return file.length !== 1 && !/^[0-9a-fA-F]{2}$/.test(file);\n      });\n      if (!dir.length) {\n        return prefix;\n      }\n    } catch (e) {\n      ;\n    }\n    return;\n  }\n\n  term = path.basename(term);\n  dir = find(term);\n\n  if (!dir) return;\n\n  if (soft) {\n    try {\n      list = fs.readdirSync(dir);\n    } catch (e) {\n      return;\n    }\n\n    list.forEach(function(file) {\n      if (file.indexOf(term) === 0) {\n        var diff = file.length - term.length;\n        if (!sfile || diff < sdiff) {\n          sdiff = diff;\n          sfile = file;\n        }\n      }\n    });\n\n    return sfile && (soft || sdiff === 0)\n      ? path.resolve(dir, sfile)\n      : null;\n  }\n\n  file = path.resolve(dir, term);\n  try {\n    fs.statSync(file);\n    return file;\n  } catch (e) {\n    ;\n  }\n};\n\n/**\n * Terminfo Parser\n * All shorts are little-endian\n */\n\nTput.prototype.parseTerminfo = function(data, file) {\n  var info = {}\n    , extended\n    , l = data.length\n    , i = 0\n    , v\n    , o;\n\n  var h = info.header = {\n    dataSize: data.length,\n    headerSize: 12,\n    magicNumber: (data[1] << 8) | data[0],\n    namesSize: (data[3] << 8) | data[2],\n    boolCount: (data[5] << 8) | data[4],\n    numCount: (data[7] << 8) | data[6],\n    strCount: (data[9] << 8) | data[8],\n    strTableSize: (data[11] << 8) | data[10]\n  };\n\n  h.total = h.headerSize\n    + h.namesSize\n    + h.boolCount\n    + h.numCount * 2\n    + h.strCount * 2\n    + h.strTableSize;\n\n  i += h.headerSize;\n\n  // Names Section\n  var names = data.toString('ascii', i, i + h.namesSize - 1)\n    , parts = names.split('|')\n    , name = parts[0]\n    , desc = parts.pop();\n\n  info.name = name;\n  info.names = parts;\n  info.desc = desc;\n\n  info.dir = path.resolve(file, '..', '..');\n  info.file = file;\n\n  i += h.namesSize - 1;\n\n  // Names is nul-terminated.\n  assert.equal(data[i], 0);\n  i++;\n\n  // Booleans Section\n  // One byte for each flag\n  // Same order as <term.h>\n  info.bools = {};\n  l = i + h.boolCount;\n  o = 0;\n  for (; i < l; i++) {\n    v = Tput.bools[o++];\n    info.bools[v] = data[i] === 1;\n  }\n\n  // Null byte in between to make sure numbers begin on an even byte.\n  if (i % 2) {\n    assert.equal(data[i], 0);\n    i++;\n  }\n\n  // Numbers Section\n  info.numbers = {};\n  l = i + h.numCount * 2;\n  o = 0;\n  for (; i < l; i += 2) {\n    v = Tput.numbers[o++];\n    if (data[i + 1] === 0377 && data[i] === 0377) {\n      info.numbers[v] = -1;\n    } else {\n      info.numbers[v] = (data[i + 1] << 8) | data[i];\n    }\n  }\n\n  // Strings Section\n  info.strings = {};\n  l = i + h.strCount * 2;\n  o = 0;\n  for (; i < l; i += 2) {\n    v = Tput.strings[o++];\n    if (data[i + 1] === 0377 && data[i] === 0377) {\n      info.strings[v] = -1;\n    } else {\n      info.strings[v] = (data[i + 1] << 8) | data[i];\n    }\n  }\n\n  // String Table\n  Object.keys(info.strings).forEach(function(key) {\n    if (info.strings[key] === -1) {\n      delete info.strings[key];\n      return;\n    }\n\n    // Workaround: fix an odd bug in the screen-256color terminfo where it tries\n    // to set -1, but it appears to have {0xfe, 0xff} instead of {0xff, 0xff}.\n    // TODO: Possibly handle errors gracefully below, as well as in the\n    // extended info. Also possibly do: `if (info.strings[key] >= data.length)`.\n    if (info.strings[key] === 65534) {\n      delete info.strings[key];\n      return;\n    }\n\n    var s = i + info.strings[key]\n      , j = s;\n\n    while (data[j]) j++;\n\n    assert(j < data.length);\n\n    info.strings[key] = data.toString('ascii', s, j);\n  });\n\n  // Extended Header\n  if (this.extended !== false) {\n    i--;\n    i += h.strTableSize;\n    if (i % 2) {\n      assert.equal(data[i], 0);\n      i++;\n    }\n    l = data.length;\n    if (i < l - 1) {\n      try {\n        extended = this.parseExtended(data.slice(i));\n      } catch (e) {\n        if (this.debug) {\n          throw e;\n        }\n        return info;\n      }\n      info.header.extended = extended.header;\n      ['bools', 'numbers', 'strings'].forEach(function(key) {\n        merge(info[key], extended[key]);\n      });\n    }\n  }\n\n  return info;\n};\n\n/**\n * Extended Parsing\n */\n\n// Some data to help understand:\n\n// For xterm, non-extended header:\n// { dataSize: 3270,\n//   headerSize: 12,\n//   magicNumber: 282,\n//   namesSize: 48,\n//   boolCount: 38,\n//   numCount: 15,\n//   strCount: 413,\n//   strTableSize: 1388,\n//   total: 2342 }\n\n// For xterm, header:\n// Offset: 2342\n// { header:\n//    { dataSize: 928,\n//      headerSize: 10,\n//      boolCount: 2,\n//      numCount: 1,\n//      strCount: 57,\n//      strTableSize: 117,\n//      lastStrTableOffset: 680,\n//      total: 245 },\n\n// For xterm, layout:\n// { header: '0 - 10', // length: 10\n//   bools: '10 - 12', // length: 2\n//   numbers: '12 - 14', // length: 2\n//   strings: '14 - 128', // length: 114 (57 short)\n//   symoffsets: '128 - 248', // length: 120 (60 short)\n//   stringtable: '248 - 612', // length: 364\n//   sym: '612 - 928' } // length: 316\n//\n// How lastStrTableOffset works:\n//   data.length - h.lastStrTableOffset === 248\n//     (sym-offset end, string-table start)\n//   364 + 316 === 680 (lastStrTableOffset)\n// How strTableSize works:\n//   h.strCount + [symOffsetCount] === h.strTableSize\n//   57 + 60 === 117 (strTableSize)\n//   symOffsetCount doesn't actually exist in the header. it's just implied.\n// Getting the number of sym offsets:\n//   h.symOffsetCount = h.strTableSize - h.strCount;\n//   h.symOffsetSize = (h.strTableSize - h.strCount) * 2;\n\nTput.prototype.parseExtended = function(data) {\n  var info = {}\n    , l = data.length\n    , i = 0;\n\n  var h = info.header = {\n    dataSize: data.length,\n    headerSize: 10,\n    boolCount: (data[i + 1] << 8) | data[i + 0],\n    numCount: (data[i + 3] << 8) | data[i + 2],\n    strCount: (data[i + 5] << 8) | data[i + 4],\n    strTableSize: (data[i + 7] << 8) | data[i + 6],\n    lastStrTableOffset: (data[i + 9] << 8) | data[i + 8]\n  };\n\n  // h.symOffsetCount = h.strTableSize - h.strCount;\n\n  h.total = h.headerSize\n    + h.boolCount\n    + h.numCount * 2\n    + h.strCount * 2\n    + h.strTableSize;\n\n  i += h.headerSize;\n\n  // Booleans Section\n  // One byte for each flag\n  var _bools = [];\n  l = i + h.boolCount;\n  for (; i < l; i++) {\n    _bools.push(data[i] === 1);\n  }\n\n  // Null byte in between to make sure numbers begin on an even byte.\n  if (i % 2) {\n    assert.equal(data[i], 0);\n    i++;\n  }\n\n  // Numbers Section\n  var _numbers = [];\n  l = i + h.numCount * 2;\n  for (; i < l; i += 2) {\n    if (data[i + 1] === 0377 && data[i] === 0377) {\n      _numbers.push(-1);\n    } else {\n      _numbers.push((data[i + 1] << 8) | data[i]);\n    }\n  }\n\n  // Strings Section\n  var _strings = [];\n  l = i + h.strCount * 2;\n  for (; i < l; i += 2) {\n    if (data[i + 1] === 0377 && data[i] === 0377) {\n      _strings.push(-1);\n    } else {\n      _strings.push((data[i + 1] << 8) | data[i]);\n    }\n  }\n\n  // Pass over the sym offsets and get to the string table.\n  i = data.length - h.lastStrTableOffset;\n  // Might be better to do this instead if the file has trailing bytes:\n  // i += h.symOffsetCount * 2;\n\n  // String Table\n  var high = 0;\n  _strings.forEach(function(offset, k) {\n    if (offset === -1) {\n      _strings[k] = '';\n      return;\n    }\n\n    var s = i + offset\n      , j = s;\n\n    while (data[j]) j++;\n\n    assert(j < data.length);\n\n    // Find out where the string table ends by\n    // getting the highest string length.\n    if (high < j - i) {\n      high = j - i;\n    }\n\n    _strings[k] = data.toString('ascii', s, j);\n  });\n\n  // Symbol Table\n  // Add one to the highest string length because we didn't count \\0.\n  i += high + 1;\n  l = data.length;\n\n  var sym = []\n    , j;\n\n  for (; i < l; i++) {\n    j = i;\n    while (data[j]) j++;\n    sym.push(data.toString('ascii', i, j));\n    i = j;\n  }\n\n  // Identify by name\n  j = 0;\n\n  info.bools = {};\n  _bools.forEach(function(bool) {\n    info.bools[sym[j++]] = bool;\n  });\n\n  info.numbers = {};\n  _numbers.forEach(function(number) {\n    info.numbers[sym[j++]] = number;\n  });\n\n  info.strings = {};\n  _strings.forEach(function(string) {\n    info.strings[sym[j++]] = string;\n  });\n\n  // Should be the very last bit of data.\n  assert.equal(i, data.length);\n\n  return info;\n};\n\nTput.prototype.compileTerminfo = function(term) {\n  return this.compile(this.readTerminfo(term));\n};\n\nTput.prototype.injectTerminfo = function(term) {\n  return this.inject(this.compileTerminfo(term));\n};\n\n/**\n * Compiler - terminfo cap->javascript\n */\n\nTput.prototype.compile = function(info) {\n  var self = this;\n\n  if (!info) {\n    throw new Error('Terminal not found.');\n  }\n\n  this.detectFeatures(info);\n\n  this._debug(info);\n\n  info.all = {};\n  info.methods = {};\n\n  ['bools', 'numbers', 'strings'].forEach(function(type) {\n    Object.keys(info[type]).forEach(function(key) {\n      info.all[key] = info[type][key];\n      info.methods[key] = self._compile(info, key, info.all[key]);\n    });\n  });\n\n  Tput.bools.forEach(function(key) {\n    if (info.methods[key] == null) info.methods[key] = false;\n  });\n\n  Tput.numbers.forEach(function(key) {\n    if (info.methods[key] == null) info.methods[key] = -1;\n  });\n\n  Tput.strings.forEach(function(key) {\n    if (!info.methods[key]) info.methods[key] = noop;\n  });\n\n  Object.keys(info.methods).forEach(function(key) {\n    if (!Tput.alias[key]) return;\n    Tput.alias[key].forEach(function(alias) {\n      info.methods[alias] = info.methods[key];\n    });\n    // Could just use:\n    // Object.keys(Tput.aliasMap).forEach(function(key) {\n    //   info.methods[key] = info.methods[Tput.aliasMap[key]];\n    // });\n  });\n\n  return info;\n};\n\nTput.prototype.inject = function(info) {\n  var self = this\n    , methods = info.methods || info;\n\n  Object.keys(methods).forEach(function(key) {\n    if (typeof methods[key] !== 'function') {\n      self[key] = methods[key];\n      return;\n    }\n    self[key] = function() {\n      var args = Array.prototype.slice.call(arguments);\n      return methods[key].call(self, args);\n    };\n  });\n\n  this.info = info;\n  this.all = info.all;\n  this.methods = info.methods;\n  this.bools = info.bools;\n  this.numbers = info.numbers;\n  this.strings = info.strings;\n\n  if (!~info.names.indexOf(this.terminal)) {\n    this.terminal = info.name;\n  }\n\n  this.features = info.features;\n  Object.keys(info.features).forEach(function(key) {\n    if (key === 'padding') {\n      if (!info.features.padding && self.options.padding !== true) {\n        self.padding = false;\n      }\n      return;\n    }\n    self[key] = info.features[key];\n  });\n};\n\n// See:\n// ~/ncurses/ncurses/tinfo/lib_tparm.c\n// ~/ncurses/ncurses/tinfo/comp_scan.c\nTput.prototype._compile = function(info, key, str) {\n  var v;\n\n  this._debug('Compiling %s: %s', key, JSON.stringify(str));\n\n  switch (typeof str) {\n    case 'boolean':\n      return str;\n    case 'number':\n      return str;\n    case 'string':\n      break;\n    default:\n      return noop;\n  }\n\n  if (!str) {\n    return noop;\n  }\n\n  // See:\n  // ~/ncurses/progs/tput.c - tput() - L149\n  // ~/ncurses/progs/tset.c - set_init() - L992\n  if (key === 'init_file' || key === 'reset_file') {\n    try {\n      str = fs.readFileSync(str, 'utf8');\n      if (this.debug) {\n        v = ('return ' + JSON.stringify(str) + ';')\n          .replace(/\\x1b/g, '\\\\x1b')\n          .replace(/\\r/g, '\\\\r')\n          .replace(/\\n/g, '\\\\n');\n        process.stdout.write(v + '\\n');\n      }\n      return function() { return str; };\n    } catch (e) {\n      return noop;\n    }\n  }\n\n  var tkey = info.name + '.' + key\n    , header = 'var v, dyn = {}, stat = {}, stack = [], out = [];'\n    , footer = ';return out.join(\"\");'\n    , code = header\n    , val = str\n    , buff = ''\n    , cap\n    , ch\n    , fi\n    , then\n    , els\n    , end;\n\n  function read(regex, no) {\n    cap = regex.exec(val);\n    if (!cap) return;\n    val = val.substring(cap[0].length);\n    ch = cap[1];\n    if (!no) clear();\n    return cap;\n  }\n\n  function stmt(c) {\n    if (code[code.length - 1] === ',') {\n      code = code.slice(0, -1);\n    }\n    code += c;\n  }\n\n  function expr(c) {\n    code += c + ',';\n  }\n\n  function echo(c) {\n    if (c === '\"\"') return;\n    expr('out.push(' + c + ')');\n  }\n\n  function print(c) {\n    buff += c;\n  }\n\n  function clear() {\n    if (buff) {\n      echo(JSON.stringify(buff).replace(/\\\\u00([0-9a-fA-F]{2})/g, '\\\\x$1'));\n      buff = '';\n    }\n  }\n\n  while (val) {\n    // Ignore newlines\n    if (read(/^\\n /, true)) {\n      continue;\n    }\n\n    // '^A' -> ^A\n    if (read(/^\\^(.)/i, true)) {\n      if (!(ch >= ' ' && ch <= '~')) {\n        this._debug('%s: bad caret char.', tkey);\n        // NOTE: ncurses appears to simply\n        // continue in this situation, but\n        // I could be wrong.\n        print(cap[0]);\n        continue;\n      }\n      if (ch === '?') {\n        ch = '\\x7f';\n      } else {\n        ch = ch.charCodeAt(0) & 31;\n        if (ch === 0) ch = 128;\n        ch = String.fromCharCode(ch);\n      }\n      print(ch);\n      continue;\n    }\n\n    // 3 octal digits -> character\n    if (read(/^\\\\([0-7]{3})/, true)) {\n      print(String.fromCharCode(parseInt(ch, 8)));\n      continue;\n    }\n\n    // '\\e' -> ^[\n    // '\\n' -> \\n\n    // '\\r' -> \\r\n    // '\\0' -> \\200 (special case)\n    if (read(/^\\\\([eEnlrtbfs\\^\\\\,:0]|.)/, true)) {\n      switch (ch) {\n        case 'e':\n        case 'E':\n          ch = '\\x1b';\n          break;\n        case 'n':\n          ch = '\\n';\n          break;\n        case 'l':\n          ch = '\\x85';\n          break;\n        case 'r':\n          ch = '\\r';\n          break;\n        case 't':\n          ch = '\\t';\n          break;\n        case 'b':\n          ch = '\\x08';\n          break;\n        case 'f':\n          ch = '\\x0c';\n          break;\n        case 's':\n          ch = ' ';\n          break;\n        case '^':\n          ch = '^';\n          break;\n        case '\\\\':\n          ch = '\\\\';\n          break;\n        case ',':\n          ch = ',';\n          break;\n        case ':':\n          ch = ':';\n          break;\n        case '0':\n          ch = '\\200';\n          break;\n        case 'a':\n          ch = '\\x07';\n          break;\n        default:\n          this._debug('%s: bad backslash char.', tkey);\n          ch = cap[0];\n          break;\n      }\n      print(ch);\n      continue;\n    }\n\n    // $<5> -> padding\n    // e.g. flash_screen: '\\u001b[?5h$<100/>\\u001b[?5l',\n    if (read(/^\\$<(\\d+)([*\\/]{0,2})>/, true)) {\n      if (this.padding) print(cap[0]);\n      continue;\n    }\n\n    // %%   outputs `%'\n    if (read(/^%%/, true)) {\n      print('%');\n      continue;\n    }\n\n    // %[[:]flags][width[.precision]][doxXs]\n    //   as in printf, flags are [-+#] and space.  Use a `:' to allow the\n    //   next character to be a `-' flag, avoiding interpreting \"%-\" as an\n    //   operator.\n    // %c   print pop() like %c in printf\n    // Example from screen terminfo:\n    //   S0: \"\\u001b(%p1%c\"\n    // %d   print pop()\n    // \"Print (e.g., \"%d\") is a special case.\"\n    // %s   print pop() like %s in printf\n    if (read(/^%((?::-|[+# ]){1,4})?(\\d+(?:\\.\\d+)?)?([doxXsc])/)) {\n      if (this.printf || cap[1] || cap[2] || ~'oxX'.indexOf(cap[3])) {\n        echo('sprintf(\"'+ cap[0].replace(':-', '-') + '\", stack.pop())');\n      } else if (cap[3] === 'c') {\n        echo('(v = stack.pop(), isFinite(v) '\n          + '? String.fromCharCode(v || 0200) : \"\")');\n      } else {\n        echo('stack.pop()');\n      }\n      continue;\n    }\n\n    // %p[1-9]\n    //   push i'th parameter\n    if (read(/^%p([1-9])/)) {\n      expr('(stack.push(v = params[' + (ch - 1) + ']), v)');\n      continue;\n    }\n\n    // %P[a-z]\n    //   set dynamic variable [a-z] to pop()\n    if (read(/^%P([a-z])/)) {\n      expr('dyn.' + ch + ' = stack.pop()');\n      continue;\n    }\n\n    // %g[a-z]\n    //   get dynamic variable [a-z] and push it\n    if (read(/^%g([a-z])/)) {\n      expr('(stack.push(dyn.' + ch + '), dyn.' + ch + ')');\n      continue;\n    }\n\n    // %P[A-Z]\n    //   set static variable [a-z] to pop()\n    if (read(/^%P([A-Z])/)) {\n      expr('stat.' + ch + ' = stack.pop()');\n      continue;\n    }\n\n    // %g[A-Z]\n    //   get static variable [a-z] and push it\n    //   The  terms  \"static\"  and  \"dynamic\" are misleading.  Historically,\n    //   these are simply two different sets of variables, whose values are\n    //   not reset between calls to tparm.  However, that fact is not\n    //   documented in other implementations.  Relying on it will adversely\n    //   impact portability to other implementations.\n    if (read(/^%g([A-Z])/)) {\n      expr('(stack.push(v = stat.' + ch + '), v)');\n      continue;\n    }\n\n    // %'c' char constant c\n    // NOTE: These are stored as c chars, exemplified by:\n    // cursor_address: \"\\u001b=%p1%' '%+%c%p2%' '%+%c\"\n    if (read(/^%'(.)'/)) {\n      expr('(stack.push(v = ' + ch.charCodeAt(0) + '), v)');\n      continue;\n    }\n\n    // %{nn}\n    //   integer constant nn\n    if (read(/^%\\{(\\d+)\\}/)) {\n      expr('(stack.push(v = ' + ch + '), v)');\n      continue;\n    }\n\n    // %l   push strlen(pop)\n    if (read(/^%l/)) {\n      expr('(stack.push(v = (stack.pop() || \"\").length || 0), v)');\n      continue;\n    }\n\n    // %+ %- %* %/ %m\n    //   arithmetic (%m is mod): push(pop() op pop())\n    // %& %| %^\n    //   bit operations (AND, OR and exclusive-OR): push(pop() op pop())\n    // %= %> %<\n    //   logical operations: push(pop() op pop())\n    if (read(/^%([+\\-*\\/m&|\\^=><])/)) {\n      if (ch === '=') ch = '===';\n      else if (ch === 'm') ch = '%';\n      expr('(v = stack.pop(),'\n        + ' stack.push(v = (stack.pop() ' + ch + ' v) || 0),'\n        + ' v)');\n      continue;\n    }\n\n    // %A, %O\n    //   logical AND and OR operations (for conditionals)\n    if (read(/^%([AO])/)) {\n      // Are we supposed to store the result on the stack?\n      expr('(stack.push(v = (stack.pop() '\n        + (ch === 'A' ? '&&' : '||')\n        + ' stack.pop())), v)');\n      continue;\n    }\n\n    // %! %~\n    //   unary operations (logical and bit complement): push(op pop())\n    if (read(/^%([!~])/)) {\n      expr('(stack.push(v = ' + ch + 'stack.pop()), v)');\n      continue;\n    }\n\n    // %i   add 1 to first two parameters (for ANSI terminals)\n    if (read(/^%i/)) {\n      // Are these supposed to go on the stack in certain situations?\n      // ncurses doesn't seem to put them on the stack, but xterm.user6\n      // seems to assume they're on the stack for some reason. Could\n      // just be a bad terminfo string.\n      // user6: \"\\u001b[%i%d;%dR\" - possibly a termcap-style string.\n      // expr('(params[0] |= 0, params[1] |= 0, params[0]++, params[1]++)');\n      expr('(params[0]++, params[1]++)');\n      continue;\n    }\n\n    // %? expr %t thenpart %e elsepart %;\n    //   This forms an if-then-else.  The %e elsepart is optional.  Usually\n    //   the %? expr part pushes a value onto the stack, and %t pops it from\n    //   the stack, testing if it is nonzero (true).  If it is zero (false),\n    //   control passes to the %e (else) part.\n    //   It is possible to form else-if's a la Algol 68:\n    //     %? c1 %t b1 %e c2 %t b2 %e c3 %t b3 %e c4 %t b4 %e %;\n    //   where ci are conditions, bi are bodies.\n    if (read(/^%\\?/)) {\n      end = -1;\n      stmt(';if (');\n      continue;\n    }\n\n    if (read(/^%t/)) {\n      end = -1;\n      // Technically this is supposed to pop everything off the stack that was\n      // pushed onto the stack after the if statement, see man terminfo.\n      // Right now, we don't pop anything off. This could cause compat issues.\n      // Perhaps implement a \"pushed\" counter from the time the if statement\n      // is added, to the time the then statement is added, and pop off\n      // the appropriate number of elements.\n      // while (pushed--) expr('stack.pop()');\n      stmt(') {');\n      continue;\n    }\n\n    // Terminfo does elseif's like\n    // this: %?[expr]%t...%e[expr]%t...%;\n    if (read(/^%e/)) {\n      fi = val.indexOf('%?');\n      then = val.indexOf('%t');\n      els = val.indexOf('%e');\n      end = val.indexOf('%;');\n      if (end === -1) end = Infinity;\n      if (then !== -1 && then < end\n          && (fi === -1 || then < fi)\n          && (els === -1 || then < els)) {\n        stmt('} else if (');\n      } else {\n        stmt('} else {');\n      }\n      continue;\n    }\n\n    if (read(/^%;/)) {\n      end = null;\n      stmt('}');\n      continue;\n    }\n\n    buff += val[0];\n    val = val.substring(1);\n  }\n\n  // Clear the buffer of any remaining text.\n  clear();\n\n  // Some terminfos (I'm looking at you, atari-color), don't end an if\n  // statement. It's assumed terminfo will automatically end it for\n  // them, because they are a bunch of lazy bastards.\n  if (end != null) {\n    stmt('}');\n  }\n\n  // Add the footer.\n  stmt(footer);\n\n  // Optimize and cleanup generated code.\n  v = code.slice(header.length, -footer.length);\n  if (!v.length) {\n    code = 'return \"\";';\n  } else if (v = /^out\\.push\\((\"(?:[^\"]|\\\\\")+\")\\)$/.exec(v)) {\n    code = 'return ' + v[1] + ';';\n  } else {\n    // Turn `(stack.push(v = params[0]), v),out.push(stack.pop())`\n    // into `out.push(params[0])`.\n    code = code.replace(\n      /\\(stack\\.push\\(v = params\\[(\\d+)\\]\\), v\\),out\\.push\\(stack\\.pop\\(\\)\\)/g,\n      'out.push(params[$1])');\n\n    // Remove unnecessary variable initializations.\n    v = code.slice(header.length, -footer.length);\n    if (!~v.indexOf('v = ')) code = code.replace('v, ', '');\n    if (!~v.indexOf('dyn')) code = code.replace('dyn = {}, ', '');\n    if (!~v.indexOf('stat')) code = code.replace('stat = {}, ', '');\n    if (!~v.indexOf('stack')) code = code.replace('stack = [], ', '');\n\n    // Turn `var out = [];out.push(\"foo\"),` into `var out = [\"foo\"];`.\n    code = code.replace(\n      /out = \\[\\];out\\.push\\((\"(?:[^\"]|\\\\\")+\")\\),/,\n      'out = [$1];');\n  }\n\n  // Terminfos `wyse350-vb`, and `wy350-w`\n  // seem to have a few broken strings.\n  if (str === '\\u001b%?') {\n    code = 'return \"\\\\x1b\";';\n  }\n\n  if (this.debug) {\n    v = code\n      .replace(/\\x1b/g, '\\\\x1b')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/\\n/g, '\\\\n');\n    process.stdout.write(v + '\\n');\n  }\n\n  try {\n    if (this.options.stringify && code.indexOf('return ') === 0) {\n      return new Function('', code)();\n    }\n    return this.printf || ~code.indexOf('sprintf(')\n      ? new Function('sprintf, params', code).bind(null, sprintf)\n      : new Function('params', code);\n  } catch (e) {\n    console.error('');\n    console.error('Error on %s:', tkey);\n    console.error(JSON.stringify(str));\n    console.error('');\n    console.error(code.replace(/(,|;)/g, '$1\\n'));\n    e.stack = e.stack.replace(/\\x1b/g, '\\\\x1b');\n    throw e;\n  }\n};\n\n// See: ~/ncurses/ncurses/tinfo/lib_tputs.c\nTput.prototype._print = function(code, print, done) {\n  var xon = !this.bools.needs_xon_xoff || this.bools.xon_xoff;\n\n  print = print || write;\n  done = done || noop;\n\n  if (!this.padding) {\n    print(code);\n    return done();\n  }\n\n  var parts = code.split(/(?=\\$<[\\d.]+[*\\/]{0,2}>)/)\n    , i = 0;\n\n  (function next() {\n    if (i === parts.length) {\n      return done();\n    }\n\n    var part = parts[i++]\n      , padding = /^\\$<([\\d.]+)([*\\/]{0,2})>/.exec(part)\n      , amount\n      , suffix;\n      // , affect;\n\n    if (!padding) {\n      print(part);\n      return next();\n    }\n\n    part = part.substring(padding[0].length);\n    amount = +padding[1];\n    suffix = padding[2];\n\n    // A `/'  suffix indicates  that  the  padding  is  mandatory and forces a\n    // delay of the given number of milliseconds even on devices for which xon\n    // is present to indicate flow control.\n    if (xon && !~suffix.indexOf('/')) {\n      print(part);\n      return next();\n    }\n\n    // A `*' indicates that the padding required is proportional to the number\n    // of lines affected by the operation, and  the amount  given  is the\n    // per-affected-unit padding required.  (In the case of insert character,\n    // the factor is still the number of lines affected.) Normally, padding is\n    // advisory if the device has the xon capability; it is used for cost\n    // computation but does not trigger delays.\n    if (~suffix.indexOf('*')) {\n      // XXX Disable this for now.\n      amount = amount;\n      // if (affect = /\\x1b\\[(\\d+)[LM]/.exec(part)) {\n      //   amount *= +affect[1];\n      // }\n      // The above is a huge workaround. In reality, we need to compile\n      // `_print` into the string functions and check the cap name and\n      // params.\n      // if (cap === 'insert_line' || cap === 'delete_line') {\n      //   amount *= params[0];\n      // }\n      // if (cap === 'clear_screen') {\n      //   amount *= process.stdout.rows;\n      // }\n    }\n\n    return setTimeout(function() {\n      print(part);\n      return next();\n    }, amount);\n  })();\n};\n\n// A small helper function if we want\n// to easily output text with setTimeouts.\nTput.print = function() {\n  var fake = {\n    padding: true,\n    bools: { needs_xon_xoff: true, xon_xoff: false }\n  };\n  return Tput.prototype._print.apply(fake, arguments);\n};\n\n/**\n * Termcap\n */\n\nTput.cpaths = [\n  process.env.TERMCAP || '',\n  (process.env.TERMPATH || '').split(/[: ]/),\n  (process.env.HOME || '') + '/.termcap',\n  '/usr/share/misc/termcap',\n  '/etc/termcap'\n];\n\nTput.prototype.readTermcap = function(term) {\n  var self = this\n    , terms\n    , term_\n    , root\n    , paths;\n\n  term = term || this.terminal;\n\n  // Termcap has a bunch of terminals usually stored in one file/string,\n  // so we need to find the one containing our desired terminal.\n  if (~term.indexOf(path.sep) && (terms = this._tryCap(path.resolve(term)))) {\n    term_ = path.basename(term).split('.')[0];\n    if (terms[process.env.TERM]) {\n      term = process.env.TERM;\n    } else if (terms[term_]) {\n      term = term_;\n    } else {\n      term = Object.keys(terms)[0];\n    }\n  } else {\n    paths = Tput.cpaths.slice();\n\n    if (this.termcapFile) {\n      paths.unshift(this.termcapFile);\n    }\n\n    paths.push(Tput.termcap);\n\n    terms = this._tryCap(paths, term);\n  }\n\n  if (!terms) {\n    throw new Error('Cannot find termcap for: ' + term);\n  }\n\n  root = terms[term];\n\n  if (this.debug) {\n    this._termcap = terms;\n  }\n\n  (function tc(term) {\n    if (term && term.strings.tc) {\n      root.inherits = root.inherits || [];\n      root.inherits.push(term.strings.tc);\n\n      var names = terms[term.strings.tc]\n        ? terms[term.strings.tc].names\n        : [term.strings.tc];\n\n      self._debug('%s inherits from %s.',\n        term.names.join('/'), names.join('/'));\n\n      var inherit = tc(terms[term.strings.tc]);\n      if (inherit) {\n        ['bools', 'numbers', 'strings'].forEach(function(type) {\n          merge(term[type], inherit[type]);\n        });\n      }\n    }\n    return term;\n  })(root);\n\n  // Translate termcap names to terminfo-style names.\n  root = this.translateTermcap(root);\n\n  return root;\n};\n\nTput.prototype._tryCap = function(file, term) {\n  if (!file) return;\n\n  var terms\n    , data\n    , i;\n\n  if (Array.isArray(file)) {\n    for (i = 0; i < file.length; i++) {\n      data = this._tryCap(file[i], term);\n      if (data) return data;\n    }\n    return;\n  }\n\n  // If the termcap string starts with `/`,\n  // ncurses considers it a filename.\n  data = file[0] === '/'\n    ? tryRead(file)\n    : file;\n\n  if (!data) return;\n\n  terms = this.parseTermcap(data, file);\n\n  if (term && !terms[term]) {\n    return;\n  }\n\n  return terms;\n};\n\n/**\n * Termcap Parser\n *  http://en.wikipedia.org/wiki/Termcap\n *  http://www.gnu.org/software\n *    /termutils/manual/termcap-1.3/html_mono/termcap.html\n *  http://www.gnu.org/software\n *    /termutils/manual/termcap-1.3/html_mono/termcap.html#SEC17\n *  http://tldp.org/HOWTO/Text-Terminal-HOWTO.html#toc16\n *  man termcap\n */\n\n// Example:\n// vt102|dec vt102:\\\n//  :do=^J:co#80:li#24:cl=50\\E[;H\\E[2J:\\\n//  :le=^H:bs:cm=5\\E[%i%d;%dH:nd=2\\E[C:up=2\\E[A:\\\n//  :ce=3\\E[K:cd=50\\E[J:so=2\\E[7m:se=2\\E[m:us=2\\E[4m:ue=2\\E[m:\\\n//  :md=2\\E[1m:mr=2\\E[7m:mb=2\\E[5m:me=2\\E[m:is=\\E[1;24r\\E[24;1H:\\\n//  :rs=\\E>\\E[?3l\\E[?4l\\E[?5l\\E[?7h\\E[?8h:ks=\\E[?1h\\E=:ke=\\E[?1l\\E>:\\\n//  :ku=\\EOA:kd=\\EOB:kr=\\EOC:kl=\\EOD:kb=^H:\\\n//  :ho=\\E[H:k1=\\EOP:k2=\\EOQ:k3=\\EOR:k4=\\EOS:pt:sr=5\\EM:vt#3:\\\n//  :sc=\\E7:rc=\\E8:cs=\\E[%i%d;%dr:vs=\\E[?7l:ve=\\E[?7h:\\\n//  :mi:al=\\E[L:dc=\\E[P:dl=\\E[M:ei=\\E[4l:im=\\E[4h:\n\nTput.prototype.parseTermcap = function(data, file) {\n  var terms = {}\n    , parts\n    , term\n    , entries\n    , fields\n    , field\n    , names\n    , i\n    , j\n    , k;\n\n  // remove escaped newlines\n  data = data.replace(/\\\\\\n[ \\t]*/g, '');\n\n  // remove comments\n  data = data.replace(/^#[^\\n]+/gm, '');\n\n  // split entries\n  entries = data.trim().split(/\\n+/);\n\n  for (i = 0; i < entries.length; i++) {\n    fields = entries[i].split(/:+/);\n    for (j = 0; j < fields.length; j++) {\n      field = fields[j].trim();\n      if (!field) continue;\n\n      if (j === 0) {\n        names = field.split('|');\n        term = {\n          name: names[0],\n          names: names,\n          desc: names.pop(),\n          file: ~file.indexOf(path.sep)\n            ? path.resolve(file)\n            : file,\n          termcap: true\n        };\n\n        for (k = 0; k < names.length; k++) {\n          terms[names[k]] = term;\n        }\n\n        term.bools = {};\n        term.numbers = {};\n        term.strings = {};\n\n        continue;\n      }\n\n      if (~field.indexOf('=')) {\n        parts = field.split('=');\n        term.strings[parts[0]] = parts.slice(1).join('=');\n      } else if (~field.indexOf('#')) {\n        parts = field.split('#');\n        term.numbers[parts[0]] = +parts.slice(1).join('#');\n      } else {\n        term.bools[field] = true;\n      }\n    }\n  }\n\n  return terms;\n};\n\n/**\n * Termcap Compiler\n *  man termcap\n */\n\nTput.prototype.translateTermcap = function(info) {\n  var self = this\n    , out = {};\n\n  if (!info) return;\n\n  this._debug(info);\n\n  ['name', 'names', 'desc', 'file', 'termcap'].forEach(function(key) {\n    out[key] = info[key];\n  });\n\n  // Separate aliases for termcap\n  var map = (function() {\n    var out = {};\n\n    Object.keys(Tput.alias).forEach(function(key) {\n      var aliases = Tput.alias[key];\n      out[aliases.termcap] = key;\n    });\n\n    return out;\n  })();\n\n  // Translate termcap cap names to terminfo cap names.\n  // e.g. `up` -> `cursor_up`\n  ['bools', 'numbers', 'strings'].forEach(function(key) {\n    out[key] = {};\n    Object.keys(info[key]).forEach(function(cap) {\n      if (key === 'strings') {\n        info.strings[cap] = self._captoinfo(cap, info.strings[cap], 1);\n      }\n      if (map[cap]) {\n        out[key][map[cap]] = info[key][cap];\n      } else {\n        // NOTE: Possibly include all termcap names\n        // in a separate alias.js file. Some are\n        // missing from the terminfo alias.js file\n        // which is why we have to do this:\n        // See: $ man termcap\n        out[key][cap] = info[key][cap];\n      }\n    });\n  });\n\n  return out;\n};\n\nTput.prototype.compileTermcap = function(term) {\n  return this.compile(this.readTermcap(term));\n};\n\nTput.prototype.injectTermcap = function(term) {\n  return this.inject(this.compileTermcap(term));\n};\n\n/**\n * _nc_captoinfo - ported to javascript directly from ncurses.\n * Copyright (c) 1998-2009,2010 Free Software Foundation, Inc.\n * See: ~/ncurses/ncurses/tinfo/captoinfo.c\n *\n * Convert a termcap string to terminfo format.\n * 'cap' is the relevant terminfo capability index.\n * 's' is the string value of the capability.\n * 'parameterized' tells what type of translations to do:\n *    % translations if 1\n *    pad translations if >=0\n */\n\nTput.prototype._captoinfo = function(cap, s, parameterized) {\n  var self = this;\n\n  var capstart;\n\n  if (parameterized == null) {\n    parameterized = 0;\n  }\n\n  var MAX_PUSHED = 16\n    , stack = [];\n\n  var stackptr = 0\n    , onstack = 0\n    , seenm = 0\n    , seenn = 0\n    , seenr = 0\n    , param = 1\n    , i = 0\n    , out = '';\n\n  function warn() {\n    var args = Array.prototype.slice.call(arguments);\n    args[0] = 'captoinfo: ' + (args[0] || '');\n    return self._debug.apply(self, args);\n  }\n\n  function isdigit(ch) {\n    return ch >= '0' && ch <= '9';\n  }\n\n  function isgraph(ch) {\n    return ch > ' ' && ch <= '~';\n  }\n\n  // convert a character to a terminfo push\n  function cvtchar(sp) {\n    var c = '\\0'\n      , len;\n\n    var j = i;\n\n    switch (sp[j]) {\n      case '\\\\':\n        switch (sp[++j]) {\n          case '\\'':\n          case '$':\n          case '\\\\':\n          case '%':\n            c = sp[j];\n            len = 2;\n            break;\n          case '\\0':\n            c = '\\\\';\n            len = 1;\n            break;\n          case '0':\n          case '1':\n          case '2':\n          case '3':\n            len = 1;\n            while (isdigit(sp[j])) {\n              c = String.fromCharCode(8 * c.charCodeAt(0)\n                + (sp[j++].charCodeAt(0) - '0'.charCodeAt(0)));\n              len++;\n            }\n            break;\n          default:\n            c = sp[j];\n            len = 2;\n            break;\n        }\n        break;\n      case '^':\n        c = String.fromCharCode(sp[++j].charCodeAt(0) & 0x1f);\n        len = 2;\n        break;\n      default:\n        c = sp[j];\n        len = 1;\n    }\n    if (isgraph(c) && c !== ',' && c !== '\\'' && c !== '\\\\' && c !== ':') {\n      out += '%\\'';\n      out += c;\n      out += '\\'';\n    } else {\n      out += '%{';\n      if (c.charCodeAt(0) > 99) {\n        out += String.fromCharCode(\n          (c.charCodeAt(0) / 100 | 0) + '0'.charCodeAt(0));\n      }\n      if (c.charCodeAt(0) > 9) {\n        out += String.fromCharCode(\n          (c.charCodeAt(0) / 10 | 0) % 10 + '0'.charCodeAt(0));\n      }\n      out += String.fromCharCode(\n        c.charCodeAt(0) % 10 + '0'.charCodeAt(0));\n      out += '}';\n    }\n\n    return len;\n  }\n\n  // push n copies of param on the terminfo stack if not already there\n  function getparm(parm, n) {\n    if (seenr) {\n      if (parm === 1) {\n        parm = 2;\n      } else if (parm === 2) {\n        parm = 1;\n      }\n    }\n\n    if (onstack === parm) {\n      if (n > 1) {\n        warn('string may not be optimal');\n        out += '%Pa';\n        while (n--) {\n          out += '%ga';\n        }\n      }\n      return;\n    }\n\n    if (onstack !== 0) {\n      push();\n    }\n\n    onstack = parm;\n\n    while (n--) {\n      out += '%p';\n      out += String.fromCharCode('0'.charCodeAt(0) + parm);\n    }\n\n    if (seenn && parm < 3) {\n      out += '%{96}%^';\n    }\n\n    if (seenm && parm < 3) {\n      out += '%{127}%^';\n    }\n  }\n\n  // push onstack on to the stack\n  function push() {\n    if (stackptr >= MAX_PUSHED) {\n      warn('string too complex to convert');\n    } else {\n      stack[stackptr++] = onstack;\n    }\n  }\n\n  // pop the top of the stack into onstack\n  function pop() {\n    if (stackptr === 0) {\n      if (onstack === 0) {\n        warn('I\\'m confused');\n      } else {\n        onstack = 0;\n      }\n    } else {\n      onstack = stack[--stackptr];\n    }\n    param++;\n  }\n\n  function see03() {\n    getparm(param, 1);\n    out += '%3d';\n    pop();\n  }\n\n  function invalid() {\n    out += '%';\n    i--;\n    warn('unknown %% code %s (%#x) in %s',\n      JSON.stringify(s[i]), s[i].charCodeAt(0), cap);\n  }\n\n  // skip the initial padding (if we haven't been told not to)\n  capstart = null;\n  if (s == null) s = '';\n\n  if (parameterized >= 0 && isdigit(s[i])) {\n    for (capstart = i;; i++) {\n      if (!(isdigit(s[i]) || s[i] === '*' || s[i] === '.')) {\n        break;\n      }\n    }\n  }\n\n  while (s[i]) {\n    switch (s[i]) {\n      case '%':\n        i++;\n        if (parameterized < 1) {\n          out += '%';\n          break;\n        }\n        switch (s[i++]) {\n          case '%':\n            out += '%';\n            break;\n          case 'r':\n            if (seenr++ === 1) {\n              warn('saw %%r twice in %s', cap);\n            }\n            break;\n          case 'm':\n            if (seenm++ === 1) {\n              warn('saw %%m twice in %s', cap);\n            }\n            break;\n          case 'n':\n            if (seenn++ === 1) {\n              warn('saw %%n twice in %s', cap);\n            }\n            break;\n          case 'i':\n            out += '%i';\n            break;\n          case '6':\n          case 'B':\n            getparm(param, 1);\n            out += '%{10}%/%{16}%*';\n            getparm(param, 1);\n            out += '%{10}%m%+';\n            break;\n          case '8':\n          case 'D':\n            getparm(param, 2);\n            out += '%{2}%*%-';\n            break;\n          case '>':\n            getparm(param, 2);\n            // %?%{x}%>%t%{y}%+%;\n            out += '%?';\n            i += cvtchar(s);\n            out += '%>%t';\n            i += cvtchar(s);\n            out += '%+%;';\n            break;\n          case 'a':\n            if ((s[i] === '=' || s[i] === '+' || s[i] === '-'\n                || s[i] === '*' || s[i] === '/')\n                && (s[i + 1] === 'p' || s[i + 1] === 'c')\n                && s[i + 2] !== '\\0' && s[i + 2]) {\n              var l;\n              l = 2;\n              if (s[i] !== '=') {\n                getparm(param, 1);\n              }\n              if (s[i + 1] === 'p') {\n                getparm(param + s[i + 2].charCodeAt(0) - '@'.charCodeAt(0), 1);\n                if (param !== onstack) {\n                  pop();\n                  param--;\n                }\n                l++;\n              } else {\n                i += 2, l += cvtchar(s), i -= 2;\n              }\n              switch (s[i]) {\n                case '+':\n                  out += '%+';\n                  break;\n                case '-':\n                  out += '%-';\n                  break;\n                case '*':\n                  out += '%*';\n                  break;\n                case '/':\n                  out += '%/';\n                  break;\n                case '=':\n                  if (seenr) {\n                    if (param === 1) {\n                      onstack = 2;\n                    } else if (param === 2) {\n                      onstack = 1;\n                    } else {\n                      onstack = param;\n                    }\n                  } else {\n                    onstack = param;\n                  }\n                  break;\n              }\n              i += l;\n              break;\n            }\n            getparm(param, 1);\n            i += cvtchar(s);\n            out += '%+';\n            break;\n          case '+':\n            getparm(param, 1);\n            i += cvtchar(s);\n            out += '%+%c';\n            pop();\n            break;\n          case 's':\n// #ifdef WATERLOO\n//          i += cvtchar(s);\n//          getparm(param, 1);\n//          out += '%-';\n// #else\n            getparm(param, 1);\n            out += '%s';\n            pop();\n// #endif /* WATERLOO */\n            break;\n          case '-':\n            i += cvtchar(s);\n            getparm(param, 1);\n            out += '%-%c';\n            pop();\n            break;\n          case '.':\n            getparm(param, 1);\n            out += '%c';\n            pop();\n            break;\n          case '0': // not clear any of the historical termcaps did this\n            if (s[i] === '3') {\n              see03(); // goto\n              break;\n            } else if (s[i] !== '2') {\n              invalid(); // goto\n              break;\n            }\n            // FALLTHRU\n          case '2':\n            getparm(param, 1);\n            out += '%2d';\n            pop();\n            break;\n          case '3':\n            see03();\n            break;\n          case 'd':\n            getparm(param, 1);\n            out += '%d';\n            pop();\n            break;\n          case 'f':\n            param++;\n            break;\n          case 'b':\n            param--;\n            break;\n          case '\\\\':\n            out += '%\\\\';\n            break;\n          default:\n            invalid();\n            break;\n        }\n        break;\n// #ifdef REVISIBILIZE\n//    case '\\\\':\n//      out += s[i++];\n//      out += s[i++];\n//      break;\n//    case '\\n':\n//      out += '\\\\n';\n//      i++;\n//      break;\n//    case '\\t':\n//      out += '\\\\t';\n//      i++;\n//      break;\n//    case '\\r':\n//      out += '\\\\r';\n//      i++;\n//      break;\n//    case '\\200':\n//      out += '\\\\0';\n//      i++;\n//      break;\n//    case '\\f':\n//      out += '\\\\f';\n//      i++;\n//      break;\n//    case '\\b':\n//      out += '\\\\b';\n//      i++;\n//      break;\n//    case ' ':\n//      out += '\\\\s';\n//      i++;\n//      break;\n//    case '^':\n//      out += '\\\\^';\n//      i++;\n//      break;\n//    case ':':\n//      out += '\\\\:';\n//      i++;\n//      break;\n//    case ',':\n//      out += '\\\\,';\n//      i++;\n//      break;\n//    default:\n//      if (s[i] === '\\033') {\n//        out += '\\\\E';\n//        i++;\n//      } else if (s[i].charCodeAt(0) > 0 && s[i].charCodeAt(0) < 32) {\n//        out += '^';\n//        out += String.fromCharCode(s[i].charCodeAt(0) + '@'.charCodeAt(0));\n//        i++;\n//      } else if (s[i].charCodeAt(0) <= 0 || s[i].charCodeAt(0) >= 127) {\n//        out += '\\\\';\n//        out += String.fromCharCode(\n//          ((s[i].charCodeAt(0) & 0300) >> 6) + '0'.charCodeAt(0));\n//        out += String.fromCharCode(\n//          ((s[i].charCodeAt(0) & 0070) >> 3) + '0'.charCodeAt(0));\n//        out += String.fromCharCode(\n//          (s[i].charCodeAt(0) & 0007) + '0'.charCodeAt(0));\n//        i++;\n//      } else {\n//        out += s[i++];\n//      }\n//      break;\n// #else\n      default:\n        out += s[i++];\n        break;\n// #endif\n    }\n  }\n\n  // Now, if we stripped off some leading padding, add it at the end\n  // of the string as mandatory padding.\n  if (capstart != null) {\n    out += '$<';\n    for (i = capstart;; i++) {\n      if (isdigit(s[i]) || s[i] === '*' || s[i] === '.') {\n        out += s[i];\n      } else {\n        break;\n      }\n    }\n    out += '/>';\n  }\n\n  if (s !== out) {\n    warn('Translating %s from %s to %s.',\n      cap, JSON.stringify(s), JSON.stringify(out));\n  }\n\n  return out;\n};\n\n/**\n * Compile All Terminfo\n */\n\nTput.prototype.getAll = function() {\n  var dir = this._prefix()\n    , list = asort(fs.readdirSync(dir))\n    , infos = [];\n\n  list.forEach(function(letter) {\n    var terms = asort(fs.readdirSync(path.resolve(dir, letter)));\n    infos.push.apply(infos, terms);\n  });\n\n  function asort(obj) {\n    return obj.sort(function(a, b) {\n      a = a.toLowerCase().charCodeAt(0);\n      b = b.toLowerCase().charCodeAt(0);\n      return a - b;\n    });\n  }\n\n  return infos;\n};\n\nTput.prototype.compileAll = function(start) {\n  var self = this\n    , all = {};\n\n  this.getAll().forEach(function(name) {\n    if (start && name !== start) {\n      return;\n    } else {\n      start = null;\n    }\n    all[name] = self.compileTerminfo(name);\n  });\n\n  return all;\n};\n\n/**\n * Detect Features / Quirks\n */\n\nTput.prototype.detectFeatures = function(info) {\n  var data = this.parseACS(info);\n  info.features = {\n    unicode: this.detectUnicode(info),\n    brokenACS: this.detectBrokenACS(info),\n    PCRomSet: this.detectPCRomSet(info),\n    magicCookie: this.detectMagicCookie(info),\n    padding: this.detectPadding(info),\n    setbuf: this.detectSetbuf(info),\n    acsc: data.acsc,\n    acscr: data.acscr\n  };\n  return info.features;\n};\n\nTput.prototype.detectUnicode = function() {\n  if (this.options.forceUnicode != null) {\n    return this.options.forceUnicode;\n  }\n\n  var LANG = process.env.LANG\n    + ':' + process.env.LANGUAGE\n    + ':' + process.env.LC_ALL\n    + ':' + process.env.LC_CTYPE;\n\n  return /utf-?8/i.test(LANG) || (this.GetConsoleCP() === 65001);\n};\n\n// For some reason TERM=linux has smacs/rmacs, but it maps to `^[[11m`\n// and it does not switch to the DEC SCLD character set. What the hell?\n// xterm: \\x1b(0, screen: \\x0e, linux: \\x1b[11m (doesn't work)\n// `man console_codes` says:\n// 11  select null mapping, set display control flag, reset tog‐\n//     gle meta flag (ECMA-48 says \"first alternate font\").\n// See ncurses:\n// ~/ncurses/ncurses/base/lib_set_term.c\n// ~/ncurses/ncurses/tinfo/lib_acs.c\n// ~/ncurses/ncurses/tinfo/tinfo_driver.c\n// ~/ncurses/ncurses/tinfo/lib_setup.c\nTput.prototype.detectBrokenACS = function(info) {\n  // ncurses-compatible env variable.\n  if (process.env.NCURSES_NO_UTF8_ACS != null) {\n    return !!+process.env.NCURSES_NO_UTF8_ACS;\n  }\n\n  // If the terminal supports unicode, we don't need ACS.\n  if (info.numbers.U8 >= 0) {\n    return !!info.numbers.U8;\n  }\n\n  // The linux console is just broken for some reason.\n  // Apparently the Linux console does not support ACS,\n  // but it does support the PC ROM character set.\n  if (info.name === 'linux') {\n    return true;\n  }\n\n  // PC alternate charset\n  // if (acsc.indexOf('+\\x10,\\x11-\\x18.\\x190') === 0) {\n  if (this.detectPCRomSet(info)) {\n    return true;\n  }\n\n  // screen termcap is bugged?\n  if (this.termcap\n      && info.name.indexOf('screen') === 0\n      && process.env.TERMCAP\n      && ~process.env.TERMCAP.indexOf('screen')\n      && ~process.env.TERMCAP.indexOf('hhII00')) {\n    if (~info.strings.enter_alt_charset_mode.indexOf('\\016')\n        || ~info.strings.enter_alt_charset_mode.indexOf('\\017')\n        || ~info.strings.set_attributes.indexOf('\\016')\n        || ~info.strings.set_attributes.indexOf('\\017')) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n// If enter_pc_charset is the same as enter_alt_charset,\n// the terminal does not support SCLD as ACS.\n// See: ~/ncurses/ncurses/tinfo/lib_acs.c\nTput.prototype.detectPCRomSet = function(info) {\n  var s = info.strings;\n  if (s.enter_pc_charset_mode && s.enter_alt_charset_mode\n      && s.enter_pc_charset_mode === s.enter_alt_charset_mode\n      && s.exit_pc_charset_mode === s.exit_alt_charset_mode) {\n    return true;\n  }\n  return false;\n};\n\nTput.prototype.detectMagicCookie = function() {\n  return process.env.NCURSES_NO_MAGIC_COOKIE == null;\n};\n\nTput.prototype.detectPadding = function() {\n  return process.env.NCURSES_NO_PADDING == null;\n};\n\nTput.prototype.detectSetbuf = function() {\n  return process.env.NCURSES_NO_SETBUF == null;\n};\n\nTput.prototype.parseACS = function(info) {\n  var data = {};\n\n  data.acsc = {};\n  data.acscr = {};\n\n  // Possibly just return an empty object, as done here, instead of\n  // specifically saying ACS is \"broken\" above. This would be more\n  // accurate to ncurses logic. But it doesn't really matter.\n  if (this.detectPCRomSet(info)) {\n    return data;\n  }\n\n  // See: ~/ncurses/ncurses/tinfo/lib_acs.c: L208\n  Object.keys(Tput.acsc).forEach(function(ch) {\n    var acs_chars = info.strings.acs_chars || ''\n      , i = acs_chars.indexOf(ch)\n      , next = acs_chars[i + 1];\n\n    if (!next || i === -1 || !Tput.acsc[next]) {\n      return;\n    }\n\n    data.acsc[ch] = Tput.acsc[next];\n    data.acscr[Tput.acsc[next]] = ch;\n  });\n\n  return data;\n};\n\nTput.prototype.GetConsoleCP = function() {\n  var ccp;\n\n  if (process.platform !== 'win32') {\n    return -1;\n  }\n\n  // Allow unicode on all windows consoles for now:\n  if (+process.env.NCURSES_UNICODE !== 0) {\n    return 65001;\n  }\n\n  // cp.execSync('chcp 65001', { stdio: 'ignore', timeout: 1500 });\n\n  try {\n    // Produces something like: 'Active code page: 437\\n\\n'\n    ccp = cp.execFileSync(process.env.WINDIR + '\\\\system32\\\\chcp.com', [], {\n      stdio: ['ignore', 'pipe', 'ignore'],\n      encoding: 'ascii',\n      timeout: 1500\n    });\n    // ccp = cp.execSync('chcp', {\n    //   stdio: ['ignore', 'pipe', 'ignore'],\n    //   encoding: 'ascii',\n    //   timeout: 1500\n    // });\n  } catch (e) {\n    ;\n  }\n\n  ccp = /\\d+/.exec(ccp);\n\n  if (!ccp) {\n    return -1;\n  }\n\n  ccp = +ccp[0];\n\n  return ccp;\n};\n\n/**\n * Helpers\n */\n\nfunction noop() {\n  return '';\n}\n\nnoop.unsupported = true;\n\nfunction merge(a, b) {\n  Object.keys(b).forEach(function(key) {\n    a[key] = b[key];\n  });\n  return a;\n}\n\nfunction write(data) {\n  return process.stdout.write(data);\n}\n\nfunction tryRead(file) {\n  if (Array.isArray(file)) {\n    for (var i = 0; i < file.length; i++) {\n      var data = tryRead(file[i]);\n      if (data) return data;\n    }\n    return '';\n  }\n  if (!file) return '';\n  file = path.resolve.apply(path, arguments);\n  try {\n    return fs.readFileSync(file, 'utf8');\n  } catch (e) {\n    return '';\n  }\n}\n\n/**\n * sprintf\n *  http://www.cplusplus.com/reference/cstdio/printf/\n */\n\nfunction sprintf(src) {\n  var params = Array.prototype.slice.call(arguments, 1)\n    , rule = /%([\\-+# ]{1,4})?(\\d+(?:\\.\\d+)?)?([doxXsc])/g\n    , i = 0;\n\n  return src.replace(rule, function(_, flag, width, type) {\n    var flags = (flag || '').split('')\n      , param = params[i] != null ? params[i] : ''\n      , initial = param\n      // , width = +width\n      , opt = {}\n      , pre = '';\n\n    i++;\n\n    switch (type) {\n      case 'd': // signed int\n        param = (+param).toString(10);\n        break;\n      case 'o': // unsigned octal\n        param = (+param).toString(8);\n        break;\n      case 'x': // unsigned hex int\n        param = (+param).toString(16);\n        break;\n      case 'X': // unsigned hex int uppercase\n        param = (+param).toString(16).toUppercase();\n        break;\n      case 's': // string\n        break;\n      case 'c': // char\n        param = isFinite(param)\n          ? String.fromCharCode(param || 0200)\n          : '';\n        break;\n    }\n\n    flags.forEach(function(flag) {\n      switch (flag) {\n        // left-justify by width\n        case '-':\n          opt.left = true;\n          break;\n        // always precede numbers with their signs\n        case '+':\n          opt.signs = true;\n          break;\n        // used with o, x, X - value is preceded with 0, 0x, or 0X respectively.\n        // used with a, A, e, E, f, F, g, G - forces written output to contain\n        // a decimal point even if no more digits follow\n        case '#':\n          opt.hexpoint = true;\n          break;\n        // if no sign is going to be written, black space in front of the value\n        case ' ':\n          opt.space = true;\n          break;\n      }\n    });\n\n    width = +width.split('.')[0];\n\n    // Should this be for opt.left too?\n    // Example: %2.2X - turns 0 into 00\n    if (width && !opt.left) {\n      param = param + '';\n      while (param.length < width) {\n        param = '0' + param;\n      }\n    }\n\n    if (opt.signs) {\n      if (+initial >= 0) {\n        pre += '+';\n      }\n    }\n\n    if (opt.space) {\n      if (!opt.signs && +initial >= 0) {\n        pre += ' ';\n      }\n    }\n\n    if (opt.hexpoint) {\n      switch (type) {\n        case 'o': // unsigned octal\n          pre += '0';\n          break;\n        case 'x': // unsigned hex int\n          pre += '0x';\n          break;\n        case 'X': // unsigned hex int uppercase\n          pre += '0X';\n          break;\n      }\n    }\n\n    if (opt.left) {\n      if (width > (pre.length + param.length)) {\n        width -= pre.length + param.length;\n        pre = Array(width + 1).join(' ') + pre;\n      }\n    }\n\n    return pre + param;\n  });\n}\n\n/**\n * Aliases\n */\n\nTput._alias = require('./alias');\n\nTput.alias = {};\n\n['bools', 'numbers', 'strings'].forEach(function(type) {\n  Object.keys(Tput._alias[type]).forEach(function(key) {\n    var aliases = Tput._alias[type][key];\n    Tput.alias[key] = [aliases[0]];\n    Tput.alias[key].terminfo = aliases[0];\n    Tput.alias[key].termcap = aliases[1];\n  });\n});\n\n// Bools\nTput.alias.no_esc_ctlc.push('beehive_glitch');\nTput.alias.dest_tabs_magic_smso.push('teleray_glitch');\n\n// Numbers\nTput.alias.micro_col_size.push('micro_char_size');\n\n/**\n * Feature Checking\n */\n\nTput.aliasMap = {};\n\nObject.keys(Tput.alias).forEach(function(key) {\n  Tput.aliasMap[key] = key;\n  Tput.alias[key].forEach(function(k) {\n    Tput.aliasMap[k] = key;\n  });\n});\n\nTput.prototype.has = function(name) {\n  name = Tput.aliasMap[name];\n\n  var val = this.all[name];\n\n  if (!name) return false;\n\n  if (typeof val === 'number') {\n    return val !== -1;\n  }\n\n  return !!val;\n};\n\n/**\n * Fallback Termcap Entry\n */\n\nTput.termcap = ''\n  + 'vt102|dec vt102:'\n  + ':do=^J:co#80:li#24:cl=50\\\\E[;H\\\\E[2J:'\n  + ':le=^H:bs:cm=5\\\\E[%i%d;%dH:nd=2\\\\E[C:up=2\\\\E[A:'\n  + ':ce=3\\\\E[K:cd=50\\\\E[J:so=2\\\\E[7m:se=2\\\\E[m:us=2\\\\E[4m:ue=2\\\\E[m:'\n  + ':md=2\\\\E[1m:mr=2\\\\E[7m:mb=2\\\\E[5m:me=2\\\\E[m:is=\\\\E[1;24r\\\\E[24;1H:'\n  + ':rs=\\\\E>\\\\E[?3l\\\\E[?4l\\\\E[?5l\\\\E[?7h\\\\E[?8h:ks=\\\\E[?1h\\\\E=:ke=\\\\E[?1l\\\\E>:'\n  + ':ku=\\\\EOA:kd=\\\\EOB:kr=\\\\EOC:kl=\\\\EOD:kb=^H:\\\\\\n'\n  + ':ho=\\\\E[H:k1=\\\\EOP:k2=\\\\EOQ:k3=\\\\EOR:k4=\\\\EOS:pt:sr=5\\\\EM:vt#3:'\n  + ':sc=\\\\E7:rc=\\\\E8:cs=\\\\E[%i%d;%dr:vs=\\\\E[?7l:ve=\\\\E[?7h:'\n  + ':mi:al=\\\\E[L:dc=\\\\E[P:dl=\\\\E[M:ei=\\\\E[4l:im=\\\\E[4h:';\n\n/**\n * Terminfo Data\n */\n\nTput.bools = [\n  'auto_left_margin',\n  'auto_right_margin',\n  'no_esc_ctlc',\n  'ceol_standout_glitch',\n  'eat_newline_glitch',\n  'erase_overstrike',\n  'generic_type',\n  'hard_copy',\n  'has_meta_key',\n  'has_status_line',\n  'insert_null_glitch',\n  'memory_above',\n  'memory_below',\n  'move_insert_mode',\n  'move_standout_mode',\n  'over_strike',\n  'status_line_esc_ok',\n  'dest_tabs_magic_smso',\n  'tilde_glitch',\n  'transparent_underline',\n  'xon_xoff',\n  'needs_xon_xoff',\n  'prtr_silent',\n  'hard_cursor',\n  'non_rev_rmcup',\n  'no_pad_char',\n  'non_dest_scroll_region',\n  'can_change',\n  'back_color_erase',\n  'hue_lightness_saturation',\n  'col_addr_glitch',\n  'cr_cancels_micro_mode',\n  'has_print_wheel',\n  'row_addr_glitch',\n  'semi_auto_right_margin',\n  'cpi_changes_res',\n  'lpi_changes_res',\n\n  // #ifdef __INTERNAL_CAPS_VISIBLE\n  'backspaces_with_bs',\n  'crt_no_scrolling',\n  'no_correctly_working_cr',\n  'gnu_has_meta_key',\n  'linefeed_is_newline',\n  'has_hardware_tabs',\n  'return_does_clr_eol'\n];\n\nTput.numbers = [\n  'columns',\n  'init_tabs',\n  'lines',\n  'lines_of_memory',\n  'magic_cookie_glitch',\n  'padding_baud_rate',\n  'virtual_terminal',\n  'width_status_line',\n  'num_labels',\n  'label_height',\n  'label_width',\n  'max_attributes',\n  'maximum_windows',\n  'max_colors',\n  'max_pairs',\n  'no_color_video',\n  'buffer_capacity',\n  'dot_vert_spacing',\n  'dot_horz_spacing',\n  'max_micro_address',\n  'max_micro_jump',\n  'micro_col_size',\n  'micro_line_size',\n  'number_of_pins',\n  'output_res_char',\n  'output_res_line',\n  'output_res_horz_inch',\n  'output_res_vert_inch',\n  'print_rate',\n  'wide_char_size',\n  'buttons',\n  'bit_image_entwining',\n  'bit_image_type',\n\n  // #ifdef __INTERNAL_CAPS_VISIBLE\n  'magic_cookie_glitch_ul',\n  'carriage_return_delay',\n  'new_line_delay',\n  'backspace_delay',\n  'horizontal_tab_delay',\n  'number_of_function_keys'\n];\n\nTput.strings = [\n  'back_tab',\n  'bell',\n  'carriage_return',\n  'change_scroll_region',\n  'clear_all_tabs',\n  'clear_screen',\n  'clr_eol',\n  'clr_eos',\n  'column_address',\n  'command_character',\n  'cursor_address',\n  'cursor_down',\n  'cursor_home',\n  'cursor_invisible',\n  'cursor_left',\n  'cursor_mem_address',\n  'cursor_normal',\n  'cursor_right',\n  'cursor_to_ll',\n  'cursor_up',\n  'cursor_visible',\n  'delete_character',\n  'delete_line',\n  'dis_status_line',\n  'down_half_line',\n  'enter_alt_charset_mode',\n  'enter_blink_mode',\n  'enter_bold_mode',\n  'enter_ca_mode',\n  'enter_delete_mode',\n  'enter_dim_mode',\n  'enter_insert_mode',\n  'enter_secure_mode',\n  'enter_protected_mode',\n  'enter_reverse_mode',\n  'enter_standout_mode',\n  'enter_underline_mode',\n  'erase_chars',\n  'exit_alt_charset_mode',\n  'exit_attribute_mode',\n  'exit_ca_mode',\n  'exit_delete_mode',\n  'exit_insert_mode',\n  'exit_standout_mode',\n  'exit_underline_mode',\n  'flash_screen',\n  'form_feed',\n  'from_status_line',\n  'init_1string',\n  'init_2string',\n  'init_3string',\n  'init_file',\n  'insert_character',\n  'insert_line',\n  'insert_padding',\n  'key_backspace',\n  'key_catab',\n  'key_clear',\n  'key_ctab',\n  'key_dc',\n  'key_dl',\n  'key_down',\n  'key_eic',\n  'key_eol',\n  'key_eos',\n  'key_f0',\n  'key_f1',\n  'key_f10',\n  'key_f2',\n  'key_f3',\n  'key_f4',\n  'key_f5',\n  'key_f6',\n  'key_f7',\n  'key_f8',\n  'key_f9',\n  'key_home',\n  'key_ic',\n  'key_il',\n  'key_left',\n  'key_ll',\n  'key_npage',\n  'key_ppage',\n  'key_right',\n  'key_sf',\n  'key_sr',\n  'key_stab',\n  'key_up',\n  'keypad_local',\n  'keypad_xmit',\n  'lab_f0',\n  'lab_f1',\n  'lab_f10',\n  'lab_f2',\n  'lab_f3',\n  'lab_f4',\n  'lab_f5',\n  'lab_f6',\n  'lab_f7',\n  'lab_f8',\n  'lab_f9',\n  'meta_off',\n  'meta_on',\n  'newline',\n  'pad_char',\n  'parm_dch',\n  'parm_delete_line',\n  'parm_down_cursor',\n  'parm_ich',\n  'parm_index',\n  'parm_insert_line',\n  'parm_left_cursor',\n  'parm_right_cursor',\n  'parm_rindex',\n  'parm_up_cursor',\n  'pkey_key',\n  'pkey_local',\n  'pkey_xmit',\n  'print_screen',\n  'prtr_off',\n  'prtr_on',\n  'repeat_char',\n  'reset_1string',\n  'reset_2string',\n  'reset_3string',\n  'reset_file',\n  'restore_cursor',\n  'row_address',\n  'save_cursor',\n  'scroll_forward',\n  'scroll_reverse',\n  'set_attributes',\n  'set_tab',\n  'set_window',\n  'tab',\n  'to_status_line',\n  'underline_char',\n  'up_half_line',\n  'init_prog',\n  'key_a1',\n  'key_a3',\n  'key_b2',\n  'key_c1',\n  'key_c3',\n  'prtr_non',\n  'char_padding',\n  'acs_chars',\n  'plab_norm',\n  'key_btab',\n  'enter_xon_mode',\n  'exit_xon_mode',\n  'enter_am_mode',\n  'exit_am_mode',\n  'xon_character',\n  'xoff_character',\n  'ena_acs',\n  'label_on',\n  'label_off',\n  'key_beg',\n  'key_cancel',\n  'key_close',\n  'key_command',\n  'key_copy',\n  'key_create',\n  'key_end',\n  'key_enter',\n  'key_exit',\n  'key_find',\n  'key_help',\n  'key_mark',\n  'key_message',\n  'key_move',\n  'key_next',\n  'key_open',\n  'key_options',\n  'key_previous',\n  'key_print',\n  'key_redo',\n  'key_reference',\n  'key_refresh',\n  'key_replace',\n  'key_restart',\n  'key_resume',\n  'key_save',\n  'key_suspend',\n  'key_undo',\n  'key_sbeg',\n  'key_scancel',\n  'key_scommand',\n  'key_scopy',\n  'key_screate',\n  'key_sdc',\n  'key_sdl',\n  'key_select',\n  'key_send',\n  'key_seol',\n  'key_sexit',\n  'key_sfind',\n  'key_shelp',\n  'key_shome',\n  'key_sic',\n  'key_sleft',\n  'key_smessage',\n  'key_smove',\n  'key_snext',\n  'key_soptions',\n  'key_sprevious',\n  'key_sprint',\n  'key_sredo',\n  'key_sreplace',\n  'key_sright',\n  'key_srsume',\n  'key_ssave',\n  'key_ssuspend',\n  'key_sundo',\n  'req_for_input',\n  'key_f11',\n  'key_f12',\n  'key_f13',\n  'key_f14',\n  'key_f15',\n  'key_f16',\n  'key_f17',\n  'key_f18',\n  'key_f19',\n  'key_f20',\n  'key_f21',\n  'key_f22',\n  'key_f23',\n  'key_f24',\n  'key_f25',\n  'key_f26',\n  'key_f27',\n  'key_f28',\n  'key_f29',\n  'key_f30',\n  'key_f31',\n  'key_f32',\n  'key_f33',\n  'key_f34',\n  'key_f35',\n  'key_f36',\n  'key_f37',\n  'key_f38',\n  'key_f39',\n  'key_f40',\n  'key_f41',\n  'key_f42',\n  'key_f43',\n  'key_f44',\n  'key_f45',\n  'key_f46',\n  'key_f47',\n  'key_f48',\n  'key_f49',\n  'key_f50',\n  'key_f51',\n  'key_f52',\n  'key_f53',\n  'key_f54',\n  'key_f55',\n  'key_f56',\n  'key_f57',\n  'key_f58',\n  'key_f59',\n  'key_f60',\n  'key_f61',\n  'key_f62',\n  'key_f63',\n  'clr_bol',\n  'clear_margins',\n  'set_left_margin',\n  'set_right_margin',\n  'label_format',\n  'set_clock',\n  'display_clock',\n  'remove_clock',\n  'create_window',\n  'goto_window',\n  'hangup',\n  'dial_phone',\n  'quick_dial',\n  'tone',\n  'pulse',\n  'flash_hook',\n  'fixed_pause',\n  'wait_tone',\n  'user0',\n  'user1',\n  'user2',\n  'user3',\n  'user4',\n  'user5',\n  'user6',\n  'user7',\n  'user8',\n  'user9',\n  'orig_pair',\n  'orig_colors',\n  'initialize_color',\n  'initialize_pair',\n  'set_color_pair',\n  'set_foreground',\n  'set_background',\n  'change_char_pitch',\n  'change_line_pitch',\n  'change_res_horz',\n  'change_res_vert',\n  'define_char',\n  'enter_doublewide_mode',\n  'enter_draft_quality',\n  'enter_italics_mode',\n  'enter_leftward_mode',\n  'enter_micro_mode',\n  'enter_near_letter_quality',\n  'enter_normal_quality',\n  'enter_shadow_mode',\n  'enter_subscript_mode',\n  'enter_superscript_mode',\n  'enter_upward_mode',\n  'exit_doublewide_mode',\n  'exit_italics_mode',\n  'exit_leftward_mode',\n  'exit_micro_mode',\n  'exit_shadow_mode',\n  'exit_subscript_mode',\n  'exit_superscript_mode',\n  'exit_upward_mode',\n  'micro_column_address',\n  'micro_down',\n  'micro_left',\n  'micro_right',\n  'micro_row_address',\n  'micro_up',\n  'order_of_pins',\n  'parm_down_micro',\n  'parm_left_micro',\n  'parm_right_micro',\n  'parm_up_micro',\n  'select_char_set',\n  'set_bottom_margin',\n  'set_bottom_margin_parm',\n  'set_left_margin_parm',\n  'set_right_margin_parm',\n  'set_top_margin',\n  'set_top_margin_parm',\n  'start_bit_image',\n  'start_char_set_def',\n  'stop_bit_image',\n  'stop_char_set_def',\n  'subscript_characters',\n  'superscript_characters',\n  'these_cause_cr',\n  'zero_motion',\n  'char_set_names',\n  'key_mouse',\n  'mouse_info',\n  'req_mouse_pos',\n  'get_mouse',\n  'set_a_foreground',\n  'set_a_background',\n  'pkey_plab',\n  'device_type',\n  'code_set_init',\n  'set0_des_seq',\n  'set1_des_seq',\n  'set2_des_seq',\n  'set3_des_seq',\n  'set_lr_margin',\n  'set_tb_margin',\n  'bit_image_repeat',\n  'bit_image_newline',\n  'bit_image_carriage_return',\n  'color_names',\n  'define_bit_image_region',\n  'end_bit_image_region',\n  'set_color_band',\n  'set_page_length',\n  'display_pc_char',\n  'enter_pc_charset_mode',\n  'exit_pc_charset_mode',\n  'enter_scancode_mode',\n  'exit_scancode_mode',\n  'pc_term_options',\n  'scancode_escape',\n  'alt_scancode_esc',\n  'enter_horizontal_hl_mode',\n  'enter_left_hl_mode',\n  'enter_low_hl_mode',\n  'enter_right_hl_mode',\n  'enter_top_hl_mode',\n  'enter_vertical_hl_mode',\n  'set_a_attributes',\n  'set_pglen_inch',\n\n  // #ifdef __INTERNAL_CAPS_VISIBLE\n  'termcap_init2',\n  'termcap_reset',\n  'linefeed_if_not_lf',\n  'backspace_if_not_bs',\n  'other_non_function_keys',\n  'arrow_key_map',\n  'acs_ulcorner',\n  'acs_llcorner',\n  'acs_urcorner',\n  'acs_lrcorner',\n  'acs_ltee',\n  'acs_rtee',\n  'acs_btee',\n  'acs_ttee',\n  'acs_hline',\n  'acs_vline',\n  'acs_plus',\n  'memory_lock',\n  'memory_unlock',\n  'box_chars_1'\n];\n\n// DEC Special Character and Line Drawing Set.\n// Taken from tty.js.\nTput.acsc = {    // (0\n  '`': '\\u25c6', // '◆'\n  'a': '\\u2592', // '▒'\n  'b': '\\u0009', // '\\t'\n  'c': '\\u000c', // '\\f'\n  'd': '\\u000d', // '\\r'\n  'e': '\\u000a', // '\\n'\n  'f': '\\u00b0', // '°'\n  'g': '\\u00b1', // '±'\n  'h': '\\u2424', // '\\u2424' (NL)\n  'i': '\\u000b', // '\\v'\n  'j': '\\u2518', // '┘'\n  'k': '\\u2510', // '┐'\n  'l': '\\u250c', // '┌'\n  'm': '\\u2514', // '└'\n  'n': '\\u253c', // '┼'\n  'o': '\\u23ba', // '⎺'\n  'p': '\\u23bb', // '⎻'\n  'q': '\\u2500', // '─'\n  'r': '\\u23bc', // '⎼'\n  's': '\\u23bd', // '⎽'\n  't': '\\u251c', // '├'\n  'u': '\\u2524', // '┤'\n  'v': '\\u2534', // '┴'\n  'w': '\\u252c', // '┬'\n  'x': '\\u2502', // '│'\n  'y': '\\u2264', // '≤'\n  'z': '\\u2265', // '≥'\n  '{': '\\u03c0', // 'π'\n  '|': '\\u2260', // '≠'\n  '}': '\\u00a3', // '£'\n  '~': '\\u00b7'  // '·'\n};\n\n// Convert ACS unicode characters to the\n// most similar-looking ascii characters.\nTput.utoa = Tput.prototype.utoa = {\n  '\\u25c6': '*', // '◆'\n  '\\u2592': ' ', // '▒'\n  // '\\u0009': '\\t', // '\\t'\n  // '\\u000c': '\\f', // '\\f'\n  // '\\u000d': '\\r', // '\\r'\n  // '\\u000a': '\\n', // '\\n'\n  '\\u00b0': '*', // '°'\n  '\\u00b1': '+', // '±'\n  '\\u2424': '\\n', // '\\u2424' (NL)\n  // '\\u000b': '\\v', // '\\v'\n  '\\u2518': '+', // '┘'\n  '\\u2510': '+', // '┐'\n  '\\u250c': '+', // '┌'\n  '\\u2514': '+', // '└'\n  '\\u253c': '+', // '┼'\n  '\\u23ba': '-', // '⎺'\n  '\\u23bb': '-', // '⎻'\n  '\\u2500': '-', // '─'\n  '\\u23bc': '-', // '⎼'\n  '\\u23bd': '_', // '⎽'\n  '\\u251c': '+', // '├'\n  '\\u2524': '+', // '┤'\n  '\\u2534': '+', // '┴'\n  '\\u252c': '+', // '┬'\n  '\\u2502': '|', // '│'\n  '\\u2264': '<', // '≤'\n  '\\u2265': '>', // '≥'\n  '\\u03c0': '?', // 'π'\n  '\\u2260': '=', // '≠'\n  '\\u00a3': '?', // '£'\n  '\\u00b7': '*'  // '·'\n};\n\n/**\n * Expose\n */\n\nexports = Tput;\nexports.sprintf = sprintf;\nexports.tryRead = tryRead;\n\nmodule.exports = exports;\n"]},"metadata":{},"sourceType":"script"}