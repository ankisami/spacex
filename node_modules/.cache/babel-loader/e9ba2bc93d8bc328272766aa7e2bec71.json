{"ast":null,"code":"/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\nvar chalk = require('chalk');\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nvar forEachLimit = require('async/forEachLimit');\n\nvar eachLimit = require('async/eachLimit');\n\nvar Common = require('../Common.js');\n\nvar cst = require('../../constants.js');\n\nvar util = require('util');\n\nvar tmpPath = require('os').tmpdir;\n\nvar which = require('../tools/which.js');\n\nvar sexec = require('../tools/sexec');\n\nmodule.exports = function (CLI) {\n  /**\n   * If command is launched without root right\n   * Display helper\n   */\n  function isNotRoot(startup_mode, platform, opts, cb) {\n    Common.printOut(`${cst.PREFIX_MSG}To ${startup_mode} the Startup Script, copy/paste the following command:`);\n\n    if (opts.user) {\n      console.log('sudo env PATH=$PATH:' + path.dirname(process.execPath) + ' pm2 ' + opts.args[1].name() + ' ' + platform + ' -u ' + opts.user + ' --hp ' + process.env.HOME);\n      return cb(new Error('You have to run this with elevated rights'));\n    }\n\n    return sexec('whoami', {\n      silent: true\n    }, function (err, stdout, stderr) {\n      console.log('sudo env PATH=$PATH:' + path.dirname(process.execPath) + ' ' + require.main.filename + ' ' + opts.args[1].name() + ' ' + platform + ' -u ' + stdout.trim() + ' --hp ' + process.env.HOME);\n      return cb(new Error('You have to run this with elevated rights'));\n    });\n  }\n  /**\n   * Detect running init system\n   */\n\n\n  function detectInitSystem() {\n    var hash_map = {\n      'systemctl': 'systemd',\n      'update-rc.d': 'upstart',\n      'chkconfig': 'systemv',\n      'rc-update': 'openrc',\n      'launchctl': 'launchd',\n      'sysrc': 'rcd',\n      'rcctl': 'rcd-openbsd',\n      'svcadm': 'smf'\n    };\n    var init_systems = Object.keys(hash_map);\n\n    for (var i = 0; i < init_systems.length; i++) {\n      if (which(init_systems[i]) != null) {\n        break;\n      }\n    }\n\n    if (i >= init_systems.length) {\n      Common.printError(cst.PREFIX_MSG_ERR + 'Init system not found');\n      return null;\n    }\n\n    Common.printOut(cst.PREFIX_MSG + 'Init System found: ' + chalk.bold(hash_map[init_systems[i]]));\n    return hash_map[init_systems[i]];\n  }\n\n  CLI.prototype.uninstallStartup = function (platform, opts, cb) {\n    var commands;\n    var that = this;\n    var actual_platform = detectInitSystem();\n    var user = opts.user || process.env.USER || process.env.LOGNAME; // Use LOGNAME on Solaris-like systems\n\n    var service_name = opts.serviceName || 'pm2-' + user;\n    var openrc_service_name = 'pm2';\n    var launchd_service_name = opts.serviceName || 'pm2.' + user;\n    if (!platform) platform = actual_platform;else if (actual_platform && actual_platform !== platform) {\n      Common.printOut('-----------------------------------------------------------');\n      Common.printOut(' PM2 detected ' + actual_platform + ' but you precised ' + platform);\n      Common.printOut(' Please verify that your choice is indeed your init system');\n      Common.printOut(' If you arent sure, just run : pm2 startup');\n      Common.printOut('-----------------------------------------------------------');\n    }\n    if (platform === null) throw new Error('Init system not found');\n\n    if (!cb) {\n      cb = function (err, data) {\n        if (err) return that.exitCli(cst.ERROR_EXIT);\n        return that.exitCli(cst.SUCCESS_EXIT);\n      };\n    }\n\n    if (process.getuid() != 0) {\n      return isNotRoot('unsetup', platform, opts, cb);\n    }\n\n    if (fs.existsSync('/etc/init.d/pm2-init.sh')) {\n      platform = 'oldsystem';\n    }\n\n    switch (platform) {\n      case 'systemd':\n        commands = ['systemctl stop ' + service_name, 'systemctl disable ' + service_name, 'rm /etc/systemd/system/' + service_name + '.service'];\n        break;\n\n      case 'systemv':\n        commands = ['chkconfig ' + service_name + ' off', 'rm /etc/init.d/' + service_name];\n        break;\n\n      case 'oldsystem':\n        Common.printOut(cst.PREFIX_MSG + 'Disabling and deleting old startup system');\n        commands = ['update-rc.d pm2-init.sh disable', 'update-rc.d -f pm2-init.sh remove', 'rm /etc/init.d/pm2-init.sh'];\n        break;\n\n      case 'openrc':\n        service_name = openrc_service_name;\n        commands = ['/etc/init.d/' + service_name + ' stop', 'rc-update delete ' + service_name + ' default', 'rm /etc/init.d/' + service_name];\n        break;\n\n      case 'upstart':\n        commands = ['update-rc.d ' + service_name + ' disable', 'update-rc.d -f ' + service_name + ' remove', 'rm /etc/init.d/' + service_name];\n        break;\n\n      case 'launchd':\n        var destination = path.join(process.env.HOME, 'Library/LaunchAgents/' + launchd_service_name + '.plist');\n        commands = ['launchctl remove ' + launchd_service_name + ' || true', 'rm ' + destination];\n        break;\n\n      case 'rcd':\n        service_name = opts.serviceName || 'pm2_' + user;\n        commands = ['/usr/local/etc/rc.d/' + service_name + ' stop', 'sysrc -x ' + service_name + '_enable', 'rm /usr/local/etc/rc.d/' + service_name];\n        break;\n\n      case 'rcd-openbsd':\n        service_name = opts.serviceName || 'pm2_' + user;\n        var destination = path.join('/etc/rc.d', service_name);\n        commands = ['rcctl stop ' + service_name, 'rcctl disable ' + service_name, 'rm ' + destination];\n        break;\n\n      case 'smf':\n        service_name = opts.serviceName || 'pm2_' + user;\n        commands = ['svcadm disable ' + service_name, 'svccfg delete -f ' + service_name];\n    }\n\n    ;\n    sexec(commands.join('&& '), function (code, stdout, stderr) {\n      Common.printOut(stdout);\n      Common.printOut(stderr);\n\n      if (code == 0) {\n        Common.printOut(cst.PREFIX_MSG + chalk.bold('Init file disabled.'));\n      } else {\n        Common.printOut(cst.ERROR_MSG + chalk.bold('Return code : ' + code));\n      }\n\n      cb(null, {\n        commands: commands,\n        platform: platform\n      });\n    });\n  };\n  /**\n   * Startup script generation\n   * @method startup\n   * @param {string} platform type (centos|redhat|amazon|gentoo|systemd|smf)\n   */\n\n\n  CLI.prototype.startup = function (platform, opts, cb) {\n    var that = this;\n    var actual_platform = detectInitSystem();\n    var user = opts.user || process.env.USER || process.env.LOGNAME; // Use LOGNAME on Solaris-like systems\n\n    var service_name = opts.serviceName || 'pm2-' + user;\n    var openrc_service_name = 'pm2';\n    var launchd_service_name = opts.serviceName || 'pm2.' + user;\n    if (!platform) platform = actual_platform;else if (actual_platform && actual_platform !== platform) {\n      Common.printOut('-----------------------------------------------------------');\n      Common.printOut(' PM2 detected ' + actual_platform + ' but you precised ' + platform);\n      Common.printOut(' Please verify that your choice is indeed your init system');\n      Common.printOut(' If you arent sure, just run : pm2 startup');\n      Common.printOut('-----------------------------------------------------------');\n    }\n    if (platform == null) throw new Error('Init system not found');\n\n    if (!cb) {\n      cb = function (err, data) {\n        if (err) return that.exitCli(cst.ERROR_EXIT);\n        return that.exitCli(cst.SUCCESS_EXIT);\n      };\n    }\n\n    if (process.getuid() != 0) {\n      return isNotRoot('setup', platform, opts, cb);\n    }\n\n    var destination;\n    var commands;\n    var template;\n\n    function getTemplate(type) {\n      return fs.readFileSync(path.join(__dirname, '..', 'templates/init-scripts', type + '.tpl'), {\n        encoding: 'utf8'\n      });\n    }\n\n    switch (platform) {\n      case 'ubuntu':\n      case 'centos':\n      case 'arch':\n      case 'oracle':\n      case 'systemd':\n        if (opts.waitIp) template = getTemplate('systemd-online');else template = getTemplate('systemd');\n        destination = '/etc/systemd/system/' + service_name + '.service';\n        commands = ['systemctl enable ' + service_name];\n        break;\n\n      case 'ubuntu14':\n      case 'ubuntu12':\n      case 'upstart':\n        template = getTemplate('upstart');\n        destination = '/etc/init.d/' + service_name;\n        commands = ['chmod +x ' + destination, 'mkdir -p /var/lock/subsys', 'touch /var/lock/subsys/' + service_name, 'update-rc.d ' + service_name + ' defaults'];\n        break;\n\n      case 'systemv':\n      case 'amazon':\n      case 'centos6':\n        template = getTemplate('upstart');\n        destination = '/etc/init.d/' + service_name;\n        commands = ['chmod +x ' + destination, 'mkdir -p /var/lock/subsys', 'touch /var/lock/subsys/' + service_name, 'chkconfig --add ' + service_name, 'chkconfig ' + service_name + ' on', 'initctl list'];\n        break;\n\n      case 'macos':\n      case 'darwin':\n      case 'launchd':\n        template = getTemplate('launchd');\n        destination = path.join(process.env.HOME, 'Library/LaunchAgents/' + launchd_service_name + '.plist');\n        commands = ['launchctl load -w ' + destination];\n        break;\n\n      case 'freebsd':\n      case 'rcd':\n        template = getTemplate('rcd');\n        service_name = opts.serviceName || 'pm2_' + user;\n        destination = '/usr/local/etc/rc.d/' + service_name;\n        commands = ['chmod 755 ' + destination, 'sysrc ' + service_name + '_enable=YES'];\n        break;\n\n      case 'openbsd':\n      case 'rcd-openbsd':\n        template = getTemplate('rcd-openbsd');\n        service_name = opts.serviceName || 'pm2_' + user;\n        destination = path.join('/etc/rc.d/', service_name);\n        commands = ['chmod 755 ' + destination, 'rcctl enable ' + service_name, 'rcctl start ' + service_name];\n        break;\n\n      case 'openrc':\n        template = getTemplate('openrc');\n        service_name = openrc_service_name;\n        destination = '/etc/init.d/' + service_name;\n        commands = ['chmod +x ' + destination, 'rc-update add ' + service_name + ' default'];\n        break;\n\n      case 'smf':\n      case 'sunos':\n      case 'solaris':\n        template = getTemplate('smf');\n        service_name = opts.serviceName || 'pm2_' + user;\n        destination = path.join(tmpPath(), service_name + '.xml');\n        commands = ['svccfg import ' + destination, 'svcadm enable ' + service_name];\n        break;\n\n      default:\n        throw new Error('Unknown platform / init system name');\n    }\n    /**\n     * 4# Replace template variable value\n     */\n\n\n    var envPath;\n    if (cst.HAS_NODE_EMBEDDED == true) envPath = util.format('%s:%s', process.env.PATH || '', path.dirname(process.execPath));else if (new RegExp(path.dirname(process.execPath)).test(process.env.PATH)) envPath = process.env.PATH;else envPath = util.format('%s:%s', process.env.PATH || '', path.dirname(process.execPath));\n    template = template.replace(/%PM2_PATH%/g, process.mainModule.filename).replace(/%NODE_PATH%/g, envPath).replace(/%USER%/g, user).replace(/%HOME_PATH%/g, opts.hp ? path.resolve(opts.hp, '.pm2') : cst.PM2_ROOT_PATH).replace(/%SERVICE_NAME%/g, service_name);\n    Common.printOut(chalk.bold('Platform'), platform);\n    Common.printOut(chalk.bold('Template'));\n    Common.printOut(template);\n    Common.printOut(chalk.bold('Target path'));\n    Common.printOut(destination);\n    Common.printOut(chalk.bold('Command list'));\n    Common.printOut(commands);\n    Common.printOut(cst.PREFIX_MSG + 'Writing init configuration in ' + destination);\n\n    try {\n      fs.writeFileSync(destination, template);\n    } catch (e) {\n      console.error(cst.PREFIX_MSG_ERR + 'Failure when trying to write startup script');\n      console.error(e.message || e);\n      return cb(e);\n    }\n\n    Common.printOut(cst.PREFIX_MSG + 'Making script booting at startup...');\n    forEachLimit(commands, 1, function (command, next) {\n      Common.printOut(cst.PREFIX_MSG + '[-] Executing: %s...', chalk.bold(command));\n      sexec(command, function (code, stdout, stderr) {\n        if (code === 0) {\n          Common.printOut(cst.PREFIX_MSG + chalk.bold('[v] Command successfully executed.'));\n          return next();\n        } else {\n          Common.printOut(chalk.red('[ERROR] Exit code : ' + code));\n          return next(new Error(command + ' failed, see error above.'));\n        }\n      });\n    }, function (err) {\n      if (err) {\n        console.error(cst.PREFIX_MSG_ERR + (err.message || err));\n        return cb(err);\n      }\n\n      Common.printOut(chalk.bold.blue('+---------------------------------------+'));\n      Common.printOut(chalk.bold.blue(cst.PREFIX_MSG + 'Freeze a process list on reboot via:'));\n      Common.printOut(chalk.bold('$ pm2 save'));\n      Common.printOut('');\n      Common.printOut(chalk.bold.blue(cst.PREFIX_MSG + 'Remove init script via:'));\n      Common.printOut(chalk.bold('$ pm2 unstartup ' + platform));\n      return cb(null, {\n        destination: destination,\n        template: template\n      });\n    });\n  };\n  /**\n   * DISABLED FEATURE\n   * KEEPING METHOD FOR BACKWARD COMPAT\n   */\n\n\n  CLI.prototype.autodump = function (cb) {\n    return cb();\n  };\n  /**\n   * Dump current processes managed by pm2 into DUMP_FILE_PATH file\n   * @method dump\n   * @param {} cb\n   * @return\n   */\n\n\n  CLI.prototype.dump = function (force, cb) {\n    var env_arr = [];\n    var that = this;\n\n    if (typeof force === 'function') {\n      cb = force;\n      force = false;\n    }\n\n    if (!cb) Common.printOut(cst.PREFIX_MSG + 'Saving current process list...');\n    that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n      if (err) {\n        Common.printError('Error retrieving process list: ' + err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n      /**\n       * Description\n       * @method fin\n       * @param {} err\n       * @return\n       */\n\n\n      function fin(err) {\n        // try to fix issues with empty dump file\n        // like #3485\n        if (!force && env_arr.length === 0 && !process.env.FORCE) {\n          // fix : if no dump file, no process, only module and after pm2 update\n          if (!fs.existsSync(cst.DUMP_FILE_PATH)) {\n            that.clearDump(function () {});\n          } // if no process in list don't modify dump file\n          // process list should not be empty\n\n\n          if (cb) {\n            return cb(new Error('Process list empty, cannot save empty list'));\n          } else {\n            Common.printOut(cst.PREFIX_MSG_WARNING + 'PM2 is not managing any process, skipping save...');\n            Common.printOut(cst.PREFIX_MSG_WARNING + 'To force saving use: pm2 save --force');\n            that.exitCli(cst.SUCCESS_EXIT);\n            return;\n          }\n        } // Back up dump file\n\n\n        try {\n          if (fs.existsSync(cst.DUMP_FILE_PATH)) {\n            fs.writeFileSync(cst.DUMP_BACKUP_FILE_PATH, fs.readFileSync(cst.DUMP_FILE_PATH));\n          }\n        } catch (e) {\n          console.error(e.stack || e);\n          Common.printOut(cst.PREFIX_MSG_ERR + 'Failed to back up dump file in %s', cst.DUMP_BACKUP_FILE_PATH);\n        } // Overwrite dump file, delete if broken and exit\n\n\n        try {\n          fs.writeFileSync(cst.DUMP_FILE_PATH, JSON.stringify(env_arr, '', 2));\n        } catch (e) {\n          console.error(e.stack || e);\n\n          try {\n            // try to backup file\n            if (fs.existsSync(cst.DUMP_BACKUP_FILE_PATH)) {\n              fs.writeFileSync(cst.DUMP_FILE_PATH, fs.readFileSync(cst.DUMP_BACKUP_FILE_PATH));\n            }\n          } catch (e) {\n            // don't keep broken file\n            fs.unlinkSync(cst.DUMP_FILE_PATH);\n            console.error(e.stack || e);\n          }\n\n          Common.printOut(cst.PREFIX_MSG_ERR + 'Failed to save dump file in %s', cst.DUMP_FILE_PATH);\n          return that.exitCli(cst.ERROR_EXIT);\n        }\n\n        if (cb) return cb(null, {\n          success: true\n        });\n        Common.printOut(cst.PREFIX_MSG + 'Successfully saved in %s', cst.DUMP_FILE_PATH);\n        return that.exitCli(cst.SUCCESS_EXIT);\n      }\n\n      (function ex(apps) {\n        if (!apps[0]) return fin(null);\n        delete apps[0].pm2_env.instances;\n        delete apps[0].pm2_env.pm_id;\n        delete apps[0].pm2_env.prev_restart_delay;\n        if (!apps[0].pm2_env.pmx_module) env_arr.push(apps[0].pm2_env);\n        apps.shift();\n        return ex(apps);\n      })(list);\n    });\n  };\n  /**\n   * Remove DUMP_FILE_PATH file and DUMP_BACKUP_FILE_PATH file\n   * @method dump\n   * @param {} cb\n   * @return\n   */\n\n\n  CLI.prototype.clearDump = function (cb) {\n    fs.writeFileSync(cst.DUMP_FILE_PATH, JSON.stringify([]));\n    if (cb && typeof cb === 'function') return cb();\n    Common.printOut(cst.PREFIX_MSG + 'Successfully created %s', cst.DUMP_FILE_PATH);\n    return this.exitCli(cst.SUCCESS_EXIT);\n  };\n  /**\n   * Resurrect processes\n   * @method resurrect\n   * @param {} cb\n   * @return\n   */\n\n\n  CLI.prototype.resurrect = function (cb) {\n    var apps = {};\n    var that = this;\n    var processes;\n\n    function readDumpFile(dumpFilePath) {\n      Common.printOut(cst.PREFIX_MSG + 'Restoring processes located in %s', dumpFilePath);\n\n      try {\n        var apps = fs.readFileSync(dumpFilePath);\n      } catch (e) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'Failed to read dump file in %s', dumpFilePath);\n        throw e;\n      }\n\n      return apps;\n    }\n\n    function parseDumpFile(dumpFilePath, apps) {\n      try {\n        var processes = Common.parseConfig(apps, 'none');\n      } catch (e) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'Failed to parse dump file in %s', dumpFilePath);\n\n        try {\n          fs.unlinkSync(dumpFilePath);\n        } catch (e) {\n          console.error(e.stack || e);\n        }\n\n        throw e;\n      }\n\n      return processes;\n    } // Read dump file, fall back to backup, delete if broken\n\n\n    try {\n      apps = readDumpFile(cst.DUMP_FILE_PATH);\n      processes = parseDumpFile(cst.DUMP_FILE_PATH, apps);\n    } catch (e) {\n      try {\n        apps = readDumpFile(cst.DUMP_BACKUP_FILE_PATH);\n        processes = parseDumpFile(cst.DUMP_BACKUP_FILE_PATH, apps);\n      } catch (e) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'No processes saved; DUMP file doesn\\'t exist'); // if (cb) return cb(Common.retErr(e));\n        // else return that.exitCli(cst.ERROR_EXIT);\n\n        return that.speedList();\n      }\n    }\n\n    that.Client.executeRemote('getMonitorData', {}, function (err, list) {\n      if (err) {\n        Common.printError(err);\n        return that.exitCli(1);\n      }\n\n      var current = [];\n      var target = [];\n      list.forEach(function (app) {\n        if (!current[app.name]) current[app.name] = 0;\n        current[app.name]++;\n      });\n      processes.forEach(function (app) {\n        if (!target[app.name]) target[app.name] = 0;\n        target[app.name]++;\n      });\n      var tostart = Object.keys(target).filter(function (i) {\n        return Object.keys(current).indexOf(i) < 0;\n      });\n      eachLimit(processes, cst.CONCURRENT_ACTIONS, function (app, next) {\n        if (tostart.indexOf(app.name) == -1) return next();\n        that.Client.executeRemote('prepare', app, function (err, dt) {\n          if (err) Common.printError(err);else Common.printOut(cst.PREFIX_MSG + 'Process %s restored', app.pm_exec_path);\n          next();\n        });\n      }, function (err) {\n        return cb ? cb(null, apps) : that.speedList();\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/samianki/node_modules/pm2/lib/API/Startup.js"],"names":["chalk","require","path","fs","forEachLimit","eachLimit","Common","cst","util","tmpPath","tmpdir","which","sexec","module","exports","CLI","isNotRoot","startup_mode","platform","opts","cb","printOut","PREFIX_MSG","user","console","log","dirname","process","execPath","args","name","env","HOME","Error","silent","err","stdout","stderr","main","filename","trim","detectInitSystem","hash_map","init_systems","Object","keys","i","length","printError","PREFIX_MSG_ERR","bold","prototype","uninstallStartup","commands","that","actual_platform","USER","LOGNAME","service_name","serviceName","openrc_service_name","launchd_service_name","data","exitCli","ERROR_EXIT","SUCCESS_EXIT","getuid","existsSync","destination","join","code","ERROR_MSG","startup","template","getTemplate","type","readFileSync","__dirname","encoding","waitIp","envPath","HAS_NODE_EMBEDDED","format","PATH","RegExp","test","replace","mainModule","hp","resolve","PM2_ROOT_PATH","writeFileSync","e","error","message","command","next","red","blue","autodump","dump","force","env_arr","Client","executeRemote","list","retErr","fin","FORCE","DUMP_FILE_PATH","clearDump","PREFIX_MSG_WARNING","DUMP_BACKUP_FILE_PATH","stack","JSON","stringify","unlinkSync","success","ex","apps","pm2_env","instances","pm_id","prev_restart_delay","pmx_module","push","shift","resurrect","processes","readDumpFile","dumpFilePath","parseDumpFile","parseConfig","speedList","current","target","forEach","app","tostart","filter","indexOf","CONCURRENT_ACTIONS","dt","pm_exec_path"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013 the PM2 project authors. All rights reserved.\n * Use of this source code is governed by a license that\n * can be found in the LICENSE file.\n */\nvar chalk        = require('chalk');\nvar path         = require('path');\nvar fs           = require('fs');\nvar forEachLimit = require('async/forEachLimit');\nvar eachLimit    = require('async/eachLimit');\nvar Common       = require('../Common.js');\nvar cst          = require('../../constants.js');\nvar util \t       = require('util');\nvar tmpPath      = require('os').tmpdir;\nvar which        = require('../tools/which.js');\nvar sexec = require('../tools/sexec')\nmodule.exports = function(CLI) {\n  /**\n   * If command is launched without root right\n   * Display helper\n   */\n  function isNotRoot(startup_mode, platform, opts, cb) {\n    Common.printOut(`${cst.PREFIX_MSG}To ${startup_mode} the Startup Script, copy/paste the following command:`);\n    if (opts.user) {\n      console.log('sudo env PATH=$PATH:' + path.dirname(process.execPath) + ' pm2 ' + opts.args[1].name() + ' ' + platform + ' -u ' + opts.user + ' --hp ' + process.env.HOME);\n      return cb(new Error('You have to run this with elevated rights'));\n    }\n    return sexec('whoami', {silent: true}, function(err, stdout, stderr) {\n      console.log('sudo env PATH=$PATH:' + path.dirname(process.execPath) + ' ' + require.main.filename + ' ' + opts.args[1].name() + ' ' + platform + ' -u ' + stdout.trim() + ' --hp ' + process.env.HOME);\n      return cb(new Error('You have to run this with elevated rights'));\n    });\n  }\n\n  /**\n   * Detect running init system\n   */\n  function detectInitSystem() {\n    var hash_map = {\n      'systemctl'  : 'systemd',\n      'update-rc.d': 'upstart',\n      'chkconfig'  : 'systemv',\n      'rc-update'  : 'openrc',\n      'launchctl'  : 'launchd',\n      'sysrc'      : 'rcd',\n      'rcctl'      : 'rcd-openbsd',\n      'svcadm'     : 'smf'\n    };\n    var init_systems = Object.keys(hash_map);\n\n    for (var i = 0; i < init_systems.length; i++) {\n      if (which(init_systems[i]) != null) {\n        break;\n      }\n    }\n\n    if (i >= init_systems.length) {\n      Common.printError(cst.PREFIX_MSG_ERR + 'Init system not found');\n      return null;\n    }\n    Common.printOut(cst.PREFIX_MSG + 'Init System found: ' + chalk.bold(hash_map[init_systems[i]]));\n    return hash_map[init_systems[i]];\n  }\n\n  CLI.prototype.uninstallStartup = function(platform, opts, cb) {\n    var commands;\n    var that = this;\n    var actual_platform = detectInitSystem();\n    var user = opts.user || process.env.USER || process.env.LOGNAME; // Use LOGNAME on Solaris-like systems\n    var service_name = (opts.serviceName || 'pm2-' + user);\n    var openrc_service_name = 'pm2';\n    var launchd_service_name = (opts.serviceName || 'pm2.' + user);\n\n    if (!platform)\n      platform = actual_platform;\n    else if (actual_platform && actual_platform !== platform) {\n      Common.printOut('-----------------------------------------------------------')\n      Common.printOut(' PM2 detected ' + actual_platform + ' but you precised ' + platform)\n      Common.printOut(' Please verify that your choice is indeed your init system')\n      Common.printOut(' If you arent sure, just run : pm2 startup')\n      Common.printOut('-----------------------------------------------------------')\n    }\n    if (platform === null)\n      throw new Error('Init system not found')\n\n    if (!cb) {\n      cb = function(err, data) {\n        if (err)\n          return that.exitCli(cst.ERROR_EXIT);\n        return that.exitCli(cst.SUCCESS_EXIT);\n      }\n    }\n\n    if (process.getuid() != 0) {\n      return isNotRoot('unsetup', platform, opts, cb);\n    }\n\n    if (fs.existsSync('/etc/init.d/pm2-init.sh')) {\n      platform = 'oldsystem';\n    }\n\n    switch(platform) {\n    case 'systemd':\n      commands = [\n        'systemctl stop ' + service_name,\n        'systemctl disable ' + service_name,\n        'rm /etc/systemd/system/' + service_name + '.service'\n      ];\n      break;\n    case 'systemv':\n      commands = [\n        'chkconfig ' + service_name + ' off',\n        'rm /etc/init.d/' + service_name\n      ];\n      break;\n    case 'oldsystem':\n      Common.printOut(cst.PREFIX_MSG + 'Disabling and deleting old startup system');\n      commands = [\n        'update-rc.d pm2-init.sh disable',\n        'update-rc.d -f pm2-init.sh remove',\n        'rm /etc/init.d/pm2-init.sh'\n      ];\n      break;\n    case 'openrc':\n      service_name = openrc_service_name;\n      commands = [\n        '/etc/init.d/' + service_name + ' stop',\n        'rc-update delete ' + service_name + ' default',\n        'rm /etc/init.d/' + service_name\n      ];\n      break;\n    case 'upstart':\n      commands = [\n        'update-rc.d ' + service_name + ' disable',\n        'update-rc.d -f ' + service_name + ' remove',\n        'rm /etc/init.d/' + service_name\n      ];\n      break;\n    case 'launchd':\n      var destination = path.join(process.env.HOME, 'Library/LaunchAgents/' + launchd_service_name + '.plist');\n      commands = [\n        'launchctl remove ' + launchd_service_name + ' || true',\n        'rm ' + destination\n      ];\n      break;\n    case 'rcd':\n      service_name = (opts.serviceName || 'pm2_' + user);\n      commands = [\n        '/usr/local/etc/rc.d/' + service_name + ' stop',\n        'sysrc -x ' + service_name  + '_enable',\n        'rm /usr/local/etc/rc.d/' + service_name\n      ];\n      break;\n    case 'rcd-openbsd':\n      service_name = (opts.serviceName || 'pm2_' + user);\n      var destination = path.join('/etc/rc.d', service_name);\n      commands = [\n        'rcctl stop ' + service_name,\n        'rcctl disable ' + service_name,\n        'rm ' + destination\n      ];\n      break;\n    case 'smf':\n      service_name = (opts.serviceName || 'pm2_' + user);\n      commands = [\n        'svcadm disable ' + service_name,\n        'svccfg delete -f ' + service_name\n      ]\n    };\n\n    sexec(commands.join('&& '), function(code, stdout, stderr) {\n      Common.printOut(stdout);\n      Common.printOut(stderr);\n      if (code == 0) {\n        Common.printOut(cst.PREFIX_MSG + chalk.bold('Init file disabled.'));\n      } else {\n        Common.printOut(cst.ERROR_MSG + chalk.bold('Return code : ' + code));\n      }\n\n      cb(null, {\n        commands : commands,\n        platform : platform\n      });\n    });\n  };\n\n  /**\n   * Startup script generation\n   * @method startup\n   * @param {string} platform type (centos|redhat|amazon|gentoo|systemd|smf)\n   */\n  CLI.prototype.startup = function(platform, opts, cb) {\n    var that = this;\n    var actual_platform = detectInitSystem();\n    var user = (opts.user || process.env.USER || process.env.LOGNAME); // Use LOGNAME on Solaris-like systems\n    var service_name = (opts.serviceName || 'pm2-' + user);\n    var openrc_service_name = 'pm2';\n    var launchd_service_name = (opts.serviceName || 'pm2.' + user);\n\n    if (!platform)\n      platform = actual_platform;\n    else if (actual_platform && actual_platform !== platform) {\n      Common.printOut('-----------------------------------------------------------')\n      Common.printOut(' PM2 detected ' + actual_platform + ' but you precised ' + platform)\n      Common.printOut(' Please verify that your choice is indeed your init system')\n      Common.printOut(' If you arent sure, just run : pm2 startup')\n      Common.printOut('-----------------------------------------------------------')\n    }\n    if (platform == null)\n      throw new Error('Init system not found');\n\n    if (!cb) {\n      cb = function(err, data) {\n        if (err)\n          return that.exitCli(cst.ERROR_EXIT);\n        return that.exitCli(cst.SUCCESS_EXIT);\n      }\n    }\n\n    if (process.getuid() != 0) {\n      return isNotRoot('setup', platform, opts, cb);\n    }\n\n    var destination;\n    var commands;\n    var template;\n\n    function getTemplate(type) {\n      return fs.readFileSync(path.join(__dirname, '..', 'templates/init-scripts', type + '.tpl'), {encoding: 'utf8'});\n    }\n\n    switch(platform) {\n    case 'ubuntu':\n    case 'centos':\n    case 'arch':\n    case 'oracle':\n    case 'systemd':\n      if (opts.waitIp)\n        template = getTemplate('systemd-online');\n      else\n        template = getTemplate('systemd');\n      destination = '/etc/systemd/system/' + service_name + '.service';\n      commands = [\n        'systemctl enable ' + service_name\n      ];\n      break;\n    case 'ubuntu14':\n    case 'ubuntu12':\n    case 'upstart':\n      template = getTemplate('upstart');\n      destination = '/etc/init.d/' + service_name;\n      commands = [\n        'chmod +x ' + destination,\n        'mkdir -p /var/lock/subsys',\n        'touch /var/lock/subsys/' + service_name,\n        'update-rc.d ' + service_name + ' defaults'\n      ];\n      break;\n    case 'systemv':\n    case 'amazon':\n    case 'centos6':\n      template = getTemplate('upstart');\n      destination = '/etc/init.d/' + service_name;\n      commands = [\n        'chmod +x ' + destination,\n        'mkdir -p /var/lock/subsys',\n        'touch /var/lock/subsys/' + service_name,\n        'chkconfig --add ' + service_name,\n        'chkconfig ' + service_name + ' on',\n        'initctl list'\n      ];\n      break;\n    case 'macos':\n    case 'darwin':\n    case 'launchd':\n      template = getTemplate('launchd');\n      destination = path.join(process.env.HOME, 'Library/LaunchAgents/' + launchd_service_name + '.plist');\n      commands = [\n        'launchctl load -w ' + destination\n      ]\n      break;\n    case 'freebsd':\n    case 'rcd':\n      template = getTemplate('rcd');\n      service_name = (opts.serviceName || 'pm2_' + user);\n      destination = '/usr/local/etc/rc.d/' + service_name;\n      commands = [\n        'chmod 755 ' + destination,\n        'sysrc ' + service_name + '_enable=YES'\n      ];\n      break;\n    case 'openbsd':\n    case 'rcd-openbsd':\n      template = getTemplate('rcd-openbsd');\n      service_name = (opts.serviceName || 'pm2_' + user);\n      destination = path.join('/etc/rc.d/', service_name);\n      commands = [\n        'chmod 755 ' + destination,\n        'rcctl enable ' + service_name,\n        'rcctl start ' + service_name\n      ];\n      break;\n    case 'openrc':\n      template = getTemplate('openrc');\n      service_name = openrc_service_name;\n      destination = '/etc/init.d/' + service_name;\n      commands = [\n        'chmod +x ' + destination,\n        'rc-update add ' + service_name + ' default'\n      ];\n      break;\n    case 'smf':\n    case 'sunos':\n    case 'solaris':\n      template = getTemplate('smf');\n      service_name = (opts.serviceName || 'pm2_' + user);\n      destination = path.join(tmpPath(), service_name + '.xml');\n      commands = [\n        'svccfg import ' + destination,\n        'svcadm enable ' + service_name\n      ];\n      break;\n    default:\n      throw new Error('Unknown platform / init system name');\n    }\n\n    /**\n     * 4# Replace template variable value\n     */\n    var envPath\n\n    if (cst.HAS_NODE_EMBEDDED == true)\n      envPath = util.format('%s:%s', process.env.PATH || '', path.dirname(process.execPath))\n    else if (new RegExp(path.dirname(process.execPath)).test(process.env.PATH))\n      envPath = process.env.PATH\n    else\n      envPath = util.format('%s:%s', process.env.PATH || '', path.dirname(process.execPath))\n\n    template = template.replace(/%PM2_PATH%/g, process.mainModule.filename)\n      .replace(/%NODE_PATH%/g, envPath)\n      .replace(/%USER%/g, user)\n      .replace(/%HOME_PATH%/g, opts.hp ? path.resolve(opts.hp, '.pm2') : cst.PM2_ROOT_PATH)\n      .replace(/%SERVICE_NAME%/g, service_name);\n\n    Common.printOut(chalk.bold('Platform'), platform);\n    Common.printOut(chalk.bold('Template'));\n    Common.printOut(template);\n    Common.printOut(chalk.bold('Target path'));\n    Common.printOut(destination);\n    Common.printOut(chalk.bold('Command list'));\n    Common.printOut(commands);\n\n    Common.printOut(cst.PREFIX_MSG + 'Writing init configuration in ' + destination);\n    try {\n      fs.writeFileSync(destination, template);\n    } catch (e) {\n      console.error(cst.PREFIX_MSG_ERR + 'Failure when trying to write startup script');\n      console.error(e.message || e);\n      return cb(e);\n    }\n\n    Common.printOut(cst.PREFIX_MSG + 'Making script booting at startup...');\n\n    forEachLimit(commands, 1, function(command, next) {\n      Common.printOut(cst.PREFIX_MSG + '[-] Executing: %s...', chalk.bold(command));\n\n      sexec(command, function(code, stdout, stderr) {\n        if (code === 0) {\n          Common.printOut(cst.PREFIX_MSG + chalk.bold('[v] Command successfully executed.'));\n          return next();\n        } else {\n          Common.printOut(chalk.red('[ERROR] Exit code : ' + code))\n          return next(new Error(command + ' failed, see error above.'));\n        }\n      })\n\n    }, function(err) {\n      if (err) {\n        console.error(cst.PREFIX_MSG_ERR + (err.message || err));\n        return cb(err);\n      }\n      Common.printOut(chalk.bold.blue('+---------------------------------------+'));\n      Common.printOut(chalk.bold.blue((cst.PREFIX_MSG + 'Freeze a process list on reboot via:' )));\n      Common.printOut(chalk.bold('$ pm2 save'));\n      Common.printOut('');\n      Common.printOut(chalk.bold.blue(cst.PREFIX_MSG + 'Remove init script via:'));\n      Common.printOut(chalk.bold('$ pm2 unstartup ' + platform));\n\n      return cb(null, {\n        destination  : destination,\n        template : template\n      });\n    });\n  };\n\n  /**\n   * DISABLED FEATURE\n   * KEEPING METHOD FOR BACKWARD COMPAT\n   */\n  CLI.prototype.autodump = function(cb) {\n    return cb()\n  }\n\n  /**\n   * Dump current processes managed by pm2 into DUMP_FILE_PATH file\n   * @method dump\n   * @param {} cb\n   * @return\n   */\n  CLI.prototype.dump = function(force, cb) {\n    var env_arr = [];\n    var that = this;\n\n    if (typeof(force) === 'function') {\n      cb = force\n      force = false\n    }\n\n    if (!cb)\n      Common.printOut(cst.PREFIX_MSG + 'Saving current process list...');\n\n    that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n      if (err) {\n        Common.printError('Error retrieving process list: ' + err);\n        return cb ? cb(Common.retErr(err)) : that.exitCli(cst.ERROR_EXIT);\n      }\n\n      /**\n       * Description\n       * @method fin\n       * @param {} err\n       * @return\n       */\n      function fin(err) {\n\n        // try to fix issues with empty dump file\n        // like #3485\n        if (!force && env_arr.length === 0 && !process.env.FORCE) {\n\n          // fix : if no dump file, no process, only module and after pm2 update\n          if (!fs.existsSync(cst.DUMP_FILE_PATH)) {\n            that.clearDump(function(){});\n          }\n\n          // if no process in list don't modify dump file\n          // process list should not be empty\n          if (cb) {\n            return cb(new Error('Process list empty, cannot save empty list'));\n          } else  {\n            Common.printOut(cst.PREFIX_MSG_WARNING + 'PM2 is not managing any process, skipping save...');\n            Common.printOut(cst.PREFIX_MSG_WARNING + 'To force saving use: pm2 save --force');\n            that.exitCli(cst.SUCCESS_EXIT);\n            return;\n          }\n        }\n\n        // Back up dump file\n        try {\n          if (fs.existsSync(cst.DUMP_FILE_PATH)) {\n            fs.writeFileSync(cst.DUMP_BACKUP_FILE_PATH, fs.readFileSync(cst.DUMP_FILE_PATH));\n          }\n        } catch (e) {\n          console.error(e.stack || e);\n          Common.printOut(cst.PREFIX_MSG_ERR + 'Failed to back up dump file in %s', cst.DUMP_BACKUP_FILE_PATH);\n        }\n\n        // Overwrite dump file, delete if broken and exit\n        try {\n          fs.writeFileSync(cst.DUMP_FILE_PATH, JSON.stringify(env_arr, '', 2));\n        } catch (e) {\n          console.error(e.stack || e);\n          try {\n            // try to backup file\n            if (fs.existsSync(cst.DUMP_BACKUP_FILE_PATH)) {\n              fs.writeFileSync(cst.DUMP_FILE_PATH, fs.readFileSync(cst.DUMP_BACKUP_FILE_PATH));\n            }\n          } catch (e) {\n            // don't keep broken file\n            fs.unlinkSync(cst.DUMP_FILE_PATH);\n            console.error(e.stack || e);\n          }\n          Common.printOut(cst.PREFIX_MSG_ERR + 'Failed to save dump file in %s', cst.DUMP_FILE_PATH);\n          return that.exitCli(cst.ERROR_EXIT);\n        }\n        if (cb) return cb(null, {success:true});\n\n        Common.printOut(cst.PREFIX_MSG + 'Successfully saved in %s', cst.DUMP_FILE_PATH);\n        return that.exitCli(cst.SUCCESS_EXIT);\n      }\n\n      (function ex(apps) {\n        if (!apps[0]) return fin(null);\n        delete apps[0].pm2_env.instances;\n        delete apps[0].pm2_env.pm_id;\n        delete apps[0].pm2_env.prev_restart_delay;\n        if (!apps[0].pm2_env.pmx_module)\n          env_arr.push(apps[0].pm2_env);\n        apps.shift();\n        return ex(apps);\n      })(list);\n    });\n  };\n\n  /**\n   * Remove DUMP_FILE_PATH file and DUMP_BACKUP_FILE_PATH file\n   * @method dump\n   * @param {} cb\n   * @return\n   */\n  CLI.prototype.clearDump = function(cb) {\n    fs.writeFileSync(cst.DUMP_FILE_PATH, JSON.stringify([]));\n\n    if(cb && typeof cb === 'function') return cb();\n\n    Common.printOut(cst.PREFIX_MSG + 'Successfully created %s', cst.DUMP_FILE_PATH);\n    return this.exitCli(cst.SUCCESS_EXIT);\n  };\n\n  /**\n   * Resurrect processes\n   * @method resurrect\n   * @param {} cb\n   * @return\n   */\n  CLI.prototype.resurrect = function(cb) {\n    var apps = {};\n    var that = this;\n\n    var processes;\n\n    function readDumpFile(dumpFilePath) {\n      Common.printOut(cst.PREFIX_MSG + 'Restoring processes located in %s', dumpFilePath);\n      try {\n        var apps = fs.readFileSync(dumpFilePath);\n      } catch (e) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'Failed to read dump file in %s', dumpFilePath);\n        throw e;\n      }\n\n      return apps;\n    }\n\n    function parseDumpFile(dumpFilePath, apps) {\n      try {\n        var processes = Common.parseConfig(apps, 'none');\n      } catch (e) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'Failed to parse dump file in %s', dumpFilePath);\n        try {\n          fs.unlinkSync(dumpFilePath);\n        } catch (e) {\n          console.error(e.stack || e);\n        }\n        throw e;\n      }\n\n      return processes;\n    }\n\n    // Read dump file, fall back to backup, delete if broken\n    try {\n      apps = readDumpFile(cst.DUMP_FILE_PATH);\n      processes = parseDumpFile(cst.DUMP_FILE_PATH, apps);\n    } catch(e) {\n      try {\n        apps = readDumpFile(cst.DUMP_BACKUP_FILE_PATH);\n        processes = parseDumpFile(cst.DUMP_BACKUP_FILE_PATH, apps);\n      } catch(e) {\n        Common.printError(cst.PREFIX_MSG_ERR + 'No processes saved; DUMP file doesn\\'t exist');\n        // if (cb) return cb(Common.retErr(e));\n        // else return that.exitCli(cst.ERROR_EXIT);\n        return that.speedList();\n      }\n    }\n\n    that.Client.executeRemote('getMonitorData', {}, function(err, list) {\n      if (err) {\n        Common.printError(err);\n        return that.exitCli(1);\n      }\n\n      var current = [];\n      var target = [];\n\n      list.forEach(function(app) {\n        if (!current[app.name])\n          current[app.name] = 0;\n        current[app.name]++;\n      });\n\n      processes.forEach(function(app) {\n        if (!target[app.name])\n          target[app.name] = 0;\n        target[app.name]++;\n      });\n\n      var tostart = Object.keys(target).filter(function(i) {\n        return Object.keys(current).indexOf(i) < 0;\n      })\n\n      eachLimit(processes, cst.CONCURRENT_ACTIONS, function(app, next) {\n        if (tostart.indexOf(app.name) == -1)\n          return next();\n        that.Client.executeRemote('prepare', app, function(err, dt) {\n          if (err)\n            Common.printError(err);\n          else\n            Common.printOut(cst.PREFIX_MSG + 'Process %s restored', app.pm_exec_path);\n          next();\n        });\n      }, function(err) {\n        return cb ? cb(null, apps) : that.speedList();\n      });\n    });\n  };\n\n}\n"]},"metadata":{},"sourceType":"script"}