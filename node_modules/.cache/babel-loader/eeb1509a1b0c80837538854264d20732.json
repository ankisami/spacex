{"ast":null,"code":"'use strict'; // @ts-check\n// ==================================================================================\n// graphics.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 7. Graphics (controller, display)\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\n\nconst exec = require('child_process').exec;\n\nconst execSync = require('child_process').execSync;\n\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = _platform === 'linux';\n\nconst _darwin = _platform === 'darwin';\n\nconst _windows = _platform === 'win32';\n\nconst _freebsd = _platform === 'freebsd';\n\nconst _openbsd = _platform === 'openbsd';\n\nconst _netbsd = _platform === 'netbsd';\n\nconst _sunos = _platform === 'sunos';\n\nlet _resolutionx = 0;\nlet _resolutiony = 0;\nlet _pixeldepth = 0;\nlet _refreshrate = 0;\nconst videoTypes = {\n  '-2': 'UNINITIALIZED',\n  '-1': 'OTHER',\n  '0': 'HD15',\n  '1': 'SVIDEO',\n  '2': 'Composite video',\n  '3': 'Component video',\n  '4': 'DVI',\n  '5': 'HDMI',\n  '6': 'LVDS',\n  '8': 'D_JPN',\n  '9': 'SDI',\n  '10': 'DP',\n  '11': 'DP embedded',\n  '12': 'UDI',\n  '13': 'UDI embedded',\n  '14': 'SDTVDONGLE',\n  '15': 'MIRACAST',\n  '2147483648': 'INTERNAL'\n};\n\nfunction graphics(callback) {\n  function parseLinesDarwin(lines) {\n    let starts = [];\n    let level = -1;\n    let lastlevel = -1;\n    let controllers = [];\n    let displays = [];\n    let currentController = {\n      vendor: '',\n      model: '',\n      bus: '',\n      vram: -1,\n      vramDynamic: false\n    };\n    let currentDisplay = {\n      vendor: '',\n      model: '',\n      deviceName: '',\n      main: false,\n      builtin: false,\n      connection: '',\n      sizex: -1,\n      sizey: -1,\n      pixeldepth: -1,\n      resolutionx: -1,\n      resolutiony: -1,\n      currentResX: -1,\n      currentResY: -1,\n      positionX: 0,\n      positionY: 0,\n      currentRefreshRate: -1\n    };\n\n    for (let i = 0; i < lines.length; i++) {\n      if ('' !== lines[i].trim()) {\n        let start = lines[i].search(/\\S|$/);\n\n        if (-1 === starts.indexOf(start)) {\n          starts.push(start);\n        }\n\n        level = starts.indexOf(start);\n\n        if (level < lastlevel) {\n          if (Object.keys(currentController).length > 0) {\n            // just changed to Displays\n            controllers.push(currentController);\n            currentController = {\n              vendor: '',\n              model: '',\n              bus: '',\n              vram: -1,\n              vramDynamic: false\n            };\n          }\n\n          if (Object.keys(currentDisplay).length > 0) {\n            // just changed to Displays\n            displays.push(currentDisplay);\n            currentDisplay = {\n              vendor: '',\n              model: '',\n              deviceName: '',\n              main: false,\n              builtin: false,\n              connection: '',\n              sizex: -1,\n              sizey: -1,\n              pixeldepth: -1,\n              resolutionx: -1,\n              resolutiony: -1,\n              currentResX: -1,\n              currentResY: -1,\n              positionX: 0,\n              positionY: 0,\n              currentRefreshRate: -1\n            };\n          }\n        }\n\n        lastlevel = level;\n        let parts = lines[i].split(':');\n\n        if (2 === level) {\n          // grafics controller level\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('chipsetmodel') !== -1) currentController.model = parts[1].trim();\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('bus') !== -1) currentController.bus = parts[1].trim();\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('vendor') !== -1) currentController.vendor = parts[1].split('(')[0].trim();\n\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('vram(total)') !== -1) {\n            currentController.vram = parseInt(parts[1]); // in MB\n\n            if (parts[1].toLowerCase().indexOf('gb') !== -1) {\n              currentController.vram = currentController.vram * 1024;\n            }\n\n            currentController.vramDynamic = false;\n          }\n\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('vram(dynamic,max)') !== -1) {\n            currentController.vram = parseInt(parts[1]); // in MB\n\n            if (parts[1].toLowerCase().indexOf('gb') !== -1) {\n              currentController.vram = currentController.vram * 1024;\n            }\n\n            currentController.vramDynamic = true;\n          }\n        }\n\n        if (3 === level) {\n          // display controller level\n          if (parts.length > 1 && '' === parts[1]) {\n            currentDisplay.vendor = '';\n            currentDisplay.model = parts[0].trim();\n            currentDisplay.main = false;\n            currentDisplay.builtin = false;\n            currentDisplay.connection = '';\n            currentDisplay.sizex = -1;\n            currentDisplay.sizey = -1;\n            currentDisplay.positionX = 0;\n            currentDisplay.positionY = 0;\n            currentDisplay.pixeldepth = -1;\n          }\n        }\n\n        if (4 === level) {\n          // display controller details level\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('resolution') !== -1) {\n            let resolution = parts[1].split('x');\n            currentDisplay.resolutionx = resolution.length > 1 ? parseInt(resolution[0]) : 0;\n            currentDisplay.resolutiony = resolution.length > 1 ? parseInt(resolution[1]) : 0;\n            currentDisplay.currentResX = currentDisplay.resolutionx;\n            currentDisplay.currentResY = currentDisplay.resolutiony;\n          }\n\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('pixeldepth') !== -1) currentDisplay.pixeldepth = parseInt(parts[1]); // in BIT\n\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('framebufferdepth') !== -1) currentDisplay.pixeldepth = parseInt(parts[1]); // in BIT\n\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('maindisplay') !== -1 && parts[1].replace(/ +/g, '').toLowerCase() === 'yes') currentDisplay.main = true;\n\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('built-in') !== -1 && parts[1].replace(/ +/g, '').toLowerCase() === 'yes') {\n            currentDisplay.builtin = true;\n            currentDisplay.connection = '';\n          }\n\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('connectiontype') !== -1) {\n            currentDisplay.builtin = false;\n            currentDisplay.connection = parts[1].trim();\n          }\n        }\n      }\n    }\n\n    if (Object.keys(currentController).length > 0) {\n      // just changed to Displays\n      controllers.push(currentController);\n    }\n\n    if (Object.keys(currentDisplay).length > 0) {\n      // just changed to Displays\n      displays.push(currentDisplay);\n    }\n\n    return {\n      controllers: controllers,\n      displays: displays\n    };\n  }\n\n  function parseLinesLinuxControllers(lines) {\n    let controllers = [];\n    let currentController = {\n      vendor: '',\n      model: '',\n      bus: '',\n      vram: -1,\n      vramDynamic: false\n    };\n    let isGraphicsController = false; // PCI bus IDs\n\n    let pciIDs = [];\n\n    try {\n      pciIDs = execSync('export LC_ALL=C; dmidecode -t 9 2>/dev/null; unset LC_ALL | grep \"Bus Address: \"').toString().split('\\n');\n\n      for (let i = 0; i < pciIDs.length; i++) {\n        pciIDs[i] = pciIDs[i].replace('Bus Address:', '').replace('0000:', '').trim();\n      }\n\n      pciIDs = pciIDs.filter(function (el) {\n        return el != null && el;\n      });\n    } catch (e) {\n      util.noop();\n    }\n\n    for (let i = 0; i < lines.length; i++) {\n      if ('' !== lines[i].trim()) {\n        if (' ' !== lines[i][0] && '\\t' !== lines[i][0]) {\n          // first line of new entry\n          let isExternal = pciIDs.indexOf(lines[i].split(' ')[0]) >= 0;\n          let vgapos = lines[i].toLowerCase().indexOf(' vga ');\n\n          let _3dcontrollerpos = lines[i].toLowerCase().indexOf('3d controller');\n\n          if (vgapos !== -1 || _3dcontrollerpos !== -1) {\n            // VGA\n            if (_3dcontrollerpos !== -1 && vgapos === -1) {\n              vgapos = _3dcontrollerpos;\n            }\n\n            if (currentController.vendor || currentController.model || currentController.bus || currentController.vram !== -1 || currentController.vramDynamic) {\n              // already a controller found\n              controllers.push(currentController);\n              currentController = {\n                vendor: '',\n                model: '',\n                bus: '',\n                vram: -1,\n                vramDynamic: false\n              };\n            }\n\n            isGraphicsController = true;\n            let endpos = lines[i].search(/\\[[0-9a-f]{4}:[0-9a-f]{4}]|$/);\n            let parts = lines[i].substr(vgapos, endpos - vgapos).split(':');\n\n            if (parts.length > 1) {\n              parts[1] = parts[1].trim();\n\n              if (parts[1].toLowerCase().indexOf('corporation') >= 0) {\n                currentController.vendor = parts[1].substr(0, parts[1].toLowerCase().indexOf('corporation') + 11).trim();\n                currentController.model = parts[1].substr(parts[1].toLowerCase().indexOf('corporation') + 11, 200).trim().split('(')[0];\n                currentController.bus = pciIDs.length > 0 && isExternal ? 'PCIe' : 'Onboard';\n                currentController.vram = -1;\n                currentController.vramDynamic = false;\n              } else if (parts[1].toLowerCase().indexOf(' inc.') >= 0) {\n                if ((parts[1].match(new RegExp(']', 'g')) || []).length > 1) {\n                  currentController.vendor = parts[1].substr(0, parts[1].toLowerCase().indexOf(']') + 1).trim();\n                  currentController.model = parts[1].substr(parts[1].toLowerCase().indexOf(']') + 1, 200).trim().split('(')[0].trim();\n                } else {\n                  currentController.vendor = parts[1].substr(0, parts[1].toLowerCase().indexOf(' inc.') + 5).trim();\n                  currentController.model = parts[1].substr(parts[1].toLowerCase().indexOf(' inc.') + 5, 200).trim().split('(')[0].trim();\n                }\n\n                currentController.bus = pciIDs.length > 0 && isExternal ? 'PCIe' : 'Onboard';\n                currentController.vram = -1;\n                currentController.vramDynamic = false;\n              } else if (parts[1].toLowerCase().indexOf(' ltd.') >= 0) {\n                if ((parts[1].match(new RegExp(']', 'g')) || []).length > 1) {\n                  currentController.vendor = parts[1].substr(0, parts[1].toLowerCase().indexOf(']') + 1).trim();\n                  currentController.model = parts[1].substr(parts[1].toLowerCase().indexOf(']') + 1, 200).trim().split('(')[0].trim();\n                } else {\n                  currentController.vendor = parts[1].substr(0, parts[1].toLowerCase().indexOf(' ltd.') + 5).trim();\n                  currentController.model = parts[1].substr(parts[1].toLowerCase().indexOf(' ltd.') + 5, 200).trim().split('(')[0].trim();\n                }\n              }\n            }\n          } else {\n            isGraphicsController = false;\n          }\n        }\n\n        if (isGraphicsController) {\n          // within VGA details\n          let parts = lines[i].split(':');\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('devicename') !== -1 && parts[1].toLowerCase().indexOf('onboard') !== -1) currentController.bus = 'Onboard';\n\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('region') !== -1 && parts[1].toLowerCase().indexOf('memory') !== -1) {\n            let memparts = parts[1].split('=');\n\n            if (memparts.length > 1) {\n              currentController.vram = parseInt(memparts[1]);\n            }\n          }\n        }\n      }\n    }\n\n    if (currentController.vendor || currentController.model || currentController.bus || currentController.vram !== -1 || currentController.vramDynamic) {\n      // already a controller found\n      controllers.push(currentController);\n    }\n\n    return controllers;\n  }\n\n  function parseLinesLinuxEdid(edid) {\n    // parsen EDID\n    // --> model\n    // --> resolutionx\n    // --> resolutiony\n    // --> builtin = false\n    // --> pixeldepth (?)\n    // --> sizex\n    // --> sizey\n    let result = {\n      vendor: '',\n      model: '',\n      deviceName: '',\n      main: false,\n      builtin: false,\n      connection: '',\n      sizex: -1,\n      sizey: -1,\n      pixeldepth: -1,\n      resolutionx: -1,\n      resolutiony: -1,\n      currentResX: -1,\n      currentResY: -1,\n      positionX: 0,\n      positionY: 0,\n      currentRefreshRate: -1\n    }; // find first \"Detailed Timing Description\"\n\n    let start = 108;\n\n    if (edid.substr(start, 6) === '000000') {\n      start += 36;\n    }\n\n    if (edid.substr(start, 6) === '000000') {\n      start += 36;\n    }\n\n    if (edid.substr(start, 6) === '000000') {\n      start += 36;\n    }\n\n    if (edid.substr(start, 6) === '000000') {\n      start += 36;\n    }\n\n    result.resolutionx = parseInt('0x0' + edid.substr(start + 8, 1) + edid.substr(start + 4, 2));\n    result.resolutiony = parseInt('0x0' + edid.substr(start + 14, 1) + edid.substr(start + 10, 2));\n    result.sizex = parseInt('0x0' + edid.substr(start + 28, 1) + edid.substr(start + 24, 2));\n    result.sizey = parseInt('0x0' + edid.substr(start + 29, 1) + edid.substr(start + 26, 2)); // monitor name\n\n    start = edid.indexOf('000000fc00'); // find first \"Monitor Description Data\"\n\n    if (start >= 0) {\n      let model_raw = edid.substr(start + 10, 26);\n\n      if (model_raw.indexOf('0a') !== -1) {\n        model_raw = model_raw.substr(0, model_raw.indexOf('0a'));\n      }\n\n      try {\n        if (model_raw.length > 2) {\n          result.model = model_raw.match(/.{1,2}/g).map(function (v) {\n            return String.fromCharCode(parseInt(v, 16));\n          }).join('');\n        }\n      } catch (e) {\n        util.noop();\n      }\n    } else {\n      result.model = '';\n    }\n\n    return result;\n  }\n\n  function parseLinesLinuxDisplays(lines, depth) {\n    let displays = [];\n    let currentDisplay = {\n      vendor: '',\n      model: '',\n      deviceName: '',\n      main: false,\n      builtin: false,\n      connection: '',\n      sizex: -1,\n      sizey: -1,\n      pixeldepth: -1,\n      resolutionx: -1,\n      resolutiony: -1,\n      currentResX: -1,\n      currentResY: -1,\n      positionX: 0,\n      positionY: 0,\n      currentRefreshRate: -1\n    };\n    let is_edid = false;\n    let is_current = false;\n    let edid_raw = '';\n    let start = 0;\n\n    for (let i = 1; i < lines.length; i++) {\n      // start with second line\n      if ('' !== lines[i].trim()) {\n        if (' ' !== lines[i][0] && '\\t' !== lines[i][0] && lines[i].toLowerCase().indexOf(' connected ') !== -1) {\n          // first line of new entry\n          if (currentDisplay.model || currentDisplay.main || currentDisplay.builtin || currentDisplay.connection || currentDisplay.sizex !== -1 || currentDisplay.pixeldepth !== -1 || currentDisplay.resolutionx !== -1) {\n            // push last display to array\n            displays.push(currentDisplay);\n            currentDisplay = {\n              vendor: '',\n              model: '',\n              main: false,\n              builtin: false,\n              connection: '',\n              sizex: -1,\n              sizey: -1,\n              pixeldepth: -1,\n              resolutionx: -1,\n              resolutiony: -1,\n              currentResX: -1,\n              currentResY: -1,\n              positionX: 0,\n              positionY: 0,\n              currentRefreshRate: -1\n            };\n          }\n\n          let parts = lines[i].split(' ');\n          currentDisplay.connection = parts[0];\n          currentDisplay.main = lines[i].toLowerCase().indexOf(' primary ') >= 0;\n          currentDisplay.builtin = parts[0].toLowerCase().indexOf('edp') >= 0;\n        } // try to read EDID information\n\n\n        if (is_edid) {\n          if (lines[i].search(/\\S|$/) > start) {\n            edid_raw += lines[i].toLowerCase().trim();\n          } else {\n            // parsen EDID\n            let edid_decoded = parseLinesLinuxEdid(edid_raw);\n            currentDisplay.vendor = edid_decoded.vendor;\n            currentDisplay.model = edid_decoded.model;\n            currentDisplay.resolutionx = edid_decoded.resolutionx;\n            currentDisplay.resolutiony = edid_decoded.resolutiony;\n            currentDisplay.sizex = edid_decoded.sizex;\n            currentDisplay.sizey = edid_decoded.sizey;\n            currentDisplay.pixeldepth = depth;\n            is_edid = false;\n          }\n        }\n\n        if (lines[i].toLowerCase().indexOf('edid:') >= 0) {\n          is_edid = true;\n          start = lines[i].search(/\\S|$/);\n        }\n\n        if (lines[i].toLowerCase().indexOf('*current') >= 0) {\n          const parts1 = lines[i].split('(');\n\n          if (parts1 && parts1.length > 1 && parts1[0].indexOf('x') >= 0) {\n            const resParts = parts1[0].trim().split('x');\n            currentDisplay.currentResX = util.toInt(resParts[0]);\n            currentDisplay.currentResY = util.toInt(resParts[1]);\n          }\n\n          is_current = true;\n        }\n\n        if (is_current && lines[i].toLowerCase().indexOf('clock') >= 0 && lines[i].toLowerCase().indexOf('hz') >= 0 && lines[i].toLowerCase().indexOf('v: height') >= 0) {\n          const parts1 = lines[i].split('clock');\n\n          if (parts1 && parts1.length > 1 && parts1[1].toLowerCase().indexOf('hz') >= 0) {\n            currentDisplay.currentRefreshRate = util.toInt(parts1[1]);\n          }\n\n          is_current = false;\n        }\n      }\n    } // pushen displays\n\n\n    if (currentDisplay.model || currentDisplay.main || currentDisplay.builtin || currentDisplay.connection || currentDisplay.sizex !== -1 || currentDisplay.pixeldepth !== -1 || currentDisplay.resolutionx !== -1) {\n      // still information there\n      displays.push(currentDisplay);\n    }\n\n    return displays;\n  } // function starts here\n\n\n  return new Promise(resolve => {\n    process.nextTick(() => {\n      let result = {\n        controllers: [],\n        displays: []\n      };\n\n      if (_darwin) {\n        let cmd = 'system_profiler SPDisplaysDataType';\n        exec(cmd, function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            result = parseLinesDarwin(lines);\n          }\n\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        });\n      }\n\n      if (_linux) {\n        // Raspberry: https://elinux.org/RPI_vcgencmd_usage\n        if (util.isRaspberry() && util.isRaspbian()) {\n          let cmd = 'fbset -s | grep \\'mode \"\\'; vcgencmd get_mem gpu; tvservice -s; tvservice -n;';\n          exec(cmd, function (error, stdout) {\n            let lines = stdout.toString().split('\\n');\n\n            if (lines.length > 3 && lines[0].indexOf('mode \"') >= -1 && lines[2].indexOf('0x12000a') > -1) {\n              const parts = lines[0].replace('mode', '').replace(/\"/g, '').trim().split('x');\n\n              if (parts.length === 2) {\n                result.displays.push({\n                  vendor: '',\n                  model: util.getValue(lines, 'device_name', '='),\n                  main: true,\n                  builtin: false,\n                  connection: 'HDMI',\n                  sizex: -1,\n                  sizey: -1,\n                  pixeldepth: -1,\n                  resolutionx: parseInt(parts[0], 10),\n                  resolutiony: parseInt(parts[1], 10),\n                  currentResX: -1,\n                  currentResY: -1,\n                  positionX: 0,\n                  positionY: 0,\n                  currentRefreshRate: -1\n                });\n              }\n            }\n\n            if (lines.length > 1 && lines[1].indexOf('gpu=') >= -1) {\n              result.controllers.push({\n                vendor: 'Broadcom',\n                model: 'VideoCore IV',\n                bus: '',\n                vram: lines[1].replace('gpu=', ''),\n                vramDynamic: true\n              });\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } else {\n          let cmd = 'lspci -vvv  2>/dev/null';\n          exec(cmd, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              result.controllers = parseLinesLinuxControllers(lines);\n            }\n\n            let cmd = 'xdpyinfo 2>/dev/null | grep \\'depth of root window\\' | awk \\'{ print $5 }\\'';\n            exec(cmd, function (error, stdout) {\n              let depth = 0;\n\n              if (!error) {\n                let lines = stdout.toString().split('\\n');\n                depth = parseInt(lines[0]) || 0;\n              }\n\n              let cmd = 'xrandr --verbose 2>/dev/null';\n              exec(cmd, function (error, stdout) {\n                if (!error) {\n                  let lines = stdout.toString().split('\\n');\n                  result.displays = parseLinesLinuxDisplays(lines, depth);\n                }\n\n                if (callback) {\n                  callback(result);\n                }\n\n                resolve(result);\n              });\n            });\n          });\n        }\n      }\n\n      if (_freebsd || _openbsd || _netbsd) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_sunos) {\n        if (callback) {\n          callback(result);\n        }\n\n        resolve(result);\n      }\n\n      if (_windows) {\n        // https://blogs.technet.microsoft.com/heyscriptingguy/2013/10/03/use-powershell-to-discover-multi-monitor-information/\n        // https://devblogs.microsoft.com/scripting/use-powershell-to-discover-multi-monitor-information/\n        try {\n          const workload = [];\n          workload.push(util.wmic('path win32_VideoController get /value'));\n          workload.push(util.wmic('path win32_desktopmonitor get /value'));\n          workload.push(util.powerShell('Get-CimInstance -Namespace root\\\\wmi -ClassName WmiMonitorBasicDisplayParams | fl'));\n          workload.push(util.powerShell('Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.Screen]::AllScreens'));\n          workload.push(util.powerShell('Get-CimInstance -Namespace root\\\\wmi -ClassName WmiMonitorConnectionParams | fl'));\n          workload.push(util.powerShell('gwmi WmiMonitorID -Namespace root\\\\wmi | ForEach-Object {(($_.ManufacturerName -notmatch 0 | foreach {[char]$_}) -join \"\") + \"|\" + (($_.ProductCodeID -notmatch 0 | foreach {[char]$_}) -join \"\") + \"|\" + (($_.UserFriendlyName -notmatch 0 | foreach {[char]$_}) -join \"\") + \"|\" + (($_.SerialNumberID -notmatch 0 | foreach {[char]$_}) -join \"\") + \"|\" + $_.InstanceName}'));\n          Promise.all(workload).then(data => {\n            // controller\n            let csections = data[0].split(/\\n\\s*\\n/);\n            result.controllers = parseLinesWindowsControllers(csections); // displays\n\n            let dsections = data[1].split(/\\n\\s*\\n/); // result.displays = parseLinesWindowsDisplays(dsections);\n\n            dsections.shift();\n            dsections.pop(); // monitor (powershell)\n\n            let msections = data[2].split('Active ');\n            msections.shift(); // forms.screens (powershell)\n\n            let ssections = data[3].split('BitsPerPixel ');\n            ssections.shift(); // connection params (powershell) - video type\n\n            let tsections = data[4].split(/\\n\\s*\\n/);\n            tsections.shift(); // monitor ID (powershell) - model / vendor\n\n            const res = data[5].split(/\\r\\n/);\n            let isections = [];\n            res.forEach(element => {\n              const parts = element.split('|');\n\n              if (parts.length === 5) {\n                isections.push({\n                  vendor: parts[0],\n                  code: parts[1],\n                  model: parts[2],\n                  serial: parts[3],\n                  instanceId: parts[4]\n                });\n              }\n            });\n            result.displays = parseLinesWindowsDisplaysPowershell(ssections, msections, dsections, tsections, isections);\n\n            if (result.displays.length === 1) {\n              if (_resolutionx) {\n                result.displays[0].resolutionx = _resolutionx;\n\n                if (!result.displays[0].currentResX) {\n                  result.displays[0].currentResX = _resolutionx;\n                }\n              }\n\n              if (_resolutiony) {\n                result.displays[0].resolutiony = _resolutiony;\n\n                if (result.displays[0].currentResY === 0) {\n                  result.displays[0].currentResY = _resolutiony;\n                }\n              }\n\n              if (_pixeldepth) {\n                result.displays[0].pixeldepth = _pixeldepth;\n              }\n\n              if (_refreshrate && !result.displays[0].refreshrate) {\n                result.displays[0].currentRefreshRate = _refreshrate;\n              }\n            }\n\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          }).catch(() => {\n            if (callback) {\n              callback(result);\n            }\n\n            resolve(result);\n          });\n        } catch (e) {\n          if (callback) {\n            callback(result);\n          }\n\n          resolve(result);\n        }\n      }\n    });\n  });\n\n  function parseLinesWindowsControllers(sections) {\n    let controllers = [];\n\n    for (let i in sections) {\n      if ({}.hasOwnProperty.call(sections, i)) {\n        if (sections[i].trim() !== '') {\n          let lines = sections[i].trim().split('\\r\\n');\n          controllers.push({\n            vendor: util.getValue(lines, 'AdapterCompatibility', '='),\n            model: util.getValue(lines, 'name', '='),\n            bus: util.getValue(lines, 'PNPDeviceID', '=').startsWith('PCI') ? 'PCI' : '',\n            vram: parseInt(util.getValue(lines, 'AdapterRAM', '='), 10) / 1024 / 1024,\n            vramDynamic: util.getValue(lines, 'VideoMemoryType', '=') === '2'\n          });\n          _resolutionx = util.toInt(util.getValue(lines, 'CurrentHorizontalResolution', '=')) || _resolutionx;\n          _resolutiony = util.toInt(util.getValue(lines, 'CurrentVerticalResolution', '=')) || _resolutiony;\n          _refreshrate = util.toInt(util.getValue(lines, 'CurrentRefreshRate', '=')) || _refreshrate;\n          _pixeldepth = util.toInt(util.getValue(lines, 'CurrentBitsPerPixel', '=')) || _pixeldepth;\n        }\n      }\n    }\n\n    return controllers;\n  } // function parseLinesWindowsDisplays(sections) {\n  //   let displays = [];\n  //   for (let i in sections) {\n  //     if (sections.hasOwnProperty(i)) {\n  //       if (sections[i].trim() !== '') {\n  //         let lines = sections[i].trim().split('\\r\\n');\n  //         displays.push({\n  //           vendor: util.getValue(lines, 'MonitorManufacturer', '='),\n  //           model: util.getValue(lines, 'Name', '='),\n  //           main: false,\n  //           builtin: false,\n  //           connection: '',\n  //           sizex: -1,\n  //           sizey: -1,\n  //           pixeldepth: -1,\n  //           resolutionx: util.toInt(util.getValue(lines, 'ScreenWidth', '=')),\n  //           resolutiony: util.toInt(util.getValue(lines, 'ScreenHeight', '=')),\n  //         });\n  //       }\n  //     }\n  //   }\n  //   return displays;\n  // }\n\n\n  function parseLinesWindowsDisplaysPowershell(ssections, msections, dsections, tsections, isections) {\n    let displays = [];\n    let vendor = '';\n    let model = '';\n    let deviceID = '';\n    let resolutionx = 0;\n    let resolutiony = 0;\n\n    if (dsections && dsections.length) {\n      let linesDisplay = dsections[0].split(os.EOL);\n      vendor = util.getValue(linesDisplay, 'MonitorManufacturer', '=');\n      model = util.getValue(linesDisplay, 'Name', '=');\n      deviceID = util.getValue(linesDisplay, 'PNPDeviceID', '=').replace(/&amp;/g, '&').toLowerCase();\n      resolutionx = util.toInt(util.getValue(linesDisplay, 'ScreenWidth', '='));\n      resolutiony = util.toInt(util.getValue(linesDisplay, 'ScreenHeight', '='));\n    }\n\n    for (let i = 0; i < ssections.length; i++) {\n      if (ssections[i].trim() !== '') {\n        ssections[i] = 'BitsPerPixel ' + ssections[i];\n        msections[i] = 'Active ' + msections[i]; // tsections can be empty on earlier versions of powershell (<=2.0). Tag connection type as UNKNOWN\n        // if this information is missing\n\n        if (tsections.length === 0) {\n          tsections[i] = 'Unknown';\n        }\n\n        let linesScreen = ssections[i].split(os.EOL);\n        let linesMonitor = msections[i].split(os.EOL);\n        let linesConnection = tsections[i].split(os.EOL);\n        const bitsPerPixel = util.getValue(linesScreen, 'BitsPerPixel');\n        const bounds = util.getValue(linesScreen, 'Bounds').replace('{', '').replace('}', '').split(',');\n        const primary = util.getValue(linesScreen, 'Primary');\n        const sizex = util.getValue(linesMonitor, 'MaxHorizontalImageSize');\n        const sizey = util.getValue(linesMonitor, 'MaxVerticalImageSize');\n        const instanceName = util.getValue(linesMonitor, 'InstanceName').toLowerCase();\n        const videoOutputTechnology = util.getValue(linesConnection, 'VideoOutputTechnology');\n        const deviceName = util.getValue(linesScreen, 'DeviceName');\n        let displayVendor = '';\n        let displayModel = '';\n        isections.forEach(element => {\n          if (element.instanceId.toLowerCase().startsWith(instanceName) && vendor.startsWith('(') && model.startsWith('PnP')) {\n            displayVendor = element.vendor;\n            displayModel = element.model;\n          }\n        });\n        displays.push({\n          vendor: instanceName.startsWith(deviceID) && displayVendor === '' ? vendor : displayVendor,\n          model: instanceName.startsWith(deviceID) && displayModel === '' ? model : displayModel,\n          deviceName,\n          main: primary.toLowerCase() === 'true',\n          builtin: videoOutputTechnology === '2147483648',\n          connection: videoOutputTechnology && videoTypes[videoOutputTechnology] ? videoTypes[videoOutputTechnology] : '',\n          resolutionx: util.toInt(util.getValue(bounds, 'Width', '=')),\n          resolutiony: util.toInt(util.getValue(bounds, 'Height', '=')),\n          sizex: sizex ? parseInt(sizex, 10) : -1,\n          sizey: sizey ? parseInt(sizey, 10) : -1,\n          pixeldepth: bitsPerPixel,\n          currentResX: util.toInt(util.getValue(bounds, 'Width', '=')),\n          currentResY: util.toInt(util.getValue(bounds, 'Height', '=')),\n          positionX: util.toInt(util.getValue(bounds, 'X', '=')),\n          positionY: util.toInt(util.getValue(bounds, 'Y', '='))\n        });\n      }\n    }\n\n    if (ssections.length === 0) {\n      displays.push({\n        vendor,\n        model,\n        main: true,\n        resolutionx,\n        resolutiony,\n        sizex: -1,\n        sizey: -1,\n        pixeldepth: -1,\n        currentResX: resolutionx,\n        currentResY: resolutiony,\n        positionX: 0,\n        positionY: 0\n      });\n    }\n\n    return displays;\n  }\n}\n\nexports.graphics = graphics;","map":{"version":3,"sources":["/Users/samianki/node_modules/systeminformation/lib/graphics.js"],"names":["os","require","exec","execSync","util","_platform","process","platform","_linux","_darwin","_windows","_freebsd","_openbsd","_netbsd","_sunos","_resolutionx","_resolutiony","_pixeldepth","_refreshrate","videoTypes","graphics","callback","parseLinesDarwin","lines","starts","level","lastlevel","controllers","displays","currentController","vendor","model","bus","vram","vramDynamic","currentDisplay","deviceName","main","builtin","connection","sizex","sizey","pixeldepth","resolutionx","resolutiony","currentResX","currentResY","positionX","positionY","currentRefreshRate","i","length","trim","start","search","indexOf","push","Object","keys","parts","split","replace","toLowerCase","parseInt","resolution","parseLinesLinuxControllers","isGraphicsController","pciIDs","toString","filter","el","e","noop","isExternal","vgapos","_3dcontrollerpos","endpos","substr","match","RegExp","memparts","parseLinesLinuxEdid","edid","result","model_raw","map","v","String","fromCharCode","join","parseLinesLinuxDisplays","depth","is_edid","is_current","edid_raw","edid_decoded","parts1","resParts","toInt","Promise","resolve","nextTick","cmd","error","stdout","isRaspberry","isRaspbian","getValue","workload","wmic","powerShell","all","then","data","csections","parseLinesWindowsControllers","dsections","shift","pop","msections","ssections","tsections","res","isections","forEach","element","code","serial","instanceId","parseLinesWindowsDisplaysPowershell","refreshrate","catch","sections","hasOwnProperty","call","startsWith","deviceID","linesDisplay","EOL","linesScreen","linesMonitor","linesConnection","bitsPerPixel","bounds","primary","instanceName","videoOutputTechnology","displayVendor","displayModel","exports"],"mappings":"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","sourcesContent":["'use strict';\n// @ts-check\n// ==================================================================================\n// graphics.js\n// ----------------------------------------------------------------------------------\n// Description:   System Information - library\n//                for Node.js\n// Copyright:     (c) 2014 - 2020\n// Author:        Sebastian Hildebrandt\n// ----------------------------------------------------------------------------------\n// License:       MIT\n// ==================================================================================\n// 7. Graphics (controller, display)\n// ----------------------------------------------------------------------------------\n\nconst os = require('os');\nconst exec = require('child_process').exec;\nconst execSync = require('child_process').execSync;\nconst util = require('./util');\n\nlet _platform = process.platform;\n\nconst _linux = (_platform === 'linux');\nconst _darwin = (_platform === 'darwin');\nconst _windows = (_platform === 'win32');\nconst _freebsd = (_platform === 'freebsd');\nconst _openbsd = (_platform === 'openbsd');\nconst _netbsd = (_platform === 'netbsd');\nconst _sunos = (_platform === 'sunos');\n\nlet _resolutionx = 0;\nlet _resolutiony = 0;\nlet _pixeldepth = 0;\nlet _refreshrate = 0;\n\nconst videoTypes = {\n  '-2': 'UNINITIALIZED',\n  '-1': 'OTHER',\n  '0': 'HD15',\n  '1': 'SVIDEO',\n  '2': 'Composite video',\n  '3': 'Component video',\n  '4': 'DVI',\n  '5': 'HDMI',\n  '6': 'LVDS',\n  '8': 'D_JPN',\n  '9': 'SDI',\n  '10': 'DP',\n  '11': 'DP embedded',\n  '12': 'UDI',\n  '13': 'UDI embedded',\n  '14': 'SDTVDONGLE',\n  '15': 'MIRACAST',\n  '2147483648': 'INTERNAL'\n};\n\nfunction graphics(callback) {\n\n  function parseLinesDarwin(lines) {\n    let starts = [];\n    let level = -1;\n    let lastlevel = -1;\n    let controllers = [];\n    let displays = [];\n    let currentController = {\n      vendor: '',\n      model: '',\n      bus: '',\n      vram: -1,\n      vramDynamic: false\n    };\n    let currentDisplay = {\n      vendor: '',\n      model: '',\n      deviceName: '',\n      main: false,\n      builtin: false,\n      connection: '',\n      sizex: -1,\n      sizey: -1,\n      pixeldepth: -1,\n      resolutionx: -1,\n      resolutiony: -1,\n      currentResX: -1,\n      currentResY: -1,\n      positionX: 0,\n      positionY: 0,\n      currentRefreshRate: -1\n    };\n    for (let i = 0; i < lines.length; i++) {\n      if ('' !== lines[i].trim()) {\n        let start = lines[i].search(/\\S|$/);\n        if (-1 === starts.indexOf(start)) {\n          starts.push(start);\n        }\n        level = starts.indexOf(start);\n        if (level < lastlevel) {\n          if (Object.keys(currentController).length > 0) {// just changed to Displays\n            controllers.push(currentController);\n            currentController = {\n              vendor: '',\n              model: '',\n              bus: '',\n              vram: -1,\n              vramDynamic: false\n            };\n          }\n          if (Object.keys(currentDisplay).length > 0) {// just changed to Displays\n            displays.push(currentDisplay);\n            currentDisplay = {\n              vendor: '',\n              model: '',\n              deviceName: '',\n              main: false,\n              builtin: false,\n              connection: '',\n              sizex: -1,\n              sizey: -1,\n              pixeldepth: -1,\n              resolutionx: -1,\n              resolutiony: -1,\n              currentResX: -1,\n              currentResY: -1,\n              positionX: 0,\n              positionY: 0,\n              currentRefreshRate: -1\n            };\n          }\n        }\n        lastlevel = level;\n        let parts = lines[i].split(':');\n        if (2 === level) {       // grafics controller level\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('chipsetmodel') !== -1) currentController.model = parts[1].trim();\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('bus') !== -1) currentController.bus = parts[1].trim();\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('vendor') !== -1) currentController.vendor = parts[1].split('(')[0].trim();\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('vram(total)') !== -1) {\n            currentController.vram = parseInt(parts[1]);    // in MB\n            if (parts[1].toLowerCase().indexOf('gb') !== -1) {\n              currentController.vram = currentController.vram * 1024;\n            }\n            currentController.vramDynamic = false;\n          }\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('vram(dynamic,max)') !== -1) {\n            currentController.vram = parseInt(parts[1]);    // in MB\n            if (parts[1].toLowerCase().indexOf('gb') !== -1) {\n              currentController.vram = currentController.vram * 1024;\n            }\n            currentController.vramDynamic = true;\n          }\n        }\n        if (3 === level) {       // display controller level\n          if (parts.length > 1 && '' === parts[1]) {\n            currentDisplay.vendor = '';\n            currentDisplay.model = parts[0].trim();\n            currentDisplay.main = false;\n            currentDisplay.builtin = false;\n            currentDisplay.connection = '';\n            currentDisplay.sizex = -1;\n            currentDisplay.sizey = -1;\n            currentDisplay.positionX = 0;\n            currentDisplay.positionY = 0;\n            currentDisplay.pixeldepth = -1;\n          }\n        }\n        if (4 === level) {       // display controller details level\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('resolution') !== -1) {\n            let resolution = parts[1].split('x');\n            currentDisplay.resolutionx = (resolution.length > 1 ? parseInt(resolution[0]) : 0);\n            currentDisplay.resolutiony = (resolution.length > 1 ? parseInt(resolution[1]) : 0);\n            currentDisplay.currentResX = currentDisplay.resolutionx;\n            currentDisplay.currentResY = currentDisplay.resolutiony;\n          }\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('pixeldepth') !== -1) currentDisplay.pixeldepth = parseInt(parts[1]); // in BIT\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('framebufferdepth') !== -1) currentDisplay.pixeldepth = parseInt(parts[1]); // in BIT\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('maindisplay') !== -1 && parts[1].replace(/ +/g, '').toLowerCase() === 'yes') currentDisplay.main = true;\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('built-in') !== -1 && parts[1].replace(/ +/g, '').toLowerCase() === 'yes') {\n            currentDisplay.builtin = true;\n            currentDisplay.connection = '';\n          }\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('connectiontype') !== -1) {\n            currentDisplay.builtin = false;\n            currentDisplay.connection = parts[1].trim();\n          }\n        }\n      }\n    }\n    if (Object.keys(currentController).length > 0) {// just changed to Displays\n      controllers.push(currentController);\n    }\n    if (Object.keys(currentDisplay).length > 0) {// just changed to Displays\n      displays.push(currentDisplay);\n    }\n    return ({\n      controllers: controllers,\n      displays: displays\n    });\n  }\n\n  function parseLinesLinuxControllers(lines) {\n    let controllers = [];\n    let currentController = {\n      vendor: '',\n      model: '',\n      bus: '',\n      vram: -1,\n      vramDynamic: false\n    };\n    let isGraphicsController = false;\n    // PCI bus IDs\n    let pciIDs = [];\n    try {\n      pciIDs = execSync('export LC_ALL=C; dmidecode -t 9 2>/dev/null; unset LC_ALL | grep \"Bus Address: \"').toString().split('\\n');\n      for (let i = 0; i < pciIDs.length; i++) {\n        pciIDs[i] = pciIDs[i].replace('Bus Address:', '').replace('0000:', '').trim();\n      }\n      pciIDs = pciIDs.filter(function (el) {\n        return el != null && el;\n      });\n    } catch (e) {\n      util.noop();\n    }\n    for (let i = 0; i < lines.length; i++) {\n      if ('' !== lines[i].trim()) {\n        if (' ' !== lines[i][0] && '\\t' !== lines[i][0]) {        // first line of new entry\n          let isExternal = (pciIDs.indexOf(lines[i].split(' ')[0]) >= 0);\n          let vgapos = lines[i].toLowerCase().indexOf(' vga ');\n          let _3dcontrollerpos = lines[i].toLowerCase().indexOf('3d controller');\n          if (vgapos !== -1 || _3dcontrollerpos !== -1) {         // VGA\n            if (_3dcontrollerpos !== -1 && vgapos === -1) {\n              vgapos = _3dcontrollerpos;\n            }\n            if (currentController.vendor || currentController.model || currentController.bus || currentController.vram !== -1 || currentController.vramDynamic) { // already a controller found\n              controllers.push(currentController);\n              currentController = {\n                vendor: '',\n                model: '',\n                bus: '',\n                vram: -1,\n                vramDynamic: false\n              };\n            }\n            isGraphicsController = true;\n            let endpos = lines[i].search(/\\[[0-9a-f]{4}:[0-9a-f]{4}]|$/);\n            let parts = lines[i].substr(vgapos, endpos - vgapos).split(':');\n            if (parts.length > 1) {\n              parts[1] = parts[1].trim();\n              if (parts[1].toLowerCase().indexOf('corporation') >= 0) {\n                currentController.vendor = parts[1].substr(0, parts[1].toLowerCase().indexOf('corporation') + 11).trim();\n                currentController.model = parts[1].substr(parts[1].toLowerCase().indexOf('corporation') + 11, 200).trim().split('(')[0];\n                currentController.bus = (pciIDs.length > 0 && isExternal) ? 'PCIe' : 'Onboard';\n                currentController.vram = -1;\n                currentController.vramDynamic = false;\n              } else if (parts[1].toLowerCase().indexOf(' inc.') >= 0) {\n                if ((parts[1].match(new RegExp(']', 'g')) || []).length > 1) {\n                  currentController.vendor = parts[1].substr(0, parts[1].toLowerCase().indexOf(']') + 1).trim();\n                  currentController.model = parts[1].substr(parts[1].toLowerCase().indexOf(']') + 1, 200).trim().split('(')[0].trim();\n                } else {\n                  currentController.vendor = parts[1].substr(0, parts[1].toLowerCase().indexOf(' inc.') + 5).trim();\n                  currentController.model = parts[1].substr(parts[1].toLowerCase().indexOf(' inc.') + 5, 200).trim().split('(')[0].trim();\n                }\n                currentController.bus = (pciIDs.length > 0 && isExternal) ? 'PCIe' : 'Onboard';\n                currentController.vram = -1;\n                currentController.vramDynamic = false;\n              } else if (parts[1].toLowerCase().indexOf(' ltd.') >= 0) {\n                if ((parts[1].match(new RegExp(']', 'g')) || []).length > 1) {\n                  currentController.vendor = parts[1].substr(0, parts[1].toLowerCase().indexOf(']') + 1).trim();\n                  currentController.model = parts[1].substr(parts[1].toLowerCase().indexOf(']') + 1, 200).trim().split('(')[0].trim();\n                } else {\n                  currentController.vendor = parts[1].substr(0, parts[1].toLowerCase().indexOf(' ltd.') + 5).trim();\n                  currentController.model = parts[1].substr(parts[1].toLowerCase().indexOf(' ltd.') + 5, 200).trim().split('(')[0].trim();\n                }\n              }\n            }\n\n          } else {\n            isGraphicsController = false;\n          }\n        }\n        if (isGraphicsController) { // within VGA details\n          let parts = lines[i].split(':');\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('devicename') !== -1 && parts[1].toLowerCase().indexOf('onboard') !== -1) currentController.bus = 'Onboard';\n          if (parts.length > 1 && parts[0].replace(/ +/g, '').toLowerCase().indexOf('region') !== -1 && parts[1].toLowerCase().indexOf('memory') !== -1) {\n            let memparts = parts[1].split('=');\n            if (memparts.length > 1) {\n              currentController.vram = parseInt(memparts[1]);\n            }\n          }\n        }\n      }\n    }\n    if (currentController.vendor || currentController.model || currentController.bus || currentController.vram !== -1 || currentController.vramDynamic) { // already a controller found\n      controllers.push(currentController);\n    }\n    return (controllers);\n  }\n\n  function parseLinesLinuxEdid(edid) {\n    // parsen EDID\n    // --> model\n    // --> resolutionx\n    // --> resolutiony\n    // --> builtin = false\n    // --> pixeldepth (?)\n    // --> sizex\n    // --> sizey\n    let result = {\n      vendor: '',\n      model: '',\n      deviceName: '',\n      main: false,\n      builtin: false,\n      connection: '',\n      sizex: -1,\n      sizey: -1,\n      pixeldepth: -1,\n      resolutionx: -1,\n      resolutiony: -1,\n      currentResX: -1,\n      currentResY: -1,\n      positionX: 0,\n      positionY: 0,\n      currentRefreshRate: -1\n    };\n    // find first \"Detailed Timing Description\"\n    let start = 108;\n    if (edid.substr(start, 6) === '000000') {\n      start += 36;\n    }\n    if (edid.substr(start, 6) === '000000') {\n      start += 36;\n    }\n    if (edid.substr(start, 6) === '000000') {\n      start += 36;\n    }\n    if (edid.substr(start, 6) === '000000') {\n      start += 36;\n    }\n    result.resolutionx = parseInt('0x0' + edid.substr(start + 8, 1) + edid.substr(start + 4, 2));\n    result.resolutiony = parseInt('0x0' + edid.substr(start + 14, 1) + edid.substr(start + 10, 2));\n    result.sizex = parseInt('0x0' + edid.substr(start + 28, 1) + edid.substr(start + 24, 2));\n    result.sizey = parseInt('0x0' + edid.substr(start + 29, 1) + edid.substr(start + 26, 2));\n    // monitor name\n    start = edid.indexOf('000000fc00'); // find first \"Monitor Description Data\"\n    if (start >= 0) {\n      let model_raw = edid.substr(start + 10, 26);\n      if (model_raw.indexOf('0a') !== -1) {\n        model_raw = model_raw.substr(0, model_raw.indexOf('0a'));\n      }\n      try {\n        if (model_raw.length > 2) {\n          result.model = model_raw.match(/.{1,2}/g).map(function (v) {\n            return String.fromCharCode(parseInt(v, 16));\n          }).join('');\n        }\n      } catch (e) {\n        util.noop();\n      }\n    } else {\n      result.model = '';\n    }\n    return result;\n  }\n\n  function parseLinesLinuxDisplays(lines, depth) {\n    let displays = [];\n    let currentDisplay = {\n      vendor: '',\n      model: '',\n      deviceName: '',\n      main: false,\n      builtin: false,\n      connection: '',\n      sizex: -1,\n      sizey: -1,\n      pixeldepth: -1,\n      resolutionx: -1,\n      resolutiony: -1,\n      currentResX: -1,\n      currentResY: -1,\n      positionX: 0,\n      positionY: 0,\n      currentRefreshRate: -1\n    };\n    let is_edid = false;\n    let is_current = false;\n    let edid_raw = '';\n    let start = 0;\n    for (let i = 1; i < lines.length; i++) {        // start with second line\n      if ('' !== lines[i].trim()) {\n        if (' ' !== lines[i][0] && '\\t' !== lines[i][0] && lines[i].toLowerCase().indexOf(' connected ') !== -1) {        // first line of new entry\n          if (currentDisplay.model || currentDisplay.main || currentDisplay.builtin || currentDisplay.connection || currentDisplay.sizex !== -1 || currentDisplay.pixeldepth !== -1 || currentDisplay.resolutionx !== -1) {         // push last display to array\n            displays.push(currentDisplay);\n            currentDisplay = {\n              vendor: '',\n              model: '',\n              main: false,\n              builtin: false,\n              connection: '',\n              sizex: -1,\n              sizey: -1,\n              pixeldepth: -1,\n              resolutionx: -1,\n              resolutiony: -1,\n              currentResX: -1,\n              currentResY: -1,\n              positionX: 0,\n              positionY: 0,\n              currentRefreshRate: -1\n            };\n          }\n          let parts = lines[i].split(' ');\n          currentDisplay.connection = parts[0];\n          currentDisplay.main = lines[i].toLowerCase().indexOf(' primary ') >= 0;\n          currentDisplay.builtin = (parts[0].toLowerCase().indexOf('edp') >= 0);\n        }\n\n        // try to read EDID information\n        if (is_edid) {\n          if (lines[i].search(/\\S|$/) > start) {\n            edid_raw += lines[i].toLowerCase().trim();\n          } else {\n            // parsen EDID\n            let edid_decoded = parseLinesLinuxEdid(edid_raw);\n            currentDisplay.vendor = edid_decoded.vendor;\n            currentDisplay.model = edid_decoded.model;\n            currentDisplay.resolutionx = edid_decoded.resolutionx;\n            currentDisplay.resolutiony = edid_decoded.resolutiony;\n            currentDisplay.sizex = edid_decoded.sizex;\n            currentDisplay.sizey = edid_decoded.sizey;\n            currentDisplay.pixeldepth = depth;\n            is_edid = false;\n          }\n        }\n        if (lines[i].toLowerCase().indexOf('edid:') >= 0) {\n          is_edid = true;\n          start = lines[i].search(/\\S|$/);\n        }\n        if (lines[i].toLowerCase().indexOf('*current') >= 0) {\n          const parts1 = lines[i].split('(');\n          if (parts1 && parts1.length > 1 && parts1[0].indexOf('x') >= 0) {\n            const resParts = parts1[0].trim().split('x');\n            currentDisplay.currentResX = util.toInt(resParts[0]);\n            currentDisplay.currentResY = util.toInt(resParts[1]);\n          }\n          is_current = true;\n        }\n        if (is_current && lines[i].toLowerCase().indexOf('clock') >= 0 && lines[i].toLowerCase().indexOf('hz') >= 0 && lines[i].toLowerCase().indexOf('v: height') >= 0) {\n          const parts1 = lines[i].split('clock');\n          if (parts1 && parts1.length > 1 && parts1[1].toLowerCase().indexOf('hz') >= 0) {\n            currentDisplay.currentRefreshRate = util.toInt(parts1[1]);\n          }\n          is_current = false;\n        }\n      }\n    }\n\n    // pushen displays\n    if (currentDisplay.model || currentDisplay.main || currentDisplay.builtin || currentDisplay.connection || currentDisplay.sizex !== -1 || currentDisplay.pixeldepth !== -1 || currentDisplay.resolutionx !== -1) {  // still information there\n      displays.push(currentDisplay);\n    }\n    return displays;\n  }\n\n  // function starts here\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let result = {\n        controllers: [],\n        displays: []\n      };\n      if (_darwin) {\n        let cmd = 'system_profiler SPDisplaysDataType';\n        exec(cmd, function (error, stdout) {\n          if (!error) {\n            let lines = stdout.toString().split('\\n');\n            result = parseLinesDarwin(lines);\n          }\n          if (callback) {\n            callback(result);\n          }\n          resolve(result);\n        });\n      }\n      if (_linux) {\n        // Raspberry: https://elinux.org/RPI_vcgencmd_usage\n        if (util.isRaspberry() && util.isRaspbian()) {\n          let cmd = 'fbset -s | grep \\'mode \"\\'; vcgencmd get_mem gpu; tvservice -s; tvservice -n;';\n          exec(cmd, function (error, stdout) {\n            let lines = stdout.toString().split('\\n');\n            if (lines.length > 3 && lines[0].indexOf('mode \"') >= -1 && lines[2].indexOf('0x12000a') > -1) {\n              const parts = lines[0].replace('mode', '').replace(/\"/g, '').trim().split('x');\n              if (parts.length === 2) {\n                result.displays.push({\n                  vendor: '',\n                  model: util.getValue(lines, 'device_name', '='),\n                  main: true,\n                  builtin: false,\n                  connection: 'HDMI',\n                  sizex: -1,\n                  sizey: -1,\n                  pixeldepth: -1,\n                  resolutionx: parseInt(parts[0], 10),\n                  resolutiony: parseInt(parts[1], 10),\n                  currentResX: -1,\n                  currentResY: -1,\n                  positionX: 0,\n                  positionY: 0,\n                  currentRefreshRate: -1\n                });\n              }\n            }\n            if (lines.length > 1 && lines[1].indexOf('gpu=') >= -1) {\n              result.controllers.push({\n                vendor: 'Broadcom',\n                model: 'VideoCore IV',\n                bus: '',\n                vram: lines[1].replace('gpu=', ''),\n                vramDynamic: true\n              });\n            }\n            if (callback) {\n              callback(result);\n            }\n            resolve(result);\n          });\n        } else {\n          let cmd = 'lspci -vvv  2>/dev/null';\n          exec(cmd, function (error, stdout) {\n            if (!error) {\n              let lines = stdout.toString().split('\\n');\n              result.controllers = parseLinesLinuxControllers(lines);\n            }\n            let cmd = 'xdpyinfo 2>/dev/null | grep \\'depth of root window\\' | awk \\'{ print $5 }\\'';\n            exec(cmd, function (error, stdout) {\n              let depth = 0;\n              if (!error) {\n                let lines = stdout.toString().split('\\n');\n                depth = parseInt(lines[0]) || 0;\n              }\n              let cmd = 'xrandr --verbose 2>/dev/null';\n              exec(cmd, function (error, stdout) {\n                if (!error) {\n                  let lines = stdout.toString().split('\\n');\n                  result.displays = parseLinesLinuxDisplays(lines, depth);\n                }\n                if (callback) {\n                  callback(result);\n                }\n                resolve(result);\n              });\n            });\n          });\n        }\n      }\n      if (_freebsd || _openbsd || _netbsd) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_sunos) {\n        if (callback) { callback(result); }\n        resolve(result);\n      }\n      if (_windows) {\n\n        // https://blogs.technet.microsoft.com/heyscriptingguy/2013/10/03/use-powershell-to-discover-multi-monitor-information/\n        // https://devblogs.microsoft.com/scripting/use-powershell-to-discover-multi-monitor-information/\n        try {\n          const workload = [];\n          workload.push(util.wmic('path win32_VideoController get /value'));\n          workload.push(util.wmic('path win32_desktopmonitor get /value'));\n          workload.push(util.powerShell('Get-CimInstance -Namespace root\\\\wmi -ClassName WmiMonitorBasicDisplayParams | fl'));\n          workload.push(util.powerShell('Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.Screen]::AllScreens'));\n          workload.push(util.powerShell('Get-CimInstance -Namespace root\\\\wmi -ClassName WmiMonitorConnectionParams | fl'));\n          workload.push(util.powerShell('gwmi WmiMonitorID -Namespace root\\\\wmi | ForEach-Object {(($_.ManufacturerName -notmatch 0 | foreach {[char]$_}) -join \"\") + \"|\" + (($_.ProductCodeID -notmatch 0 | foreach {[char]$_}) -join \"\") + \"|\" + (($_.UserFriendlyName -notmatch 0 | foreach {[char]$_}) -join \"\") + \"|\" + (($_.SerialNumberID -notmatch 0 | foreach {[char]$_}) -join \"\") + \"|\" + $_.InstanceName}'));\n\n          Promise.all(\n            workload\n          ).then(data => {\n            // controller\n            let csections = data[0].split(/\\n\\s*\\n/);\n            result.controllers = parseLinesWindowsControllers(csections);\n\n            // displays\n            let dsections = data[1].split(/\\n\\s*\\n/);\n            // result.displays = parseLinesWindowsDisplays(dsections);\n            dsections.shift();\n            dsections.pop();\n\n            // monitor (powershell)\n            let msections = data[2].split('Active ');\n            msections.shift();\n\n            // forms.screens (powershell)\n            let ssections = data[3].split('BitsPerPixel ');\n            ssections.shift();\n\n            // connection params (powershell) - video type\n            let tsections = data[4].split(/\\n\\s*\\n/);\n            tsections.shift();\n\n            // monitor ID (powershell) - model / vendor\n            const res = data[5].split(/\\r\\n/);\n            let isections = [];\n            res.forEach(element => {\n              const parts = element.split('|');\n              if (parts.length === 5) {\n                isections.push({\n                  vendor: parts[0],\n                  code: parts[1],\n                  model: parts[2],\n                  serial: parts[3],\n                  instanceId: parts[4]\n                });\n              }\n            });\n            result.displays = parseLinesWindowsDisplaysPowershell(ssections, msections, dsections, tsections, isections);\n\n            if (result.displays.length === 1) {\n              if (_resolutionx) {\n                result.displays[0].resolutionx = _resolutionx;\n                if (!result.displays[0].currentResX) {\n                  result.displays[0].currentResX = _resolutionx;\n                }\n              }\n              if (_resolutiony) {\n                result.displays[0].resolutiony = _resolutiony;\n                if (result.displays[0].currentResY === 0) {\n                  result.displays[0].currentResY = _resolutiony;\n                }\n              }\n              if (_pixeldepth) {\n                result.displays[0].pixeldepth = _pixeldepth;\n              }\n              if (_refreshrate && !result.displays[0].refreshrate) {\n                result.displays[0].currentRefreshRate = _refreshrate;\n              }\n            }\n\n            if (callback) {\n              callback(result);\n            }\n            resolve(result);\n          })\n            .catch(() => {\n              if (callback) {\n                callback(result);\n              }\n              resolve(result);\n            });\n        } catch (e) {\n          if (callback) { callback(result); }\n          resolve(result);\n        }\n      }\n    });\n  });\n\n  function parseLinesWindowsControllers(sections) {\n    let controllers = [];\n    for (let i in sections) {\n      if ({}.hasOwnProperty.call(sections, i)) {\n        if (sections[i].trim() !== '') {\n\n          let lines = sections[i].trim().split('\\r\\n');\n          controllers.push({\n            vendor: util.getValue(lines, 'AdapterCompatibility', '='),\n            model: util.getValue(lines, 'name', '='),\n            bus: util.getValue(lines, 'PNPDeviceID', '=').startsWith('PCI') ? 'PCI' : '',\n            vram: parseInt(util.getValue(lines, 'AdapterRAM', '='), 10) / 1024 / 1024,\n            vramDynamic: (util.getValue(lines, 'VideoMemoryType', '=') === '2')\n          });\n          _resolutionx = util.toInt(util.getValue(lines, 'CurrentHorizontalResolution', '=')) || _resolutionx;\n          _resolutiony = util.toInt(util.getValue(lines, 'CurrentVerticalResolution', '=')) || _resolutiony;\n          _refreshrate = util.toInt(util.getValue(lines, 'CurrentRefreshRate', '=')) || _refreshrate;\n          _pixeldepth = util.toInt(util.getValue(lines, 'CurrentBitsPerPixel', '=')) || _pixeldepth;\n        }\n      }\n    }\n    return controllers;\n  }\n\n  // function parseLinesWindowsDisplays(sections) {\n  //   let displays = [];\n  //   for (let i in sections) {\n  //     if (sections.hasOwnProperty(i)) {\n  //       if (sections[i].trim() !== '') {\n  //         let lines = sections[i].trim().split('\\r\\n');\n  //         displays.push({\n  //           vendor: util.getValue(lines, 'MonitorManufacturer', '='),\n  //           model: util.getValue(lines, 'Name', '='),\n  //           main: false,\n  //           builtin: false,\n  //           connection: '',\n  //           sizex: -1,\n  //           sizey: -1,\n  //           pixeldepth: -1,\n  //           resolutionx: util.toInt(util.getValue(lines, 'ScreenWidth', '=')),\n  //           resolutiony: util.toInt(util.getValue(lines, 'ScreenHeight', '=')),\n  //         });\n  //       }\n  //     }\n  //   }\n  //   return displays;\n  // }\n\n  function parseLinesWindowsDisplaysPowershell(ssections, msections, dsections, tsections, isections) {\n    let displays = [];\n    let vendor = '';\n    let model = '';\n    let deviceID = '';\n    let resolutionx = 0;\n    let resolutiony = 0;\n    if (dsections && dsections.length) {\n      let linesDisplay = dsections[0].split(os.EOL);\n      vendor = util.getValue(linesDisplay, 'MonitorManufacturer', '=');\n      model = util.getValue(linesDisplay, 'Name', '=');\n      deviceID = util.getValue(linesDisplay, 'PNPDeviceID', '=').replace(/&amp;/g, '&').toLowerCase();\n      resolutionx = util.toInt(util.getValue(linesDisplay, 'ScreenWidth', '='));\n      resolutiony = util.toInt(util.getValue(linesDisplay, 'ScreenHeight', '='));\n    }\n    for (let i = 0; i < ssections.length; i++) {\n      if (ssections[i].trim() !== '') {\n        ssections[i] = 'BitsPerPixel ' + ssections[i];\n        msections[i] = 'Active ' + msections[i];\n        // tsections can be empty on earlier versions of powershell (<=2.0). Tag connection type as UNKNOWN\n        // if this information is missing\n        if (tsections.length === 0) {\n          tsections[i] = 'Unknown';\n        }\n        let linesScreen = ssections[i].split(os.EOL);\n        let linesMonitor = msections[i].split(os.EOL);\n\n        let linesConnection = tsections[i].split(os.EOL);\n        const bitsPerPixel = util.getValue(linesScreen, 'BitsPerPixel');\n        const bounds = util.getValue(linesScreen, 'Bounds').replace('{', '').replace('}', '').split(',');\n        const primary = util.getValue(linesScreen, 'Primary');\n        const sizex = util.getValue(linesMonitor, 'MaxHorizontalImageSize');\n        const sizey = util.getValue(linesMonitor, 'MaxVerticalImageSize');\n        const instanceName = util.getValue(linesMonitor, 'InstanceName').toLowerCase();\n        const videoOutputTechnology = util.getValue(linesConnection, 'VideoOutputTechnology');\n        const deviceName = util.getValue(linesScreen, 'DeviceName');\n        let displayVendor = '';\n        let displayModel = '';\n        isections.forEach(element => {\n          if (element.instanceId.toLowerCase().startsWith(instanceName) && vendor.startsWith('(') && model.startsWith('PnP')) {\n            displayVendor = element.vendor;\n            displayModel = element.model;\n          }\n        });\n        displays.push({\n          vendor: instanceName.startsWith(deviceID) && displayVendor === '' ? vendor : displayVendor,\n          model: instanceName.startsWith(deviceID) && displayModel === '' ? model : displayModel,\n          deviceName,\n          main: primary.toLowerCase() === 'true',\n          builtin: videoOutputTechnology === '2147483648',\n          connection: videoOutputTechnology && videoTypes[videoOutputTechnology] ? videoTypes[videoOutputTechnology] : '',\n          resolutionx: util.toInt(util.getValue(bounds, 'Width', '=')),\n          resolutiony: util.toInt(util.getValue(bounds, 'Height', '=')),\n          sizex: sizex ? parseInt(sizex, 10) : -1,\n          sizey: sizey ? parseInt(sizey, 10) : -1,\n          pixeldepth: bitsPerPixel,\n          currentResX: util.toInt(util.getValue(bounds, 'Width', '=')),\n          currentResY: util.toInt(util.getValue(bounds, 'Height', '=')),\n          positionX: util.toInt(util.getValue(bounds, 'X', '=')),\n          positionY: util.toInt(util.getValue(bounds, 'Y', '=')),\n        });\n      }\n    }\n    if (ssections.length === 0) {\n      displays.push({\n        vendor,\n        model,\n        main: true,\n        resolutionx,\n        resolutiony,\n        sizex: -1,\n        sizey: -1,\n        pixeldepth: -1,\n        currentResX: resolutionx,\n        currentResY: resolutiony,\n        positionX: 0,\n        positionY: 0\n      });\n    }\n    return displays;\n  }\n\n}\n\nexports.graphics = graphics;\n"]},"metadata":{},"sourceType":"script"}