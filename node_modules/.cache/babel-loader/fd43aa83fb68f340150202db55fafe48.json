{"ast":null,"code":"'use strict';\n\nconst readline = require('readline');\n\nconst combos = require('./combos');\n/* eslint-disable no-control-regex */\n\n\nconst metaKeyCodeRe = /^(?:\\x1b)([a-zA-Z0-9])$/;\nconst fnKeyRe = /^(?:\\x1b+)(O|N|\\[|\\[\\[)(?:(\\d+)(?:;(\\d+))?([~^$])|(?:1;)?(\\d+)?([a-zA-Z]))/;\nconst keyName = {\n  /* xterm/gnome ESC O letter */\n  'OP': 'f1',\n  'OQ': 'f2',\n  'OR': 'f3',\n  'OS': 'f4',\n\n  /* xterm/rxvt ESC [ number ~ */\n  '[11~': 'f1',\n  '[12~': 'f2',\n  '[13~': 'f3',\n  '[14~': 'f4',\n\n  /* from Cygwin and used in libuv */\n  '[[A': 'f1',\n  '[[B': 'f2',\n  '[[C': 'f3',\n  '[[D': 'f4',\n  '[[E': 'f5',\n\n  /* common */\n  '[15~': 'f5',\n  '[17~': 'f6',\n  '[18~': 'f7',\n  '[19~': 'f8',\n  '[20~': 'f9',\n  '[21~': 'f10',\n  '[23~': 'f11',\n  '[24~': 'f12',\n\n  /* xterm ESC [ letter */\n  '[A': 'up',\n  '[B': 'down',\n  '[C': 'right',\n  '[D': 'left',\n  '[E': 'clear',\n  '[F': 'end',\n  '[H': 'home',\n\n  /* xterm/gnome ESC O letter */\n  'OA': 'up',\n  'OB': 'down',\n  'OC': 'right',\n  'OD': 'left',\n  'OE': 'clear',\n  'OF': 'end',\n  'OH': 'home',\n\n  /* xterm/rxvt ESC [ number ~ */\n  '[1~': 'home',\n  '[2~': 'insert',\n  '[3~': 'delete',\n  '[4~': 'end',\n  '[5~': 'pageup',\n  '[6~': 'pagedown',\n\n  /* putty */\n  '[[5~': 'pageup',\n  '[[6~': 'pagedown',\n\n  /* rxvt */\n  '[7~': 'home',\n  '[8~': 'end',\n\n  /* rxvt keys with modifiers */\n  '[a': 'up',\n  '[b': 'down',\n  '[c': 'right',\n  '[d': 'left',\n  '[e': 'clear',\n  '[2$': 'insert',\n  '[3$': 'delete',\n  '[5$': 'pageup',\n  '[6$': 'pagedown',\n  '[7$': 'home',\n  '[8$': 'end',\n  'Oa': 'up',\n  'Ob': 'down',\n  'Oc': 'right',\n  'Od': 'left',\n  'Oe': 'clear',\n  '[2^': 'insert',\n  '[3^': 'delete',\n  '[5^': 'pageup',\n  '[6^': 'pagedown',\n  '[7^': 'home',\n  '[8^': 'end',\n\n  /* misc. */\n  '[Z': 'tab'\n};\n\nfunction isShiftKey(code) {\n  return ['[a', '[b', '[c', '[d', '[e', '[2$', '[3$', '[5$', '[6$', '[7$', '[8$', '[Z'].includes(code);\n}\n\nfunction isCtrlKey(code) {\n  return ['Oa', 'Ob', 'Oc', 'Od', 'Oe', '[2^', '[3^', '[5^', '[6^', '[7^', '[8^'].includes(code);\n}\n\nconst keypress = (s = '', event = {}) => {\n  let parts;\n  let key = {\n    name: event.name,\n    ctrl: false,\n    meta: false,\n    shift: false,\n    option: false,\n    sequence: s,\n    raw: s,\n    ...event\n  };\n\n  if (Buffer.isBuffer(s)) {\n    if (s[0] > 127 && s[1] === void 0) {\n      s[0] -= 128;\n      s = '\\x1b' + String(s);\n    } else {\n      s = String(s);\n    }\n  } else if (s !== void 0 && typeof s !== 'string') {\n    s = String(s);\n  } else if (!s) {\n    s = key.sequence || '';\n  }\n\n  key.sequence = key.sequence || s || key.name;\n\n  if (s === '\\r') {\n    // carriage return\n    key.raw = void 0;\n    key.name = 'return';\n  } else if (s === '\\n') {\n    // enter, should have been called linefeed\n    key.name = 'enter';\n  } else if (s === '\\t') {\n    // tab\n    key.name = 'tab';\n  } else if (s === '\\b' || s === '\\x7f' || s === '\\x1b\\x7f' || s === '\\x1b\\b') {\n    // backspace or ctrl+h\n    key.name = 'backspace';\n    key.meta = s.charAt(0) === '\\x1b';\n  } else if (s === '\\x1b' || s === '\\x1b\\x1b') {\n    // escape key\n    key.name = 'escape';\n    key.meta = s.length === 2;\n  } else if (s === ' ' || s === '\\x1b ') {\n    key.name = 'space';\n    key.meta = s.length === 2;\n  } else if (s <= '\\x1a') {\n    // ctrl+letter\n    key.name = String.fromCharCode(s.charCodeAt(0) + 'a'.charCodeAt(0) - 1);\n    key.ctrl = true;\n  } else if (s.length === 1 && s >= '0' && s <= '9') {\n    // number\n    key.name = 'number';\n  } else if (s.length === 1 && s >= 'a' && s <= 'z') {\n    // lowercase letter\n    key.name = s;\n  } else if (s.length === 1 && s >= 'A' && s <= 'Z') {\n    // shift+letter\n    key.name = s.toLowerCase();\n    key.shift = true;\n  } else if (parts = metaKeyCodeRe.exec(s)) {\n    // meta+character key\n    key.meta = true;\n    key.shift = /^[A-Z]$/.test(parts[1]);\n  } else if (parts = fnKeyRe.exec(s)) {\n    let segs = [...s];\n\n    if (segs[0] === '\\u001b' && segs[1] === '\\u001b') {\n      key.option = true;\n    } // ansi escape sequence\n    // reassemble the key code leaving out leading \\x1b's,\n    // the modifier key bitflag and any meaningless \"1;\" sequence\n\n\n    let code = [parts[1], parts[2], parts[4], parts[6]].filter(Boolean).join('');\n    let modifier = (parts[3] || parts[5] || 1) - 1; // Parse the key modifier\n\n    key.ctrl = !!(modifier & 4);\n    key.meta = !!(modifier & 10);\n    key.shift = !!(modifier & 1);\n    key.code = code;\n    key.name = keyName[code];\n    key.shift = isShiftKey(code) || key.shift;\n    key.ctrl = isCtrlKey(code) || key.ctrl;\n  }\n\n  return key;\n};\n\nkeypress.listen = (options = {}, onKeypress) => {\n  let {\n    stdin\n  } = options;\n\n  if (!stdin || stdin !== process.stdin && !stdin.isTTY) {\n    throw new Error('Invalid stream passed');\n  }\n\n  let rl = readline.createInterface({\n    terminal: true,\n    input: stdin\n  });\n  readline.emitKeypressEvents(stdin, rl);\n\n  let on = (buf, key) => onKeypress(buf, keypress(buf, key), rl);\n\n  let isRaw = stdin.isRaw;\n  if (stdin.isTTY) stdin.setRawMode(true);\n  stdin.on('keypress', on);\n  rl.resume();\n\n  let off = () => {\n    if (stdin.isTTY) stdin.setRawMode(isRaw);\n    stdin.removeListener('keypress', on);\n    rl.pause();\n    rl.close();\n  };\n\n  return off;\n};\n\nkeypress.action = (buf, key, customActions) => {\n  let obj = { ...combos,\n    ...customActions\n  };\n\n  if (key.ctrl) {\n    key.action = obj.ctrl[key.name];\n    return key;\n  }\n\n  if (key.option && obj.option) {\n    key.action = obj.option[key.name];\n    return key;\n  }\n\n  if (key.shift) {\n    key.action = obj.shift[key.name];\n    return key;\n  }\n\n  key.action = obj.keys[key.name];\n  return key;\n};\n\nmodule.exports = keypress;","map":{"version":3,"sources":["/Users/samianki/node_modules/enquirer/lib/keypress.js"],"names":["readline","require","combos","metaKeyCodeRe","fnKeyRe","keyName","isShiftKey","code","includes","isCtrlKey","keypress","s","event","parts","key","name","ctrl","meta","shift","option","sequence","raw","Buffer","isBuffer","String","charAt","length","fromCharCode","charCodeAt","toLowerCase","exec","test","segs","filter","Boolean","join","modifier","listen","options","onKeypress","stdin","process","isTTY","Error","rl","createInterface","terminal","input","emitKeypressEvents","on","buf","isRaw","setRawMode","resume","off","removeListener","pause","close","action","customActions","obj","keys","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst readline = require('readline');\nconst combos = require('./combos');\n\n/* eslint-disable no-control-regex */\nconst metaKeyCodeRe = /^(?:\\x1b)([a-zA-Z0-9])$/;\nconst fnKeyRe = /^(?:\\x1b+)(O|N|\\[|\\[\\[)(?:(\\d+)(?:;(\\d+))?([~^$])|(?:1;)?(\\d+)?([a-zA-Z]))/;\nconst keyName = {\n    /* xterm/gnome ESC O letter */\n    'OP': 'f1',\n    'OQ': 'f2',\n    'OR': 'f3',\n    'OS': 'f4',\n    /* xterm/rxvt ESC [ number ~ */\n    '[11~': 'f1',\n    '[12~': 'f2',\n    '[13~': 'f3',\n    '[14~': 'f4',\n    /* from Cygwin and used in libuv */\n    '[[A': 'f1',\n    '[[B': 'f2',\n    '[[C': 'f3',\n    '[[D': 'f4',\n    '[[E': 'f5',\n    /* common */\n    '[15~': 'f5',\n    '[17~': 'f6',\n    '[18~': 'f7',\n    '[19~': 'f8',\n    '[20~': 'f9',\n    '[21~': 'f10',\n    '[23~': 'f11',\n    '[24~': 'f12',\n    /* xterm ESC [ letter */\n    '[A': 'up',\n    '[B': 'down',\n    '[C': 'right',\n    '[D': 'left',\n    '[E': 'clear',\n    '[F': 'end',\n    '[H': 'home',\n    /* xterm/gnome ESC O letter */\n    'OA': 'up',\n    'OB': 'down',\n    'OC': 'right',\n    'OD': 'left',\n    'OE': 'clear',\n    'OF': 'end',\n    'OH': 'home',\n    /* xterm/rxvt ESC [ number ~ */\n    '[1~': 'home',\n    '[2~': 'insert',\n    '[3~': 'delete',\n    '[4~': 'end',\n    '[5~': 'pageup',\n    '[6~': 'pagedown',\n    /* putty */\n    '[[5~': 'pageup',\n    '[[6~': 'pagedown',\n    /* rxvt */\n    '[7~': 'home',\n    '[8~': 'end',\n    /* rxvt keys with modifiers */\n    '[a': 'up',\n    '[b': 'down',\n    '[c': 'right',\n    '[d': 'left',\n    '[e': 'clear',\n\n    '[2$': 'insert',\n    '[3$': 'delete',\n    '[5$': 'pageup',\n    '[6$': 'pagedown',\n    '[7$': 'home',\n    '[8$': 'end',\n\n    'Oa': 'up',\n    'Ob': 'down',\n    'Oc': 'right',\n    'Od': 'left',\n    'Oe': 'clear',\n\n    '[2^': 'insert',\n    '[3^': 'delete',\n    '[5^': 'pageup',\n    '[6^': 'pagedown',\n    '[7^': 'home',\n    '[8^': 'end',\n    /* misc. */\n    '[Z': 'tab',\n}\n\nfunction isShiftKey(code) {\n    return ['[a', '[b', '[c', '[d', '[e', '[2$', '[3$', '[5$', '[6$', '[7$', '[8$', '[Z'].includes(code)\n}\n\nfunction isCtrlKey(code) {\n    return [ 'Oa', 'Ob', 'Oc', 'Od', 'Oe', '[2^', '[3^', '[5^', '[6^', '[7^', '[8^'].includes(code)\n}\n\nconst keypress = (s = '', event = {}) => {\n  let parts;\n  let key = {\n    name: event.name,\n    ctrl: false,\n    meta: false,\n    shift: false,\n    option: false,\n    sequence: s,\n    raw: s,\n    ...event\n  };\n\n  if (Buffer.isBuffer(s)) {\n    if (s[0] > 127 && s[1] === void 0) {\n      s[0] -= 128;\n      s = '\\x1b' + String(s);\n    } else {\n      s = String(s);\n    }\n  } else if (s !== void 0 && typeof s !== 'string') {\n    s = String(s);\n  } else if (!s) {\n    s = key.sequence || '';\n  }\n\n  key.sequence = key.sequence || s || key.name;\n\n  if (s === '\\r') {\n    // carriage return\n    key.raw = void 0;\n    key.name = 'return';\n  } else if (s === '\\n') {\n    // enter, should have been called linefeed\n    key.name = 'enter';\n  } else if (s === '\\t') {\n    // tab\n    key.name = 'tab';\n  } else if (s === '\\b' || s === '\\x7f' || s === '\\x1b\\x7f' || s === '\\x1b\\b') {\n    // backspace or ctrl+h\n    key.name = 'backspace';\n    key.meta = s.charAt(0) === '\\x1b';\n  } else if (s === '\\x1b' || s === '\\x1b\\x1b') {\n    // escape key\n    key.name = 'escape';\n    key.meta = s.length === 2;\n  } else if (s === ' ' || s === '\\x1b ') {\n    key.name = 'space';\n    key.meta = s.length === 2;\n  } else if (s <= '\\x1a') {\n    // ctrl+letter\n    key.name = String.fromCharCode(s.charCodeAt(0) + 'a'.charCodeAt(0) - 1);\n    key.ctrl = true;\n  } else if (s.length === 1 && s >= '0' && s <= '9') {\n    // number\n    key.name = 'number';\n  } else if (s.length === 1 && s >= 'a' && s <= 'z') {\n    // lowercase letter\n    key.name = s;\n  } else if (s.length === 1 && s >= 'A' && s <= 'Z') {\n    // shift+letter\n    key.name = s.toLowerCase();\n    key.shift = true;\n  } else if ((parts = metaKeyCodeRe.exec(s))) {\n    // meta+character key\n    key.meta = true;\n    key.shift = /^[A-Z]$/.test(parts[1]);\n  } else if ((parts = fnKeyRe.exec(s))) {\n    let segs = [...s];\n\n    if (segs[0] === '\\u001b' && segs[1] === '\\u001b') {\n      key.option = true;\n    }\n\n    // ansi escape sequence\n    // reassemble the key code leaving out leading \\x1b's,\n    // the modifier key bitflag and any meaningless \"1;\" sequence\n    let code = [parts[1], parts[2], parts[4], parts[6]].filter(Boolean).join('');\n    let modifier = (parts[3] || parts[5] || 1) - 1;\n\n    // Parse the key modifier\n    key.ctrl = !!(modifier & 4);\n    key.meta = !!(modifier & 10);\n    key.shift = !!(modifier & 1);\n    key.code = code;\n\n    key.name = keyName[code];\n    key.shift = isShiftKey(code) || key.shift;\n    key.ctrl = isCtrlKey(code) || key.ctrl;\n  }\n  return key;\n};\n\nkeypress.listen = (options = {}, onKeypress) => {\n  let { stdin } = options;\n\n  if (!stdin || (stdin !== process.stdin && !stdin.isTTY)) {\n    throw new Error('Invalid stream passed');\n  }\n\n  let rl = readline.createInterface({ terminal: true, input: stdin });\n  readline.emitKeypressEvents(stdin, rl);\n\n  let on = (buf, key) => onKeypress(buf, keypress(buf, key), rl);\n  let isRaw = stdin.isRaw;\n\n  if (stdin.isTTY) stdin.setRawMode(true);\n  stdin.on('keypress', on);\n  rl.resume();\n\n  let off = () => {\n    if (stdin.isTTY) stdin.setRawMode(isRaw);\n    stdin.removeListener('keypress', on);\n    rl.pause();\n    rl.close();\n  };\n\n  return off;\n};\n\nkeypress.action = (buf, key, customActions) => {\n  let obj = { ...combos, ...customActions };\n  if (key.ctrl) {\n    key.action = obj.ctrl[key.name];\n    return key;\n  }\n\n  if (key.option && obj.option) {\n    key.action = obj.option[key.name];\n    return key;\n  }\n\n  if (key.shift) {\n    key.action = obj.shift[key.name];\n    return key;\n  }\n\n  key.action = obj.keys[key.name];\n  return key;\n};\n\nmodule.exports = keypress;\n"]},"metadata":{},"sourceType":"script"}